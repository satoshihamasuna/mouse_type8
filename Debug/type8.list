
type8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010248  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000173  08010480  08010480  00011480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080105f4  080105f4  000115f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080105fc  080105fc  000115fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010604  08010604  00011604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  08010608  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009d0  20000068  08010670  00012068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a38  08010670  00012a38  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002be3e  00000000  00000000  0001209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005239  00000000  00000000  0003dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f50  00000000  00000000  00043118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001830  00000000  00000000  00045068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035d31  00000000  00000000  00046898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002bf2a  00000000  00000000  0007c5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c00e  00000000  00000000  000a84f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f4501  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008c8c  00000000  00000000  001f4544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001fd1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08010468 	.word	0x08010468

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08010468 	.word	0x08010468

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel4;
DMA_HandleTypeDef handle_GPDMA1_Channel4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2220      	movs	r2, #32
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f00f f995 	bl	800f930 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000606:	4b6f      	ldr	r3, [pc, #444]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000608:	4a6f      	ldr	r2, [pc, #444]	@ (80007c8 <MX_ADC1_Init+0x1d4>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060c:	4b6d      	ldr	r3, [pc, #436]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000612:	4b6c      	ldr	r3, [pc, #432]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000618:	4b6a      	ldr	r3, [pc, #424]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b69      	ldr	r3, [pc, #420]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000624:	4b67      	ldr	r3, [pc, #412]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000626:	2201      	movs	r2, #1
 8000628:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b66      	ldr	r3, [pc, #408]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800062c:	2204      	movs	r2, #4
 800062e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b64      	ldr	r3, [pc, #400]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000632:	2200      	movs	r2, #0
 8000634:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000636:	4b63      	ldr	r3, [pc, #396]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 10;
 800063e:	4b61      	ldr	r3, [pc, #388]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000640:	220a      	movs	r2, #10
 8000642:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000644:	4b5f      	ldr	r3, [pc, #380]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000646:	2201      	movs	r2, #1
 8000648:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.NbrOfDiscConversion = 1;
 800064c:	4b5d      	ldr	r3, [pc, #372]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800064e:	2201      	movs	r2, #1
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM1_CH1;
 8000652:	4b5c      	ldr	r3, [pc, #368]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000654:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000658:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800065a:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800065c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000660:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000662:	4b58      	ldr	r3, [pc, #352]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000664:	2201      	movs	r2, #1
 8000666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800066a:	4b56      	ldr	r3, [pc, #344]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800066c:	2200      	movs	r2, #0
 800066e:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000670:	4b54      	ldr	r3, [pc, #336]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000672:	2200      	movs	r2, #0
 8000674:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000676:	4b53      	ldr	r3, [pc, #332]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000678:	2200      	movs	r2, #0
 800067a:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800067c:	4b51      	ldr	r3, [pc, #324]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800067e:	2203      	movs	r2, #3
 8000680:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000682:	4b50      	ldr	r3, [pc, #320]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	484e      	ldr	r0, [pc, #312]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800068c:	f002 f952 	bl	8002934 <HAL_ADC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000696:	f000 fe33 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800069a:	4b4c      	ldr	r3, [pc, #304]	@ (80007cc <MX_ADC1_Init+0x1d8>)
 800069c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069e:	2306      	movs	r3, #6
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ac:	2304      	movs	r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4842      	ldr	r0, [pc, #264]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 80006ba:	f002 fd2d 	bl	8003118 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80006c4:	f000 fe1c 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	483c      	ldr	r0, [pc, #240]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 80006d2:	f002 fd21 	bl	8003118 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80006dc:	f000 fe10 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006e0:	4b3b      	ldr	r3, [pc, #236]	@ (80007d0 <MX_ADC1_Init+0x1dc>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4835      	ldr	r0, [pc, #212]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 80006ee:	f002 fd13 	bl	8003118 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80006f8:	f000 fe02 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006fc:	2318      	movs	r3, #24
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	482f      	ldr	r0, [pc, #188]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000706:	f002 fd07 	bl	8003118 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000710:	f000 fdf6 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000714:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <MX_ADC1_Init+0x1e0>)
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800071c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4828      	ldr	r0, [pc, #160]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000724:	f002 fcf8 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800072e:	f000 fde7 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000732:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4821      	ldr	r0, [pc, #132]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800073e:	f002 fceb 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000748:	f000 fdda 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC1_Init+0x1e4>)
 800074e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000750:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000754:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	481a      	ldr	r0, [pc, #104]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 800075c:	f002 fcdc 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 8000766:	f000 fdcb 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800076a:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000776:	f002 fccf 	bl	8003118 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8000780:	f000 fdbe 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000784:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_ADC1_Init+0x1e8>)
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000788:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800078c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 8000794:	f002 fcc0 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800079e:	f000 fdaf 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_ADC1_Init+0x1d0>)
 80007ae:	f002 fcb3 	bl	8003118 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80007b8:	f000 fda2 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000084 	.word	0x20000084
 80007c8:	42028000 	.word	0x42028000
 80007cc:	2a000400 	.word	0x2a000400
 80007d0:	2e000800 	.word	0x2e000800
 80007d4:	32001000 	.word	0x32001000
 80007d8:	3e008000 	.word	0x3e008000
 80007dc:	42010000 	.word	0x42010000

080007e0 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00f f89f 	bl	800f930 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 80007f4:	4a2f      	ldr	r2, [pc, #188]	@ (80008b4 <MX_ADC4_Init+0xd4>)
 80007f6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000800:	2204      	movs	r2, #4
 8000802:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000812:	2204      	movs	r2, #4
 8000814:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 800081e:	2200      	movs	r2, #0
 8000820:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 1;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 800082c:	2201      	movs	r2, #1
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000830:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 800083a:	2200      	movs	r2, #0
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000840:	2200      	movs	r2, #0
 8000842:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 800084e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000852:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000856:	2200      	movs	r2, #0
 8000858:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 800085c:	2200      	movs	r2, #0
 800085e:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000862:	2200      	movs	r2, #0
 8000864:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800086e:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000870:	f002 f860 	bl	8002934 <HAL_ADC_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC4_Init+0x9e>
  {
    Error_Handler();
 800087a:	f000 fd41 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_ADC4_Init+0xd8>)
 8000880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088a:	2304      	movs	r3, #4
 800088c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_ADC4_Init+0xd0>)
 8000898:	f002 fc3e 	bl	8003118 <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 80008a2:	f000 fd2d 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000110 	.word	0x20000110
 80008b4:	46021000 	.word	0x46021000
 80008b8:	24000200 	.word	0x24000200

080008bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0d6      	sub	sp, #344	@ 0x158
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80008c6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80008ca:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 80008dc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80008e0:	226c      	movs	r2, #108	@ 0x6c
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f00f f823 	bl	800f930 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80008ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80008f2:	4618      	mov	r0, r3
 80008f4:	23b8      	movs	r3, #184	@ 0xb8
 80008f6:	461a      	mov	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f00f f819 	bl	800f930 <memset>
  if(adcHandle->Instance==ADC1)
 80008fe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000902:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4aba      	ldr	r2, [pc, #744]	@ (8000bf4 <HAL_ADC_MspInit+0x338>)
 800090c:	4293      	cmp	r3, r2
 800090e:	f040 8109 	bne.w	8000b24 <HAL_ADC_MspInit+0x268>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000912:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000916:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 800091a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000926:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800092a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800092e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000932:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	4618      	mov	r0, r3
 800093c:	f007 fc18 	bl	8008170 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_ADC_MspInit+0x8e>
    {
      Error_Handler();
 8000946:	f000 fcdb 	bl	8001300 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800094a:	4bab      	ldr	r3, [pc, #684]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 800094c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000950:	4aa9      	ldr	r2, [pc, #676]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000956:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800095a:	4ba7      	ldr	r3, [pc, #668]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 800095c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000960:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000964:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000968:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000972:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000976:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b9f      	ldr	r3, [pc, #636]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 800097a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097e:	4a9e      	ldr	r2, [pc, #632]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000988:	4b9b      	ldr	r3, [pc, #620]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 800098a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098e:	f003 0201 	and.w	r2, r3, #1
 8000992:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000996:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80009a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80009a4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b94      	ldr	r3, [pc, #592]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 80009a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ac:	4a92      	ldr	r2, [pc, #584]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b6:	4b90      	ldr	r3, [pc, #576]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 80009b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009bc:	f003 0202 	and.w	r2, r3, #2
 80009c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80009c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80009ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80009d2:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009d4:	23e0      	movs	r3, #224	@ 0xe0
 80009d6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009da:	2303      	movs	r3, #3
 80009dc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80009ea:	4619      	mov	r1, r3
 80009ec:	4883      	ldr	r0, [pc, #524]	@ (8000bfc <HAL_ADC_MspInit+0x340>)
 80009ee:	f005 fbdd 	bl	80061ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000a08:	4619      	mov	r1, r3
 8000a0a:	487d      	ldr	r0, [pc, #500]	@ (8000c00 <HAL_ADC_MspInit+0x344>)
 8000a0c:	f005 fbce 	bl	80061ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000a10:	2321      	movs	r3, #33	@ 0x21
 8000a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000a2e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000a32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.SrcBurstLength = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.DestBurstLength = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Mode = DMA_NORMAL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 8000a74:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000a78:	4962      	ldr	r1, [pc, #392]	@ (8000c04 <HAL_ADC_MspInit+0x348>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fcb4 	bl	80053e8 <HAL_DMAEx_List_BuildNode>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_ADC_MspInit+0x1ce>
    {
      Error_Handler();
 8000a86:	f000 fc3b 	bl	8001300 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 8000a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8000c04 <HAL_ADC_MspInit+0x348>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	485e      	ldr	r0, [pc, #376]	@ (8000c08 <HAL_ADC_MspInit+0x34c>)
 8000a90:	f004 fcd6 	bl	8005440 <HAL_DMAEx_List_InsertNode>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_ADC_MspInit+0x1e2>
    {
      Error_Handler();
 8000a9a:	f000 fc31 	bl	8001300 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8000a9e:	485a      	ldr	r0, [pc, #360]	@ (8000c08 <HAL_ADC_MspInit+0x34c>)
 8000aa0:	f004 fd97 	bl	80055d2 <HAL_DMAEx_List_SetCircularMode>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_ADC_MspInit+0x1f2>
    {
      Error_Handler();
 8000aaa:	f000 fc29 	bl	8001300 <Error_Handler>
    }

    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8000aae:	4b57      	ldr	r3, [pc, #348]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000ab0:	4a57      	ldr	r2, [pc, #348]	@ (8000c10 <HAL_ADC_MspInit+0x354>)
 8000ab2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000ab4:	4b55      	ldr	r3, [pc, #340]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000aba:	4b54      	ldr	r3, [pc, #336]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000ac0:	4b52      	ldr	r3, [pc, #328]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000ac6:	4b51      	ldr	r3, [pc, #324]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000acc:	4b4f      	ldr	r3, [pc, #316]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000ace:	2281      	movs	r2, #129	@ 0x81
 8000ad0:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8000ad2:	484e      	ldr	r0, [pc, #312]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000ad4:	f004 fac8 	bl	8005068 <HAL_DMAEx_List_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_ADC_MspInit+0x226>
    {
      Error_Handler();
 8000ade:	f000 fc0f 	bl	8001300 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 8000ae2:	4949      	ldr	r1, [pc, #292]	@ (8000c08 <HAL_ADC_MspInit+0x34c>)
 8000ae4:	4849      	ldr	r0, [pc, #292]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000ae6:	f004 fdd5 	bl	8005694 <HAL_DMAEx_List_LinkQ>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_ADC_MspInit+0x238>
    {
      Error_Handler();
 8000af0:	f000 fc06 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel4);
 8000af4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000af8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a43      	ldr	r2, [pc, #268]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000b00:	671a      	str	r2, [r3, #112]	@ 0x70
 8000b02:	4a42      	ldr	r2, [pc, #264]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000b04:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b10:	2110      	movs	r1, #16
 8000b12:	483e      	ldr	r0, [pc, #248]	@ (8000c0c <HAL_ADC_MspInit+0x350>)
 8000b14:	f003 ffc6 	bl	8004aa4 <HAL_DMA_ConfigChannelAttributes>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d064      	beq.n	8000be8 <HAL_ADC_MspInit+0x32c>
    {
      Error_Handler();
 8000b1e:	f000 fbef 	bl	8001300 <Error_Handler>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000b22:	e061      	b.n	8000be8 <HAL_ADC_MspInit+0x32c>
  else if(adcHandle->Instance==ADC4)
 8000b24:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b28:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a38      	ldr	r2, [pc, #224]	@ (8000c14 <HAL_ADC_MspInit+0x358>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d158      	bne.n	8000be8 <HAL_ADC_MspInit+0x32c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b36:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b3a:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 8000b3e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b42:	f04f 0300 	mov.w	r3, #0
 8000b46:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000b4a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000b52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fb06 	bl	8008170 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_ADC_MspInit+0x2b2>
      Error_Handler();
 8000b6a:	f000 fbc9 	bl	8001300 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b74:	4a20      	ldr	r2, [pc, #128]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000b76:	f043 0320 	orr.w	r3, r3, #32
 8000b7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b84:	f003 0220 	and.w	r2, r3, #32
 8000b88:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b96:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000b9a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba2:	4a15      	ldr	r2, [pc, #84]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_ADC_MspInit+0x33c>)
 8000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb2:	f003 0201 	and.w	r2, r3, #1
 8000bb6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000bba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000bc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000bc8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <HAL_ADC_MspInit+0x340>)
 8000be4:	f005 fae2 	bl	80061ac <HAL_GPIO_Init>
}
 8000be8:	bf00      	nop
 8000bea:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	42028000 	.word	0x42028000
 8000bf8:	46020c00 	.word	0x46020c00
 8000bfc:	42020000 	.word	0x42020000
 8000c00:	42020400 	.word	0x42020400
 8000c04:	2000019c 	.word	0x2000019c
 8000c08:	200001c0 	.word	0x200001c0
 8000c0c:	200001d8 	.word	0x200001d8
 8000c10:	40020250 	.word	0x40020250
 8000c14:	46021000 	.word	0x46021000

08000c18 <MX_GPDMA1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09c      	sub	sp, #112	@ 0x70
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  DMA_NodeConfTypeDef NodeConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	226c      	movs	r2, #108	@ 0x6c
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00e fe83 	bl	800f930 <memset>

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e28 <MX_GPDMA1_Init+0x210>)
 8000c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c30:	4a7d      	ldr	r2, [pc, #500]	@ (8000e28 <MX_GPDMA1_Init+0x210>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e28 <MX_GPDMA1_Init+0x210>)
 8000c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	201d      	movs	r0, #29
 8000c4e:	f003 faaf 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c52:	201d      	movs	r0, #29
 8000c54:	f003 fac6 	bl	80041e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	201e      	movs	r0, #30
 8000c5e:	f003 faa7 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000c62:	201e      	movs	r0, #30
 8000c64:	f003 fabe 	bl	80041e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	201f      	movs	r0, #31
 8000c6e:	f003 fa9f 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000c72:	201f      	movs	r0, #31
 8000c74:	f003 fab6 	bl	80041e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2020      	movs	r0, #32
 8000c7e:	f003 fa97 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000c82:	2020      	movs	r0, #32
 8000c84:	f003 faae 	bl	80041e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2021      	movs	r0, #33	@ 0x21
 8000c8e:	f003 fa8f 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8000c92:	2021      	movs	r0, #33	@ 0x21
 8000c94:	f003 faa6 	bl	80041e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000c98:	2321      	movs	r3, #33	@ 0x21
 8000c9a:	607b      	str	r3, [r7, #4]
  NodeConfig.Init.Request = DMA_REQUEST_SW;
 8000c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca0:	60bb      	str	r3, [r7, #8]
  NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  NodeConfig.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000ca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000caa:	613b      	str	r3, [r7, #16]
  NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000cac:	2308      	movs	r3, #8
 8000cae:	617b      	str	r3, [r7, #20]
  NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
  NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000cb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cbc:	623b      	str	r3, [r7, #32]
  NodeConfig.Init.SrcBurstLength = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  NodeConfig.Init.DestBurstLength = 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  NodeConfig.Init.Mode = DMA_NORMAL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_SINGLE_BURST_TRANSFER;
 8000cd2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_FALLING;
 8000cd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_LPTIM1_CH2;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	643b      	str	r3, [r7, #64]	@ 0x40
  NodeConfig.SrcAddress = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	667b      	str	r3, [r7, #100]	@ 0x64
  NodeConfig.DstAddress = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
  NodeConfig.DataSize = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	494c      	ldr	r1, [pc, #304]	@ (8000e2c <MX_GPDMA1_Init+0x214>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 fb74 	bl	80053e8 <HAL_DMAEx_List_BuildNode>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_GPDMA1_Init+0xf2>
  {
    Error_Handler();
 8000d06:	f000 fafb 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8000d0a:	4a48      	ldr	r2, [pc, #288]	@ (8000e2c <MX_GPDMA1_Init+0x214>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4848      	ldr	r0, [pc, #288]	@ (8000e30 <MX_GPDMA1_Init+0x218>)
 8000d10:	f004 fb96 	bl	8005440 <HAL_DMAEx_List_InsertNode>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_GPDMA1_Init+0x106>
  {
    Error_Handler();
 8000d1a:	f000 faf1 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8000d1e:	4844      	ldr	r0, [pc, #272]	@ (8000e30 <MX_GPDMA1_Init+0x218>)
 8000d20:	f004 fc57 	bl	80055d2 <HAL_DMAEx_List_SetCircularMode>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_GPDMA1_Init+0x116>
  {
    Error_Handler();
 8000d2a:	f000 fae9 	bl	8001300 <Error_Handler>
  }
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000d2e:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d30:	4a41      	ldr	r2, [pc, #260]	@ (8000e38 <MX_GPDMA1_Init+0x220>)
 8000d32:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000d34:	4b3f      	ldr	r3, [pc, #252]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000d42:	4b3c      	ldr	r3, [pc, #240]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000d48:	4b3a      	ldr	r3, [pc, #232]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d50:	2281      	movs	r2, #129	@ 0x81
 8000d52:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8000d54:	4837      	ldr	r0, [pc, #220]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d56:	f004 f987 	bl	8005068 <HAL_DMAEx_List_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_GPDMA1_Init+0x14c>
  {
    Error_Handler();
 8000d60:	f000 face 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8000d64:	4932      	ldr	r1, [pc, #200]	@ (8000e30 <MX_GPDMA1_Init+0x218>)
 8000d66:	4833      	ldr	r0, [pc, #204]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d68:	f004 fc94 	bl	8005694 <HAL_DMAEx_List_LinkQ>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_GPDMA1_Init+0x15e>
  {
    Error_Handler();
 8000d72:	f000 fac5 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000d76:	2110      	movs	r1, #16
 8000d78:	482e      	ldr	r0, [pc, #184]	@ (8000e34 <MX_GPDMA1_Init+0x21c>)
 8000d7a:	f003 fe93 	bl	8004aa4 <HAL_DMA_ConfigChannelAttributes>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_GPDMA1_Init+0x170>
  {
    Error_Handler();
 8000d84:	f000 fabc 	bl	8001300 <Error_Handler>
  }
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8000d88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	492a      	ldr	r1, [pc, #168]	@ (8000e3c <MX_GPDMA1_Init+0x224>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 fb28 	bl	80053e8 <HAL_DMAEx_List_BuildNode>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_GPDMA1_Init+0x18a>
  {
    Error_Handler();
 8000d9e:	f000 faaf 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8000da2:	4a26      	ldr	r2, [pc, #152]	@ (8000e3c <MX_GPDMA1_Init+0x224>)
 8000da4:	2100      	movs	r1, #0
 8000da6:	4826      	ldr	r0, [pc, #152]	@ (8000e40 <MX_GPDMA1_Init+0x228>)
 8000da8:	f004 fb4a 	bl	8005440 <HAL_DMAEx_List_InsertNode>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_GPDMA1_Init+0x19e>
  {
    Error_Handler();
 8000db2:	f000 faa5 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8000db6:	4822      	ldr	r0, [pc, #136]	@ (8000e40 <MX_GPDMA1_Init+0x228>)
 8000db8:	f004 fc0b 	bl	80055d2 <HAL_DMAEx_List_SetCircularMode>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_GPDMA1_Init+0x1ae>
  {
    Error_Handler();
 8000dc2:	f000 fa9d 	bl	8001300 <Error_Handler>
  }
  handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <MX_GPDMA1_Init+0x230>)
 8000dca:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000dce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000de8:	2281      	movs	r2, #129	@ 0x81
 8000dea:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000dec:	4815      	ldr	r0, [pc, #84]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000dee:	f004 f93b 	bl	8005068 <HAL_DMAEx_List_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_GPDMA1_Init+0x1e4>
  {
    Error_Handler();
 8000df8:	f000 fa82 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8000dfc:	4910      	ldr	r1, [pc, #64]	@ (8000e40 <MX_GPDMA1_Init+0x228>)
 8000dfe:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000e00:	f004 fc48 	bl	8005694 <HAL_DMAEx_List_LinkQ>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_GPDMA1_Init+0x1f6>
  {
    Error_Handler();
 8000e0a:	f000 fa79 	bl	8001300 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e0e:	2110      	movs	r1, #16
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <MX_GPDMA1_Init+0x22c>)
 8000e12:	f003 fe47 	bl	8004aa4 <HAL_DMA_ConfigChannelAttributes>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_GPDMA1_Init+0x208>
  {
    Error_Handler();
 8000e1c:	f000 fa70 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3770      	adds	r7, #112	@ 0x70
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	46020c00 	.word	0x46020c00
 8000e2c:	20000250 	.word	0x20000250
 8000e30:	20000274 	.word	0x20000274
 8000e34:	2000028c 	.word	0x2000028c
 8000e38:	400200d0 	.word	0x400200d0
 8000e3c:	20000304 	.word	0x20000304
 8000e40:	20000328 	.word	0x20000328
 8000e44:	20000340 	.word	0x20000340
 8000e48:	40020050 	.word	0x40020050

08000e4c <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e68:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e72:	4b4b      	ldr	r3, [pc, #300]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e80:	4b47      	ldr	r3, [pc, #284]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e86:	4a46      	ldr	r2, [pc, #280]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e90:	4b43      	ldr	r3, [pc, #268]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b40      	ldr	r3, [pc, #256]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eae:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b38      	ldr	r3, [pc, #224]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec2:	4a37      	ldr	r2, [pc, #220]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ecc:	4b34      	ldr	r3, [pc, #208]	@ (8000fa0 <MX_GPIO_Init+0x154>)
 8000ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED6_Pin|LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000ee0:	4830      	ldr	r0, [pc, #192]	@ (8000fa4 <MX_GPIO_Init+0x158>)
 8000ee2:	f005 fb3b 	bl	800655c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2103      	movs	r1, #3
 8000eea:	482f      	ldr	r0, [pc, #188]	@ (8000fa8 <MX_GPIO_Init+0x15c>)
 8000eec:	f005 fb36 	bl	800655c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f240 110f 	movw	r1, #271	@ 0x10f
 8000ef6:	482d      	ldr	r0, [pc, #180]	@ (8000fac <MX_GPIO_Init+0x160>)
 8000ef8:	f005 fb30 	bl	800655c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|NSS_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000f02:	482b      	ldr	r0, [pc, #172]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000f04:	f005 fb2a 	bl	800655c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED6_Pin LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED5_Pin|LED4_Pin;
 8000f08:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <MX_GPIO_Init+0x158>)
 8000f22:	f005 f943 	bl	80061ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000f26:	2303      	movs	r3, #3
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481a      	ldr	r0, [pc, #104]	@ (8000fa8 <MX_GPIO_Init+0x15c>)
 8000f3e:	f005 f935 	bl	80061ac <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR2_Pin IR3_Pin IR4_Pin
                           PA8 */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000f42:	f240 130f 	movw	r3, #271	@ 0x10f
 8000f46:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4814      	ldr	r0, [pc, #80]	@ (8000fac <MX_GPIO_Init+0x160>)
 8000f5c:	f005 f926 	bl	80061ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin NSS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|NSS_Pin;
 8000f60:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000f7a:	f005 f917 	bl	80061ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f7e:	2308      	movs	r3, #8
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_GPIO_Init+0x15c>)
 8000f92:	f005 f90b 	bl	80061ac <HAL_GPIO_Init>

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	46020c00 	.word	0x46020c00
 8000fa4:	42020800 	.word	0x42020800
 8000fa8:	42021c00 	.word	0x42021c00
 8000fac:	42020000 	.word	0x42020000
 8000fb0:	42020400 	.word	0x42020400

08000fb4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f005 fae7 	bl	800658c <HAL_ICACHE_ConfigAssociativityMode>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000fc4:	f000 f99c 	bl	8001300 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000fc8:	f005 fb00 	bl	80065cc <HAL_ICACHE_Enable>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000fd2:	f000 f995 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LPTIM_OC_ConfigTypeDef sConfig1 = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8000fec:	4a24      	ldr	r2, [pc, #144]	@ (8001080 <MX_LPTIM1_Init+0xa4>)
 8000fee:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8000ff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ffc:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8001000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001004:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 100;
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8001008:	2264      	movs	r2, #100	@ 0x64
 800100a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8001014:	2200      	movs	r2, #0
 8001016:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8001026:	2200      	movs	r2, #0
 8001028:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800102a:	4814      	ldr	r0, [pc, #80]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 800102c:	f005 fade 	bl	80065ec <HAL_LPTIM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_LPTIM1_Init+0x5e>
  {
    Error_Handler();
 8001036:	f000 f963 	bl	8001300 <Error_Handler>
  }
  sConfig1.Pulse = 25;
 800103a:	2319      	movs	r3, #25
 800103c:	603b      	str	r3, [r7, #0]
  sConfig1.OCPolarity = LPTIM_OCPOLARITY_LOW;
 800103e:	2301      	movs	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_1) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 800104a:	f005 fc31 	bl	80068b0 <HAL_LPTIM_OC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_LPTIM1_Init+0x7c>
  {
    Error_Handler();
 8001054:	f000 f954 	bl	8001300 <Error_Handler>
  }
  sConfig1.Pulse = 50;
 8001058:	2332      	movs	r3, #50	@ 0x32
 800105a:	603b      	str	r3, [r7, #0]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_2) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	@ (800107c <MX_LPTIM1_Init+0xa0>)
 8001064:	f005 fc24 	bl	80068b0 <HAL_LPTIM_OC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_LPTIM1_Init+0x96>
  {
    Error_Handler();
 800106e:	f000 f947 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200003b8 	.word	0x200003b8
 8001080:	46004400 	.word	0x46004400

08001084 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0b2      	sub	sp, #200	@ 0xc8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	22b8      	movs	r2, #184	@ 0xb8
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00e fc4b 	bl	800f930 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <HAL_LPTIM_MspInit+0x70>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d122      	bne.n	80010ea <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80010a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_HSI;
 80010b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 f857 	bl	8008170 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80010c8:	f000 f91a 	bl	8001300 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_LPTIM_MspInit+0x74>)
 80010ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80010d2:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <HAL_LPTIM_MspInit+0x74>)
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010d8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_LPTIM_MspInit+0x74>)
 80010de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80010e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	37c8      	adds	r7, #200	@ 0xc8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	46004400 	.word	0x46004400
 80010f8:	46020c00 	.word	0x46020c00

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f000 fff3 	bl	80020ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f891 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f7ff fe9f 	bl	8000e4c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800110e:	f7ff fd83 	bl	8000c18 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8001112:	f7ff fa6f 	bl	80005f4 <MX_ADC1_Init>
  MX_ADC4_Init();
 8001116:	f7ff fb63 	bl	80007e0 <MX_ADC4_Init>
  MX_ICACHE_Init();
 800111a:	f7ff ff4b 	bl	8000fb4 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 800111e:	f7ff ff5d 	bl	8000fdc <MX_LPTIM1_Init>
  MX_SPI2_Init();
 8001122:	f000 f8f3 	bl	800130c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001126:	f000 fb3f 	bl	80017a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800112a:	f000 fb91 	bl	8001850 <MX_TIM3_Init>
  MX_TIM4_Init();
 800112e:	f000 fbe5 	bl	80018fc <MX_TIM4_Init>
  MX_TIM8_Init();
 8001132:	f000 fc7b 	bl	8001a2c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001136:	f000 fe65 	bl	8001e04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Sensor_Initialize();
 800113a:	f00e f885 	bl	800f248 <Sensor_Initialize>
  IMU_initialize();
 800113e:	f00d ff67 	bl	800f010 <IMU_initialize>
  Communicate_Initialize();
 8001142:	f00d fe0b 	bl	800ed5c <Communicate_Initialize>
  Encoder_Initialize();
 8001146:	f00d fed3 	bl	800eef0 <Encoder_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Indicate_LED(0xff);
 800114a:	20ff      	movs	r0, #255	@ 0xff
 800114c:	f00d ffec 	bl	800f128 <Indicate_LED>
	  HAL_Delay(200);
 8001150:	20c8      	movs	r0, #200	@ 0xc8
 8001152:	f001 f891 	bl	8002278 <HAL_Delay>
	  Indicate_LED(0x0);
 8001156:	2000      	movs	r0, #0
 8001158:	f00d ffe6 	bl	800f128 <Indicate_LED>
	  HAL_Delay(200);
 800115c:	20c8      	movs	r0, #200	@ 0xc8
 800115e:	f001 f88b 	bl	8002278 <HAL_Delay>
	  printf("hello\n");
 8001162:	482c      	ldr	r0, [pc, #176]	@ (8001214 <main+0x118>)
 8001164:	f00e fa48 	bl	800f5f8 <puts>
	  printf("who->%d\n",read_byte(WHO_AM_I));
 8001168:	200f      	movs	r0, #15
 800116a:	f00d feef 	bl	800ef4c <read_byte>
 800116e:	4603      	mov	r3, r0
 8001170:	4619      	mov	r1, r3
 8001172:	4829      	ldr	r0, [pc, #164]	@ (8001218 <main+0x11c>)
 8001174:	f00e f9d8 	bl	800f528 <iprintf>
	  printf("%d,%d,%d,%d,",ADC_get_value(0),ADC_get_value(1),ADC_get_value(2),ADC_get_value(3));
 8001178:	2000      	movs	r0, #0
 800117a:	f00e f901 	bl	800f380 <ADC_get_value>
 800117e:	4603      	mov	r3, r0
 8001180:	461c      	mov	r4, r3
 8001182:	2001      	movs	r0, #1
 8001184:	f00e f8fc 	bl	800f380 <ADC_get_value>
 8001188:	4603      	mov	r3, r0
 800118a:	461d      	mov	r5, r3
 800118c:	2002      	movs	r0, #2
 800118e:	f00e f8f7 	bl	800f380 <ADC_get_value>
 8001192:	4603      	mov	r3, r0
 8001194:	461e      	mov	r6, r3
 8001196:	2003      	movs	r0, #3
 8001198:	f00e f8f2 	bl	800f380 <ADC_get_value>
 800119c:	4603      	mov	r3, r0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4633      	mov	r3, r6
 80011a2:	462a      	mov	r2, r5
 80011a4:	4621      	mov	r1, r4
 80011a6:	481d      	ldr	r0, [pc, #116]	@ (800121c <main+0x120>)
 80011a8:	f00e f9be 	bl	800f528 <iprintf>
	  printf("%d,%d,%d,%d,",ADC_get_value(4),ADC_get_value(5),ADC_get_value(6),ADC_get_value(7));
 80011ac:	2004      	movs	r0, #4
 80011ae:	f00e f8e7 	bl	800f380 <ADC_get_value>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461c      	mov	r4, r3
 80011b6:	2005      	movs	r0, #5
 80011b8:	f00e f8e2 	bl	800f380 <ADC_get_value>
 80011bc:	4603      	mov	r3, r0
 80011be:	461d      	mov	r5, r3
 80011c0:	2006      	movs	r0, #6
 80011c2:	f00e f8dd 	bl	800f380 <ADC_get_value>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461e      	mov	r6, r3
 80011ca:	2007      	movs	r0, #7
 80011cc:	f00e f8d8 	bl	800f380 <ADC_get_value>
 80011d0:	4603      	mov	r3, r0
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4633      	mov	r3, r6
 80011d6:	462a      	mov	r2, r5
 80011d8:	4621      	mov	r1, r4
 80011da:	4810      	ldr	r0, [pc, #64]	@ (800121c <main+0x120>)
 80011dc:	f00e f9a4 	bl	800f528 <iprintf>
	  printf("%d,%d\n",ADC_get_value(8),ADC_get_value(9));
 80011e0:	2008      	movs	r0, #8
 80011e2:	f00e f8cd 	bl	800f380 <ADC_get_value>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461c      	mov	r4, r3
 80011ea:	2009      	movs	r0, #9
 80011ec:	f00e f8c8 	bl	800f380 <ADC_get_value>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	480a      	ldr	r0, [pc, #40]	@ (8001220 <main+0x124>)
 80011f8:	f00e f996 	bl	800f528 <iprintf>
	  printf("encoder->%ld,%ld",ENC_CNT_L,ENC_CNT_R);
 80011fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <main+0x128>)
 8001204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	@ (8001228 <main+0x12c>)
 800120a:	f00e f98d 	bl	800f528 <iprintf>
	  Indicate_LED(0xff);
 800120e:	bf00      	nop
 8001210:	e79b      	b.n	800114a <main+0x4e>
 8001212:	bf00      	nop
 8001214:	08010480 	.word	0x08010480
 8001218:	08010488 	.word	0x08010488
 800121c:	08010494 	.word	0x08010494
 8001220:	080104a4 	.word	0x080104a4
 8001224:	40000400 	.word	0x40000400
 8001228:	080104ac 	.word	0x080104ac

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b09e      	sub	sp, #120	@ 0x78
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	2260      	movs	r2, #96	@ 0x60
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00e fb78 	bl	800f930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001250:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001254:	f005 fc44 	bl	8006ae0 <HAL_PWREx_ControlVoltageScaling>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800125e:	f000 f84f 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001262:	2312      	movs	r3, #18
 8001264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001266:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127c:	2302      	movs	r3, #2
 800127e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001280:	2301      	movs	r3, #1
 8001282:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001288:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800128a:	2303      	movs	r3, #3
 800128c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 800128e:	230c      	movs	r3, #12
 8001290:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001296:	2302      	movs	r3, #2
 8001298:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800129e:	230c      	movs	r3, #12
 80012a0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80012a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 fcb3 	bl	8006c18 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012b8:	f000 f822 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	231f      	movs	r3, #31
 80012be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c0:	2303      	movs	r3, #3
 80012c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012c4:	2308      	movs	r3, #8
 80012c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 fb79 	bl	80079d0 <HAL_RCC_ClockConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80012e4:	f000 f80c 	bl	8001300 <Error_Handler>
  }

  /** Enable the force of HSI in stop mode
  */
  __HAL_RCC_HSISTOP_ENABLE();
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SystemClock_Config+0xd0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <SystemClock_Config+0xd0>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3778      	adds	r7, #120	@ 0x78
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	46020c00 	.word	0x46020c00

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800131c:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 800131e:	4a32      	ldr	r2, [pc, #200]	@ (80013e8 <MX_SPI2_Init+0xdc>)
 8001320:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001322:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001324:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001328:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001332:	2207      	movs	r2, #7
 8001334:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800133c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001340:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001344:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001346:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001348:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800134c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001350:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001354:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800135c:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001368:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 800136a:	2207      	movs	r2, #7
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001376:	2200      	movs	r2, #0
 8001378:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 800137c:	2200      	movs	r2, #0
 800137e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001382:	2200      	movs	r2, #0
 8001384:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001388:	2200      	movs	r2, #0
 800138a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 800138e:	2200      	movs	r2, #0
 8001390:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 8001394:	2200      	movs	r2, #0
 8001396:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 800139a:	2200      	movs	r2, #0
 800139c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013aa:	480e      	ldr	r0, [pc, #56]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 80013ac:	f009 fa54 	bl	800a858 <HAL_SPI_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_SPI2_Init+0xae>
  {
    Error_Handler();
 80013b6:	f7ff ffa3 	bl	8001300 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80013be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_SPI2_Init+0xd8>)
 80013ce:	f00a fbcc 	bl	800bb6a <HAL_SPIEx_SetConfigAutonomousMode>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_SPI2_Init+0xd0>
  {
    Error_Handler();
 80013d8:	f7ff ff92 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000408 	.word	0x20000408
 80013e8:	40003800 	.word	0x40003800

080013ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0b8      	sub	sp, #224	@ 0xe0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22b8      	movs	r2, #184	@ 0xb8
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f00e fa8f 	bl	800f930 <memset>
  if(spiHandle->Instance==SPI2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2b      	ldr	r2, [pc, #172]	@ (80014c4 <HAL_SPI_MspInit+0xd8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d14f      	bne.n	80014bc <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800141c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001428:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4618      	mov	r0, r3
 8001436:	f006 fe9b 	bl	8008170 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001440:	f7ff ff5e 	bl	8001300 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_SPI_MspInit+0xdc>)
 8001446:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800144a:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <HAL_SPI_MspInit+0xdc>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001450:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001454:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <HAL_SPI_MspInit+0xdc>)
 8001456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_SPI_MspInit+0xdc>)
 8001464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001468:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <HAL_SPI_MspInit+0xdc>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <HAL_SPI_MspInit+0xdc>)
 8001474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001480:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149a:	2305      	movs	r3, #5
 800149c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014a4:	4619      	mov	r1, r3
 80014a6:	4809      	ldr	r0, [pc, #36]	@ (80014cc <HAL_SPI_MspInit+0xe0>)
 80014a8:	f004 fe80 	bl	80061ac <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	203c      	movs	r0, #60	@ 0x3c
 80014b2:	f002 fe7d 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80014b6:	203c      	movs	r0, #60	@ 0x3c
 80014b8:	f002 fe94 	bl	80041e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014bc:	bf00      	nop
 80014be:	37e0      	adds	r7, #224	@ 0xe0
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40003800 	.word	0x40003800
 80014c8:	46020c00 	.word	0x46020c00
 80014cc:	42020400 	.word	0x42020400

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <HAL_MspInit+0x30>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014dc:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <HAL_MspInit+0x30>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_MspInit+0x30>)
 80014e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80014f4:	f005 fb80 	bl	8006bf8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	46020c00 	.word	0x46020c00

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <UsageFault_Handler+0x4>

0800152c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155a:	f000 fe6d 	bl	8002238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <GPDMA1_Channel0_IRQHandler+0x10>)
 800156a:	f003 f92e 	bl	80047ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000340 	.word	0x20000340

08001578 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <GPDMA1_Channel1_IRQHandler+0x10>)
 800157e:	f003 f924 	bl	80047ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000028c 	.word	0x2000028c

0800158c <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <GPDMA1_Channel2_IRQHandler+0x10>)
 8001592:	f003 f91a 	bl	80047ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200006d8 	.word	0x200006d8

080015a0 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <GPDMA1_Channel3_IRQHandler+0x10>)
 80015a6:	f003 f910 	bl	80047ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000660 	.word	0x20000660

080015b4 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <GPDMA1_Channel4_IRQHandler+0x10>)
 80015ba:	f003 f906 	bl	80047ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200001d8 	.word	0x200001d8

080015c8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <SPI2_IRQHandler+0x10>)
 80015ce:	f009 ffcd 	bl	800b56c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000408 	.word	0x20000408

080015dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <USART1_IRQHandler+0x10>)
 80015e2:	f00b fff9 	bl	800d5d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200005cc 	.word	0x200005cc

080015f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001602:	f00d fbcd 	bl	800eda0 <__io_getchar>
 8001606:	4601      	mov	r1, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf0      	blt.n	8001602 <_read+0x12>
  }

  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e009      	b.n	8001650 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f00d fb9d 	bl	800ed84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf1      	blt.n	800163c <_write+0x12>
  }
  return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_close>:

int _close(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800168a:	605a      	str	r2, [r3, #4]
  return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_isatty>:

int _isatty(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f00e f966 	bl	800f9cc <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20040000 	.word	0x20040000
 800172c:	00000400 	.word	0x00000400
 8001730:	20000498 	.word	0x20000498
 8001734:	20000a38 	.word	0x20000a38

08001738 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800173c:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <SystemInit+0x68>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <SystemInit+0x68>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <SystemInit+0x6c>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <SystemInit+0x6c>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <SystemInit+0x6c>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <SystemInit+0x6c>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <SystemInit+0x6c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <SystemInit+0x6c>)
 800176a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800176e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001772:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <SystemInit+0x6c>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800177a:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <SystemInit+0x6c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <SystemInit+0x6c>)
 8001780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001784:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <SystemInit+0x6c>)
 8001788:	2200      	movs	r2, #0
 800178a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <SystemInit+0x68>)
 800178e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001792:	609a      	str	r2, [r3, #8]
  #endif
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	46020c00 	.word	0x46020c00

080017a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	@ 0x30
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2224      	movs	r2, #36	@ 0x24
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00e f8ba 	bl	800f930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017dc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80017e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <MX_TIM2_Init+0xa4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017f6:	2301      	movs	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <MX_TIM2_Init+0xa4>)
 800181a:	f00a fa9f 	bl	800bd5c <HAL_TIM_Encoder_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001824:	f7ff fd6c 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_TIM2_Init+0xa4>)
 8001836:	f00b fb73 	bl	800cf20 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001840:	f7ff fd5e 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3730      	adds	r7, #48	@ 0x30
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000049c 	.word	0x2000049c

08001850 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2224      	movs	r2, #36	@ 0x24
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f00e f866 	bl	800f930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 8001870:	4a21      	ldr	r2, [pc, #132]	@ (80018f8 <MX_TIM3_Init+0xa8>)
 8001872:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001874:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 8001882:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001894:	2301      	movs	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 80018c0:	f00a fa4c 	bl	800bd5c <HAL_TIM_Encoder_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018ca:	f7ff fd19 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018d6:	463b      	mov	r3, r7
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <MX_TIM3_Init+0xa4>)
 80018dc:	f00b fb20 	bl	800cf20 <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018e6:	f7ff fd0b 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3730      	adds	r7, #48	@ 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200004e8 	.word	0x200004e8
 80018f8:	40000400 	.word	0x40000400

080018fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	@ 0x38
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800192e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001930:	4a3d      	ldr	r2, [pc, #244]	@ (8001a28 <MX_TIM4_Init+0x12c>)
 8001932:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001934:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <MX_TIM4_Init+0x128>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4294967295;
 8001940:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
 8001946:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b36      	ldr	r3, [pc, #216]	@ (8001a24 <MX_TIM4_Init+0x128>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b35      	ldr	r3, [pc, #212]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001954:	4833      	ldr	r0, [pc, #204]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001956:	f00a f949 	bl	800bbec <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001960:	f7ff fcce 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001968:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800196a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196e:	4619      	mov	r1, r3
 8001970:	482c      	ldr	r0, [pc, #176]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001972:	f00a fc3b 	bl	800c1ec <HAL_TIM_ConfigClockSource>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800197c:	f7ff fcc0 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001980:	4828      	ldr	r0, [pc, #160]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001982:	f00a f98a 	bl	800bc9a <HAL_TIM_PWM_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800198c:	f7ff fcb8 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4821      	ldr	r0, [pc, #132]	@ (8001a24 <MX_TIM4_Init+0x128>)
 80019a0:	f00b fabe 	bl	800cf20 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80019aa:	f7ff fca9 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ae:	2360      	movs	r3, #96	@ 0x60
 80019b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4817      	ldr	r0, [pc, #92]	@ (8001a24 <MX_TIM4_Init+0x128>)
 80019c6:	f00a fafd 	bl	800bfc4 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80019d0:	f7ff fc96 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	2204      	movs	r2, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4812      	ldr	r0, [pc, #72]	@ (8001a24 <MX_TIM4_Init+0x128>)
 80019dc:	f00a faf2 	bl	800bfc4 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80019e6:	f7ff fc8b 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	2208      	movs	r2, #8
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	@ (8001a24 <MX_TIM4_Init+0x128>)
 80019f2:	f00a fae7 	bl	800bfc4 <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80019fc:	f7ff fc80 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	220c      	movs	r2, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001a08:	f00a fadc 	bl	800bfc4 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8001a12:	f7ff fc75 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a16:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <MX_TIM4_Init+0x128>)
 8001a18:	f000 f992 	bl	8001d40 <HAL_TIM_MspPostInit>

}
 8001a1c:	bf00      	nop
 8001a1e:	3738      	adds	r7, #56	@ 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000534 	.word	0x20000534
 8001a28:	40000800 	.word	0x40000800

08001a2c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b09c      	sub	sp, #112	@ 0x70
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2234      	movs	r2, #52	@ 0x34
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00d ff62 	bl	800f930 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a6c:	4b45      	ldr	r3, [pc, #276]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a6e:	4a46      	ldr	r2, [pc, #280]	@ (8001b88 <MX_TIM8_Init+0x15c>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a72:	4b44      	ldr	r3, [pc, #272]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b42      	ldr	r3, [pc, #264]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a7e:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b3c      	ldr	r3, [pc, #240]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a98:	483a      	ldr	r0, [pc, #232]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001a9a:	f00a f8a7 	bl	800bbec <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f7ff fc2c 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001aae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4833      	ldr	r0, [pc, #204]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001ab6:	f00a fb99 	bl	800c1ec <HAL_TIM_ConfigClockSource>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001ac0:	f7ff fc1e 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ac4:	482f      	ldr	r0, [pc, #188]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001ac6:	f00a f8e8 	bl	800bc9a <HAL_TIM_PWM_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001ad0:	f7ff fc16 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ae0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4827      	ldr	r0, [pc, #156]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001ae8:	f00b fa1a 	bl	800cf20 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001af2:	f7ff fc05 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af6:	2360      	movs	r3, #96	@ 0x60
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afe:	2300      	movs	r3, #0
 8001b00:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b02:	2300      	movs	r3, #0
 8001b04:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b16:	220c      	movs	r2, #12
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481a      	ldr	r0, [pc, #104]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001b1c:	f00a fa52 	bl	800bfc4 <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001b26:	f7ff fbeb 	bl	8001300 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001b68:	f00b fa9c 	bl	800d0a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001b72:	f7ff fbc5 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b76:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <MX_TIM8_Init+0x158>)
 8001b78:	f000 f8e2 	bl	8001d40 <HAL_TIM_MspPostInit>

}
 8001b7c:	bf00      	nop
 8001b7e:	3770      	adds	r7, #112	@ 0x70
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000580 	.word	0x20000580
 8001b88:	40013400 	.word	0x40013400

08001b8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	@ 0x30
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bac:	d14e      	bne.n	8001c4c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b43      	ldr	r3, [pc, #268]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bb4:	4a41      	ldr	r2, [pc, #260]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bdc:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b34      	ldr	r3, [pc, #208]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf0:	4a32      	ldr	r2, [pc, #200]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bfa:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	4826      	ldr	r0, [pc, #152]	@ (8001cc0 <HAL_TIM_Encoder_MspInit+0x134>)
 8001c26:	f004 fac1 	bl	80061ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	481f      	ldr	r0, [pc, #124]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c46:	f004 fab1 	bl	80061ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c4a:	e032      	b.n	8001cb2 <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d12d      	bne.n	8001cb2 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c5c:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7a:	4a10      	ldr	r2, [pc, #64]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c92:	2330      	movs	r3, #48	@ 0x30
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <HAL_TIM_Encoder_MspInit+0x138>)
 8001cae:	f004 fa7d 	bl	80061ac <HAL_GPIO_Init>
}
 8001cb2:	bf00      	nop
 8001cb4:	3730      	adds	r7, #48	@ 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	46020c00 	.word	0x46020c00
 8001cc0:	42020000 	.word	0x42020000
 8001cc4:	42020400 	.word	0x42020400
 8001cc8:	40000400 	.word	0x40000400

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <HAL_TIM_Base_MspInit+0x68>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10f      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_TIM_Base_MspInit+0x6c>)
 8001cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001cfc:	e013      	b.n	8001d26 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a0e      	ldr	r2, [pc, #56]	@ (8001d3c <HAL_TIM_Base_MspInit+0x70>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d10e      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_TIM_Base_MspInit+0x6c>)
 8001d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <HAL_TIM_Base_MspInit+0x6c>)
 8001d10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d14:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <HAL_TIM_Base_MspInit+0x6c>)
 8001d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40000800 	.word	0x40000800
 8001d38:	46020c00 	.word	0x46020c00
 8001d3c:	40013400 	.word	0x40013400

08001d40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	@ 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_TIM_MspPostInit+0xb4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d120      	bne.n	8001da4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <HAL_TIM_MspPostInit+0xb8>)
 8001d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d68:	4a23      	ldr	r2, [pc, #140]	@ (8001df8 <HAL_TIM_MspPostInit+0xb8>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <HAL_TIM_MspPostInit+0xb8>)
 8001d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d80:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d92:	2302      	movs	r3, #2
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4817      	ldr	r0, [pc, #92]	@ (8001dfc <HAL_TIM_MspPostInit+0xbc>)
 8001d9e:	f004 fa05 	bl	80061ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001da2:	e023      	b.n	8001dec <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM8)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <HAL_TIM_MspPostInit+0xc0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11e      	bne.n	8001dec <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_TIM_MspPostInit+0xb8>)
 8001db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db4:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_TIM_MspPostInit+0xb8>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_TIM_MspPostInit+0xb8>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_TIM_MspPostInit+0xbc>)
 8001de8:	f004 f9e0 	bl	80061ac <HAL_GPIO_Init>
}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	@ 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40000800 	.word	0x40000800
 8001df8:	46020c00 	.word	0x46020c00
 8001dfc:	42020400 	.word	0x42020400
 8001e00:	40013400 	.word	0x40013400

08001e04 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e0a:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <MX_USART1_UART_Init+0x94>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e40:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e4c:	4811      	ldr	r0, [pc, #68]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e4e:	f00b f9c3 	bl	800d1d8 <HAL_UART_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e58:	f7ff fa52 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e60:	f00c fdcf 	bl	800ea02 <HAL_UARTEx_SetTxFifoThreshold>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e6a:	f7ff fa49 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4808      	ldr	r0, [pc, #32]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e72:	f00c fe04 	bl	800ea7e <HAL_UARTEx_SetRxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e7c:	f7ff fa40 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	@ (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e82:	f00c fd85 	bl	800e990 <HAL_UARTEx_DisableFifoMode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e8c:	f7ff fa38 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200005cc 	.word	0x200005cc
 8001e98:	40013800 	.word	0x40013800

08001e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0b8      	sub	sp, #224	@ 0xe0
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	22b8      	movs	r2, #184	@ 0xb8
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00d fd37 	bl	800f930 <memset>
  if(uartHandle->Instance==USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6d      	ldr	r2, [pc, #436]	@ (800207c <HAL_UART_MspInit+0x1e0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	f040 80d3 	bne.w	8002074 <HAL_UART_MspInit+0x1d8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ece:	f04f 0201 	mov.w	r2, #1
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eda:	2300      	movs	r3, #0
 8001edc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f006 f944 	bl	8008170 <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001eee:	f7ff fa07 	bl	8001300 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef2:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <HAL_UART_MspInit+0x1e4>)
 8001ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ef8:	4a61      	ldr	r2, [pc, #388]	@ (8002080 <HAL_UART_MspInit+0x1e4>)
 8001efa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f02:	4b5f      	ldr	r3, [pc, #380]	@ (8002080 <HAL_UART_MspInit+0x1e4>)
 8001f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <HAL_UART_MspInit+0x1e4>)
 8001f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f16:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <HAL_UART_MspInit+0x1e4>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f20:	4b57      	ldr	r3, [pc, #348]	@ (8002080 <HAL_UART_MspInit+0x1e4>)
 8001f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001f52:	4619      	mov	r1, r3
 8001f54:	484b      	ldr	r0, [pc, #300]	@ (8002084 <HAL_UART_MspInit+0x1e8>)
 8001f56:	f004 f929 	bl	80061ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800208c <HAL_UART_MspInit+0x1f0>)
 8001f5e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8001f60:	4b49      	ldr	r3, [pc, #292]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f62:	2219      	movs	r2, #25
 8001f64:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001f66:	4b48      	ldr	r3, [pc, #288]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6c:	4b46      	ldr	r3, [pc, #280]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f72:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001f74:	4b44      	ldr	r3, [pc, #272]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f76:	2208      	movs	r2, #8
 8001f78:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001f7a:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001f80:	4b41      	ldr	r3, [pc, #260]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001f86:	4b40      	ldr	r3, [pc, #256]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001f92:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001f98:	4b3b      	ldr	r3, [pc, #236]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001fa4:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001faa:	4b37      	ldr	r3, [pc, #220]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001fb0:	4835      	ldr	r0, [pc, #212]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001fb2:	f002 f9d9 	bl	8004368 <HAL_DMA_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8001fbc:	f7ff f9a0 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a31      	ldr	r2, [pc, #196]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001fc4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001fc6:	4a30      	ldr	r2, [pc, #192]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001fcc:	2110      	movs	r1, #16
 8001fce:	482e      	ldr	r0, [pc, #184]	@ (8002088 <HAL_UART_MspInit+0x1ec>)
 8001fd0:	f002 fd68 	bl	8004aa4 <HAL_DMA_ConfigChannelAttributes>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001fda:	f7ff f991 	bl	8001300 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001fde:	4b2c      	ldr	r3, [pc, #176]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8002094 <HAL_UART_MspInit+0x1f8>)
 8001fe2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8001fe6:	2218      	movs	r2, #24
 8001fe8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001fea:	4b29      	ldr	r3, [pc, #164]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff0:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001ffc:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8001ffe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002002:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002004:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800200a:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002010:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002012:	2200      	movs	r2, #0
 8002014:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002016:	4b1e      	ldr	r3, [pc, #120]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002018:	2201      	movs	r2, #1
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800201c:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 800201e:	2201      	movs	r2, #1
 8002020:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002022:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002024:	2200      	movs	r2, #0
 8002026:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800202e:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002030:	2200      	movs	r2, #0
 8002032:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002034:	4816      	ldr	r0, [pc, #88]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002036:	f002 f997 	bl	8004368 <HAL_DMA_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8002040:	f7ff f95e 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800204c:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002052:	2110      	movs	r1, #16
 8002054:	480e      	ldr	r0, [pc, #56]	@ (8002090 <HAL_UART_MspInit+0x1f4>)
 8002056:	f002 fd25 	bl	8004aa4 <HAL_DMA_ConfigChannelAttributes>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0x1c8>
    {
      Error_Handler();
 8002060:	f7ff f94e 	bl	8001300 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	203d      	movs	r0, #61	@ 0x3d
 800206a:	f002 f8a1 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206e:	203d      	movs	r0, #61	@ 0x3d
 8002070:	f002 f8b8 	bl	80041e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002074:	bf00      	nop
 8002076:	37e0      	adds	r7, #224	@ 0xe0
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013800 	.word	0x40013800
 8002080:	46020c00 	.word	0x46020c00
 8002084:	42020000 	.word	0x42020000
 8002088:	20000660 	.word	0x20000660
 800208c:	400201d0 	.word	0x400201d0
 8002090:	200006d8 	.word	0x200006d8
 8002094:	40020150 	.word	0x40020150

08002098 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002098:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800209a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800209c:	f7ff fb4c 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a0:	480c      	ldr	r0, [pc, #48]	@ (80020d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020a2:	490d      	ldr	r1, [pc, #52]	@ (80020d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <LoopForever+0xe>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b8:	4c0a      	ldr	r4, [pc, #40]	@ (80020e4 <LoopForever+0x16>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020c6:	f00d fc87 	bl	800f9d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ca:	f7ff f817 	bl	80010fc <main>

080020ce <LoopForever>:

LoopForever:
    b LoopForever
 80020ce:	e7fe      	b.n	80020ce <LoopForever>
  ldr   r0, =_estack
 80020d0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80020dc:	08010608 	.word	0x08010608
  ldr r2, =_sbss
 80020e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80020e4:	20000a38 	.word	0x20000a38

080020e8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC1_IRQHandler>
	...

080020ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_Init+0x50>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a11      	ldr	r2, [pc, #68]	@ (800213c <HAL_Init+0x50>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f002 f84c 	bl	800419a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002102:	f005 fe57 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_Init+0x54>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	490c      	ldr	r1, [pc, #48]	@ (8002144 <HAL_Init+0x58>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <HAL_Init+0x5c>)
 800211a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800211c:	2004      	movs	r0, #4
 800211e:	f002 f891 	bl	8004244 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f812 	bl	800214c <HAL_InitTick>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e002      	b.n	8002138 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002132:	f7ff f9cd 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000
 8002140:	46020c00 	.word	0x46020c00
 8002144:	080104c0 	.word	0x080104c0
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002158:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_InitTick+0xdc>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e05c      	b.n	800221e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002164:	4b31      	ldr	r3, [pc, #196]	@ (800222c <HAL_InitTick+0xe0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d10c      	bne.n	800218a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002170:	4b2f      	ldr	r3, [pc, #188]	@ (8002230 <HAL_InitTick+0xe4>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <HAL_InitTick+0xdc>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e037      	b.n	80021fa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800218a:	f002 f8b3 	bl	80042f4 <HAL_SYSTICK_GetCLKSourceConfig>
 800218e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d023      	beq.n	80021de <HAL_InitTick+0x92>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d82d      	bhi.n	80021f8 <HAL_InitTick+0xac>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_InitTick+0x5e>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d00d      	beq.n	80021c4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80021a8:	e026      	b.n	80021f8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80021aa:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <HAL_InitTick+0xe4>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <HAL_InitTick+0xdc>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80021b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	60fb      	str	r3, [r7, #12]
        break;
 80021c2:	e01a      	b.n	80021fa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80021c4:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_InitTick+0xdc>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	60fb      	str	r3, [r7, #12]
        break;
 80021dc:	e00d      	b.n	80021fa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_InitTick+0xdc>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	60fb      	str	r3, [r7, #12]
        break;
 80021f6:	e000      	b.n	80021fa <HAL_InitTick+0xae>
        break;
 80021f8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f002 f800 	bl	8004200 <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e009      	b.n	800221e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220a:	2200      	movs	r2, #0
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	f04f 30ff 	mov.w	r0, #4294967295
 8002212:	f001 ffcd 	bl	80041b0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002216:	4a07      	ldr	r2, [pc, #28]	@ (8002234 <HAL_InitTick+0xe8>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008
 800222c:	e000e010 	.word	0xe000e010
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_IncTick+0x20>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_IncTick+0x24>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4413      	add	r3, r2
 8002248:	4a04      	ldr	r2, [pc, #16]	@ (800225c <HAL_IncTick+0x24>)
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000008 	.word	0x20000008
 800225c:	20000750 	.word	0x20000750

08002260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return uwTick;
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <HAL_GetTick+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000750 	.word	0x20000750

08002278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7ff ffee 	bl	8002260 <HAL_GetTick>
 8002284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d005      	beq.n	800229e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_Delay+0x44>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800229e:	bf00      	nop
 80022a0:	f7ff ffde 	bl	8002260 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8f7      	bhi.n	80022a0 <HAL_Delay+0x28>
  {
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000008 	.word	0x20000008

080022c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <HAL_GetREVID+0x18>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	b29b      	uxth	r3, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e0044000 	.word	0xe0044000

080022dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <LL_ADC_SetResolution+0x3c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d104      	bne.n	8002364 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b01      	subs	r3, #1
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f023 020c 	bic.w	r2, r3, #12
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	46021000 	.word	0x46021000

08002384 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3360      	adds	r3, #96	@ 0x60
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	430b      	orrs	r3, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3360      	adds	r3, #96	@ 0x60
 80023d4:	461a      	mov	r2, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	0edb      	lsrs	r3, r3, #27
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b09      	cmp	r3, #9
 80023ee:	d807      	bhi.n	8002400 <LL_ADC_GetOffsetChannel+0x3a>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	069a      	lsls	r2, r3, #26
 80023f4:	2101      	movs	r1, #1
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	e008      	b.n	8002412 <LL_ADC_GetOffsetChannel+0x4c>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	069a      	lsls	r2, r3, #26
 8002404:	2101      	movs	r1, #1
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800241e:	b480      	push	{r7}
 8002420:	b087      	sub	sp, #28
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3360      	adds	r3, #96	@ 0x60
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	431a      	orrs	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3360      	adds	r3, #96	@ 0x60
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800248a:	b480      	push	{r7}
 800248c:	b087      	sub	sp, #28
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3360      	adds	r3, #96	@ 0x60
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	601a      	str	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	2a00      	cmp	r2, #0
 80024ea:	d002      	beq.n	80024f2 <LL_ADC_SetGainCompensation+0x32>
 80024ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024f0:	e000      	b.n	80024f4 <LL_ADC_SetGainCompensation+0x34>
 80024f2:	2200      	movs	r2, #0
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2107      	movs	r1, #7
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	401a      	ands	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	431a      	orrs	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	@ 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a2b      	ldr	r2, [pc, #172]	@ (8002628 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d020      	beq.n	80025c2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3330      	adds	r3, #48	@ 0x30
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	4413      	add	r3, r2
 8002592:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	211f      	movs	r1, #31
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	f003 011f 	and.w	r1, r3, #31
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	431a      	orrs	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80025c0:	e02b      	b.n	800261a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	210f      	movs	r1, #15
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	401a      	ands	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <LL_ADC_REG_SetSequencerRanks+0x7e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	e010      	b.n	800260c <LL_ADC_REG_SetSequencerRanks+0xa0>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	613b      	str	r3, [r7, #16]
  return result;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	f001 011f 	and.w	r1, r1, #31
 8002612:	408b      	lsls	r3, r1
 8002614:	431a      	orrs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800261a:	bf00      	nop
 800261c:	3724      	adds	r7, #36	@ 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	46021000 	.word	0x46021000

0800262c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2201      	movs	r2, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	e015      	b.n	800267c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	60fb      	str	r3, [r7, #12]
  return result;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e003      	b.n	8002672 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2201      	movs	r2, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b08b      	sub	sp, #44	@ 0x2c
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002788 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d042      	beq.n	800275e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <LL_ADC_SetChannelSamplingTime+0x28>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	f003 021f 	and.w	r2, r3, #31
 80026ea:	e011      	b.n	8002710 <LL_ADC_SetChannelSamplingTime+0x4c>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	617b      	str	r3, [r7, #20]
  return result;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e003      	b.n	800270e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	0e5b      	lsrs	r3, r3, #25
 8002714:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3314      	adds	r3, #20
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	0e5b      	lsrs	r3, r3, #25
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2107      	movs	r1, #7
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	401a      	ands	r2, r3
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	431a      	orrs	r2, r3
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800275c:	e00e      	b.n	800277c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	43db      	mvns	r3, r3
 8002768:	401a      	ands	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	0219      	lsls	r1, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	400b      	ands	r3, r1
 8002772:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	615a      	str	r2, [r3, #20]
}
 800277c:	bf00      	nop
 800277e:	372c      	adds	r7, #44	@ 0x2c
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	46021000 	.word	0x46021000

0800278c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027a4:	43db      	mvns	r3, r3
 80027a6:	401a      	ands	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0318 	and.w	r3, r3, #24
 80027ae:	4908      	ldr	r1, [pc, #32]	@ (80027d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027b0:	40d9      	lsrs	r1, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	400b      	ands	r3, r1
 80027b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027ba:	431a      	orrs	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	000fffff 	.word	0x000fffff

080027d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6093      	str	r3, [r2, #8]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800280c:	d101      	bne.n	8002812 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002834:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800285c:	d101      	bne.n	8002862 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_IsEnabled+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_IsEnabled+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	609a      	str	r2, [r3, #8]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d101      	bne.n	80028fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b08      	cmp	r3, #8
 800291e:	d101      	bne.n	8002924 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	@ 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e2b3      	b.n	8002ebc <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8b      	ldr	r2, [pc, #556]	@ (8002b90 <HAL_ADC_Init+0x25c>)
 8002962:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fd ffa5 	bl	80008bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff37 	bl	80027f8 <LL_ADC_IsDeepPowerDownEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff1d 	bl	80027d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff52 	bl	8002848 <LL_ADC_IsInternalRegulatorEnabled>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d115      	bne.n	80029d6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff36 	bl	8002820 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b4:	4b77      	ldr	r3, [pc, #476]	@ (8002b94 <HAL_ADC_Init+0x260>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	4a77      	ldr	r2, [pc, #476]	@ (8002b98 <HAL_ADC_Init+0x264>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	3301      	adds	r3, #1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029c8:	e002      	b.n	80029d0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f9      	bne.n	80029ca <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff34 	bl	8002848 <LL_ADC_IsInternalRegulatorEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10e      	bne.n	8002a04 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff6c 	bl	80028e6 <LL_ADC_REG_IsConversionOngoing>
 8002a0e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f040 8244 	bne.w	8002ea6 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 8240 	bne.w	8002ea6 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a2a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff2c 	bl	8002898 <LL_ADC_IsEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d140      	bne.n	8002ac8 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a51      	ldr	r2, [pc, #324]	@ (8002b90 <HAL_ADC_Init+0x25c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d028      	beq.n	8002aa2 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a51      	ldr	r2, [pc, #324]	@ (8002b9c <HAL_ADC_Init+0x268>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d109      	bne.n	8002a6e <HAL_ADC_Init+0x13a>
 8002a5a:	4850      	ldr	r0, [pc, #320]	@ (8002b9c <HAL_ADC_Init+0x268>)
 8002a5c:	f7ff ff1c 	bl	8002898 <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	e008      	b.n	8002a80 <HAL_ADC_Init+0x14c>
 8002a6e:	4848      	ldr	r0, [pc, #288]	@ (8002b90 <HAL_ADC_Init+0x25c>)
 8002a70:	f7ff ff12 	bl	8002898 <LL_ADC_IsEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d021      	beq.n	8002ac8 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a44      	ldr	r2, [pc, #272]	@ (8002b9c <HAL_ADC_Init+0x268>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_Init+0x15e>
 8002a8e:	4a44      	ldr	r2, [pc, #272]	@ (8002ba0 <HAL_ADC_Init+0x26c>)
 8002a90:	e000      	b.n	8002a94 <HAL_ADC_Init+0x160>
 8002a92:	4a44      	ldr	r2, [pc, #272]	@ (8002ba4 <HAL_ADC_Init+0x270>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f7ff fc1e 	bl	80022dc <LL_ADC_SetCommonClock>
 8002aa0:	e012      	b.n	8002ac8 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f7ff fc49 	bl	8002344 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba4 <HAL_ADC_Init+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ac2:	4938      	ldr	r1, [pc, #224]	@ (8002ba4 <HAL_ADC_Init+0x270>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a30      	ldr	r2, [pc, #192]	@ (8002b90 <HAL_ADC_Init+0x25c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d010      	beq.n	8002af4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ad8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ade:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002ae4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002aec:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002aee:	4313      	orrs	r3, r2
 8002af0:	623b      	str	r3, [r7, #32]
 8002af2:	e030      	b.n	8002b56 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7f1b      	ldrb	r3, [r3, #28]
 8002af8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b00:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b02:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_ADC_Init+0x1de>
 8002b0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b10:	e000      	b.n	8002b14 <HAL_ADC_Init+0x1e0>
 8002b12:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b14:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b1a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da04      	bge.n	8002b2e <HAL_ADC_Init+0x1fa>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b2c:	e001      	b.n	8002b32 <HAL_ADC_Init+0x1fe>
 8002b2e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002b32:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4918      	ldr	r1, [pc, #96]	@ (8002b9c <HAL_ADC_Init+0x268>)
 8002b3a:	428b      	cmp	r3, r1
 8002b3c:	d103      	bne.n	8002b46 <HAL_ADC_Init+0x212>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b44:	e003      	b.n	8002b4e <HAL_ADC_Init+0x21a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b4c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002b4e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d12f      	bne.n	8002bc0 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <HAL_ADC_Init+0x25c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	045b      	lsls	r3, r3, #17
 8002b72:	6a3a      	ldr	r2, [r7, #32]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	e022      	b.n	8002bc0 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	e018      	b.n	8002bc0 <HAL_ADC_Init+0x28c>
 8002b8e:	bf00      	nop
 8002b90:	46021000 	.word	0x46021000
 8002b94:	20000000 	.word	0x20000000
 8002b98:	053e2d63 	.word	0x053e2d63
 8002b9c:	42028000 	.word	0x42028000
 8002ba0:	42028308 	.word	0x42028308
 8002ba4:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a92      	ldr	r2, [pc, #584]	@ (8002e10 <HAL_ADC_Init+0x4dc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bde:	4313      	orrs	r3, r2
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	4b89      	ldr	r3, [pc, #548]	@ (8002e14 <HAL_ADC_Init+0x4e0>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	6a39      	ldr	r1, [r7, #32]
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	60d3      	str	r3, [r2, #12]
 8002bfa:	e031      	b.n	8002c60 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d009      	beq.n	8002c18 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c08:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	4313      	orrs	r3, r2
 8002c12:	6a3a      	ldr	r2, [r7, #32]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	4b7e      	ldr	r3, [pc, #504]	@ (8002e18 <HAL_ADC_Init+0x4e4>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6a      	ldr	r2, [pc, #424]	@ (8002e10 <HAL_ADC_Init+0x4dc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f000 8093 	beq.w	8002d92 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fe38 	bl	80028e6 <LL_ADC_REG_IsConversionOngoing>
 8002c76:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe45 	bl	800290c <LL_ADC_INJ_IsConversionOngoing>
 8002c82:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d161      	bne.n	8002d4e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d15e      	bne.n	8002d4e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7f1b      	ldrb	r3, [r3, #28]
 8002c94:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4960      	ldr	r1, [pc, #384]	@ (8002e1c <HAL_ADC_Init+0x4e8>)
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	d102      	bne.n	8002ca6 <HAL_ADC_Init+0x372>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_Init+0x378>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cac:	4313      	orrs	r3, r2
 8002cae:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f7ff fbf0 	bl	80024c0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d11e      	bne.n	8002d28 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cee:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_ADC_Init+0x4ec>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002cfe:	0411      	lsls	r1, r2, #16
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002d10:	4311      	orrs	r1, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d16:	0892      	lsrs	r2, r2, #2
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
 8002d26:	e007      	b.n	8002d38 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10c      	bne.n	8002d70 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	f023 010f 	bic.w	r1, r3, #15
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d6e:	e007      	b.n	8002d80 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 020f 	bic.w	r2, r2, #15
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d84:	f023 0303 	bic.w	r3, r3, #3
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002d90:	e092      	b.n	8002eb8 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d111      	bne.n	8002dc0 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002da4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002daa:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002db0:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_ADC_Init+0x4f0>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	69f9      	ldr	r1, [r7, #28]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2100      	movs	r1, #0
 8002de0:	f7ff fb91 	bl	8002506 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dec:	461a      	mov	r2, r3
 8002dee:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002df2:	f7ff fb88 	bl	8002506 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d114      	bne.n	8002e28 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f062 020f 	orn	r2, r2, #15
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e0e:	e024      	b.n	8002e5a <HAL_ADC_Init+0x526>
 8002e10:	46021000 	.word	0x46021000
 8002e14:	fff0c013 	.word	0xfff0c013
 8002e18:	ffde800d 	.word	0xffde800d
 8002e1c:	42028000 	.word	0x42028000
 8002e20:	fc00f81e 	.word	0xfc00f81e
 8002e24:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e30:	d113      	bne.n	8002e5a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	f003 031c 	and.w	r3, r3, #28
 8002e44:	f06f 020f 	mvn.w	r2, #15
 8002e48:	fa02 f103 	lsl.w	r1, r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <HAL_ADC_Init+0x590>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d10b      	bne.n	8002e82 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e74:	f023 0303 	bic.w	r3, r3, #3
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e80:	e01a      	b.n	8002eb8 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e86:	f023 0312 	bic.w	r3, r3, #18
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ea4:	e008      	b.n	8002eb8 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3728      	adds	r7, #40	@ 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	833ffff3 	.word	0x833ffff3

08002ec8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0a2      	sub	sp, #136	@ 0x88
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fd04 	bl	80028e6 <LL_ADC_REG_IsConversionOngoing>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 80e9 	bne.w	80030b8 <HAL_ADC_Start_DMA+0x1f0>
  {
    __HAL_LOCK(hadc);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_Start_DMA+0x2c>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e0e6      	b.n	80030c2 <HAL_ADC_Start_DMA+0x1fa>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 ff9b 	bl	8003e38 <ADC_Enable>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f08:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 80ce 	bne.w	80030ae <HAL_ADC_Start_DMA+0x1e6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a68      	ldr	r2, [pc, #416]	@ (80030cc <HAL_ADC_Start_DMA+0x204>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d010      	beq.n	8002f52 <HAL_ADC_Start_DMA+0x8a>
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_ADC_Start_DMA+0x82>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f40:	f023 0206 	bic.w	r2, r3, #6
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f48:	e006      	b.n	8002f58 <HAL_ADC_Start_DMA+0x90>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f50:	e002      	b.n	8002f58 <HAL_ADC_Start_DMA+0x90>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	4a5c      	ldr	r2, [pc, #368]	@ (80030d0 <HAL_ADC_Start_DMA+0x208>)
 8002f5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a5b      	ldr	r2, [pc, #364]	@ (80030d4 <HAL_ADC_Start_DMA+0x20c>)
 8002f66:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	@ (80030d8 <HAL_ADC_Start_DMA+0x210>)
 8002f6e:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	221c      	movs	r2, #28
 8002f76:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0210 	orr.w	r2, r2, #16
 8002f8e:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a4d      	ldr	r2, [pc, #308]	@ (80030cc <HAL_ADC_Start_DMA+0x204>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d107      	bne.n	8002faa <HAL_ADC_Start_DMA+0xe2>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d04f      	beq.n	8003058 <HAL_ADC_Start_DMA+0x190>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d046      	beq.n	8003050 <HAL_ADC_Start_DMA+0x188>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d040      	beq.n	8003050 <HAL_ADC_Start_DMA+0x188>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 fa19 	bl	8005414 <HAL_DMAEx_List_GetNodeConfig>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_ADC_Start_DMA+0x124>
            {
              return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e06a      	b.n	80030c2 <HAL_ADC_Start_DMA+0x1fa>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d104      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x134>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ffa:	e00a      	b.n	8003012 <HAL_ADC_Start_DMA+0x14a>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d104      	bne.n	800300c <HAL_ADC_Start_DMA+0x144>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800300a:	e002      	b.n	8003012 <HAL_ADC_Start_DMA+0x14a>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800301e:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	4618      	mov	r0, r3
 8003044:	f002 f93c 	bl	80052c0 <HAL_DMAEx_List_Start_IT>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800304e:	e028      	b.n	80030a2 <HAL_ADC_Start_DMA+0x1da>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003056:	e024      	b.n	80030a2 <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d104      	bne.n	800306c <HAL_ADC_Start_DMA+0x1a4>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800306a:	e00c      	b.n	8003086 <HAL_ADC_Start_DMA+0x1be>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d104      	bne.n	8003080 <HAL_ADC_Start_DMA+0x1b8>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800307e:	e002      	b.n	8003086 <HAL_ADC_Start_DMA+0x1be>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3340      	adds	r3, #64	@ 0x40
 8003090:	4619      	mov	r1, r3
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003098:	f001 fa92 	bl	80045c0 <HAL_DMA_Start_IT>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fc09 	bl	80028be <LL_ADC_REG_StartConversion>
 80030ac:	e007      	b.n	80030be <HAL_ADC_Start_DMA+0x1f6>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80030b6:	e002      	b.n	80030be <HAL_ADC_Start_DMA+0x1f6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80030be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3788      	adds	r7, #136	@ 0x88
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	46021000 	.word	0x46021000
 80030d0:	08003f19 	.word	0x08003f19
 80030d4:	08003ff1 	.word	0x08003ff1
 80030d8:	0800400d 	.word	0x0800400d

080030dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0bc      	sub	sp, #240	@ 0xf0
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4aa8      	ldr	r2, [pc, #672]	@ (80033d4 <HAL_ADC_ConfigChannel+0x2bc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d103      	bne.n	800313e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_ADC_ConfigChannel+0x36>
 8003148:	2302      	movs	r3, #2
 800314a:	f000 be6d 	b.w	8003e28 <HAL_ADC_ConfigChannel+0xd10>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fbc3 	bl	80028e6 <LL_ADC_REG_IsConversionOngoing>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 864d 	bne.w	8003e02 <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a99      	ldr	r2, [pc, #612]	@ (80033d4 <HAL_ADC_ConfigChannel+0x2bc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	f000 83ea 	beq.w	8003948 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d108      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x7a>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2201      	movs	r2, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	e01d      	b.n	80031ce <HAL_ADC_ConfigChannel+0xb6>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 80031a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 80031ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80031b6:	2320      	movs	r3, #32
 80031b8:	e004      	b.n	80031c4 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80031ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2201      	movs	r2, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	69d1      	ldr	r1, [r2, #28]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	430b      	orrs	r3, r1
 80031da:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f7ff f9bf 	bl	800256c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb77 	bl	80028e6 <LL_ADC_REG_IsConversionOngoing>
 80031f8:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fb83 	bl	800290c <LL_ADC_INJ_IsConversionOngoing>
 8003206:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800320a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 81ed 	bne.w	80035ee <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003218:	2b00      	cmp	r3, #0
 800321a:	f040 81e8 	bne.w	80035ee <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	461a      	mov	r2, r3
 800322c:	f7ff fa4a 	bl	80026c4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d046      	beq.n	80032e0 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6919      	ldr	r1, [r3, #16]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003262:	f7ff f88f 	bl	8002384 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6919      	ldr	r1, [r3, #16]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	461a      	mov	r2, r3
 8003274:	f7ff f8d3 	bl	800241e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	7e9b      	ldrb	r3, [r3, #26]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d11e      	bne.n	80032be <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x17e>
 8003290:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003294:	e000      	b.n	8003298 <HAL_ADC_ConfigChannel+0x180>
 8003296:	2300      	movs	r3, #0
 8003298:	461a      	mov	r2, r3
 800329a:	f7ff f8f6 	bl	800248a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x19c>
 80032ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80032b2:	e000      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x19e>
 80032b4:	2300      	movs	r3, #0
 80032b6:	461a      	mov	r2, r3
 80032b8:	f7ff f8cc 	bl	8002454 <LL_ADC_SetOffsetSignedSaturation>
 80032bc:	e197      	b.n	80035ee <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2200      	movs	r2, #0
 80032c8:	4619      	mov	r1, r3
 80032ca:	f7ff f8de 	bl	800248a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2200      	movs	r2, #0
 80032d8:	4619      	mov	r1, r3
 80032da:	f7ff f8bb 	bl	8002454 <LL_ADC_SetOffsetSignedSaturation>
 80032de:	e186      	b.n	80035ee <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f86d 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_ADC_ConfigChannel+0x1f4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f862 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 8003302:	4603      	mov	r3, r0
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 021f 	and.w	r2, r3, #31
 800330a:	e01e      	b.n	800334a <HAL_ADC_ConfigChannel+0x232>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff f857 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 800332a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800332e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e004      	b.n	8003348 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800333e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x24a>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	e018      	b.n	8003394 <HAL_ADC_ConfigChannel+0x27c>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800337a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800337e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e004      	b.n	8003394 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800338a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	2100      	movs	r1, #0
 80033a4:	f7fe ffee 	bl	8002384 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f809 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x2c0>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fffe 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	f003 021f 	and.w	r2, r3, #31
 80033d2:	e020      	b.n	8003416 <HAL_ADC_ConfigChannel+0x2fe>
 80033d4:	46021000 	.word	0x46021000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fff1 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80033f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80033fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e004      	b.n	8003414 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800340a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_ADC_ConfigChannel+0x316>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	e018      	b.n	8003460 <HAL_ADC_ConfigChannel+0x348>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003442:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800344a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e004      	b.n	8003460 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003460:	429a      	cmp	r2, r3
 8003462:	d107      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	2101      	movs	r1, #1
 8003470:	f7fe ff88 	bl	8002384 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2102      	movs	r1, #2
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe ffa3 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x388>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe ff98 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 021f 	and.w	r2, r3, #31
 800349e:	e01e      	b.n	80034de <HAL_ADC_ConfigChannel+0x3c6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe ff8d 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80034be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80034c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80034ce:	2320      	movs	r3, #32
 80034d0:	e004      	b.n	80034dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80034d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x3de>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	e018      	b.n	8003528 <HAL_ADC_ConfigChannel+0x410>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800350a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800350e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e004      	b.n	8003528 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800351e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003528:	429a      	cmp	r2, r3
 800352a:	d107      	bne.n	800353c <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	2102      	movs	r1, #2
 8003538:	f7fe ff24 	bl	8002384 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2103      	movs	r1, #3
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe ff3f 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x450>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2103      	movs	r1, #3
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe ff34 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 800355e:	4603      	mov	r3, r0
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	f003 021f 	and.w	r2, r3, #31
 8003566:	e01a      	b.n	800359e <HAL_ADC_ConfigChannel+0x486>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2103      	movs	r1, #3
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe ff29 	bl	80023c6 <LL_ADC_GetOffsetChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003582:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003586:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 800358e:	2320      	movs	r3, #32
 8003590:	e004      	b.n	800359c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8003592:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x49e>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0e9b      	lsrs	r3, r3, #26
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	e011      	b.n	80035da <HAL_ADC_ConfigChannel+0x4c2>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80035c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e003      	b.n	80035da <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80035d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035da:	429a      	cmp	r2, r3
 80035dc:	d107      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	2103      	movs	r1, #3
 80035ea:	f7fe fecb 	bl	8002384 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff f950 	bl	8002898 <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 840e 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	f7ff f8bd 	bl	800278c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800361a:	f040 80d6 	bne.w	80037ca <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x52a>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0e9b      	lsrs	r3, r3, #26
 8003630:	3301      	adds	r3, #1
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2b09      	cmp	r3, #9
 8003638:	bf94      	ite	ls
 800363a:	2301      	movls	r3, #1
 800363c:	2300      	movhi	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e019      	b.n	8003676 <HAL_ADC_ConfigChannel+0x55e>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003652:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 800365e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2b09      	cmp	r3, #9
 800366e:	bf94      	ite	ls
 8003670:	2301      	movls	r3, #1
 8003672:	2300      	movhi	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d04d      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x5fe>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x57e>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	3301      	adds	r3, #1
 800368e:	069b      	lsls	r3, r3, #26
 8003690:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003694:	e015      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x5aa>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80036a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80036a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80036ae:	2320      	movs	r3, #32
 80036b0:	e003      	b.n	80036ba <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80036b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	069b      	lsls	r3, r3, #26
 80036be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x5ca>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	0e9b      	lsrs	r3, r3, #26
 80036d4:	3301      	adds	r3, #1
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	e017      	b.n	8003712 <HAL_ADC_ConfigChannel+0x5fa>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	e003      	b.n	8003706 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 80036fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	e04e      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x69c>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x61a>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	3301      	adds	r3, #1
 800372a:	069b      	lsls	r3, r3, #26
 800372c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003730:	e015      	b.n	800375e <HAL_ADC_ConfigChannel+0x646>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003742:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 800374a:	2320      	movs	r3, #32
 800374c:	e003      	b.n	8003756 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 800374e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	3301      	adds	r3, #1
 8003758:	069b      	lsls	r3, r3, #26
 800375a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_ADC_ConfigChannel+0x666>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	3301      	adds	r3, #1
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	e017      	b.n	80037ae <HAL_ADC_ConfigChannel+0x696>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8003796:	2320      	movs	r3, #32
 8003798:	e003      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 800379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80037c6:	f7fe ff7d 	bl	80026c4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f280 8324 	bge.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a99      	ldr	r2, [pc, #612]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x6ca>
 80037de:	4b99      	ldr	r3, [pc, #612]	@ (8003a44 <HAL_ADC_ConfigChannel+0x92c>)
 80037e0:	e000      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x6cc>
 80037e2:	4b99      	ldr	r3, [pc, #612]	@ (8003a48 <HAL_ADC_ConfigChannel+0x930>)
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe fd9f 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 80037ea:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a93      	ldr	r2, [pc, #588]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d109      	bne.n	800380c <HAL_ADC_ConfigChannel+0x6f4>
 80037f8:	4891      	ldr	r0, [pc, #580]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 80037fa:	f7ff f84d 	bl	8002898 <LL_ADC_IsEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e008      	b.n	800381e <HAL_ADC_ConfigChannel+0x706>
 800380c:	488f      	ldr	r0, [pc, #572]	@ (8003a4c <HAL_ADC_ConfigChannel+0x934>)
 800380e:	f7ff f843 	bl	8002898 <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8088 	beq.w	8003934 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a89      	ldr	r2, [pc, #548]	@ (8003a50 <HAL_ADC_ConfigChannel+0x938>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d132      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d12c      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a80      	ldr	r2, [pc, #512]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d005      	beq.n	8003850 <HAL_ADC_ConfigChannel+0x738>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a80      	ldr	r2, [pc, #512]	@ (8003a4c <HAL_ADC_ConfigChannel+0x934>)
 800384a:	4293      	cmp	r3, r2
 800384c:	f040 82e3 	bne.w	8003e16 <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7a      	ldr	r2, [pc, #488]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x746>
 800385a:	4a7a      	ldr	r2, [pc, #488]	@ (8003a44 <HAL_ADC_ConfigChannel+0x92c>)
 800385c:	e000      	b.n	8003860 <HAL_ADC_ConfigChannel+0x748>
 800385e:	4a7a      	ldr	r2, [pc, #488]	@ (8003a48 <HAL_ADC_ConfigChannel+0x930>)
 8003860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7fe fd49 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003870:	4b78      	ldr	r3, [pc, #480]	@ (8003a54 <HAL_ADC_ConfigChannel+0x93c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	4a78      	ldr	r2, [pc, #480]	@ (8003a58 <HAL_ADC_ConfigChannel+0x940>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003882:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003884:	e002      	b.n	800388c <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3b01      	subs	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f9      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003892:	e2c0      	b.n	8003e16 <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a70      	ldr	r2, [pc, #448]	@ (8003a5c <HAL_ADC_ConfigChannel+0x944>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d121      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11b      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a64      	ldr	r2, [pc, #400]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d005      	beq.n	80038c0 <HAL_ADC_ConfigChannel+0x7a8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a64      	ldr	r2, [pc, #400]	@ (8003a4c <HAL_ADC_ConfigChannel+0x934>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	f040 82ad 	bne.w	8003e1a <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x7b6>
 80038ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003a44 <HAL_ADC_ConfigChannel+0x92c>)
 80038cc:	e000      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x7b8>
 80038ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003a48 <HAL_ADC_ConfigChannel+0x930>)
 80038d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7fe fd11 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e0:	e29b      	b.n	8003e1a <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003a60 <HAL_ADC_ConfigChannel+0x948>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	f040 8297 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 8290 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a4f      	ldr	r2, [pc, #316]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d005      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x7fa>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a50      	ldr	r2, [pc, #320]	@ (8003a4c <HAL_ADC_ConfigChannel+0x934>)
 800390c:	4293      	cmp	r3, r2
 800390e:	f040 8285 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a4a      	ldr	r2, [pc, #296]	@ (8003a40 <HAL_ADC_ConfigChannel+0x928>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x808>
 800391c:	4a49      	ldr	r2, [pc, #292]	@ (8003a44 <HAL_ADC_ConfigChannel+0x92c>)
 800391e:	e000      	b.n	8003922 <HAL_ADC_ConfigChannel+0x80a>
 8003920:	4a49      	ldr	r2, [pc, #292]	@ (8003a48 <HAL_ADC_ConfigChannel+0x930>)
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003926:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7fe fce8 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
 8003932:	e273      	b.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8003946:	e269      	b.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	f000 8191 	beq.w	8003c7c <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003962:	d004      	beq.n	800396e <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003968:	4a3e      	ldr	r2, [pc, #248]	@ (8003a64 <HAL_ADC_ConfigChannel+0x94c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d107      	bne.n	800397e <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fe58 	bl	800262c <LL_ADC_REG_SetSequencerChAdd>
 800397c:	e0b0      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	210f      	movs	r1, #15
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	401a      	ands	r2, r3
 8003996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800399a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x896>
 80039a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	e011      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x8ba>
 80039ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 80039c6:	2320      	movs	r3, #32
 80039c8:	e003      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	6839      	ldr	r1, [r7, #0]
 80039d4:	6849      	ldr	r1, [r1, #4]
 80039d6:	f001 011f 	and.w	r1, r1, #31
 80039da:	408b      	lsls	r3, r1
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	089b      	lsrs	r3, r3, #2
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d875      	bhi.n	8003ae0 <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80039f4:	f7fe fc64 	bl	80022c0 <HAL_GetREVID>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fe:	d866      	bhi.n	8003ace <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003a00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x90a>
 8003a0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2b13      	cmp	r3, #19
 8003a18:	bf8c      	ite	hi
 8003a1a:	2301      	movhi	r3, #1
 8003a1c:	2300      	movls	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e02b      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x962>
 8003a22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a26:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
  return result;
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	e018      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x958>
 8003a3e:	bf00      	nop
 8003a40:	42028000 	.word	0x42028000
 8003a44:	42028308 	.word	0x42028308
 8003a48:	46021308 	.word	0x46021308
 8003a4c:	46021000 	.word	0x46021000
 8003a50:	ce080000 	.word	0xce080000
 8003a54:	20000000 	.word	0x20000000
 8003a58:	053e2d63 	.word	0x053e2d63
 8003a5c:	ca040000 	.word	0xca040000
 8003a60:	80000001 	.word	0x80000001
 8003a64:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b13      	cmp	r3, #19
 8003a72:	bf8c      	ite	hi
 8003a74:	2301      	movhi	r3, #1
 8003a76:	2300      	movls	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d027      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8003a7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x986>
 8003a8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a8e:	0e9b      	lsrs	r3, r3, #26
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	3b09      	subs	r3, #9
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	e015      	b.n	8003aca <HAL_ADC_ConfigChannel+0x9b2>
 8003a9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003aa2:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
  return result;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e003      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3b09      	subs	r3, #9
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7fe fd46 	bl	800256c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003aee:	f7fe fde9 	bl	80026c4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f280 8190 	bge.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a97      	ldr	r2, [pc, #604]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x9f2>
 8003b06:	4b97      	ldr	r3, [pc, #604]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x9f4>
 8003b0a:	4b97      	ldr	r3, [pc, #604]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fc0b 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 8003b12:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a94      	ldr	r2, [pc, #592]	@ (8003d6c <HAL_ADC_ConfigChannel+0xc54>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d126      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d120      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a8b      	ldr	r2, [pc, #556]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0xa22>
 8003b36:	4a8b      	ldr	r2, [pc, #556]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003b38:	e000      	b.n	8003b3c <HAL_ADC_ConfigChannel+0xa24>
 8003b3a:	4a8b      	ldr	r2, [pc, #556]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f7fe fbdb 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b4c:	4b88      	ldr	r3, [pc, #544]	@ (8003d70 <HAL_ADC_ConfigChannel+0xc58>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	4a88      	ldr	r2, [pc, #544]	@ (8003d74 <HAL_ADC_ConfigChannel+0xc5c>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003b5e:	e002      	b.n	8003b66 <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f9      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003b6c:	e067      	b.n	8003c3e <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a81      	ldr	r2, [pc, #516]	@ (8003d78 <HAL_ADC_ConfigChannel+0xc60>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d116      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d110      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a75      	ldr	r2, [pc, #468]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0xa7a>
 8003b8e:	4a75      	ldr	r2, [pc, #468]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003b90:	e000      	b.n	8003b94 <HAL_ADC_ConfigChannel+0xa7c>
 8003b92:	4a75      	ldr	r2, [pc, #468]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f7fe fbaf 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
 8003ba4:	e04b      	b.n	8003c3e <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a74      	ldr	r2, [pc, #464]	@ (8003d7c <HAL_ADC_ConfigChannel+0xc64>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d116      	bne.n	8003bde <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d110      	bne.n	8003bde <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_ConfigChannel+0xab2>
 8003bc6:	4a67      	ldr	r2, [pc, #412]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003bc8:	e000      	b.n	8003bcc <HAL_ADC_ConfigChannel+0xab4>
 8003bca:	4a67      	ldr	r2, [pc, #412]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f7fe fb93 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
 8003bdc:	e02f      	b.n	8003c3e <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a67      	ldr	r2, [pc, #412]	@ (8003d80 <HAL_ADC_ConfigChannel+0xc68>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d12a      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d124      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a62      	ldr	r2, [pc, #392]	@ (8003d84 <HAL_ADC_ConfigChannel+0xc6c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d11f      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a57      	ldr	r2, [pc, #348]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0xaf4>
 8003c08:	4a56      	ldr	r2, [pc, #344]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003c0a:	e000      	b.n	8003c0e <HAL_ADC_ConfigChannel+0xaf6>
 8003c0c:	4a56      	ldr	r2, [pc, #344]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c16:	4619      	mov	r1, r3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f7fe fb72 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003c1e:	f7fe fb4f 	bl	80022c0 <HAL_GetREVID>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c28:	d809      	bhi.n	8003c3e <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003c3e:	f7fe fb3f 	bl	80022c0 <HAL_GetREVID>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c48:	f040 80e8 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a4d      	ldr	r2, [pc, #308]	@ (8003d88 <HAL_ADC_ConfigChannel+0xc70>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	f040 80e2 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 80db 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003c7a:	e0cf      	b.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c84:	d004      	beq.n	8003c90 <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003c8a:	4a40      	ldr	r2, [pc, #256]	@ (8003d8c <HAL_ADC_ConfigChannel+0xc74>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d106      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fcfa 	bl	8002692 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f280 80ba 	bge.w	8003e1c <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2c      	ldr	r2, [pc, #176]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0xb9e>
 8003cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003cb4:	e000      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0xba0>
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fb35 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 8003cbe:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a32      	ldr	r2, [pc, #200]	@ (8003d90 <HAL_ADC_ConfigChannel+0xc78>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d110      	bne.n	8003cee <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_ConfigChannel+0xbc2>
 8003cd6:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003cd8:	e000      	b.n	8003cdc <HAL_ADC_ConfigChannel+0xbc4>
 8003cda:	4a23      	ldr	r2, [pc, #140]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7fe fb0b 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
 8003cec:	e06d      	b.n	8003dca <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a28      	ldr	r2, [pc, #160]	@ (8003d94 <HAL_ADC_ConfigChannel+0xc7c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d110      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0xbee>
 8003d02:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003d04:	e000      	b.n	8003d08 <HAL_ADC_ConfigChannel+0xbf0>
 8003d06:	4a18      	ldr	r2, [pc, #96]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe faf5 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
 8003d18:	e057      	b.n	8003dca <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	@ (8003d7c <HAL_ADC_ConfigChannel+0xc64>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d110      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0xc1a>
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003d30:	e000      	b.n	8003d34 <HAL_ADC_ConfigChannel+0xc1c>
 8003d32:	4a0d      	ldr	r2, [pc, #52]	@ (8003d68 <HAL_ADC_ConfigChannel+0xc50>)
 8003d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d38:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f7fe fadf 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
 8003d44:	e041      	b.n	8003dca <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d80 <HAL_ADC_ConfigChannel+0xc68>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d13c      	bne.n	8003dca <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a02      	ldr	r2, [pc, #8]	@ (8003d60 <HAL_ADC_ConfigChannel+0xc48>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d11e      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0xc80>
 8003d5a:	4a02      	ldr	r2, [pc, #8]	@ (8003d64 <HAL_ADC_ConfigChannel+0xc4c>)
 8003d5c:	e01d      	b.n	8003d9a <HAL_ADC_ConfigChannel+0xc82>
 8003d5e:	bf00      	nop
 8003d60:	42028000 	.word	0x42028000
 8003d64:	42028308 	.word	0x42028308
 8003d68:	46021308 	.word	0x46021308
 8003d6c:	b6002000 	.word	0xb6002000
 8003d70:	20000000 	.word	0x20000000
 8003d74:	053e2d63 	.word	0x053e2d63
 8003d78:	ba004000 	.word	0xba004000
 8003d7c:	80000001 	.word	0x80000001
 8003d80:	b2001000 	.word	0xb2001000
 8003d84:	46021000 	.word	0x46021000
 8003d88:	d7200000 	.word	0xd7200000
 8003d8c:	80000010 	.word	0x80000010
 8003d90:	ce080000 	.word	0xce080000
 8003d94:	ca040000 	.word	0xca040000
 8003d98:	4a25      	ldr	r2, [pc, #148]	@ (8003e30 <HAL_ADC_ConfigChannel+0xd18>)
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7fe faac 	bl	8002302 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003daa:	f7fe fa89 	bl	80022c0 <HAL_GetREVID>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db4:	d809      	bhi.n	8003dca <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003dca:	f7fe fa79 	bl	80022c0 <HAL_GetREVID>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd4:	d122      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a16      	ldr	r2, [pc, #88]	@ (8003e34 <HAL_ADC_ConfigChannel+0xd1c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d11d      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d117      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003e00:	e00c      	b.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	f043 0220 	orr.w	r2, r3, #32
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8003e14:	e002      	b.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e16:	bf00      	nop
 8003e18:	e000      	b.n	8003e1c <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e1a:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8003e24:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	37f0      	adds	r7, #240	@ 0xf0
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	46021308 	.word	0x46021308
 8003e34:	d7200000 	.word	0xd7200000

08003e38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe fd27 	bl	8002898 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d15a      	bne.n	8003f06 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <ADC_Enable+0xd8>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e62:	f043 0210 	orr.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e046      	b.n	8003f08 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fcf2 	bl	8002870 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <ADC_Enable+0x66>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <ADC_Enable+0xdc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d033      	beq.n	8003f06 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe f9df 	bl	8002260 <HAL_GetTick>
 8003ea2:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ea4:	e028      	b.n	8003ef8 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fcf4 	bl	8002898 <LL_ADC_IsEnabled>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fcd8 	bl	8002870 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ec0:	f7fe f9ce 	bl	8002260 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d914      	bls.n	8003ef8 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d00d      	beq.n	8003ef8 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d1cf      	bne.n	8003ea6 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	8000003f 	.word	0x8000003f
 8003f14:	46021000 	.word	0x46021000

08003f18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f2a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d14b      	bne.n	8003fca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d021      	beq.n	8003f90 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe faf7 	bl	8002544 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d032      	beq.n	8003fc2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12b      	bne.n	8003fc2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11f      	bne.n	8003fc2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	679a      	str	r2, [r3, #120]	@ 0x78
 8003f8e:	e018      	b.n	8003fc2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d111      	bne.n	8003fc2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d105      	bne.n	8003fc2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fba:	f043 0201 	orr.w	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff f88a 	bl	80030dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fc8:	e00e      	b.n	8003fe8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff f894 	bl	8003104 <HAL_ADC_ErrorCallback>
}
 8003fdc:	e004      	b.n	8003fe8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff f876 	bl	80030f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800402a:	f043 0204 	orr.w	r2, r3, #4
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff f866 	bl	8003104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004050:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <__NVIC_SetPriorityGrouping+0x44>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800405c:	4013      	ands	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800406c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004072:	4a04      	ldr	r2, [pc, #16]	@ (8004084 <__NVIC_SetPriorityGrouping+0x44>)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	60d3      	str	r3, [r2, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800408c:	4b04      	ldr	r3, [pc, #16]	@ (80040a0 <__NVIC_GetPriorityGrouping+0x18>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 0307 	and.w	r3, r3, #7
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db0b      	blt.n	80040ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4907      	ldr	r1, [pc, #28]	@ (80040dc <__NVIC_EnableIRQ+0x38>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2001      	movs	r0, #1
 80040c6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000e100 	.word	0xe000e100

080040e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db0a      	blt.n	800410a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	490c      	ldr	r1, [pc, #48]	@ (800412c <__NVIC_SetPriority+0x4c>)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	0112      	lsls	r2, r2, #4
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	440b      	add	r3, r1
 8004104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004108:	e00a      	b.n	8004120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4908      	ldr	r1, [pc, #32]	@ (8004130 <__NVIC_SetPriority+0x50>)
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	3b04      	subs	r3, #4
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	440b      	add	r3, r1
 800411e:	761a      	strb	r2, [r3, #24]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000e100 	.word	0xe000e100
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	@ 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f1c3 0307 	rsb	r3, r3, #7
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf28      	it	cs
 8004152:	2304      	movcs	r3, #4
 8004154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3304      	adds	r3, #4
 800415a:	2b06      	cmp	r3, #6
 800415c:	d902      	bls.n	8004164 <NVIC_EncodePriority+0x30>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3b03      	subs	r3, #3
 8004162:	e000      	b.n	8004166 <NVIC_EncodePriority+0x32>
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	401a      	ands	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800417c:	f04f 31ff 	mov.w	r1, #4294967295
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	43d9      	mvns	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418c:	4313      	orrs	r3, r2
         );
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	@ 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ff4c 	bl	8004040 <__NVIC_SetPriorityGrouping>
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041be:	f7ff ff63 	bl	8004088 <__NVIC_GetPriorityGrouping>
 80041c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	6978      	ldr	r0, [r7, #20]
 80041ca:	f7ff ffb3 	bl	8004134 <NVIC_EncodePriority>
 80041ce:	4602      	mov	r2, r0
 80041d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff82 	bl	80040e0 <__NVIC_SetPriority>
}
 80041dc:	bf00      	nop
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff56 	bl	80040a4 <__NVIC_EnableIRQ>
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004210:	d301      	bcc.n	8004216 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004212:	2301      	movs	r3, #1
 8004214:	e00d      	b.n	8004232 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004216:	4a0a      	ldr	r2, [pc, #40]	@ (8004240 <HAL_SYSTICK_Config+0x40>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800421e:	4b08      	ldr	r3, [pc, #32]	@ (8004240 <HAL_SYSTICK_Config+0x40>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_SYSTICK_Config+0x40>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a05      	ldr	r2, [pc, #20]	@ (8004240 <HAL_SYSTICK_Config+0x40>)
 800422a:	f043 0303 	orr.w	r3, r3, #3
 800422e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010

08004244 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b04      	cmp	r3, #4
 8004250:	d844      	bhi.n	80042dc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800427b 	.word	0x0800427b
 800425c:	08004299 	.word	0x08004299
 8004260:	080042bb 	.word	0x080042bb
 8004264:	080042dd 	.word	0x080042dd
 8004268:	0800426d 	.word	0x0800426d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800426c:	4b1f      	ldr	r3, [pc, #124]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1e      	ldr	r2, [pc, #120]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	6013      	str	r3, [r2, #0]
      break;
 8004278:	e031      	b.n	80042de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800427a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800428c:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800428e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004292:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004296:	e022      	b.n	80042de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004298:	4b14      	ldr	r3, [pc, #80]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a13      	ldr	r2, [pc, #76]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800429e:	f023 0304 	bic.w	r3, r3, #4
 80042a2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80042a4:	4b12      	ldr	r3, [pc, #72]	@ (80042f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80042ae:	4a10      	ldr	r2, [pc, #64]	@ (80042f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80042b8:	e011      	b.n	80042de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80042ba:	4b0c      	ldr	r3, [pc, #48]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a0b      	ldr	r2, [pc, #44]	@ (80042ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80042d0:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80042da:	e000      	b.n	80042de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80042dc:	bf00      	nop
  }
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000e010 	.word	0xe000e010
 80042f0:	46020c00 	.word	0x46020c00

080042f4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80042fa:	4b19      	ldr	r3, [pc, #100]	@ (8004360 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004306:	2304      	movs	r3, #4
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	e021      	b.n	8004350 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800430c:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800430e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004312:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004316:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800431e:	d011      	beq.n	8004344 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004326:	d810      	bhi.n	800434a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004334:	d003      	beq.n	800433e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004336:	e008      	b.n	800434a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004338:	2300      	movs	r3, #0
 800433a:	607b      	str	r3, [r7, #4]
        break;
 800433c:	e008      	b.n	8004350 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800433e:	2301      	movs	r3, #1
 8004340:	607b      	str	r3, [r7, #4]
        break;
 8004342:	e005      	b.n	8004350 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004344:	2302      	movs	r3, #2
 8004346:	607b      	str	r3, [r7, #4]
        break;
 8004348:	e002      	b.n	8004350 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
        break;
 800434e:	bf00      	nop
    }
  }
  return systick_source;
 8004350:	687b      	ldr	r3, [r7, #4]
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000e010 	.word	0xe000e010
 8004364:	46020c00 	.word	0x46020c00

08004368 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004370:	f7fd ff76 	bl	8002260 <HAL_GetTick>
 8004374:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0db      	b.n	8004538 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6e      	ldr	r2, [pc, #440]	@ (8004540 <HAL_DMA_Init+0x1d8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f000 809f 	beq.w	80044ca <HAL_DMA_Init+0x162>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6c      	ldr	r2, [pc, #432]	@ (8004544 <HAL_DMA_Init+0x1dc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	f000 8099 	beq.w	80044ca <HAL_DMA_Init+0x162>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6a      	ldr	r2, [pc, #424]	@ (8004548 <HAL_DMA_Init+0x1e0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f000 8093 	beq.w	80044ca <HAL_DMA_Init+0x162>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a68      	ldr	r2, [pc, #416]	@ (800454c <HAL_DMA_Init+0x1e4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	f000 808d 	beq.w	80044ca <HAL_DMA_Init+0x162>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a66      	ldr	r2, [pc, #408]	@ (8004550 <HAL_DMA_Init+0x1e8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f000 8087 	beq.w	80044ca <HAL_DMA_Init+0x162>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a64      	ldr	r2, [pc, #400]	@ (8004554 <HAL_DMA_Init+0x1ec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	f000 8081 	beq.w	80044ca <HAL_DMA_Init+0x162>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a62      	ldr	r2, [pc, #392]	@ (8004558 <HAL_DMA_Init+0x1f0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d07b      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a61      	ldr	r2, [pc, #388]	@ (800455c <HAL_DMA_Init+0x1f4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d076      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5f      	ldr	r2, [pc, #380]	@ (8004560 <HAL_DMA_Init+0x1f8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d071      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004564 <HAL_DMA_Init+0x1fc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d06c      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004568 <HAL_DMA_Init+0x200>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d067      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5b      	ldr	r2, [pc, #364]	@ (800456c <HAL_DMA_Init+0x204>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d062      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a59      	ldr	r2, [pc, #356]	@ (8004570 <HAL_DMA_Init+0x208>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d05d      	beq.n	80044ca <HAL_DMA_Init+0x162>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a58      	ldr	r2, [pc, #352]	@ (8004574 <HAL_DMA_Init+0x20c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d058      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a56      	ldr	r2, [pc, #344]	@ (8004578 <HAL_DMA_Init+0x210>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d053      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a55      	ldr	r2, [pc, #340]	@ (800457c <HAL_DMA_Init+0x214>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d04e      	beq.n	80044ca <HAL_DMA_Init+0x162>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a53      	ldr	r2, [pc, #332]	@ (8004580 <HAL_DMA_Init+0x218>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d049      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a52      	ldr	r2, [pc, #328]	@ (8004584 <HAL_DMA_Init+0x21c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d044      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a50      	ldr	r2, [pc, #320]	@ (8004588 <HAL_DMA_Init+0x220>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d03f      	beq.n	80044ca <HAL_DMA_Init+0x162>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a4f      	ldr	r2, [pc, #316]	@ (800458c <HAL_DMA_Init+0x224>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d03a      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a4d      	ldr	r2, [pc, #308]	@ (8004590 <HAL_DMA_Init+0x228>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d035      	beq.n	80044ca <HAL_DMA_Init+0x162>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4c      	ldr	r2, [pc, #304]	@ (8004594 <HAL_DMA_Init+0x22c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d030      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a4a      	ldr	r2, [pc, #296]	@ (8004598 <HAL_DMA_Init+0x230>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d02b      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a49      	ldr	r2, [pc, #292]	@ (800459c <HAL_DMA_Init+0x234>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d026      	beq.n	80044ca <HAL_DMA_Init+0x162>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a47      	ldr	r2, [pc, #284]	@ (80045a0 <HAL_DMA_Init+0x238>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d021      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a46      	ldr	r2, [pc, #280]	@ (80045a4 <HAL_DMA_Init+0x23c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d01c      	beq.n	80044ca <HAL_DMA_Init+0x162>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a44      	ldr	r2, [pc, #272]	@ (80045a8 <HAL_DMA_Init+0x240>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d017      	beq.n	80044ca <HAL_DMA_Init+0x162>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a43      	ldr	r2, [pc, #268]	@ (80045ac <HAL_DMA_Init+0x244>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d012      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a41      	ldr	r2, [pc, #260]	@ (80045b0 <HAL_DMA_Init+0x248>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00d      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a40      	ldr	r2, [pc, #256]	@ (80045b4 <HAL_DMA_Init+0x24c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d008      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a3e      	ldr	r2, [pc, #248]	@ (80045b8 <HAL_DMA_Init+0x250>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <HAL_DMA_Init+0x162>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a3d      	ldr	r2, [pc, #244]	@ (80045bc <HAL_DMA_Init+0x254>)
 80044c8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0206 	orr.w	r2, r2, #6
 80044e8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80044ea:	e00f      	b.n	800450c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80044ec:	f7fd feb8 	bl	8002260 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d908      	bls.n	800450c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2210      	movs	r2, #16
 80044fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2203      	movs	r2, #3
 8004504:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e015      	b.n	8004538 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e8      	bne.n	80044ec <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fb24 	bl	8004b68 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40020050 	.word	0x40020050
 8004544:	50020050 	.word	0x50020050
 8004548:	400200d0 	.word	0x400200d0
 800454c:	500200d0 	.word	0x500200d0
 8004550:	40020150 	.word	0x40020150
 8004554:	50020150 	.word	0x50020150
 8004558:	400201d0 	.word	0x400201d0
 800455c:	500201d0 	.word	0x500201d0
 8004560:	40020250 	.word	0x40020250
 8004564:	50020250 	.word	0x50020250
 8004568:	400202d0 	.word	0x400202d0
 800456c:	500202d0 	.word	0x500202d0
 8004570:	40020350 	.word	0x40020350
 8004574:	50020350 	.word	0x50020350
 8004578:	400203d0 	.word	0x400203d0
 800457c:	500203d0 	.word	0x500203d0
 8004580:	40020450 	.word	0x40020450
 8004584:	50020450 	.word	0x50020450
 8004588:	400204d0 	.word	0x400204d0
 800458c:	500204d0 	.word	0x500204d0
 8004590:	40020550 	.word	0x40020550
 8004594:	50020550 	.word	0x50020550
 8004598:	400205d0 	.word	0x400205d0
 800459c:	500205d0 	.word	0x500205d0
 80045a0:	40020650 	.word	0x40020650
 80045a4:	50020650 	.word	0x50020650
 80045a8:	400206d0 	.word	0x400206d0
 80045ac:	500206d0 	.word	0x500206d0
 80045b0:	40020750 	.word	0x40020750
 80045b4:	50020750 	.word	0x50020750
 80045b8:	400207d0 	.word	0x400207d0
 80045bc:	500207d0 	.word	0x500207d0

080045c0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e04f      	b.n	8004678 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_DMA_Start_IT+0x26>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e048      	b.n	8004678 <HAL_DMA_Start_IT+0xb8>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d136      	bne.n	8004668 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa84 	bl	8004b1c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004622:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004652:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e007      	b.n	8004678 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2240      	movs	r2, #64	@ 0x40
 800466c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004688:	f7fd fdea 	bl	8002260 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e06b      	b.n	8004770 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d008      	beq.n	80046b6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e05c      	b.n	8004770 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0204 	orr.w	r2, r2, #4
 80046c4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2205      	movs	r2, #5
 80046ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80046ce:	e020      	b.n	8004712 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80046d0:	f7fd fdc6 	bl	8002260 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b05      	cmp	r3, #5
 80046dc:	d919      	bls.n	8004712 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e2:	f043 0210 	orr.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2203      	movs	r2, #3
 80046ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004702:	2201      	movs	r2, #1
 8004704:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e02e      	b.n	8004770 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0d7      	beq.n	80046d0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0202 	orr.w	r2, r2, #2
 800472e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2204      	movs	r2, #4
 8004734:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004740:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475a:	2201      	movs	r2, #1
 800475c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e019      	b.n	80047be <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d004      	beq.n	80047a0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e00e      	b.n	80047be <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2204      	movs	r2, #4
 80047a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80047da:	f023 030f 	bic.w	r3, r3, #15
 80047de:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e8:	3b50      	subs	r3, #80	@ 0x50
 80047ea:	09db      	lsrs	r3, r3, #7
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2201      	movs	r2, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 813b 	beq.w	8004a80 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800482e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004846:	2b00      	cmp	r3, #0
 8004848:	d011      	beq.n	800486e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004860:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	f043 0202 	orr.w	r2, r3, #2
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004892:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	f043 0204 	orr.w	r2, r3, #4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d011      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80048c4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	f043 0208 	orr.w	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d013      	beq.n	8004908 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00c      	beq.n	8004908 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048f6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d04c      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d045      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800492c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b04      	cmp	r3, #4
 8004938:	d12e      	bne.n	8004998 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004948:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0202 	orr.w	r2, r2, #2
 8004958:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004972:	2201      	movs	r2, #1
 8004974:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2200      	movs	r2, #0
 800497c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d07a      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
        }

        return;
 8004996:	e075      	b.n	8004a84 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2205      	movs	r2, #5
 800499c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d039      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d032      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d111      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f8:	2201      	movs	r2, #1
 80049fa:	731a      	strb	r2, [r3, #12]
 80049fc:	e008      	b.n	8004a10 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004a18:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d025      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0202 	orr.w	r2, r2, #2
 8004a48:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a62:	2201      	movs	r2, #1
 8004a64:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e002      	b.n	8004a86 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004a80:	bf00      	nop
 8004a82:	e000      	b.n	8004a86 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004a84:	bf00      	nop
    }
  }
}
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e02b      	b.n	8004b10 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004ac0:	f023 030f 	bic.w	r3, r3, #15
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ace:	3b50      	subs	r3, #80	@ 0x50
 8004ad0:	09db      	lsrs	r3, r3, #7
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d012      	beq.n	8004b0e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f003 0311 	and.w	r3, r3, #17
 8004aee:	2b11      	cmp	r3, #17
 8004af0:	d106      	bne.n	8004b00 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	e006      	b.n	8004b0e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	401a      	ands	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b291      	uxth	r1, r2
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004b48:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a53      	ldr	r2, [pc, #332]	@ (8004cf4 <DMA_Init+0x18c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	f000 80a0 	beq.w	8004cee <DMA_Init+0x186>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a51      	ldr	r2, [pc, #324]	@ (8004cf8 <DMA_Init+0x190>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	f000 809a 	beq.w	8004cee <DMA_Init+0x186>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4f      	ldr	r2, [pc, #316]	@ (8004cfc <DMA_Init+0x194>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	f000 8094 	beq.w	8004cee <DMA_Init+0x186>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a4d      	ldr	r2, [pc, #308]	@ (8004d00 <DMA_Init+0x198>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	f000 808e 	beq.w	8004cee <DMA_Init+0x186>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8004d04 <DMA_Init+0x19c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	f000 8088 	beq.w	8004cee <DMA_Init+0x186>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a49      	ldr	r2, [pc, #292]	@ (8004d08 <DMA_Init+0x1a0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f000 8082 	beq.w	8004cee <DMA_Init+0x186>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a47      	ldr	r2, [pc, #284]	@ (8004d0c <DMA_Init+0x1a4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d07c      	beq.n	8004cee <DMA_Init+0x186>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a45      	ldr	r2, [pc, #276]	@ (8004d10 <DMA_Init+0x1a8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d077      	beq.n	8004cee <DMA_Init+0x186>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a44      	ldr	r2, [pc, #272]	@ (8004d14 <DMA_Init+0x1ac>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d072      	beq.n	8004cee <DMA_Init+0x186>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a42      	ldr	r2, [pc, #264]	@ (8004d18 <DMA_Init+0x1b0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d06d      	beq.n	8004cee <DMA_Init+0x186>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a41      	ldr	r2, [pc, #260]	@ (8004d1c <DMA_Init+0x1b4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d068      	beq.n	8004cee <DMA_Init+0x186>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a3f      	ldr	r2, [pc, #252]	@ (8004d20 <DMA_Init+0x1b8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d063      	beq.n	8004cee <DMA_Init+0x186>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d24 <DMA_Init+0x1bc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d05e      	beq.n	8004cee <DMA_Init+0x186>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a3c      	ldr	r2, [pc, #240]	@ (8004d28 <DMA_Init+0x1c0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d059      	beq.n	8004cee <DMA_Init+0x186>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d2c <DMA_Init+0x1c4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d054      	beq.n	8004cee <DMA_Init+0x186>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a39      	ldr	r2, [pc, #228]	@ (8004d30 <DMA_Init+0x1c8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d04f      	beq.n	8004cee <DMA_Init+0x186>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a38      	ldr	r2, [pc, #224]	@ (8004d34 <DMA_Init+0x1cc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d04a      	beq.n	8004cee <DMA_Init+0x186>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a36      	ldr	r2, [pc, #216]	@ (8004d38 <DMA_Init+0x1d0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d045      	beq.n	8004cee <DMA_Init+0x186>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a35      	ldr	r2, [pc, #212]	@ (8004d3c <DMA_Init+0x1d4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d040      	beq.n	8004cee <DMA_Init+0x186>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a33      	ldr	r2, [pc, #204]	@ (8004d40 <DMA_Init+0x1d8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d03b      	beq.n	8004cee <DMA_Init+0x186>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a32      	ldr	r2, [pc, #200]	@ (8004d44 <DMA_Init+0x1dc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d036      	beq.n	8004cee <DMA_Init+0x186>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a30      	ldr	r2, [pc, #192]	@ (8004d48 <DMA_Init+0x1e0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d031      	beq.n	8004cee <DMA_Init+0x186>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d4c <DMA_Init+0x1e4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d02c      	beq.n	8004cee <DMA_Init+0x186>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2d      	ldr	r2, [pc, #180]	@ (8004d50 <DMA_Init+0x1e8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d027      	beq.n	8004cee <DMA_Init+0x186>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d54 <DMA_Init+0x1ec>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d022      	beq.n	8004cee <DMA_Init+0x186>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2a      	ldr	r2, [pc, #168]	@ (8004d58 <DMA_Init+0x1f0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01d      	beq.n	8004cee <DMA_Init+0x186>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <DMA_Init+0x1f4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <DMA_Init+0x186>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a27      	ldr	r2, [pc, #156]	@ (8004d60 <DMA_Init+0x1f8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <DMA_Init+0x186>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a26      	ldr	r2, [pc, #152]	@ (8004d64 <DMA_Init+0x1fc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <DMA_Init+0x186>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a24      	ldr	r2, [pc, #144]	@ (8004d68 <DMA_Init+0x200>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <DMA_Init+0x186>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a23      	ldr	r2, [pc, #140]	@ (8004d6c <DMA_Init+0x204>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <DMA_Init+0x186>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a21      	ldr	r2, [pc, #132]	@ (8004d70 <DMA_Init+0x208>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d142      	bne.n	8004d74 <DMA_Init+0x20c>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e041      	b.n	8004d76 <DMA_Init+0x20e>
 8004cf2:	bf00      	nop
 8004cf4:	40020050 	.word	0x40020050
 8004cf8:	50020050 	.word	0x50020050
 8004cfc:	400200d0 	.word	0x400200d0
 8004d00:	500200d0 	.word	0x500200d0
 8004d04:	40020150 	.word	0x40020150
 8004d08:	50020150 	.word	0x50020150
 8004d0c:	400201d0 	.word	0x400201d0
 8004d10:	500201d0 	.word	0x500201d0
 8004d14:	40020250 	.word	0x40020250
 8004d18:	50020250 	.word	0x50020250
 8004d1c:	400202d0 	.word	0x400202d0
 8004d20:	500202d0 	.word	0x500202d0
 8004d24:	40020350 	.word	0x40020350
 8004d28:	50020350 	.word	0x50020350
 8004d2c:	400203d0 	.word	0x400203d0
 8004d30:	500203d0 	.word	0x500203d0
 8004d34:	40020450 	.word	0x40020450
 8004d38:	50020450 	.word	0x50020450
 8004d3c:	400204d0 	.word	0x400204d0
 8004d40:	500204d0 	.word	0x500204d0
 8004d44:	40020550 	.word	0x40020550
 8004d48:	50020550 	.word	0x50020550
 8004d4c:	400205d0 	.word	0x400205d0
 8004d50:	500205d0 	.word	0x500205d0
 8004d54:	40020650 	.word	0x40020650
 8004d58:	50020650 	.word	0x50020650
 8004d5c:	400206d0 	.word	0x400206d0
 8004d60:	500206d0 	.word	0x500206d0
 8004d64:	40020750 	.word	0x40020750
 8004d68:	50020750 	.word	0x50020750
 8004d6c:	400207d0 	.word	0x400207d0
 8004d70:	500207d0 	.word	0x500207d0
 8004d74:	2300      	movs	r3, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d012      	beq.n	8004da0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	051b      	lsls	r3, r3, #20
 8004d86:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004d8a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	3b01      	subs	r3, #1
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004d98:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd2:	f040 80b0 	bne.w	8004f36 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a82      	ldr	r2, [pc, #520]	@ (8004fe4 <DMA_Init+0x47c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	f000 80a0 	beq.w	8004f22 <DMA_Init+0x3ba>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a80      	ldr	r2, [pc, #512]	@ (8004fe8 <DMA_Init+0x480>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f000 809a 	beq.w	8004f22 <DMA_Init+0x3ba>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fec <DMA_Init+0x484>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	f000 8094 	beq.w	8004f22 <DMA_Init+0x3ba>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff0 <DMA_Init+0x488>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	f000 808e 	beq.w	8004f22 <DMA_Init+0x3ba>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8004ff4 <DMA_Init+0x48c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f000 8088 	beq.w	8004f22 <DMA_Init+0x3ba>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a78      	ldr	r2, [pc, #480]	@ (8004ff8 <DMA_Init+0x490>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	f000 8082 	beq.w	8004f22 <DMA_Init+0x3ba>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a76      	ldr	r2, [pc, #472]	@ (8004ffc <DMA_Init+0x494>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d07c      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a74      	ldr	r2, [pc, #464]	@ (8005000 <DMA_Init+0x498>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d077      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a73      	ldr	r2, [pc, #460]	@ (8005004 <DMA_Init+0x49c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d072      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a71      	ldr	r2, [pc, #452]	@ (8005008 <DMA_Init+0x4a0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d06d      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a70      	ldr	r2, [pc, #448]	@ (800500c <DMA_Init+0x4a4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d068      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6e      	ldr	r2, [pc, #440]	@ (8005010 <DMA_Init+0x4a8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d063      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8005014 <DMA_Init+0x4ac>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d05e      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6b      	ldr	r2, [pc, #428]	@ (8005018 <DMA_Init+0x4b0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d059      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6a      	ldr	r2, [pc, #424]	@ (800501c <DMA_Init+0x4b4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d054      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a68      	ldr	r2, [pc, #416]	@ (8005020 <DMA_Init+0x4b8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d04f      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a67      	ldr	r2, [pc, #412]	@ (8005024 <DMA_Init+0x4bc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d04a      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a65      	ldr	r2, [pc, #404]	@ (8005028 <DMA_Init+0x4c0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d045      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a64      	ldr	r2, [pc, #400]	@ (800502c <DMA_Init+0x4c4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d040      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a62      	ldr	r2, [pc, #392]	@ (8005030 <DMA_Init+0x4c8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d03b      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a61      	ldr	r2, [pc, #388]	@ (8005034 <DMA_Init+0x4cc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d036      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8005038 <DMA_Init+0x4d0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d031      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800503c <DMA_Init+0x4d4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d02c      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a5c      	ldr	r2, [pc, #368]	@ (8005040 <DMA_Init+0x4d8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d027      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8005044 <DMA_Init+0x4dc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d022      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a59      	ldr	r2, [pc, #356]	@ (8005048 <DMA_Init+0x4e0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01d      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a58      	ldr	r2, [pc, #352]	@ (800504c <DMA_Init+0x4e4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d018      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a56      	ldr	r2, [pc, #344]	@ (8005050 <DMA_Init+0x4e8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a55      	ldr	r2, [pc, #340]	@ (8005054 <DMA_Init+0x4ec>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a53      	ldr	r2, [pc, #332]	@ (8005058 <DMA_Init+0x4f0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a52      	ldr	r2, [pc, #328]	@ (800505c <DMA_Init+0x4f4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <DMA_Init+0x3ba>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a50      	ldr	r2, [pc, #320]	@ (8005060 <DMA_Init+0x4f8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <DMA_Init+0x3be>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <DMA_Init+0x3c0>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00d      	beq.n	8004f48 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e008      	b.n	8004f48 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f3e:	d103      	bne.n	8004f48 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f46:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f4e:	4b45      	ldr	r3, [pc, #276]	@ (8005064 <DMA_Init+0x4fc>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2200      	movs	r2, #0
 8004f62:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a36      	ldr	r2, [pc, #216]	@ (8005044 <DMA_Init+0x4dc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <DMA_Init+0x44c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a35      	ldr	r2, [pc, #212]	@ (8005048 <DMA_Init+0x4e0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01d      	beq.n	8004fb4 <DMA_Init+0x44c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a33      	ldr	r2, [pc, #204]	@ (800504c <DMA_Init+0x4e4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <DMA_Init+0x44c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a32      	ldr	r2, [pc, #200]	@ (8005050 <DMA_Init+0x4e8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <DMA_Init+0x44c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a30      	ldr	r2, [pc, #192]	@ (8005054 <DMA_Init+0x4ec>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <DMA_Init+0x44c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <DMA_Init+0x4f0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <DMA_Init+0x44c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800505c <DMA_Init+0x4f4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <DMA_Init+0x44c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2c      	ldr	r2, [pc, #176]	@ (8005060 <DMA_Init+0x4f8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <DMA_Init+0x450>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <DMA_Init+0x452>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40020050 	.word	0x40020050
 8004fe8:	50020050 	.word	0x50020050
 8004fec:	400200d0 	.word	0x400200d0
 8004ff0:	500200d0 	.word	0x500200d0
 8004ff4:	40020150 	.word	0x40020150
 8004ff8:	50020150 	.word	0x50020150
 8004ffc:	400201d0 	.word	0x400201d0
 8005000:	500201d0 	.word	0x500201d0
 8005004:	40020250 	.word	0x40020250
 8005008:	50020250 	.word	0x50020250
 800500c:	400202d0 	.word	0x400202d0
 8005010:	500202d0 	.word	0x500202d0
 8005014:	40020350 	.word	0x40020350
 8005018:	50020350 	.word	0x50020350
 800501c:	400203d0 	.word	0x400203d0
 8005020:	500203d0 	.word	0x500203d0
 8005024:	40020450 	.word	0x40020450
 8005028:	50020450 	.word	0x50020450
 800502c:	400204d0 	.word	0x400204d0
 8005030:	500204d0 	.word	0x500204d0
 8005034:	40020550 	.word	0x40020550
 8005038:	50020550 	.word	0x50020550
 800503c:	400205d0 	.word	0x400205d0
 8005040:	500205d0 	.word	0x500205d0
 8005044:	40020650 	.word	0x40020650
 8005048:	50020650 	.word	0x50020650
 800504c:	400206d0 	.word	0x400206d0
 8005050:	500206d0 	.word	0x500206d0
 8005054:	40020750 	.word	0x40020750
 8005058:	50020750 	.word	0x50020750
 800505c:	400207d0 	.word	0x400207d0
 8005060:	500207d0 	.word	0x500207d0
 8005064:	3cc03180 	.word	0x3cc03180

08005068 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005070:	f7fd f8f6 	bl	8002260 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0db      	b.n	8005238 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6e      	ldr	r2, [pc, #440]	@ (8005240 <HAL_DMAEx_List_Init+0x1d8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	f000 809f 	beq.w	80051ca <HAL_DMAEx_List_Init+0x162>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6c      	ldr	r2, [pc, #432]	@ (8005244 <HAL_DMAEx_List_Init+0x1dc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f000 8099 	beq.w	80051ca <HAL_DMAEx_List_Init+0x162>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a6a      	ldr	r2, [pc, #424]	@ (8005248 <HAL_DMAEx_List_Init+0x1e0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	f000 8093 	beq.w	80051ca <HAL_DMAEx_List_Init+0x162>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a68      	ldr	r2, [pc, #416]	@ (800524c <HAL_DMAEx_List_Init+0x1e4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f000 808d 	beq.w	80051ca <HAL_DMAEx_List_Init+0x162>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a66      	ldr	r2, [pc, #408]	@ (8005250 <HAL_DMAEx_List_Init+0x1e8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	f000 8087 	beq.w	80051ca <HAL_DMAEx_List_Init+0x162>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a64      	ldr	r2, [pc, #400]	@ (8005254 <HAL_DMAEx_List_Init+0x1ec>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	f000 8081 	beq.w	80051ca <HAL_DMAEx_List_Init+0x162>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a62      	ldr	r2, [pc, #392]	@ (8005258 <HAL_DMAEx_List_Init+0x1f0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d07b      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a61      	ldr	r2, [pc, #388]	@ (800525c <HAL_DMAEx_List_Init+0x1f4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d076      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5f      	ldr	r2, [pc, #380]	@ (8005260 <HAL_DMAEx_List_Init+0x1f8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d071      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005264 <HAL_DMAEx_List_Init+0x1fc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d06c      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5c      	ldr	r2, [pc, #368]	@ (8005268 <HAL_DMAEx_List_Init+0x200>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d067      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a5b      	ldr	r2, [pc, #364]	@ (800526c <HAL_DMAEx_List_Init+0x204>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d062      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a59      	ldr	r2, [pc, #356]	@ (8005270 <HAL_DMAEx_List_Init+0x208>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d05d      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a58      	ldr	r2, [pc, #352]	@ (8005274 <HAL_DMAEx_List_Init+0x20c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d058      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a56      	ldr	r2, [pc, #344]	@ (8005278 <HAL_DMAEx_List_Init+0x210>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d053      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a55      	ldr	r2, [pc, #340]	@ (800527c <HAL_DMAEx_List_Init+0x214>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d04e      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a53      	ldr	r2, [pc, #332]	@ (8005280 <HAL_DMAEx_List_Init+0x218>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d049      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a52      	ldr	r2, [pc, #328]	@ (8005284 <HAL_DMAEx_List_Init+0x21c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d044      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a50      	ldr	r2, [pc, #320]	@ (8005288 <HAL_DMAEx_List_Init+0x220>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d03f      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a4f      	ldr	r2, [pc, #316]	@ (800528c <HAL_DMAEx_List_Init+0x224>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d03a      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a4d      	ldr	r2, [pc, #308]	@ (8005290 <HAL_DMAEx_List_Init+0x228>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d035      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a4c      	ldr	r2, [pc, #304]	@ (8005294 <HAL_DMAEx_List_Init+0x22c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d030      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a4a      	ldr	r2, [pc, #296]	@ (8005298 <HAL_DMAEx_List_Init+0x230>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02b      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a49      	ldr	r2, [pc, #292]	@ (800529c <HAL_DMAEx_List_Init+0x234>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d026      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a47      	ldr	r2, [pc, #284]	@ (80052a0 <HAL_DMAEx_List_Init+0x238>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d021      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a46      	ldr	r2, [pc, #280]	@ (80052a4 <HAL_DMAEx_List_Init+0x23c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d01c      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a44      	ldr	r2, [pc, #272]	@ (80052a8 <HAL_DMAEx_List_Init+0x240>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d017      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a43      	ldr	r2, [pc, #268]	@ (80052ac <HAL_DMAEx_List_Init+0x244>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d012      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a41      	ldr	r2, [pc, #260]	@ (80052b0 <HAL_DMAEx_List_Init+0x248>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00d      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a40      	ldr	r2, [pc, #256]	@ (80052b4 <HAL_DMAEx_List_Init+0x24c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d008      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3e      	ldr	r2, [pc, #248]	@ (80052b8 <HAL_DMAEx_List_Init+0x250>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <HAL_DMAEx_List_Init+0x162>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a3d      	ldr	r2, [pc, #244]	@ (80052bc <HAL_DMAEx_List_Init+0x254>)
 80051c8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0206 	orr.w	r2, r2, #6
 80051e8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80051ea:	e00f      	b.n	800520c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80051ec:	f7fd f838 	bl	8002260 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d908      	bls.n	800520c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2210      	movs	r2, #16
 80051fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2203      	movs	r2, #3
 8005204:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e015      	b.n	8005238 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e8      	bne.n	80051ec <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fad0 	bl	80057c0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40020050 	.word	0x40020050
 8005244:	50020050 	.word	0x50020050
 8005248:	400200d0 	.word	0x400200d0
 800524c:	500200d0 	.word	0x500200d0
 8005250:	40020150 	.word	0x40020150
 8005254:	50020150 	.word	0x50020150
 8005258:	400201d0 	.word	0x400201d0
 800525c:	500201d0 	.word	0x500201d0
 8005260:	40020250 	.word	0x40020250
 8005264:	50020250 	.word	0x50020250
 8005268:	400202d0 	.word	0x400202d0
 800526c:	500202d0 	.word	0x500202d0
 8005270:	40020350 	.word	0x40020350
 8005274:	50020350 	.word	0x50020350
 8005278:	400203d0 	.word	0x400203d0
 800527c:	500203d0 	.word	0x500203d0
 8005280:	40020450 	.word	0x40020450
 8005284:	50020450 	.word	0x50020450
 8005288:	400204d0 	.word	0x400204d0
 800528c:	500204d0 	.word	0x500204d0
 8005290:	40020550 	.word	0x40020550
 8005294:	50020550 	.word	0x50020550
 8005298:	400205d0 	.word	0x400205d0
 800529c:	500205d0 	.word	0x500205d0
 80052a0:	40020650 	.word	0x40020650
 80052a4:	50020650 	.word	0x50020650
 80052a8:	400206d0 	.word	0x400206d0
 80052ac:	500206d0 	.word	0x500206d0
 80052b0:	40020750 	.word	0x40020750
 80052b4:	50020750 	.word	0x50020750
 80052b8:	400207d0 	.word	0x400207d0
 80052bc:	500207d0 	.word	0x500207d0

080052c0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_DMAEx_List_Start_IT+0x16>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e082      	b.n	80053e0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80052e0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ec:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d005      	beq.n	8005300 <HAL_DMAEx_List_Start_IT+0x40>
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d16a      	bne.n	80053d0 <HAL_DMAEx_List_Start_IT+0x110>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d067      	beq.n	80053d0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d157      	bne.n	80053bc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_DMAEx_List_Start_IT+0x5a>
 8005316:	2302      	movs	r3, #2
 8005318:	e062      	b.n	80053e0 <HAL_DMAEx_List_Start_IT+0x120>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532e:	2202      	movs	r2, #2
 8005330:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800534e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005366:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800537e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f107 010c 	add.w	r1, r7, #12
 800538a:	2200      	movs	r2, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fe3d 	bl	800600c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	0c0b      	lsrs	r3, r1, #16
 80053a0:	041b      	lsls	r3, r3, #16
 80053a2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80053b0:	4013      	ands	r3, r2
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e007      	b.n	80053e0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2240      	movs	r2, #64	@ 0x40
 80053d4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_DMAEx_List_BuildNode+0x16>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e004      	b.n	800540c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb33 	bl	8005a70 <DMA_List_BuildNode>

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_DMAEx_List_GetNodeConfig+0x16>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e004      	b.n	8005438 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fc75 	bl	8005d20 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	@ 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_DMAEx_List_InsertNode+0x18>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0b6      	b.n	80055ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d104      	bne.n	800546e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2204      	movs	r2, #4
 8005468:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0ad      	b.n	80055ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fd5c 	bl	8005f34 <DMA_List_CheckNodesBaseAddresses>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2205      	movs	r2, #5
 8005486:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e09e      	b.n	80055ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fd7d 	bl	8005f94 <DMA_List_CheckNodesTypes>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2204      	movs	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e08f      	b.n	80055ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2202      	movs	r2, #2
 80054ae:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80054b6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80054ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fda3 	bl	800600c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d11a      	bne.n	8005504 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	e06c      	b.n	80055bc <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80054ee:	4013      	ands	r3, r2
 80054f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054f4:	4319      	orrs	r1, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2202      	movs	r2, #2
 8005500:	609a      	str	r2, [r3, #8]
 8005502:	e05b      	b.n	80055bc <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10f      	bne.n	800552a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005514:	4013      	ands	r3, r2
 8005516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800551a:	4319      	orrs	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	e043      	b.n	80055b2 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	461a      	mov	r2, r3
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fd98 	bl	800606c <DMA_List_FindNode>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d132      	bne.n	80055a8 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	429a      	cmp	r2, r3
 800554a:	d11a      	bne.n	8005582 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	461a      	mov	r2, r3
 800555a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800555e:	4013      	ands	r3, r2
 8005560:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005564:	4319      	orrs	r1, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005572:	4013      	ands	r3, r2
 8005574:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005578:	4319      	orrs	r1, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005580:	e017      	b.n	80055b2 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8005582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005598:	4013      	ands	r3, r2
 800559a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800559c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800559e:	4319      	orrs	r1, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80055a6:	e004      	b.n	80055b2 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2206      	movs	r2, #6
 80055ac:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e00b      	b.n	80055ca <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3730      	adds	r7, #48	@ 0x30
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b08a      	sub	sp, #40	@ 0x28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e052      	b.n	800568a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d104      	bne.n	80055f6 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e049      	b.n	800568a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d101      	bne.n	800560e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e03d      	b.n	800568a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2204      	movs	r2, #4
 8005612:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e038      	b.n	800568a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d104      	bne.n	800562a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2204      	movs	r2, #4
 8005624:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e02f      	b.n	800568a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f107 0220 	add.w	r2, r7, #32
 800563e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fce2 	bl	800600c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800564c:	f107 030c 	add.w	r3, r7, #12
 8005650:	461a      	mov	r2, r3
 8005652:	2100      	movs	r1, #0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fd09 	bl	800606c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005664:	4013      	ands	r3, r2
 8005666:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4610      	mov	r0, r2
 800566c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800566e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005670:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3728      	adds	r7, #40	@ 0x28
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_DMAEx_List_LinkQ+0x16>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e072      	b.n	8005794 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056b4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d002      	beq.n	80056c8 <HAL_DMAEx_List_LinkQ+0x34>
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d108      	bne.n	80056da <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2240      	movs	r2, #64	@ 0x40
 80056cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e05c      	b.n	8005794 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	7b1b      	ldrb	r3, [r3, #12]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d104      	bne.n	80056ee <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e052      	b.n	8005794 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2b      	ldr	r2, [pc, #172]	@ (80057a0 <HAL_DMAEx_List_LinkQ+0x10c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_DMAEx_List_LinkQ+0xaa>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a29      	ldr	r2, [pc, #164]	@ (80057a4 <HAL_DMAEx_List_LinkQ+0x110>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01d      	beq.n	800573e <HAL_DMAEx_List_LinkQ+0xaa>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a28      	ldr	r2, [pc, #160]	@ (80057a8 <HAL_DMAEx_List_LinkQ+0x114>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_DMAEx_List_LinkQ+0xaa>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a26      	ldr	r2, [pc, #152]	@ (80057ac <HAL_DMAEx_List_LinkQ+0x118>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_DMAEx_List_LinkQ+0xaa>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a25      	ldr	r2, [pc, #148]	@ (80057b0 <HAL_DMAEx_List_LinkQ+0x11c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_DMAEx_List_LinkQ+0xaa>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a23      	ldr	r2, [pc, #140]	@ (80057b4 <HAL_DMAEx_List_LinkQ+0x120>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_DMAEx_List_LinkQ+0xaa>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a22      	ldr	r2, [pc, #136]	@ (80057b8 <HAL_DMAEx_List_LinkQ+0x124>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_DMAEx_List_LinkQ+0xaa>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a20      	ldr	r2, [pc, #128]	@ (80057bc <HAL_DMAEx_List_LinkQ+0x128>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <HAL_DMAEx_List_LinkQ+0xae>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_DMAEx_List_LinkQ+0xb0>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2203      	movs	r2, #3
 800575a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e019      	b.n	8005794 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005764:	2b81      	cmp	r3, #129	@ 0x81
 8005766:	d108      	bne.n	800577a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10d      	bne.n	800578c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2204      	movs	r2, #4
 8005774:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e00c      	b.n	8005794 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2204      	movs	r2, #4
 8005786:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e003      	b.n	8005794 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40020650 	.word	0x40020650
 80057a4:	50020650 	.word	0x50020650
 80057a8:	400206d0 	.word	0x400206d0
 80057ac:	500206d0 	.word	0x500206d0
 80057b0:	40020750 	.word	0x40020750
 80057b4:	50020750 	.word	0x50020750
 80057b8:	400207d0 	.word	0x400207d0
 80057bc:	500207d0 	.word	0x500207d0

080057c0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a85      	ldr	r2, [pc, #532]	@ (80059f0 <DMA_List_Init+0x230>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	f000 80a0 	beq.w	8005920 <DMA_List_Init+0x160>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a83      	ldr	r2, [pc, #524]	@ (80059f4 <DMA_List_Init+0x234>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f000 809a 	beq.w	8005920 <DMA_List_Init+0x160>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a81      	ldr	r2, [pc, #516]	@ (80059f8 <DMA_List_Init+0x238>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	f000 8094 	beq.w	8005920 <DMA_List_Init+0x160>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a7f      	ldr	r2, [pc, #508]	@ (80059fc <DMA_List_Init+0x23c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	f000 808e 	beq.w	8005920 <DMA_List_Init+0x160>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a7d      	ldr	r2, [pc, #500]	@ (8005a00 <DMA_List_Init+0x240>)
 800580a:	4293      	cmp	r3, r2
 800580c:	f000 8088 	beq.w	8005920 <DMA_List_Init+0x160>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a7b      	ldr	r2, [pc, #492]	@ (8005a04 <DMA_List_Init+0x244>)
 8005816:	4293      	cmp	r3, r2
 8005818:	f000 8082 	beq.w	8005920 <DMA_List_Init+0x160>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a79      	ldr	r2, [pc, #484]	@ (8005a08 <DMA_List_Init+0x248>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d07c      	beq.n	8005920 <DMA_List_Init+0x160>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a78      	ldr	r2, [pc, #480]	@ (8005a0c <DMA_List_Init+0x24c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d077      	beq.n	8005920 <DMA_List_Init+0x160>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a76      	ldr	r2, [pc, #472]	@ (8005a10 <DMA_List_Init+0x250>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d072      	beq.n	8005920 <DMA_List_Init+0x160>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a75      	ldr	r2, [pc, #468]	@ (8005a14 <DMA_List_Init+0x254>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d06d      	beq.n	8005920 <DMA_List_Init+0x160>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a73      	ldr	r2, [pc, #460]	@ (8005a18 <DMA_List_Init+0x258>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d068      	beq.n	8005920 <DMA_List_Init+0x160>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a72      	ldr	r2, [pc, #456]	@ (8005a1c <DMA_List_Init+0x25c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d063      	beq.n	8005920 <DMA_List_Init+0x160>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a70      	ldr	r2, [pc, #448]	@ (8005a20 <DMA_List_Init+0x260>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d05e      	beq.n	8005920 <DMA_List_Init+0x160>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6f      	ldr	r2, [pc, #444]	@ (8005a24 <DMA_List_Init+0x264>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d059      	beq.n	8005920 <DMA_List_Init+0x160>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6d      	ldr	r2, [pc, #436]	@ (8005a28 <DMA_List_Init+0x268>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d054      	beq.n	8005920 <DMA_List_Init+0x160>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6c      	ldr	r2, [pc, #432]	@ (8005a2c <DMA_List_Init+0x26c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d04f      	beq.n	8005920 <DMA_List_Init+0x160>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6a      	ldr	r2, [pc, #424]	@ (8005a30 <DMA_List_Init+0x270>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04a      	beq.n	8005920 <DMA_List_Init+0x160>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a69      	ldr	r2, [pc, #420]	@ (8005a34 <DMA_List_Init+0x274>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d045      	beq.n	8005920 <DMA_List_Init+0x160>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a67      	ldr	r2, [pc, #412]	@ (8005a38 <DMA_List_Init+0x278>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d040      	beq.n	8005920 <DMA_List_Init+0x160>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a66      	ldr	r2, [pc, #408]	@ (8005a3c <DMA_List_Init+0x27c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d03b      	beq.n	8005920 <DMA_List_Init+0x160>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a64      	ldr	r2, [pc, #400]	@ (8005a40 <DMA_List_Init+0x280>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d036      	beq.n	8005920 <DMA_List_Init+0x160>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a63      	ldr	r2, [pc, #396]	@ (8005a44 <DMA_List_Init+0x284>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d031      	beq.n	8005920 <DMA_List_Init+0x160>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a61      	ldr	r2, [pc, #388]	@ (8005a48 <DMA_List_Init+0x288>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02c      	beq.n	8005920 <DMA_List_Init+0x160>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a60      	ldr	r2, [pc, #384]	@ (8005a4c <DMA_List_Init+0x28c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d027      	beq.n	8005920 <DMA_List_Init+0x160>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005a50 <DMA_List_Init+0x290>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <DMA_List_Init+0x160>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a5d      	ldr	r2, [pc, #372]	@ (8005a54 <DMA_List_Init+0x294>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d01d      	beq.n	8005920 <DMA_List_Init+0x160>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005a58 <DMA_List_Init+0x298>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <DMA_List_Init+0x160>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a5a      	ldr	r2, [pc, #360]	@ (8005a5c <DMA_List_Init+0x29c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <DMA_List_Init+0x160>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a58      	ldr	r2, [pc, #352]	@ (8005a60 <DMA_List_Init+0x2a0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <DMA_List_Init+0x160>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a57      	ldr	r2, [pc, #348]	@ (8005a64 <DMA_List_Init+0x2a4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <DMA_List_Init+0x160>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a55      	ldr	r2, [pc, #340]	@ (8005a68 <DMA_List_Init+0x2a8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <DMA_List_Init+0x160>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a54      	ldr	r2, [pc, #336]	@ (8005a6c <DMA_List_Init+0x2ac>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d101      	bne.n	8005924 <DMA_List_Init+0x164>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <DMA_List_Init+0x166>
 8005924:	2300      	movs	r3, #0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	430a      	orrs	r2, r1
 8005946:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2200      	movs	r2, #0
 800594e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005958:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a36      	ldr	r2, [pc, #216]	@ (8005a50 <DMA_List_Init+0x290>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <DMA_List_Init+0x202>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a34      	ldr	r2, [pc, #208]	@ (8005a54 <DMA_List_Init+0x294>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <DMA_List_Init+0x202>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a33      	ldr	r2, [pc, #204]	@ (8005a58 <DMA_List_Init+0x298>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <DMA_List_Init+0x202>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a31      	ldr	r2, [pc, #196]	@ (8005a5c <DMA_List_Init+0x29c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <DMA_List_Init+0x202>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a30      	ldr	r2, [pc, #192]	@ (8005a60 <DMA_List_Init+0x2a0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <DMA_List_Init+0x202>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a64 <DMA_List_Init+0x2a4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <DMA_List_Init+0x202>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005a68 <DMA_List_Init+0x2a8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <DMA_List_Init+0x202>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	@ (8005a6c <DMA_List_Init+0x2ac>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <DMA_List_Init+0x206>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <DMA_List_Init+0x208>
 80059c6:	2300      	movs	r3, #0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2200      	movs	r2, #0
 80059d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2200      	movs	r2, #0
 80059da:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40020050 	.word	0x40020050
 80059f4:	50020050 	.word	0x50020050
 80059f8:	400200d0 	.word	0x400200d0
 80059fc:	500200d0 	.word	0x500200d0
 8005a00:	40020150 	.word	0x40020150
 8005a04:	50020150 	.word	0x50020150
 8005a08:	400201d0 	.word	0x400201d0
 8005a0c:	500201d0 	.word	0x500201d0
 8005a10:	40020250 	.word	0x40020250
 8005a14:	50020250 	.word	0x50020250
 8005a18:	400202d0 	.word	0x400202d0
 8005a1c:	500202d0 	.word	0x500202d0
 8005a20:	40020350 	.word	0x40020350
 8005a24:	50020350 	.word	0x50020350
 8005a28:	400203d0 	.word	0x400203d0
 8005a2c:	500203d0 	.word	0x500203d0
 8005a30:	40020450 	.word	0x40020450
 8005a34:	50020450 	.word	0x50020450
 8005a38:	400204d0 	.word	0x400204d0
 8005a3c:	500204d0 	.word	0x500204d0
 8005a40:	40020550 	.word	0x40020550
 8005a44:	50020550 	.word	0x50020550
 8005a48:	400205d0 	.word	0x400205d0
 8005a4c:	500205d0 	.word	0x500205d0
 8005a50:	40020650 	.word	0x40020650
 8005a54:	50020650 	.word	0x50020650
 8005a58:	400206d0 	.word	0x400206d0
 8005a5c:	500206d0 	.word	0x500206d0
 8005a60:	40020750 	.word	0x40020750
 8005a64:	50020750 	.word	0x50020750
 8005a68:	400207d0 	.word	0x400207d0
 8005a6c:	500207d0 	.word	0x500207d0

08005a70 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005a82:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005a88:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005a8e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005a94:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d017      	beq.n	8005ad6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	051b      	lsls	r3, r3, #20
 8005abc:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005ac0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005ace:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	f240 237f 	movw	r3, #639	@ 0x27f
 8005ae2:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af2:	d10c      	bne.n	8005b0e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d011      	beq.n	8005b24 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
 8005b0c:	e00a      	b.n	8005b24 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b16:	d105      	bne.n	8005b24 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00f      	beq.n	8005b4c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b38:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005b44:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005b46:	431a      	orrs	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04e      	beq.n	8005c00 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	0419      	lsls	r1, r3, #16
 8005b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d18 <DMA_List_BuildNode+0x2a8>)
 8005b70:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005b72:	431a      	orrs	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	da06      	bge.n	8005b8e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	e005      	b.n	8005b9a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da06      	bge.n	8005bb0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	609a      	str	r2, [r3, #8]
 8005bae:	e005      	b.n	8005bbc <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da06      	bge.n	8005bd2 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	e005      	b.n	8005bde <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	da06      	bge.n	8005bf4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	e005      	b.n	8005c00 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d05d      	beq.n	8005cd8 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	da09      	bge.n	8005c38 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c28:	425b      	negs	r3, r3
 8005c2a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	615a      	str	r2, [r3, #20]
 8005c36:	e005      	b.n	8005c44 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da0d      	bge.n	8005c68 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c50:	425b      	negs	r3, r3
 8005c52:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	0419      	lsls	r1, r3, #16
 8005c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005d1c <DMA_List_BuildNode+0x2ac>)
 8005c5e:	400b      	ands	r3, r1
 8005c60:	431a      	orrs	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	615a      	str	r2, [r3, #20]
 8005c66:	e009      	b.n	8005c7c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c70:	0419      	lsls	r1, r3, #16
 8005c72:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <DMA_List_BuildNode+0x2ac>)
 8005c74:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005c76:	431a      	orrs	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	da08      	bge.n	8005c96 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c88:	425b      	negs	r3, r3
 8005c8a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	619a      	str	r2, [r3, #24]
 8005c94:	e004      	b.n	8005ca0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da0b      	bge.n	8005cc0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cac:	425b      	negs	r3, r3
 8005cae:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	619a      	str	r2, [r3, #24]
 8005cbe:	e007      	b.n	8005cd0 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	61da      	str	r2, [r3, #28]
 8005cd6:	e002      	b.n	8005cde <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d006      	beq.n	8005d00 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005cfe:	e005      	b.n	8005d0c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	07ff0000 	.word	0x07ff0000
 8005d1c:	1fff0000 	.word	0x1fff0000

08005d20 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0208 	and.w	r2, r3, #8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0203 	and.w	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8005d68:	091b      	lsrs	r3, r3, #4
 8005d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d6e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8005d78:	0d1b      	lsrs	r3, r3, #20
 8005d7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d7e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b66      	ldr	r3, [pc, #408]	@ (8005f30 <DMA_List_GetNodeConfig+0x210>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dba:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e013      	b.n	8005dee <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d004      	beq.n	8005de8 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005de4:	60da      	str	r2, [r3, #12]
 8005de6:	e002      	b.n	8005dee <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	0c1b      	lsrs	r3, r3, #16
 8005e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e4c:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005e52:	e002      	b.n	8005e5a <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d04a      	beq.n	8005f0c <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e80:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8005e82:	89fa      	ldrh	r2, [r7, #14]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e94:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8005e96:	89fa      	ldrh	r2, [r7, #14]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eac:	425a      	negs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d004      	beq.n	8005ec8 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec2:	425a      	negs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8005ece:	89fa      	ldrh	r2, [r7, #14]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	0c1b      	lsrs	r3, r3, #16
 8005eda:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8005edc:	89fa      	ldrh	r2, [r7, #14]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef2:	425a      	negs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da11      	bge.n	8005f24 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f04:	425a      	negs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8005f0a:	e00b      	b.n	8005f24 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	0c002000 	.word	0x0c002000

08005f34 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e00a      	b.n	8005f76 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e004      	b.n	8005f76 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d001      	beq.n	8005f86 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d004      	beq.n	8005fb4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e00e      	b.n	8005fd2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e006      	b.n	8005fd2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e00b      	b.n	8006000 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d001      	beq.n	8005ffe <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e000      	b.n	8006000 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00c      	beq.n	800603e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a0d      	ldr	r2, [pc, #52]	@ (8006064 <DMA_List_GetCLLRNodeInfo+0x58>)
 800602e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00f      	beq.n	8006056 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2207      	movs	r2, #7
 800603a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800603c:	e00b      	b.n	8006056 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a08      	ldr	r2, [pc, #32]	@ (8006068 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006048:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2205      	movs	r2, #5
 8006054:	601a      	str	r2, [r3, #0]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	fe010000 	.word	0xfe010000
 8006068:	f8010000 	.word	0xf8010000

0800606c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	@ 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d142      	bne.n	8006116 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8006090:	e01d      	b.n	80060ce <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e00f      	b.n	80060c8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4413      	add	r3, r2
 80060b8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80060c0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80060c4:	4013      	ands	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	3301      	adds	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3dc      	bcc.n	8006092 <DMA_List_FindNode+0x26>
 80060d8:	e029      	b.n	800612e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d107      	bne.n	80060f0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	e00f      	b.n	8006110 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4413      	add	r3, r2
 8006100:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006108:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	3301      	adds	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	429a      	cmp	r2, r3
 800611e:	d206      	bcs.n	800612e <DMA_List_FindNode+0xc2>
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006126:	4013      	ands	r3, r2
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	429a      	cmp	r2, r3
 800612c:	d1d5      	bne.n	80060da <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800613a:	4013      	ands	r3, r2
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	429a      	cmp	r2, r3
 8006140:	d001      	beq.n	8006146 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8006142:	2301      	movs	r3, #1
 8006144:	e02b      	b.n	800619e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	0c1b      	lsrs	r3, r3, #16
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	461a      	mov	r2, r3
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00f      	beq.n	800619c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	461a      	mov	r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006188:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800618c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	0c1b      	lsrs	r3, r3, #16
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3724      	adds	r7, #36	@ 0x24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b089      	sub	sp, #36	@ 0x24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80061be:	e1ba      	b.n	8006536 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	2101      	movs	r1, #1
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa01 f303 	lsl.w	r3, r1, r3
 80061cc:	4013      	ands	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 81aa 	beq.w	8006530 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a55      	ldr	r2, [pc, #340]	@ (8006334 <HAL_GPIO_Init+0x188>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d15d      	bne.n	80062a0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80061ea:	2201      	movs	r2, #1
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	4013      	ands	r3, r2
 80061f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 0201 	and.w	r2, r3, #1
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	4313      	orrs	r3, r2
 800620c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8006214:	4a48      	ldr	r2, [pc, #288]	@ (8006338 <HAL_GPIO_Init+0x18c>)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800621c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800621e:	4a46      	ldr	r2, [pc, #280]	@ (8006338 <HAL_GPIO_Init+0x18c>)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4413      	add	r3, r2
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	08da      	lsrs	r2, r3, #3
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	3208      	adds	r2, #8
 8006232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006236:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	220f      	movs	r2, #15
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	4013      	ands	r3, r2
 800624c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	220b      	movs	r2, #11
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	4313      	orrs	r3, r2
 8006260:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	08da      	lsrs	r2, r3, #3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	3208      	adds	r2, #8
 800626a:	69f9      	ldr	r1, [r7, #28]
 800626c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	2203      	movs	r2, #3
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	4013      	ands	r3, r2
 8006286:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	2202      	movs	r2, #2
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	4313      	orrs	r3, r2
 8006296:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e067      	b.n	8006370 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d003      	beq.n	80062b0 <HAL_GPIO_Init+0x104>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b12      	cmp	r3, #18
 80062ae:	d145      	bne.n	800633c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	08da      	lsrs	r2, r3, #3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3208      	adds	r2, #8
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	220f      	movs	r2, #15
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	08da      	lsrs	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3208      	adds	r2, #8
 80062f6:	69f9      	ldr	r1, [r7, #28]
 80062f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	2203      	movs	r2, #3
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	43db      	mvns	r3, r3
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	4013      	ands	r3, r2
 8006312:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0203 	and.w	r2, r3, #3
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	4313      	orrs	r3, r2
 8006328:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e01e      	b.n	8006370 <HAL_GPIO_Init+0x1c4>
 8006332:	bf00      	nop
 8006334:	46020000 	.word	0x46020000
 8006338:	08010518 	.word	0x08010518
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	2203      	movs	r2, #3
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	43db      	mvns	r3, r3
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	4013      	ands	r3, r2
 8006352:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f003 0203 	and.w	r2, r3, #3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	4313      	orrs	r3, r2
 8006368:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d00b      	beq.n	8006390 <HAL_GPIO_Init+0x1e4>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d007      	beq.n	8006390 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006384:	2b11      	cmp	r3, #17
 8006386:	d003      	beq.n	8006390 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b12      	cmp	r3, #18
 800638e:	d130      	bne.n	80063f2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	2203      	movs	r2, #3
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	43db      	mvns	r3, r3
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	4013      	ands	r3, r2
 80063a6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80063c6:	2201      	movs	r2, #1
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	43db      	mvns	r3, r3
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	4013      	ands	r3, r2
 80063d4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	f003 0201 	and.w	r2, r3, #1
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d017      	beq.n	800642a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	2203      	movs	r2, #3
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	43db      	mvns	r3, r3
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	4013      	ands	r3, r2
 8006410:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	4313      	orrs	r3, r2
 8006422:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d07c      	beq.n	8006530 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006436:	4a47      	ldr	r2, [pc, #284]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	089b      	lsrs	r3, r3, #2
 800643c:	3318      	adds	r3, #24
 800643e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006442:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	220f      	movs	r2, #15
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	43db      	mvns	r3, r3
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	4013      	ands	r3, r2
 8006458:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	0a9a      	lsrs	r2, r3, #10
 800645e:	4b3e      	ldr	r3, [pc, #248]	@ (8006558 <HAL_GPIO_Init+0x3ac>)
 8006460:	4013      	ands	r3, r2
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	f002 0203 	and.w	r2, r2, #3
 8006468:	00d2      	lsls	r2, r2, #3
 800646a:	4093      	lsls	r3, r2
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	4313      	orrs	r3, r2
 8006470:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006472:	4938      	ldr	r1, [pc, #224]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	3318      	adds	r3, #24
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006480:	4b34      	ldr	r3, [pc, #208]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	43db      	mvns	r3, r3
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	4013      	ands	r3, r2
 800648e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80064a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80064aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	43db      	mvns	r3, r3
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	4013      	ands	r3, r2
 80064b8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80064ce:	4a21      	ldr	r2, [pc, #132]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80064d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 80064d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	43db      	mvns	r3, r3
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	4013      	ands	r3, r2
 80064e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80064fa:	4a16      	ldr	r2, [pc, #88]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8006502:	4b14      	ldr	r3, [pc, #80]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 8006504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006508:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	43db      	mvns	r3, r3
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	4013      	ands	r3, r2
 8006512:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8006528:	4a0a      	ldr	r2, [pc, #40]	@ (8006554 <HAL_GPIO_Init+0x3a8>)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3301      	adds	r3, #1
 8006534:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	f47f ae3d 	bne.w	80061c0 <HAL_GPIO_Init+0x14>
  }
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	3724      	adds	r7, #36	@ 0x24
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	46022000 	.word	0x46022000
 8006558:	002f7f7f 	.word	0x002f7f7f

0800655c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	807b      	strh	r3, [r7, #2]
 8006568:	4613      	mov	r3, r2
 800656a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800656c:	787b      	ldrb	r3, [r7, #1]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006572:	887a      	ldrh	r2, [r7, #2]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006578:	e002      	b.n	8006580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800657a:	887a      	ldrh	r2, [r7, #2]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006598:	4b0b      	ldr	r3, [pc, #44]	@ (80065c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	73fb      	strb	r3, [r7, #15]
 80065a8:	e007      	b.n	80065ba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80065aa:	4b07      	ldr	r3, [pc, #28]	@ (80065c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f023 0204 	bic.w	r2, r3, #4
 80065b2:	4905      	ldr	r1, [pc, #20]	@ (80065c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	40030400 	.word	0x40030400

080065cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_ICACHE_Enable+0x1c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a04      	ldr	r2, [pc, #16]	@ (80065e8 <HAL_ICACHE_Enable+0x1c>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40030400 	.word	0x40030400

080065ec <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0e7      	b.n	80067ce <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fa fd33 	bl	8001084 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0201 	orr.w	r2, r2, #1
 8006634:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800663e:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006648:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800664a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f962 	bl	8006918 <LPTIM_WaitForFlag>
 8006654:	4603      	mov	r3, r0
 8006656:	2b03      	cmp	r3, #3
 8006658:	d101      	bne.n	800665e <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e0b7      	b.n	80067ce <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2210      	movs	r2, #16
 8006664:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6a12      	ldr	r2, [r2, #32]
 800666e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006670:	2110      	movs	r1, #16
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f950 	bl	8006918 <LPTIM_WaitForFlag>
 8006678:	4603      	mov	r3, r0
 800667a:	2b03      	cmp	r3, #3
 800667c:	d101      	bne.n	8006682 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e0a5      	b.n	80067ce <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10e      	bne.n	80066ae <HAL_LPTIM_Init+0xc2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d107      	bne.n	80066ae <HAL_LPTIM_Init+0xc2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d004      	beq.n	80066c8 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066c6:	d103      	bne.n	80066d0 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 031e 	bic.w	r3, r3, #30
 80066ce:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80066d8:	4293      	cmp	r3, r2
 80066da:	d005      	beq.n	80066e8 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80066e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4b3b      	ldr	r3, [pc, #236]	@ (80067d8 <HAL_LPTIM_Init+0x1ec>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80066f8:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 80066fe:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8006704:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d107      	bne.n	8006724 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800671c:	4313      	orrs	r3, r2
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d004      	beq.n	8006736 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006734:	d107      	bne.n	8006746 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800673e:	4313      	orrs	r3, r2
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800674e:	4293      	cmp	r3, r2
 8006750:	d00a      	beq.n	8006768 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800675a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006760:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a19      	ldr	r2, [pc, #100]	@ (80067dc <HAL_LPTIM_Init+0x1f0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_LPTIM_Init+0x198>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <HAL_LPTIM_Init+0x1f4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	625a      	str	r2, [r3, #36]	@ 0x24
 8006794:	e00e      	b.n	80067b4 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a12      	ldr	r2, [pc, #72]	@ (80067e4 <HAL_LPTIM_Init+0x1f8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_LPTIM_Init+0x1be>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a10      	ldr	r2, [pc, #64]	@ (80067e8 <HAL_LPTIM_Init+0x1fc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d104      	bne.n	80067b4 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067b2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	ff39f1fe 	.word	0xff39f1fe
 80067dc:	46004400 	.word	0x46004400
 80067e0:	40009400 	.word	0x40009400
 80067e4:	46004800 	.word	0x46004800
 80067e8:	46004c00 	.word	0x46004c00

080067ec <HAL_LPTIM_IC_Start>:
  *            @arg LPTIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_IC_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INPUT_CAPTURE_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <HAL_LPTIM_IC_Start+0x24>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e008      	b.n	8006822 <HAL_LPTIM_IC_Start+0x36>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	bf14      	ite	ne
 800681c:	2301      	movne	r3, #1
 800681e:	2300      	moveq	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_LPTIM_IC_Start+0x3e>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e03c      	b.n	80068a4 <HAL_LPTIM_IC_Start+0xb8>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_LPTIM_IC_Start+0x56>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8006840:	e003      	b.n	800684a <HAL_LPTIM_IC_Start+0x5e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0201 	orr.w	r2, r2, #1
 8006858:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0204 	orr.w	r2, r2, #4
 8006868:	611a      	str	r2, [r3, #16]

  /* Enable capture */
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_LPTIM_IC_Start+0x8c>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d009      	beq.n	800688a <HAL_LPTIM_IC_Start+0x9e>
 8006876:	e010      	b.n	800689a <HAL_LPTIM_IC_Start+0xae>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0202 	orr.w	r2, r2, #2
 8006886:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006888:	e007      	b.n	800689a <HAL_LPTIM_IC_Start+0xae>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006898:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_LPTIM_OC_ConfigChannel+0x22>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d00b      	beq.n	80068e8 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 80068d0:	e018      	b.n	8006904 <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f84f 	bl	8006978 <LPTIM_OC1_SetConfig>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00c      	beq.n	80068fe <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
 80068e6:	e012      	b.n	800690e <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f8aa 	bl	8006a44 <LPTIM_OC2_SetConfig>
 80068f0:	4603      	mov	r3, r0
 80068f2:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	e007      	b.n	800690e <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 8006902:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006926:	4b12      	ldr	r3, [pc, #72]	@ (8006970 <LPTIM_WaitForFlag+0x58>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a12      	ldr	r2, [pc, #72]	@ (8006974 <LPTIM_WaitForFlag+0x5c>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	0b9b      	lsrs	r3, r3, #14
 8006932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3b01      	subs	r3, #1
 8006940:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	4013      	ands	r3, r2
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d002      	beq.n	8006962 <LPTIM_WaitForFlag+0x4a>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1ec      	bne.n	800693c <LPTIM_WaitForFlag+0x24>

  return result;
 8006962:	7bfb      	ldrb	r3, [r7, #15]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	20000000 	.word	0x20000000
 8006974:	d1b71759 	.word	0xd1b71759

08006978 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 030d 	bic.w	r3, r3, #13
 8006990:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2a      	ldr	r2, [pc, #168]	@ (8006a40 <LPTIM_OC1_SetConfig+0xc8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d112      	bne.n	80069c2 <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069aa:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	055b      	lsls	r3, r3, #21
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	60da      	str	r2, [r3, #12]
 80069c0:	e005      	b.n	80069ce <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 80069f0:	2108      	movs	r1, #8
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff ff90 	bl	8006918 <LPTIM_WaitForFlag>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d101      	bne.n	8006a02 <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e01a      	b.n	8006a38 <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10e      	bne.n	8006a2e <LPTIM_OC1_SetConfig+0xb6>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d107      	bne.n	8006a2e <LPTIM_OC1_SetConfig+0xb6>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	46004c00 	.word	0x46004c00

08006a44 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8006a5c:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	049b      	lsls	r3, r3, #18
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 8006a8e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ff40 	bl	8006918 <LPTIM_WaitForFlag>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e01a      	b.n	8006ad8 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10e      	bne.n	8006ace <LPTIM_OC2_SetConfig+0x8a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <LPTIM_OC2_SetConfig+0x8a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006ae8:	4b39      	ldr	r3, [pc, #228]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006af0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d10b      	bne.n	8006b12 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b00:	d905      	bls.n	8006b0e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006b02:	4b33      	ldr	r3, [pc, #204]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4a32      	ldr	r2, [pc, #200]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b0c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e057      	b.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b18:	d90a      	bls.n	8006b30 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	4a2a      	ldr	r2, [pc, #168]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b2c:	60d3      	str	r3, [r2, #12]
 8006b2e:	e007      	b.n	8006b40 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006b30:	4b27      	ldr	r3, [pc, #156]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006b38:	4925      	ldr	r1, [pc, #148]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006b40:	4b24      	ldr	r3, [pc, #144]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a24      	ldr	r2, [pc, #144]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	099b      	lsrs	r3, r3, #6
 8006b4c:	2232      	movs	r2, #50	@ 0x32
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	4a21      	ldr	r2, [pc, #132]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	099b      	lsrs	r3, r3, #6
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006b5e:	e002      	b.n	8006b66 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006b66:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f3      	bne.n	8006b60 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01b      	beq.n	8006bb6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006b7e:	4b15      	ldr	r3, [pc, #84]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a15      	ldr	r2, [pc, #84]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b84:	fba2 2303 	umull	r2, r3, r2, r3
 8006b88:	099b      	lsrs	r3, r3, #6
 8006b8a:	2232      	movs	r2, #50	@ 0x32
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	4a11      	ldr	r2, [pc, #68]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	099b      	lsrs	r3, r3, #6
 8006b98:	3301      	adds	r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006b9c:	e002      	b.n	8006ba4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f3      	bne.n	8006b9e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e000      	b.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	46020800 	.word	0x46020800
 8006bd4:	20000000 	.word	0x20000000
 8006bd8:	10624dd3 	.word	0x10624dd3

08006bdc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006be0:	4b04      	ldr	r3, [pc, #16]	@ (8006bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	46020800 	.word	0x46020800

08006bf8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8006bfc:	4b05      	ldr	r3, [pc, #20]	@ (8006c14 <HAL_PWREx_EnableVddA+0x1c>)
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	4a04      	ldr	r2, [pc, #16]	@ (8006c14 <HAL_PWREx_EnableVddA+0x1c>)
 8006c02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c06:	6113      	str	r3, [r2, #16]
}
 8006c08:	bf00      	nop
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	46020800 	.word	0x46020800

08006c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	@ 0x38
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f000 bec8 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c32:	4b99      	ldr	r3, [pc, #612]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c3c:	4b96      	ldr	r3, [pc, #600]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 816c 	beq.w	8006f2c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_RCC_OscConfig+0x52>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2b0c      	cmp	r3, #12
 8006c5e:	f040 80de 	bne.w	8006e1e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	f040 80da 	bne.w	8006e1e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d102      	bne.n	8006c78 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f000 bea5 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c7c:	4b86      	ldr	r3, [pc, #536]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <HAL_RCC_OscConfig+0x7a>
 8006c88:	4b83      	ldr	r3, [pc, #524]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c90:	e005      	b.n	8006c9e <HAL_RCC_OscConfig+0x86>
 8006c92:	4b81      	ldr	r3, [pc, #516]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d255      	bcs.n	8006d4e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f9d9 	bl	8008064 <RCC_SetFlashLatencyFromMSIRange>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f000 be82 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006cbe:	4b76      	ldr	r3, [pc, #472]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	4a75      	ldr	r2, [pc, #468]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006cc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cc8:	6093      	str	r3, [r2, #8]
 8006cca:	4b73      	ldr	r3, [pc, #460]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	4970      	ldr	r1, [pc, #448]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006ce4:	d309      	bcc.n	8006cfa <HAL_RCC_OscConfig+0xe2>
 8006ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f023 021f 	bic.w	r2, r3, #31
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	4969      	ldr	r1, [pc, #420]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60cb      	str	r3, [r1, #12]
 8006cf8:	e07e      	b.n	8006df8 <HAL_RCC_OscConfig+0x1e0>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da0a      	bge.n	8006d18 <HAL_RCC_OscConfig+0x100>
 8006d02:	4b65      	ldr	r3, [pc, #404]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	015b      	lsls	r3, r3, #5
 8006d10:	4961      	ldr	r1, [pc, #388]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60cb      	str	r3, [r1, #12]
 8006d16:	e06f      	b.n	8006df8 <HAL_RCC_OscConfig+0x1e0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d20:	d30a      	bcc.n	8006d38 <HAL_RCC_OscConfig+0x120>
 8006d22:	4b5d      	ldr	r3, [pc, #372]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	029b      	lsls	r3, r3, #10
 8006d30:	4959      	ldr	r1, [pc, #356]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60cb      	str	r3, [r1, #12]
 8006d36:	e05f      	b.n	8006df8 <HAL_RCC_OscConfig+0x1e0>
 8006d38:	4b57      	ldr	r3, [pc, #348]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	03db      	lsls	r3, r3, #15
 8006d46:	4954      	ldr	r1, [pc, #336]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60cb      	str	r3, [r1, #12]
 8006d4c:	e054      	b.n	8006df8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006d4e:	4b52      	ldr	r3, [pc, #328]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4a51      	ldr	r2, [pc, #324]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d58:	6093      	str	r3, [r2, #8]
 8006d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d66:	494c      	ldr	r1, [pc, #304]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006d74:	d309      	bcc.n	8006d8a <HAL_RCC_OscConfig+0x172>
 8006d76:	4b48      	ldr	r3, [pc, #288]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f023 021f 	bic.w	r2, r3, #31
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	4945      	ldr	r1, [pc, #276]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60cb      	str	r3, [r1, #12]
 8006d88:	e028      	b.n	8006ddc <HAL_RCC_OscConfig+0x1c4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da0a      	bge.n	8006da8 <HAL_RCC_OscConfig+0x190>
 8006d92:	4b41      	ldr	r3, [pc, #260]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	493d      	ldr	r1, [pc, #244]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60cb      	str	r3, [r1, #12]
 8006da6:	e019      	b.n	8006ddc <HAL_RCC_OscConfig+0x1c4>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db0:	d30a      	bcc.n	8006dc8 <HAL_RCC_OscConfig+0x1b0>
 8006db2:	4b39      	ldr	r3, [pc, #228]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	4935      	ldr	r1, [pc, #212]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60cb      	str	r3, [r1, #12]
 8006dc6:	e009      	b.n	8006ddc <HAL_RCC_OscConfig+0x1c4>
 8006dc8:	4b33      	ldr	r3, [pc, #204]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	03db      	lsls	r3, r3, #15
 8006dd6:	4930      	ldr	r1, [pc, #192]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 f93c 	bl	8008064 <RCC_SetFlashLatencyFromMSIRange>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f000 bde5 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006df8:	f001 f8de 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006dfc:	4b27      	ldr	r3, [pc, #156]	@ (8006e9c <HAL_RCC_OscConfig+0x284>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fb f9a3 	bl	800214c <HAL_InitTick>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 808a 	beq.w	8006f2a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e1a:	f000 bdd2 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d066      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006e26:	4b1c      	ldr	r3, [pc, #112]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006e32:	f7fb fa15 	bl	8002260 <HAL_GetTick>
 8006e36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006e38:	e009      	b.n	8006e4e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e3a:	f7fb fa11 	bl	8002260 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d902      	bls.n	8006e4e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	f000 bdba 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0ef      	beq.n	8006e3a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e64:	6093      	str	r3, [r2, #8]
 8006e66:	4b0c      	ldr	r3, [pc, #48]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	4909      	ldr	r1, [pc, #36]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006e80:	d30e      	bcc.n	8006ea0 <HAL_RCC_OscConfig+0x288>
 8006e82:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f023 021f 	bic.w	r2, r3, #31
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	4902      	ldr	r1, [pc, #8]	@ (8006e98 <HAL_RCC_OscConfig+0x280>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60cb      	str	r3, [r1, #12]
 8006e94:	e04a      	b.n	8006f2c <HAL_RCC_OscConfig+0x314>
 8006e96:	bf00      	nop
 8006e98:	46020c00 	.word	0x46020c00
 8006e9c:	20000004 	.word	0x20000004
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	da0a      	bge.n	8006ebe <HAL_RCC_OscConfig+0x2a6>
 8006ea8:	4b98      	ldr	r3, [pc, #608]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	015b      	lsls	r3, r3, #5
 8006eb6:	4995      	ldr	r1, [pc, #596]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60cb      	str	r3, [r1, #12]
 8006ebc:	e036      	b.n	8006f2c <HAL_RCC_OscConfig+0x314>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec6:	d30a      	bcc.n	8006ede <HAL_RCC_OscConfig+0x2c6>
 8006ec8:	4b90      	ldr	r3, [pc, #576]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	498d      	ldr	r1, [pc, #564]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60cb      	str	r3, [r1, #12]
 8006edc:	e026      	b.n	8006f2c <HAL_RCC_OscConfig+0x314>
 8006ede:	4b8b      	ldr	r3, [pc, #556]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	03db      	lsls	r3, r3, #15
 8006eec:	4987      	ldr	r1, [pc, #540]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60cb      	str	r3, [r1, #12]
 8006ef2:	e01b      	b.n	8006f2c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006ef4:	4b85      	ldr	r3, [pc, #532]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a84      	ldr	r2, [pc, #528]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006f00:	f7fb f9ae 	bl	8002260 <HAL_GetTick>
 8006f04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006f06:	e009      	b.n	8006f1c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f08:	f7fb f9aa 	bl	8002260 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d902      	bls.n	8006f1c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	f000 bd53 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ef      	bne.n	8006f08 <HAL_RCC_OscConfig+0x2f0>
 8006f28:	e000      	b.n	8006f2c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 808b 	beq.w	8007050 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_OscConfig+0x334>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	2b0c      	cmp	r3, #12
 8006f44:	d109      	bne.n	8006f5a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d106      	bne.n	8006f5a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d17d      	bne.n	8007050 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f000 bd34 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f62:	d106      	bne.n	8006f72 <HAL_RCC_OscConfig+0x35a>
 8006f64:	4b69      	ldr	r3, [pc, #420]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a68      	ldr	r2, [pc, #416]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e041      	b.n	8006ff6 <HAL_RCC_OscConfig+0x3de>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f7a:	d112      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x38a>
 8006f7c:	4b63      	ldr	r3, [pc, #396]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a62      	ldr	r2, [pc, #392]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	4b60      	ldr	r3, [pc, #384]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	4b5d      	ldr	r3, [pc, #372]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a5c      	ldr	r2, [pc, #368]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e029      	b.n	8006ff6 <HAL_RCC_OscConfig+0x3de>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006faa:	d112      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x3ba>
 8006fac:	4b57      	ldr	r3, [pc, #348]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a56      	ldr	r2, [pc, #344]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	4b54      	ldr	r3, [pc, #336]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a53      	ldr	r2, [pc, #332]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	4b51      	ldr	r3, [pc, #324]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a50      	ldr	r2, [pc, #320]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	e011      	b.n	8006ff6 <HAL_RCC_OscConfig+0x3de>
 8006fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	4b4b      	ldr	r3, [pc, #300]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4b48      	ldr	r3, [pc, #288]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a47      	ldr	r2, [pc, #284]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8006ff0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ff4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d014      	beq.n	8007028 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006ffe:	f7fb f92f 	bl	8002260 <HAL_GetTick>
 8007002:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007004:	e009      	b.n	800701a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007006:	f7fb f92b 	bl	8002260 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b64      	cmp	r3, #100	@ 0x64
 8007012:	d902      	bls.n	800701a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	f000 bcd4 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800701a:	4b3c      	ldr	r3, [pc, #240]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0ef      	beq.n	8007006 <HAL_RCC_OscConfig+0x3ee>
 8007026:	e013      	b.n	8007050 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007028:	f7fb f91a 	bl	8002260 <HAL_GetTick>
 800702c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800702e:	e009      	b.n	8007044 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007030:	f7fb f916 	bl	8002260 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b64      	cmp	r3, #100	@ 0x64
 800703c:	d902      	bls.n	8007044 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	f000 bcbf 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007044:	4b31      	ldr	r3, [pc, #196]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1ef      	bne.n	8007030 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d05f      	beq.n	800711c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	2b04      	cmp	r3, #4
 8007060:	d005      	beq.n	800706e <HAL_RCC_OscConfig+0x456>
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	2b0c      	cmp	r3, #12
 8007066:	d114      	bne.n	8007092 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	2b02      	cmp	r3, #2
 800706c:	d111      	bne.n	8007092 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f000 bca3 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800707c:	4b23      	ldr	r3, [pc, #140]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	041b      	lsls	r3, r3, #16
 800708a:	4920      	ldr	r1, [pc, #128]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 800708c:	4313      	orrs	r3, r2
 800708e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007090:	e044      	b.n	800711c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d024      	beq.n	80070e4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800709a:	4b1c      	ldr	r3, [pc, #112]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1b      	ldr	r2, [pc, #108]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 80070a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070a6:	f7fb f8db 	bl	8002260 <HAL_GetTick>
 80070aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ac:	e009      	b.n	80070c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ae:	f7fb f8d7 	bl	8002260 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d902      	bls.n	80070c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	f000 bc80 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070c2:	4b12      	ldr	r3, [pc, #72]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0ef      	beq.n	80070ae <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80070ce:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	041b      	lsls	r3, r3, #16
 80070dc:	490b      	ldr	r1, [pc, #44]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	610b      	str	r3, [r1, #16]
 80070e2:	e01b      	b.n	800711c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80070e4:	4b09      	ldr	r3, [pc, #36]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a08      	ldr	r2, [pc, #32]	@ (800710c <HAL_RCC_OscConfig+0x4f4>)
 80070ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070f0:	f7fb f8b6 	bl	8002260 <HAL_GetTick>
 80070f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070f6:	e00b      	b.n	8007110 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f8:	f7fb f8b2 	bl	8002260 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d904      	bls.n	8007110 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	f000 bc5b 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
 800710c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007110:	4baf      	ldr	r3, [pc, #700]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1ed      	bne.n	80070f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 80c8 	beq.w	80072ba <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800712a:	2300      	movs	r3, #0
 800712c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007130:	4ba7      	ldr	r3, [pc, #668]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d111      	bne.n	8007162 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800713e:	4ba4      	ldr	r3, [pc, #656]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007144:	4aa2      	ldr	r2, [pc, #648]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007146:	f043 0304 	orr.w	r3, r3, #4
 800714a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800714e:	4ba0      	ldr	r3, [pc, #640]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007162:	4b9c      	ldr	r3, [pc, #624]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 8007164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d119      	bne.n	80071a2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800716e:	4b99      	ldr	r3, [pc, #612]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	4a98      	ldr	r2, [pc, #608]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 8007174:	f043 0301 	orr.w	r3, r3, #1
 8007178:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800717a:	f7fb f871 	bl	8002260 <HAL_GetTick>
 800717e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007180:	e009      	b.n	8007196 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007182:	f7fb f86d 	bl	8002260 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d902      	bls.n	8007196 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	f000 bc16 	b.w	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007196:	4b8f      	ldr	r3, [pc, #572]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0ef      	beq.n	8007182 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d05f      	beq.n	800726a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80071aa:	4b89      	ldr	r3, [pc, #548]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80071ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071b0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071bc:	429a      	cmp	r2, r3
 80071be:	d037      	beq.n	8007230 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d006      	beq.n	80071d8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e3f4      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d01b      	beq.n	800721a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80071e2:	4b7b      	ldr	r3, [pc, #492]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80071e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071e8:	4a79      	ldr	r2, [pc, #484]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80071ea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80071ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80071f2:	f7fb f835 	bl	8002260 <HAL_GetTick>
 80071f6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071fa:	f7fb f831 	bl	8002260 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b05      	cmp	r3, #5
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e3da      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800720c:	4b70      	ldr	r3, [pc, #448]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800720e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1ef      	bne.n	80071fa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800721a:	4b6d      	ldr	r3, [pc, #436]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800721c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007220:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	4969      	ldr	r1, [pc, #420]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007230:	4b67      	ldr	r3, [pc, #412]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007236:	4a66      	ldr	r2, [pc, #408]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007238:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800723c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007240:	f7fb f80e 	bl	8002260 <HAL_GetTick>
 8007244:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007248:	f7fb f80a 	bl	8002260 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b05      	cmp	r3, #5
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e3b3      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800725a:	4b5d      	ldr	r3, [pc, #372]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800725c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0ef      	beq.n	8007248 <HAL_RCC_OscConfig+0x630>
 8007268:	e01b      	b.n	80072a2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800726a:	4b59      	ldr	r3, [pc, #356]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800726c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007270:	4a57      	ldr	r2, [pc, #348]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007272:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800727a:	f7fa fff1 	bl	8002260 <HAL_GetTick>
 800727e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007280:	e008      	b.n	8007294 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007282:	f7fa ffed 	bl	8002260 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b05      	cmp	r3, #5
 800728e:	d901      	bls.n	8007294 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e396      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007294:	4b4e      	ldr	r3, [pc, #312]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800729a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1ef      	bne.n	8007282 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d107      	bne.n	80072ba <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072aa:	4b49      	ldr	r3, [pc, #292]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80072ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072b0:	4a47      	ldr	r2, [pc, #284]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80072b2:	f023 0304 	bic.w	r3, r3, #4
 80072b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8111 	beq.w	80074ea <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ce:	4b40      	ldr	r3, [pc, #256]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80072d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d111      	bne.n	8007300 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072dc:	4b3c      	ldr	r3, [pc, #240]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80072de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072e2:	4a3b      	ldr	r2, [pc, #236]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80072e4:	f043 0304 	orr.w	r3, r3, #4
 80072e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80072ec:	4b38      	ldr	r3, [pc, #224]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80072ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007300:	4b34      	ldr	r3, [pc, #208]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 8007302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d118      	bne.n	800733e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800730c:	4b31      	ldr	r3, [pc, #196]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	4a30      	ldr	r2, [pc, #192]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007318:	f7fa ffa2 	bl	8002260 <HAL_GetTick>
 800731c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007320:	f7fa ff9e 	bl	8002260 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e347      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007332:	4b28      	ldr	r3, [pc, #160]	@ (80073d4 <HAL_RCC_OscConfig+0x7bc>)
 8007334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01f      	beq.n	800738a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d010      	beq.n	8007378 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007356:	4b1e      	ldr	r3, [pc, #120]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800735c:	4a1c      	ldr	r2, [pc, #112]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800735e:	f043 0304 	orr.w	r3, r3, #4
 8007362:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007366:	4b1a      	ldr	r3, [pc, #104]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800736c:	4a18      	ldr	r2, [pc, #96]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007376:	e018      	b.n	80073aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007378:	4b15      	ldr	r3, [pc, #84]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800737a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800737e:	4a14      	ldr	r2, [pc, #80]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007380:	f043 0301 	orr.w	r3, r3, #1
 8007384:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007388:	e00f      	b.n	80073aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800738a:	4b11      	ldr	r3, [pc, #68]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800738c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007390:	4a0f      	ldr	r2, [pc, #60]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800739a:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 800739c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073a0:	4a0b      	ldr	r2, [pc, #44]	@ (80073d0 <HAL_RCC_OscConfig+0x7b8>)
 80073a2:	f023 0304 	bic.w	r3, r3, #4
 80073a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d057      	beq.n	8007462 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80073b2:	f7fa ff55 	bl	8002260 <HAL_GetTick>
 80073b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073b8:	e00e      	b.n	80073d8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ba:	f7fa ff51 	bl	8002260 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d905      	bls.n	80073d8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e2f8      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
 80073d0:	46020c00 	.word	0x46020c00
 80073d4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d8:	4b9c      	ldr	r3, [pc, #624]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80073da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0e9      	beq.n	80073ba <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01b      	beq.n	800742a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073f2:	4b96      	ldr	r3, [pc, #600]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80073f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f8:	4a94      	ldr	r2, [pc, #592]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80073fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007402:	e00a      	b.n	800741a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fa ff2c 	bl	8002260 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e2d3      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800741a:	4b8c      	ldr	r3, [pc, #560]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800741c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0ed      	beq.n	8007404 <HAL_RCC_OscConfig+0x7ec>
 8007428:	e053      	b.n	80074d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800742a:	4b88      	ldr	r3, [pc, #544]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800742c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007430:	4a86      	ldr	r2, [pc, #536]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800743a:	e00a      	b.n	8007452 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800743c:	f7fa ff10 	bl	8002260 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e2b7      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007452:	4b7e      	ldr	r3, [pc, #504]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1ed      	bne.n	800743c <HAL_RCC_OscConfig+0x824>
 8007460:	e037      	b.n	80074d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007462:	f7fa fefd 	bl	8002260 <HAL_GetTick>
 8007466:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007468:	e00a      	b.n	8007480 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746a:	f7fa fef9 	bl	8002260 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e2a0      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007480:	4b72      	ldr	r3, [pc, #456]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1ed      	bne.n	800746a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800748e:	4b6f      	ldr	r3, [pc, #444]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01a      	beq.n	80074d2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800749c:	4b6b      	ldr	r3, [pc, #428]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800749e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074a2:	4a6a      	ldr	r2, [pc, #424]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80074a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074ac:	e00a      	b.n	80074c4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ae:	f7fa fed7 	bl	8002260 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074bc:	4293      	cmp	r3, r2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e27e      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074c4:	4b61      	ldr	r3, [pc, #388]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80074c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1ed      	bne.n	80074ae <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d107      	bne.n	80074ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074da:	4b5c      	ldr	r3, [pc, #368]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80074dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074e0:	4a5a      	ldr	r2, [pc, #360]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80074e2:	f023 0304 	bic.w	r3, r3, #4
 80074e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d036      	beq.n	8007564 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d019      	beq.n	8007532 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80074fe:	4b53      	ldr	r3, [pc, #332]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a52      	ldr	r2, [pc, #328]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007508:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800750a:	f7fa fea9 	bl	8002260 <HAL_GetTick>
 800750e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007510:	e008      	b.n	8007524 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007512:	f7fa fea5 	bl	8002260 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e24e      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007524:	4b49      	ldr	r3, [pc, #292]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f0      	beq.n	8007512 <HAL_RCC_OscConfig+0x8fa>
 8007530:	e018      	b.n	8007564 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007532:	4b46      	ldr	r3, [pc, #280]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a45      	ldr	r2, [pc, #276]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800753c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800753e:	f7fa fe8f 	bl	8002260 <HAL_GetTick>
 8007542:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007546:	f7fa fe8b 	bl	8002260 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e234      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007558:	4b3c      	ldr	r3, [pc, #240]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f0      	bne.n	8007546 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d036      	beq.n	80075de <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007574:	2b00      	cmp	r3, #0
 8007576:	d019      	beq.n	80075ac <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007578:	4b34      	ldr	r3, [pc, #208]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a33      	ldr	r2, [pc, #204]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800757e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007582:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007584:	f7fa fe6c 	bl	8002260 <HAL_GetTick>
 8007588:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800758a:	e008      	b.n	800759e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800758c:	f7fa fe68 	bl	8002260 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e211      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800759e:	4b2b      	ldr	r3, [pc, #172]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0f0      	beq.n	800758c <HAL_RCC_OscConfig+0x974>
 80075aa:	e018      	b.n	80075de <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80075ac:	4b27      	ldr	r3, [pc, #156]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a26      	ldr	r2, [pc, #152]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80075b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80075b8:	f7fa fe52 	bl	8002260 <HAL_GetTick>
 80075bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80075c0:	f7fa fe4e 	bl	8002260 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e1f7      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80075d2:	4b1e      	ldr	r3, [pc, #120]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d07f      	beq.n	80076ea <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d062      	beq.n	80076b8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80075f2:	4b16      	ldr	r3, [pc, #88]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	4a15      	ldr	r2, [pc, #84]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 80075f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075fc:	6093      	str	r3, [r2, #8]
 80075fe:	4b13      	ldr	r3, [pc, #76]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	4910      	ldr	r1, [pc, #64]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800760c:	4313      	orrs	r3, r2
 800760e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007614:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007618:	d309      	bcc.n	800762e <HAL_RCC_OscConfig+0xa16>
 800761a:	4b0c      	ldr	r3, [pc, #48]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f023 021f 	bic.w	r2, r3, #31
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	4909      	ldr	r1, [pc, #36]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007628:	4313      	orrs	r3, r2
 800762a:	60cb      	str	r3, [r1, #12]
 800762c:	e02a      	b.n	8007684 <HAL_RCC_OscConfig+0xa6c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007632:	2b00      	cmp	r3, #0
 8007634:	da0c      	bge.n	8007650 <HAL_RCC_OscConfig+0xa38>
 8007636:	4b05      	ldr	r3, [pc, #20]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	015b      	lsls	r3, r3, #5
 8007644:	4901      	ldr	r1, [pc, #4]	@ (800764c <HAL_RCC_OscConfig+0xa34>)
 8007646:	4313      	orrs	r3, r2
 8007648:	60cb      	str	r3, [r1, #12]
 800764a:	e01b      	b.n	8007684 <HAL_RCC_OscConfig+0xa6c>
 800764c:	46020c00 	.word	0x46020c00
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007658:	d30a      	bcc.n	8007670 <HAL_RCC_OscConfig+0xa58>
 800765a:	4ba1      	ldr	r3, [pc, #644]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	029b      	lsls	r3, r3, #10
 8007668:	499d      	ldr	r1, [pc, #628]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800766a:	4313      	orrs	r3, r2
 800766c:	60cb      	str	r3, [r1, #12]
 800766e:	e009      	b.n	8007684 <HAL_RCC_OscConfig+0xa6c>
 8007670:	4b9b      	ldr	r3, [pc, #620]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	03db      	lsls	r3, r3, #15
 800767e:	4998      	ldr	r1, [pc, #608]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007680:	4313      	orrs	r3, r2
 8007682:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007684:	4b96      	ldr	r3, [pc, #600]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a95      	ldr	r2, [pc, #596]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800768a:	f043 0310 	orr.w	r3, r3, #16
 800768e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007690:	f7fa fde6 	bl	8002260 <HAL_GetTick>
 8007694:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007698:	f7fa fde2 	bl	8002260 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e18b      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80076aa:	4b8d      	ldr	r3, [pc, #564]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f0      	beq.n	8007698 <HAL_RCC_OscConfig+0xa80>
 80076b6:	e018      	b.n	80076ea <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80076b8:	4b89      	ldr	r3, [pc, #548]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a88      	ldr	r2, [pc, #544]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80076be:	f023 0310 	bic.w	r3, r3, #16
 80076c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80076c4:	f7fa fdcc 	bl	8002260 <HAL_GetTick>
 80076c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80076cc:	f7fa fdc8 	bl	8002260 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e171      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80076de:	4b80      	ldr	r3, [pc, #512]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8166 	beq.w	80079c0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076fa:	4b79      	ldr	r3, [pc, #484]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b0c      	cmp	r3, #12
 8007704:	f000 80f2 	beq.w	80078ec <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770c:	2b02      	cmp	r3, #2
 800770e:	f040 80c5 	bne.w	800789c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007712:	4b73      	ldr	r3, [pc, #460]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a72      	ldr	r2, [pc, #456]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800771c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800771e:	f7fa fd9f 	bl	8002260 <HAL_GetTick>
 8007722:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007726:	f7fa fd9b 	bl	8002260 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e144      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007738:	4b69      	ldr	r3, [pc, #420]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f0      	bne.n	8007726 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007744:	4b66      	ldr	r3, [pc, #408]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d111      	bne.n	8007776 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8007752:	4b63      	ldr	r3, [pc, #396]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007758:	4a61      	ldr	r2, [pc, #388]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800775a:	f043 0304 	orr.w	r3, r3, #4
 800775e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007762:	4b5f      	ldr	r3, [pc, #380]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007776:	4b5b      	ldr	r3, [pc, #364]	@ (80078e4 <HAL_RCC_OscConfig+0xccc>)
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800777e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007782:	d102      	bne.n	800778a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800778a:	4b56      	ldr	r3, [pc, #344]	@ (80078e4 <HAL_RCC_OscConfig+0xccc>)
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	4a55      	ldr	r2, [pc, #340]	@ (80078e4 <HAL_RCC_OscConfig+0xccc>)
 8007790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007794:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007796:	4b52      	ldr	r3, [pc, #328]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80077aa:	3a01      	subs	r2, #1
 80077ac:	0212      	lsls	r2, r2, #8
 80077ae:	4311      	orrs	r1, r2
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80077b4:	430a      	orrs	r2, r1
 80077b6:	494a      	ldr	r1, [pc, #296]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80077bc:	4b48      	ldr	r3, [pc, #288]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80077be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077c0:	4b49      	ldr	r3, [pc, #292]	@ (80078e8 <HAL_RCC_OscConfig+0xcd0>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077c8:	3a01      	subs	r2, #1
 80077ca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80077d2:	3a01      	subs	r2, #1
 80077d4:	0252      	lsls	r2, r2, #9
 80077d6:	b292      	uxth	r2, r2
 80077d8:	4311      	orrs	r1, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80077de:	3a01      	subs	r2, #1
 80077e0:	0412      	lsls	r2, r2, #16
 80077e2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80077e6:	4311      	orrs	r1, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80077ec:	3a01      	subs	r2, #1
 80077ee:	0612      	lsls	r2, r2, #24
 80077f0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80077f4:	430a      	orrs	r2, r1
 80077f6:	493a      	ldr	r1, [pc, #232]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80077fc:	4b38      	ldr	r3, [pc, #224]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	4a37      	ldr	r2, [pc, #220]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007802:	f023 0310 	bic.w	r3, r3, #16
 8007806:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800780c:	4a34      	ldr	r2, [pc, #208]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007812:	4b33      	ldr	r3, [pc, #204]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	4a32      	ldr	r2, [pc, #200]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007818:	f043 0310 	orr.w	r3, r3, #16
 800781c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800781e:	4b30      	ldr	r3, [pc, #192]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007822:	f023 020c 	bic.w	r2, r3, #12
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800782a:	492d      	ldr	r1, [pc, #180]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800782c:	4313      	orrs	r3, r2
 800782e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007830:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007834:	2b01      	cmp	r3, #1
 8007836:	d105      	bne.n	8007844 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007838:	4b2a      	ldr	r3, [pc, #168]	@ (80078e4 <HAL_RCC_OscConfig+0xccc>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	4a29      	ldr	r2, [pc, #164]	@ (80078e4 <HAL_RCC_OscConfig+0xccc>)
 800783e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007842:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007844:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007848:	2b01      	cmp	r3, #1
 800784a:	d107      	bne.n	800785c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800784c:	4b24      	ldr	r3, [pc, #144]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800784e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007852:	4a23      	ldr	r2, [pc, #140]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007854:	f023 0304 	bic.w	r3, r3, #4
 8007858:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800785c:	4b20      	ldr	r3, [pc, #128]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1f      	ldr	r2, [pc, #124]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007866:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007868:	f7fa fcfa 	bl	8002260 <HAL_GetTick>
 800786c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007870:	f7fa fcf6 	bl	8002260 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e09f      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007882:	4b17      	ldr	r3, [pc, #92]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800788e:	4b14      	ldr	r3, [pc, #80]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007892:	4a13      	ldr	r2, [pc, #76]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 8007894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007898:	6293      	str	r3, [r2, #40]	@ 0x28
 800789a:	e091      	b.n	80079c0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800789c:	4b10      	ldr	r3, [pc, #64]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a0f      	ldr	r2, [pc, #60]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80078a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80078a8:	f7fa fcda 	bl	8002260 <HAL_GetTick>
 80078ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b0:	f7fa fcd6 	bl	8002260 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e07f      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80078c2:	4b07      	ldr	r3, [pc, #28]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80078ce:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80078d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d2:	4a03      	ldr	r2, [pc, #12]	@ (80078e0 <HAL_RCC_OscConfig+0xcc8>)
 80078d4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80078d8:	f023 0303 	bic.w	r3, r3, #3
 80078dc:	6293      	str	r3, [r2, #40]	@ 0x28
 80078de:	e06f      	b.n	80079c0 <HAL_RCC_OscConfig+0xda8>
 80078e0:	46020c00 	.word	0x46020c00
 80078e4:	46020800 	.word	0x46020800
 80078e8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80078ec:	4b37      	ldr	r3, [pc, #220]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 80078ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80078f2:	4b36      	ldr	r3, [pc, #216]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 80078f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d039      	beq.n	8007974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	f003 0203 	and.w	r2, r3, #3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800790a:	429a      	cmp	r2, r3
 800790c:	d132      	bne.n	8007974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800791c:	429a      	cmp	r2, r3
 800791e:	d129      	bne.n	8007974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800792a:	429a      	cmp	r2, r3
 800792c:	d122      	bne.n	8007974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007938:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800793a:	429a      	cmp	r2, r3
 800793c:	d11a      	bne.n	8007974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	0a5b      	lsrs	r3, r3, #9
 8007942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800794c:	429a      	cmp	r2, r3
 800794e:	d111      	bne.n	8007974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	0c1b      	lsrs	r3, r3, #16
 8007954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800795e:	429a      	cmp	r2, r3
 8007960:	d108      	bne.n	8007974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	0e1b      	lsrs	r3, r3, #24
 8007966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007970:	429a      	cmp	r2, r3
 8007972:	d001      	beq.n	8007978 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e024      	b.n	80079c2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007978:	4b14      	ldr	r3, [pc, #80]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	08db      	lsrs	r3, r3, #3
 800797e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007986:	429a      	cmp	r2, r3
 8007988:	d01a      	beq.n	80079c0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800798a:	4b10      	ldr	r3, [pc, #64]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 800798c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798e:	4a0f      	ldr	r2, [pc, #60]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 8007990:	f023 0310 	bic.w	r3, r3, #16
 8007994:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fa fc63 	bl	8002260 <HAL_GetTick>
 800799a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800799c:	bf00      	nop
 800799e:	f7fa fc5f 	bl	8002260 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d0f9      	beq.n	800799e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ae:	4a07      	ldr	r2, [pc, #28]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80079b4:	4b05      	ldr	r3, [pc, #20]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	4a04      	ldr	r2, [pc, #16]	@ (80079cc <HAL_RCC_OscConfig+0xdb4>)
 80079ba:	f043 0310 	orr.w	r3, r3, #16
 80079be:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3738      	adds	r7, #56	@ 0x38
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	46020c00 	.word	0x46020c00

080079d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e1d9      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079e4:	4b9b      	ldr	r3, [pc, #620]	@ (8007c54 <HAL_RCC_ClockConfig+0x284>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d910      	bls.n	8007a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f2:	4b98      	ldr	r3, [pc, #608]	@ (8007c54 <HAL_RCC_ClockConfig+0x284>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f023 020f 	bic.w	r2, r3, #15
 80079fa:	4996      	ldr	r1, [pc, #600]	@ (8007c54 <HAL_RCC_ClockConfig+0x284>)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a02:	4b94      	ldr	r3, [pc, #592]	@ (8007c54 <HAL_RCC_ClockConfig+0x284>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d001      	beq.n	8007a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e1c1      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d010      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	4b8c      	ldr	r3, [pc, #560]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d908      	bls.n	8007a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007a30:	4b89      	ldr	r3, [pc, #548]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	4986      	ldr	r1, [pc, #536]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d012      	beq.n	8007a74 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	4b81      	ldr	r3, [pc, #516]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d909      	bls.n	8007a74 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007a60:	4b7d      	ldr	r3, [pc, #500]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	497a      	ldr	r1, [pc, #488]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d010      	beq.n	8007aa2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	4b74      	ldr	r3, [pc, #464]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d908      	bls.n	8007aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007a90:	4b71      	ldr	r3, [pc, #452]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	496e      	ldr	r1, [pc, #440]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d010      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	4b69      	ldr	r3, [pc, #420]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d908      	bls.n	8007ad0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007abe:	4b66      	ldr	r3, [pc, #408]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f023 020f 	bic.w	r2, r3, #15
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	4963      	ldr	r1, [pc, #396]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80d2 	beq.w	8007c82 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d143      	bne.n	8007b72 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aea:	4b5b      	ldr	r3, [pc, #364]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d110      	bne.n	8007b1a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007af8:	4b57      	ldr	r3, [pc, #348]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007afe:	4a56      	ldr	r2, [pc, #344]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007b00:	f043 0304 	orr.w	r3, r3, #4
 8007b04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007b08:	4b53      	ldr	r3, [pc, #332]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	60bb      	str	r3, [r7, #8]
 8007b14:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007b1a:	f7fa fba1 	bl	8002260 <HAL_GetTick>
 8007b1e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007b20:	4b4e      	ldr	r3, [pc, #312]	@ (8007c5c <HAL_RCC_ClockConfig+0x28c>)
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00f      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007b2e:	f7fa fb97 	bl	8002260 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e12b      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007b40:	4b46      	ldr	r3, [pc, #280]	@ (8007c5c <HAL_RCC_ClockConfig+0x28c>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0f0      	beq.n	8007b2e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007b52:	4b41      	ldr	r3, [pc, #260]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b58:	4a3f      	ldr	r2, [pc, #252]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007b5a:	f023 0304 	bic.w	r3, r3, #4
 8007b5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007b62:	4b3d      	ldr	r3, [pc, #244]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d121      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e112      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d107      	bne.n	8007b8a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b7a:	4b37      	ldr	r3, [pc, #220]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d115      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e106      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007b92:	4b31      	ldr	r3, [pc, #196]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e0fa      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e0f2      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007bb2:	4b29      	ldr	r3, [pc, #164]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f023 0203 	bic.w	r2, r3, #3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	4926      	ldr	r1, [pc, #152]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007bc4:	f7fa fb4c 	bl	8002260 <HAL_GetTick>
 8007bc8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d112      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bd2:	e00a      	b.n	8007bea <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bd4:	f7fa fb44 	bl	8002260 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e0d6      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bea:	4b1b      	ldr	r3, [pc, #108]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f003 030c 	and.w	r3, r3, #12
 8007bf2:	2b0c      	cmp	r3, #12
 8007bf4:	d1ee      	bne.n	8007bd4 <HAL_RCC_ClockConfig+0x204>
 8007bf6:	e044      	b.n	8007c82 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d112      	bne.n	8007c26 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c00:	e00a      	b.n	8007c18 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c02:	f7fa fb2d 	bl	8002260 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e0bf      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c18:	4b0f      	ldr	r3, [pc, #60]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f003 030c 	and.w	r3, r3, #12
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d1ee      	bne.n	8007c02 <HAL_RCC_ClockConfig+0x232>
 8007c24:	e02d      	b.n	8007c82 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d123      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c2e:	e00a      	b.n	8007c46 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c30:	f7fa fb16 	bl	8002260 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e0a8      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c46:	4b04      	ldr	r3, [pc, #16]	@ (8007c58 <HAL_RCC_ClockConfig+0x288>)
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 030c 	and.w	r3, r3, #12
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1ee      	bne.n	8007c30 <HAL_RCC_ClockConfig+0x260>
 8007c52:	e016      	b.n	8007c82 <HAL_RCC_ClockConfig+0x2b2>
 8007c54:	40022000 	.word	0x40022000
 8007c58:	46020c00 	.word	0x46020c00
 8007c5c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c60:	f7fa fafe 	bl	8002260 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e090      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c76:	4b4a      	ldr	r3, [pc, #296]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 030c 	and.w	r3, r3, #12
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d1ee      	bne.n	8007c60 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d010      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	4b43      	ldr	r3, [pc, #268]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d208      	bcs.n	8007cb0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007c9e:	4b40      	ldr	r3, [pc, #256]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	f023 020f 	bic.w	r2, r3, #15
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	493d      	ldr	r1, [pc, #244]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8007da4 <HAL_RCC_ClockConfig+0x3d4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d210      	bcs.n	8007ce0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cbe:	4b39      	ldr	r3, [pc, #228]	@ (8007da4 <HAL_RCC_ClockConfig+0x3d4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f023 020f 	bic.w	r2, r3, #15
 8007cc6:	4937      	ldr	r1, [pc, #220]	@ (8007da4 <HAL_RCC_ClockConfig+0x3d4>)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cce:	4b35      	ldr	r3, [pc, #212]	@ (8007da4 <HAL_RCC_ClockConfig+0x3d4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d001      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e05b      	b.n	8007d98 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d208      	bcs.n	8007d0e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007cfc:	4b28      	ldr	r3, [pc, #160]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4925      	ldr	r1, [pc, #148]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d012      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	4b20      	ldr	r3, [pc, #128]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	091b      	lsrs	r3, r3, #4
 8007d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d209      	bcs.n	8007d40 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	4919      	ldr	r1, [pc, #100]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d010      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695a      	ldr	r2, [r3, #20]
 8007d50:	4b13      	ldr	r3, [pc, #76]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d208      	bcs.n	8007d6e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007d5c:	4b10      	ldr	r3, [pc, #64]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	490d      	ldr	r1, [pc, #52]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007d6e:	f000 f821 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <HAL_RCC_ClockConfig+0x3d0>)
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	490a      	ldr	r1, [pc, #40]	@ (8007da8 <HAL_RCC_ClockConfig+0x3d8>)
 8007d7e:	5ccb      	ldrb	r3, [r1, r3]
 8007d80:	fa22 f303 	lsr.w	r3, r2, r3
 8007d84:	4a09      	ldr	r2, [pc, #36]	@ (8007dac <HAL_RCC_ClockConfig+0x3dc>)
 8007d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d88:	4b09      	ldr	r3, [pc, #36]	@ (8007db0 <HAL_RCC_ClockConfig+0x3e0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fa f9dd 	bl	800214c <HAL_InitTick>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]

  return status;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	46020c00 	.word	0x46020c00
 8007da4:	40022000 	.word	0x40022000
 8007da8:	080104c0 	.word	0x080104c0
 8007dac:	20000000 	.word	0x20000000
 8007db0:	20000004 	.word	0x20000004

08007db4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b08b      	sub	sp, #44	@ 0x2c
 8007db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dc2:	4b78      	ldr	r3, [pc, #480]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f003 030c 	and.w	r3, r3, #12
 8007dca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dcc:	4b75      	ldr	r3, [pc, #468]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_RCC_GetSysClockFreq+0x34>
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b0c      	cmp	r3, #12
 8007de0:	d121      	bne.n	8007e26 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d11e      	bne.n	8007e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007de8:	4b6e      	ldr	r3, [pc, #440]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d107      	bne.n	8007e04 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007df4:	4b6b      	ldr	r3, [pc, #428]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007dfa:	0b1b      	lsrs	r3, r3, #12
 8007dfc:	f003 030f 	and.w	r3, r3, #15
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e02:	e005      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007e04:	4b67      	ldr	r3, [pc, #412]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	0f1b      	lsrs	r3, r3, #28
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e10:	4a65      	ldr	r2, [pc, #404]	@ (8007fa8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e18:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d110      	bne.n	8007e42 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e24:	e00d      	b.n	8007e42 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e26:	4b5f      	ldr	r3, [pc, #380]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f003 030c 	and.w	r3, r3, #12
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d102      	bne.n	8007e38 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e32:	4b5e      	ldr	r3, [pc, #376]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007e34:	623b      	str	r3, [r7, #32]
 8007e36:	e004      	b.n	8007e42 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d101      	bne.n	8007e42 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007fac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007e40:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b0c      	cmp	r3, #12
 8007e46:	f040 80a5 	bne.w	8007f94 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007e4a:	4b56      	ldr	r3, [pc, #344]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007e54:	4b53      	ldr	r3, [pc, #332]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007e62:	4b50      	ldr	r3, [pc, #320]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e66:	091b      	lsrs	r3, r3, #4
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	08db      	lsrs	r3, r3, #3
 8007e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	fb02 f303 	mul.w	r3, r2, r3
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d003      	beq.n	8007e98 <HAL_RCC_GetSysClockFreq+0xe4>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d022      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0x128>
 8007e96:	e043      	b.n	8007f20 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007fb0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007eba:	ed97 6a01 	vldr	s12, [r7, #4]
 8007ebe:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007fb4 <HAL_RCC_GetSysClockFreq+0x200>
 8007ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eda:	e046      	b.n	8007f6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007fb0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b2d      	ldr	r3, [pc, #180]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007efe:	ed97 6a01 	vldr	s12, [r7, #4]
 8007f02:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007fb4 <HAL_RCC_GetSysClockFreq+0x200>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f1e:	e024      	b.n	8007f6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f38:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f40:	ee07 3a90 	vmov	s15, r3
 8007f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007f48:	ed97 6a01 	vldr	s12, [r7, #4]
 8007f4c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007fb4 <HAL_RCC_GetSysClockFreq+0x200>
 8007f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f68:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f6e:	0e1b      	lsrs	r3, r3, #24
 8007f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f74:	3301      	adds	r3, #1
 8007f76:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8e:	ee17 3a90 	vmov	r3, s15
 8007f92:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007f94:	6a3b      	ldr	r3, [r7, #32]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	372c      	adds	r7, #44	@ 0x2c
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	46020c00 	.word	0x46020c00
 8007fa8:	080104d8 	.word	0x080104d8
 8007fac:	00f42400 	.word	0x00f42400
 8007fb0:	4b742400 	.word	0x4b742400
 8007fb4:	46000000 	.word	0x46000000

08007fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007fbc:	f7ff fefa 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	4b07      	ldr	r3, [pc, #28]	@ (8007fe0 <HAL_RCC_GetHCLKFreq+0x28>)
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	4906      	ldr	r1, [pc, #24]	@ (8007fe4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007fcc:	5ccb      	ldrb	r3, [r1, r3]
 8007fce:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd2:	4a05      	ldr	r2, [pc, #20]	@ (8007fe8 <HAL_RCC_GetHCLKFreq+0x30>)
 8007fd4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007fd6:	4b04      	ldr	r3, [pc, #16]	@ (8007fe8 <HAL_RCC_GetHCLKFreq+0x30>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	46020c00 	.word	0x46020c00
 8007fe4:	080104c0 	.word	0x080104c0
 8007fe8:	20000000 	.word	0x20000000

08007fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007ff0:	f7ff ffe2 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4b05      	ldr	r3, [pc, #20]	@ (800800c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	091b      	lsrs	r3, r3, #4
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	4903      	ldr	r1, [pc, #12]	@ (8008010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008002:	5ccb      	ldrb	r3, [r1, r3]
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008008:	4618      	mov	r0, r3
 800800a:	bd80      	pop	{r7, pc}
 800800c:	46020c00 	.word	0x46020c00
 8008010:	080104d0 	.word	0x080104d0

08008014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008018:	f7ff ffce 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 800801c:	4602      	mov	r2, r0
 800801e:	4b05      	ldr	r3, [pc, #20]	@ (8008034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	0a1b      	lsrs	r3, r3, #8
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	4903      	ldr	r1, [pc, #12]	@ (8008038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800802a:	5ccb      	ldrb	r3, [r1, r3]
 800802c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008030:	4618      	mov	r0, r3
 8008032:	bd80      	pop	{r7, pc}
 8008034:	46020c00 	.word	0x46020c00
 8008038:	080104d0 	.word	0x080104d0

0800803c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008040:	f7ff ffba 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 8008044:	4602      	mov	r2, r0
 8008046:	4b05      	ldr	r3, [pc, #20]	@ (800805c <HAL_RCC_GetPCLK3Freq+0x20>)
 8008048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804a:	091b      	lsrs	r3, r3, #4
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	4903      	ldr	r1, [pc, #12]	@ (8008060 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008052:	5ccb      	ldrb	r3, [r1, r3]
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008058:	4618      	mov	r0, r3
 800805a:	bd80      	pop	{r7, pc}
 800805c:	46020c00 	.word	0x46020c00
 8008060:	080104d0 	.word	0x080104d0

08008064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800806c:	4b3e      	ldr	r3, [pc, #248]	@ (8008168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800806e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800807a:	f7fe fdaf 	bl	8006bdc <HAL_PWREx_GetVoltageRange>
 800807e:	6178      	str	r0, [r7, #20]
 8008080:	e019      	b.n	80080b6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008082:	4b39      	ldr	r3, [pc, #228]	@ (8008168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008088:	4a37      	ldr	r2, [pc, #220]	@ (8008168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800808a:	f043 0304 	orr.w	r3, r3, #4
 800808e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008092:	4b35      	ldr	r3, [pc, #212]	@ (8008168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80080a0:	f7fe fd9c 	bl	8006bdc <HAL_PWREx_GetVoltageRange>
 80080a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80080a6:	4b30      	ldr	r3, [pc, #192]	@ (8008168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80080a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80080ae:	f023 0304 	bic.w	r3, r3, #4
 80080b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080bc:	d003      	beq.n	80080c6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080c4:	d109      	bne.n	80080da <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080cc:	d202      	bcs.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80080ce:	2301      	movs	r3, #1
 80080d0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80080d2:	e033      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80080d4:	2300      	movs	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80080d8:	e030      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080e0:	d208      	bcs.n	80080f4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e8:	d102      	bne.n	80080f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80080ea:	2303      	movs	r3, #3
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	e025      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e035      	b.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080fa:	d90f      	bls.n	800811c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008108:	d902      	bls.n	8008110 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800810a:	2300      	movs	r3, #0
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	e015      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008110:	2301      	movs	r3, #1
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	e012      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008116:	2300      	movs	r3, #0
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	e00f      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008122:	d109      	bne.n	8008138 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800812a:	d102      	bne.n	8008132 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800812c:	2301      	movs	r3, #1
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	e004      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008132:	2302      	movs	r3, #2
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	e001      	b.n	800813c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008138:	2301      	movs	r3, #1
 800813a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800813c:	4b0b      	ldr	r3, [pc, #44]	@ (800816c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f023 020f 	bic.w	r2, r3, #15
 8008144:	4909      	ldr	r1, [pc, #36]	@ (800816c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800814c:	4b07      	ldr	r3, [pc, #28]	@ (800816c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	429a      	cmp	r2, r3
 8008158:	d001      	beq.n	800815e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	46020c00 	.word	0x46020c00
 800816c:	40022000 	.word	0x40022000

08008170 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008174:	b0b4      	sub	sp, #208	@ 0xd0
 8008176:	af00      	add	r7, sp, #0
 8008178:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800817c:	2300      	movs	r3, #0
 800817e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008182:	2300      	movs	r3, #0
 8008184:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f002 0401 	and.w	r4, r2, #1
 8008194:	2500      	movs	r5, #0
 8008196:	ea54 0305 	orrs.w	r3, r4, r5
 800819a:	d00b      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800819c:	4bc4      	ldr	r3, [pc, #784]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800819e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081a2:	f023 0103 	bic.w	r1, r3, #3
 80081a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ac:	4ac0      	ldr	r2, [pc, #768]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80081ae:	430b      	orrs	r3, r1
 80081b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f002 0804 	and.w	r8, r2, #4
 80081c0:	f04f 0900 	mov.w	r9, #0
 80081c4:	ea58 0309 	orrs.w	r3, r8, r9
 80081c8:	d00b      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80081ca:	4bb9      	ldr	r3, [pc, #740]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80081cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80081d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081da:	4ab5      	ldr	r2, [pc, #724]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80081dc:	430b      	orrs	r3, r1
 80081de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f002 0a08 	and.w	sl, r2, #8
 80081ee:	f04f 0b00 	mov.w	fp, #0
 80081f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80081f6:	d00b      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80081f8:	4bad      	ldr	r3, [pc, #692]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80081fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008202:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008208:	4aa9      	ldr	r2, [pc, #676]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800820a:	430b      	orrs	r3, r1
 800820c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	f002 0310 	and.w	r3, r2, #16
 800821c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008220:	2300      	movs	r3, #0
 8008222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008226:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800822a:	460b      	mov	r3, r1
 800822c:	4313      	orrs	r3, r2
 800822e:	d00b      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008230:	4b9f      	ldr	r3, [pc, #636]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800823a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800823e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008240:	4a9b      	ldr	r2, [pc, #620]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008242:	430b      	orrs	r3, r1
 8008244:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008248:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f002 0320 	and.w	r3, r2, #32
 8008254:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800825e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008262:	460b      	mov	r3, r1
 8008264:	4313      	orrs	r3, r2
 8008266:	d00b      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008268:	4b91      	ldr	r3, [pc, #580]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800826a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800826e:	f023 0107 	bic.w	r1, r3, #7
 8008272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008278:	4a8d      	ldr	r2, [pc, #564]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800827a:	430b      	orrs	r3, r1
 800827c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008280:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800828c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008290:	2300      	movs	r3, #0
 8008292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008296:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800829a:	460b      	mov	r3, r1
 800829c:	4313      	orrs	r3, r2
 800829e:	d00b      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80082a0:	4b83      	ldr	r3, [pc, #524]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80082a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082a6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80082aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b0:	4a7f      	ldr	r2, [pc, #508]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80082b2:	430b      	orrs	r3, r1
 80082b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80082c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082c8:	2300      	movs	r3, #0
 80082ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80082d2:	460b      	mov	r3, r1
 80082d4:	4313      	orrs	r3, r2
 80082d6:	d00b      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80082d8:	4b75      	ldr	r3, [pc, #468]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80082da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082e8:	4a71      	ldr	r2, [pc, #452]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80082ea:	430b      	orrs	r3, r1
 80082ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80082fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008306:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800830a:	460b      	mov	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	d00b      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008310:	4b67      	ldr	r3, [pc, #412]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008316:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800831a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800831e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008320:	4a63      	ldr	r2, [pc, #396]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008322:	430b      	orrs	r3, r1
 8008324:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008328:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008338:	2300      	movs	r3, #0
 800833a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800833e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008342:	460b      	mov	r3, r1
 8008344:	4313      	orrs	r3, r2
 8008346:	d00b      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008348:	4b59      	ldr	r3, [pc, #356]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800834a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800834e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8008352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008358:	4a55      	ldr	r2, [pc, #340]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800835a:	430b      	orrs	r3, r1
 800835c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800836c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008370:	2300      	movs	r3, #0
 8008372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008376:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800837a:	460b      	mov	r3, r1
 800837c:	4313      	orrs	r3, r2
 800837e:	d00b      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008380:	4b4b      	ldr	r3, [pc, #300]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008386:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800838a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800838e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008390:	4a47      	ldr	r2, [pc, #284]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008392:	430b      	orrs	r3, r1
 8008394:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008398:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80083a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083a6:	2300      	movs	r3, #0
 80083a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80083ae:	460b      	mov	r3, r1
 80083b0:	4313      	orrs	r3, r2
 80083b2:	d00b      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80083b4:	4b3e      	ldr	r3, [pc, #248]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80083b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083ba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80083be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083c4:	4a3a      	ldr	r2, [pc, #232]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80083c6:	430b      	orrs	r3, r1
 80083c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80083cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80083d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80083da:	2300      	movs	r3, #0
 80083dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80083de:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d00b      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80083e8:	4b31      	ldr	r3, [pc, #196]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80083ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083f8:	4a2d      	ldr	r2, [pc, #180]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80083fa:	430b      	orrs	r3, r1
 80083fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800840c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800840e:	2300      	movs	r3, #0
 8008410:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008412:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008416:	460b      	mov	r3, r1
 8008418:	4313      	orrs	r3, r2
 800841a:	d04f      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800841c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008424:	2b80      	cmp	r3, #128	@ 0x80
 8008426:	d02d      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8008428:	2b80      	cmp	r3, #128	@ 0x80
 800842a:	d827      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800842c:	2b60      	cmp	r3, #96	@ 0x60
 800842e:	d02b      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8008430:	2b60      	cmp	r3, #96	@ 0x60
 8008432:	d823      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008434:	2b40      	cmp	r3, #64	@ 0x40
 8008436:	d006      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008438:	2b40      	cmp	r3, #64	@ 0x40
 800843a:	d81f      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d009      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8008440:	2b20      	cmp	r3, #32
 8008442:	d011      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008444:	e01a      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008446:	4b1a      	ldr	r3, [pc, #104]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844a:	4a19      	ldr	r2, [pc, #100]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800844c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008450:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008452:	e01a      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008454:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008458:	3308      	adds	r3, #8
 800845a:	4618      	mov	r0, r3
 800845c:	f002 f8cc 	bl	800a5f8 <RCCEx_PLL2_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008466:	e010      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800846c:	332c      	adds	r3, #44	@ 0x2c
 800846e:	4618      	mov	r0, r3
 8008470:	f002 f95a 	bl	800a728 <RCCEx_PLL3_Config>
 8008474:	4603      	mov	r3, r0
 8008476:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800847a:	e006      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8008482:	e002      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8008488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800848a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800848e:	2b00      	cmp	r3, #0
 8008490:	d110      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008492:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008494:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008498:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800849c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80084a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084a4:	4a02      	ldr	r2, [pc, #8]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80084a6:	430b      	orrs	r3, r1
 80084a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80084ac:	e006      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80084ae:	bf00      	nop
 80084b0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80084b8:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80084bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80084c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ca:	2300      	movs	r3, #0
 80084cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80084ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80084d2:	460b      	mov	r3, r1
 80084d4:	4313      	orrs	r3, r2
 80084d6:	d046      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80084d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80084dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80084e4:	d028      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80084e6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80084ea:	d821      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80084ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084f0:	d022      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80084f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084f6:	d81b      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80084f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084fc:	d01c      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80084fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008502:	d815      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008508:	d008      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800850a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800850e:	d80f      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d011      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8008514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008518:	d00e      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800851a:	e009      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800851c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008520:	3308      	adds	r3, #8
 8008522:	4618      	mov	r0, r3
 8008524:	f002 f868 	bl	800a5f8 <RCCEx_PLL2_Config>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 800852e:	e004      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8008536:	e000      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 8008538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10d      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008542:	4bb6      	ldr	r3, [pc, #728]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008548:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800854c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008550:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008554:	4ab1      	ldr	r2, [pc, #708]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008556:	430b      	orrs	r3, r1
 8008558:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800855c:	e003      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008562:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008572:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008574:	2300      	movs	r3, #0
 8008576:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008578:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800857c:	460b      	mov	r3, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	d03e      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008582:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800858a:	2b04      	cmp	r3, #4
 800858c:	d81d      	bhi.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085d3 	.word	0x080085d3
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085b7 	.word	0x080085b7
 80085a0:	080085d3 	.word	0x080085d3
 80085a4:	080085d3 	.word	0x080085d3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085a8:	4b9c      	ldr	r3, [pc, #624]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80085aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ac:	4a9b      	ldr	r2, [pc, #620]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80085ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085b2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80085b4:	e00e      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085ba:	332c      	adds	r3, #44	@ 0x2c
 80085bc:	4618      	mov	r0, r3
 80085be:	f002 f8b3 	bl	800a728 <RCCEx_PLL3_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80085c8:	e004      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 80085d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80085d4:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10d      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80085dc:	4b8f      	ldr	r3, [pc, #572]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80085de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085e2:	f023 0107 	bic.w	r1, r3, #7
 80085e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ee:	4a8b      	ldr	r2, [pc, #556]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80085f0:	430b      	orrs	r3, r1
 80085f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80085f6:	e003      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f8:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80085fc:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800860c:	653b      	str	r3, [r7, #80]	@ 0x50
 800860e:	2300      	movs	r3, #0
 8008610:	657b      	str	r3, [r7, #84]	@ 0x54
 8008612:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d04a      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800861c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008628:	d028      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800862a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800862e:	d821      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008634:	d024      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800863a:	d81b      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800863c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008640:	d00e      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008646:	d815      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01b      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800864c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008650:	d110      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008652:	4b72      	ldr	r3, [pc, #456]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008656:	4a71      	ldr	r2, [pc, #452]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800865c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800865e:	e012      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008664:	332c      	adds	r3, #44	@ 0x2c
 8008666:	4618      	mov	r0, r3
 8008668:	f002 f85e 	bl	800a728 <RCCEx_PLL3_Config>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8008672:	e008      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 800867a:	e004      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 800867c:	bf00      	nop
 800867e:	e002      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8008680:	bf00      	nop
 8008682:	e000      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8008684:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008686:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10d      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800868e:	4b63      	ldr	r3, [pc, #396]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008694:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008698:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800869c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086a0:	4a5e      	ldr	r2, [pc, #376]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80086a2:	430b      	orrs	r3, r1
 80086a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80086a8:	e003      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80086ae:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80086be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086c0:	2300      	movs	r3, #0
 80086c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f000 80ba 	beq.w	8008844 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086d0:	2300      	movs	r3, #0
 80086d2:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086d6:	4b51      	ldr	r3, [pc, #324]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80086d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d113      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086e4:	4b4d      	ldr	r3, [pc, #308]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80086e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ea:	4a4c      	ldr	r2, [pc, #304]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80086ec:	f043 0304 	orr.w	r3, r3, #4
 80086f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80086f4:	4b49      	ldr	r3, [pc, #292]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80086f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
      pwrclkchanged = SET;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800870c:	4b44      	ldr	r3, [pc, #272]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800870e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008710:	4a43      	ldr	r2, [pc, #268]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008718:	f7f9 fda2 	bl	8002260 <HAL_GetTick>
 800871c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008720:	e00b      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008722:	f7f9 fd9d 	bl	8002260 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d903      	bls.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8008738:	e005      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800873a:	4b39      	ldr	r3, [pc, #228]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800873c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0ed      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8008746:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800874a:	2b00      	cmp	r3, #0
 800874c:	d16a      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800874e:	4b33      	ldr	r3, [pc, #204]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800875c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008760:	2b00      	cmp	r3, #0
 8008762:	d023      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8008764:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008768:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800876c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008770:	4293      	cmp	r3, r2
 8008772:	d01b      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008774:	4b29      	ldr	r3, [pc, #164]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800877a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800877e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008782:	4b26      	ldr	r3, [pc, #152]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008788:	4a24      	ldr	r2, [pc, #144]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800878a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800878e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008792:	4b22      	ldr	r3, [pc, #136]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008798:	4a20      	ldr	r2, [pc, #128]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800879a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800879e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087a2:	4a1e      	ldr	r2, [pc, #120]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80087a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d019      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b8:	f7f9 fd52 	bl	8002260 <HAL_GetTick>
 80087bc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087c0:	e00d      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087c2:	f7f9 fd4d 	bl	8002260 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d903      	bls.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
            break;
 80087dc:	e006      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087de:	4b0f      	ldr	r3, [pc, #60]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80087e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0ea      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 80087ec:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10d      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80087f4:	4b09      	ldr	r3, [pc, #36]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80087f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80087fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008802:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008806:	4a05      	ldr	r2, [pc, #20]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8008808:	430b      	orrs	r3, r1
 800880a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800880e:	e00d      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008810:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008814:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
 8008818:	e008      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800881a:	bf00      	nop
 800881c:	46020c00 	.word	0x46020c00
 8008820:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008824:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008828:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800882c:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8008830:	2b01      	cmp	r3, #1
 8008832:	d107      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008834:	4bc0      	ldr	r3, [pc, #768]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800883a:	4abf      	ldr	r2, [pc, #764]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800883c:	f023 0304 	bic.w	r3, r3, #4
 8008840:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008850:	643b      	str	r3, [r7, #64]	@ 0x40
 8008852:	2300      	movs	r3, #0
 8008854:	647b      	str	r3, [r7, #68]	@ 0x44
 8008856:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800885a:	460b      	mov	r3, r1
 800885c:	4313      	orrs	r3, r2
 800885e:	d042      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008868:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800886c:	d022      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
 800886e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008872:	d81b      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8008874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008878:	d011      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x72e>
 800887a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800887e:	d815      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d019      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008888:	d110      	bne.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800888a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800888e:	3308      	adds	r3, #8
 8008890:	4618      	mov	r0, r3
 8008892:	f001 feb1 	bl	800a5f8 <RCCEx_PLL2_Config>
 8008896:	4603      	mov	r3, r0
 8008898:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 800889c:	e00d      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800889e:	4ba6      	ldr	r3, [pc, #664]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	4aa5      	ldr	r2, [pc, #660]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80088a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088a8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80088aa:	e006      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80088b2:	e002      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 80088b4:	bf00      	nop
 80088b6:	e000      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 80088b8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80088ba:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10d      	bne.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80088c2:	4b9d      	ldr	r3, [pc, #628]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80088c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088c8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80088cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80088d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d4:	4a98      	ldr	r2, [pc, #608]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80088d6:	430b      	orrs	r3, r1
 80088d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80088dc:	e003      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088de:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80088e2:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80088f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80088fc:	460b      	mov	r3, r1
 80088fe:	4313      	orrs	r3, r2
 8008900:	d02d      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800890a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800890e:	d00b      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8008910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008914:	d804      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d008      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800891a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800891e:	d007      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8008926:	e004      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8008928:	bf00      	nop
 800892a:	e002      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 800892c:	bf00      	nop
 800892e:	e000      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8008930:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008932:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10d      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800893a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800893c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008940:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800894c:	4a7a      	ldr	r2, [pc, #488]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800894e:	430b      	orrs	r3, r1
 8008950:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008954:	e003      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008956:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800895a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800895e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800896a:	633b      	str	r3, [r7, #48]	@ 0x30
 800896c:	2300      	movs	r3, #0
 800896e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008970:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d019      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800897a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800897e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008986:	d105      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008988:	4b6b      	ldr	r3, [pc, #428]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	4a6a      	ldr	r2, [pc, #424]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800898e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008992:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008994:	4b68      	ldr	r3, [pc, #416]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800899a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800899e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089a6:	4a64      	ldr	r2, [pc, #400]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80089a8:	430b      	orrs	r3, r1
 80089aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80089ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80089ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089bc:	2300      	movs	r3, #0
 80089be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80089c4:	460b      	mov	r3, r1
 80089c6:	4313      	orrs	r3, r2
 80089c8:	d00c      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80089ca:	4b5b      	ldr	r3, [pc, #364]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80089cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80089dc:	4956      	ldr	r1, [pc, #344]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80089e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80089f0:	623b      	str	r3, [r7, #32]
 80089f2:	2300      	movs	r3, #0
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089fa:	460b      	mov	r3, r1
 80089fc:	4313      	orrs	r3, r2
 80089fe:	d00c      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008a00:	4b4d      	ldr	r3, [pc, #308]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a12:	4949      	ldr	r1, [pc, #292]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008a1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a30:	460b      	mov	r3, r1
 8008a32:	4313      	orrs	r3, r2
 8008a34:	d00c      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008a36:	4b40      	ldr	r3, [pc, #256]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a3c:	f023 0218 	bic.w	r2, r3, #24
 8008a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a48:	493b      	ldr	r1, [pc, #236]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]
 8008a62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a66:	460b      	mov	r3, r1
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	d032      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a78:	d105      	bne.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a84:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a92:	d108      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a98:	3308      	adds	r3, #8
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fdac 	bl	800a5f8 <RCCEx_PLL2_Config>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    }
    if (ret == HAL_OK)
 8008aa6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10d      	bne.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008aae:	4b22      	ldr	r3, [pc, #136]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008ab0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ab4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ac0:	491d      	ldr	r1, [pc, #116]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008ac8:	e003      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aca:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008ace:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008ad2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4313      	orrs	r3, r2
 8008aec:	d03d      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008aee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008af6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008afa:	d00e      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8008afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b00:	d815      	bhi.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01a      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b0a:	d110      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	4a09      	ldr	r2, [pc, #36]	@ (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b16:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008b18:	e011      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b1e:	3308      	adds	r3, #8
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 fd69 	bl	800a5f8 <RCCEx_PLL2_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008b2c:	e007      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8008b34:	e003      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8008b36:	bf00      	nop
 8008b38:	46020c00 	.word	0x46020c00
        break;
 8008b3c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008b3e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10d      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008b46:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b4c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b58:	4915      	ldr	r1, [pc, #84]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008b60:	e003      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b62:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008b66:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008b6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008b80:	460b      	mov	r3, r1
 8008b82:	4313      	orrs	r3, r2
 8008b84:	d00c      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008b86:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b8c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b98:	4905      	ldr	r1, [pc, #20]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8008ba0:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	37d0      	adds	r7, #208	@ 0xd0
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bae:	bf00      	nop
 8008bb0:	46020c00 	.word	0x46020c00

08008bb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b089      	sub	sp, #36	@ 0x24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008bbc:	4ba6      	ldr	r3, [pc, #664]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008bc6:	4ba4      	ldr	r3, [pc, #656]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008bd0:	4ba1      	ldr	r3, [pc, #644]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	3301      	adds	r3, #1
 8008bdc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008bde:	4b9e      	ldr	r3, [pc, #632]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	091b      	lsrs	r3, r3, #4
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008bea:	4b9b      	ldr	r3, [pc, #620]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bee:	08db      	lsrs	r3, r3, #3
 8008bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	fb02 f303 	mul.w	r3, r2, r3
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d062      	beq.n	8008cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	f200 8081 	bhi.w	8008d16 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d024      	beq.n	8008c64 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d17a      	bne.n	8008d16 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c32:	4b89      	ldr	r3, [pc, #548]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c46:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c62:	e08f      	b.n	8008d84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008c64:	4b7c      	ldr	r3, [pc, #496]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008c70:	4b79      	ldr	r3, [pc, #484]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	0f1b      	lsrs	r3, r3, #28
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	e006      	b.n	8008c8a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008c7c:	4b76      	ldr	r3, [pc, #472]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c82:	041b      	lsls	r3, r3, #16
 8008c84:	0f1b      	lsrs	r3, r3, #28
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	4a76      	ldr	r2, [pc, #472]	@ (8008e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c90:	ee07 3a90 	vmov	s15, r3
 8008c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cb4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ccc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cd0:	e058      	b.n	8008d84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	ee07 3a90 	vmov	s15, r3
 8008cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cdc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cf8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d14:	e036      	b.n	8008d84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008d16:	4b50      	ldr	r3, [pc, #320]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008d22:	4b4d      	ldr	r3, [pc, #308]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	0f1b      	lsrs	r3, r3, #28
 8008d28:	f003 030f 	and.w	r3, r3, #15
 8008d2c:	e006      	b.n	8008d3c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d34:	041b      	lsls	r3, r3, #16
 8008d36:	0f1b      	lsrs	r3, r3, #28
 8008d38:	f003 030f 	and.w	r3, r3, #15
 8008d3c:	4a49      	ldr	r2, [pc, #292]	@ (8008e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d66:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d82:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008d84:	4b34      	ldr	r3, [pc, #208]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d017      	beq.n	8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008d90:	4b31      	ldr	r3, [pc, #196]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d94:	0a5b      	lsrs	r3, r3, #9
 8008d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008da6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db6:	ee17 2a90 	vmov	r2, s15
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e002      	b.n	8008dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008dc6:	4b24      	ldr	r3, [pc, #144]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d017      	beq.n	8008e02 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008dd2:	4b21      	ldr	r3, [pc, #132]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd6:	0c1b      	lsrs	r3, r3, #16
 8008dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008de8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df8:	ee17 2a90 	vmov	r2, s15
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	605a      	str	r2, [r3, #4]
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008e08:	4b13      	ldr	r3, [pc, #76]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d017      	beq.n	8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008e14:	4b10      	ldr	r3, [pc, #64]	@ (8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e18:	0e1b      	lsrs	r3, r3, #24
 8008e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e3a:	ee17 2a90 	vmov	r2, s15
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e42:	e002      	b.n	8008e4a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	609a      	str	r2, [r3, #8]
}
 8008e4a:	bf00      	nop
 8008e4c:	3724      	adds	r7, #36	@ 0x24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	46020c00 	.word	0x46020c00
 8008e5c:	4b742400 	.word	0x4b742400
 8008e60:	46000000 	.word	0x46000000
 8008e64:	080104d8 	.word	0x080104d8

08008e68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b089      	sub	sp, #36	@ 0x24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008e70:	4ba6      	ldr	r3, [pc, #664]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e78:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008e7a:	4ba4      	ldr	r3, [pc, #656]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008e84:	4ba1      	ldr	r3, [pc, #644]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	3301      	adds	r3, #1
 8008e90:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008e92:	4b9e      	ldr	r3, [pc, #632]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e96:	091b      	lsrs	r3, r3, #4
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008e9e:	4b9b      	ldr	r3, [pc, #620]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea2:	08db      	lsrs	r3, r3, #3
 8008ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d062      	beq.n	8008f86 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	f200 8081 	bhi.w	8008fca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d024      	beq.n	8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d17a      	bne.n	8008fca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009110 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee6:	4b89      	ldr	r3, [pc, #548]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008efa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009114 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f16:	e08f      	b.n	8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008f18:	4b7c      	ldr	r3, [pc, #496]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008f24:	4b79      	ldr	r3, [pc, #484]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	0f1b      	lsrs	r3, r3, #28
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	e006      	b.n	8008f3e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008f30:	4b76      	ldr	r3, [pc, #472]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f36:	041b      	lsls	r3, r3, #16
 8008f38:	0f1b      	lsrs	r3, r3, #28
 8008f3a:	f003 030f 	and.w	r3, r3, #15
 8008f3e:	4a76      	ldr	r2, [pc, #472]	@ (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f44:	ee07 3a90 	vmov	s15, r3
 8008f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f68:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009114 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f84:	e058      	b.n	8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f90:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009110 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f98:	4b5c      	ldr	r3, [pc, #368]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa0:	ee07 3a90 	vmov	s15, r3
 8008fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009114 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fc8:	e036      	b.n	8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008fca:	4b50      	ldr	r3, [pc, #320]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	0f1b      	lsrs	r3, r3, #28
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	e006      	b.n	8008ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fe8:	041b      	lsls	r3, r3, #16
 8008fea:	0f1b      	lsrs	r3, r3, #28
 8008fec:	f003 030f 	and.w	r3, r3, #15
 8008ff0:	4a49      	ldr	r2, [pc, #292]	@ (8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009016:	ed97 6a02 	vldr	s12, [r7, #8]
 800901a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009114 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800901e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009036:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009038:	4b34      	ldr	r3, [pc, #208]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800903a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d017      	beq.n	8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009044:	4b31      	ldr	r3, [pc, #196]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009048:	0a5b      	lsrs	r3, r3, #9
 800904a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800905a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800905e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800906a:	ee17 2a90 	vmov	r2, s15
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e002      	b.n	800907a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800907a:	4b24      	ldr	r3, [pc, #144]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800907c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d017      	beq.n	80090b6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009086:	4b21      	ldr	r3, [pc, #132]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908a:	0c1b      	lsrs	r3, r3, #16
 800908c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009098:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800909c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80090a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ac:	ee17 2a90 	vmov	r2, s15
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	605a      	str	r2, [r3, #4]
 80090b4:	e002      	b.n	80090bc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80090bc:	4b13      	ldr	r3, [pc, #76]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d017      	beq.n	80090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80090c8:	4b10      	ldr	r3, [pc, #64]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80090ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090cc:	0e1b      	lsrs	r3, r3, #24
 80090ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80090da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80090e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ee:	ee17 2a90 	vmov	r2, s15
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80090f6:	e002      	b.n	80090fe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	609a      	str	r2, [r3, #8]
}
 80090fe:	bf00      	nop
 8009100:	3724      	adds	r7, #36	@ 0x24
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	46020c00 	.word	0x46020c00
 8009110:	4b742400 	.word	0x4b742400
 8009114:	46000000 	.word	0x46000000
 8009118:	080104d8 	.word	0x080104d8

0800911c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800911c:	b480      	push	{r7}
 800911e:	b089      	sub	sp, #36	@ 0x24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009124:	4ba6      	ldr	r3, [pc, #664]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800912e:	4ba4      	ldr	r3, [pc, #656]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009138:	4ba1      	ldr	r3, [pc, #644]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800913a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800913c:	0a1b      	lsrs	r3, r3, #8
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	3301      	adds	r3, #1
 8009144:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009146:	4b9e      	ldr	r3, [pc, #632]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914a:	091b      	lsrs	r3, r3, #4
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009152:	4b9b      	ldr	r3, [pc, #620]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009156:	08db      	lsrs	r3, r3, #3
 8009158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	fb02 f303 	mul.w	r3, r2, r3
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b03      	cmp	r3, #3
 8009172:	d062      	beq.n	800923a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b03      	cmp	r3, #3
 8009178:	f200 8081 	bhi.w	800927e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d024      	beq.n	80091cc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d17a      	bne.n	800927e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800919a:	4b89      	ldr	r3, [pc, #548]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800919c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80091aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80091b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80091b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80091ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80091c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80091ca:	e08f      	b.n	80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80091cc:	4b7c      	ldr	r3, [pc, #496]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80091d8:	4b79      	ldr	r3, [pc, #484]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	0f1b      	lsrs	r3, r3, #28
 80091de:	f003 030f 	and.w	r3, r3, #15
 80091e2:	e006      	b.n	80091f2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80091e4:	4b76      	ldr	r3, [pc, #472]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80091e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	0f1b      	lsrs	r3, r3, #28
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	4a76      	ldr	r2, [pc, #472]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80091f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009218:	ed97 6a02 	vldr	s12, [r7, #8]
 800921c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009234:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009238:	e058      	b.n	80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	ee07 3a90 	vmov	s15, r3
 8009240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009244:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924c:	4b5c      	ldr	r3, [pc, #368]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800924e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800925c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009260:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009264:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009268:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800926c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009270:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009278:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800927c:	e036      	b.n	80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800927e:	4b50      	ldr	r3, [pc, #320]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800928a:	4b4d      	ldr	r3, [pc, #308]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	0f1b      	lsrs	r3, r3, #28
 8009290:	f003 030f 	and.w	r3, r3, #15
 8009294:	e006      	b.n	80092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009296:	4b4a      	ldr	r3, [pc, #296]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800929c:	041b      	lsls	r3, r3, #16
 800929e:	0f1b      	lsrs	r3, r3, #28
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	4a49      	ldr	r2, [pc, #292]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80092a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ce:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80092d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80092e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092ea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80092ec:	4b34      	ldr	r3, [pc, #208]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80092ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d017      	beq.n	8009328 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80092f8:	4b31      	ldr	r3, [pc, #196]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80092fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fc:	0a5b      	lsrs	r3, r3, #9
 80092fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800930a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800930e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009312:	edd7 6a07 	vldr	s13, [r7, #28]
 8009316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800931a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800931e:	ee17 2a90 	vmov	r2, s15
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	e002      	b.n	800932e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800932e:	4b24      	ldr	r3, [pc, #144]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d017      	beq.n	800936a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800933a:	4b21      	ldr	r3, [pc, #132]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800933c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933e:	0c1b      	lsrs	r3, r3, #16
 8009340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800934c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009350:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009354:	edd7 6a07 	vldr	s13, [r7, #28]
 8009358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800935c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009360:	ee17 2a90 	vmov	r2, s15
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
 8009368:	e002      	b.n	8009370 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009370:	4b13      	ldr	r3, [pc, #76]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d017      	beq.n	80093ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800937c:	4b10      	ldr	r3, [pc, #64]	@ (80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800937e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009380:	0e1b      	lsrs	r3, r3, #24
 8009382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800938e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009392:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009396:	edd7 6a07 	vldr	s13, [r7, #28]
 800939a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a2:	ee17 2a90 	vmov	r2, s15
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80093aa:	e002      	b.n	80093b2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	609a      	str	r2, [r3, #8]
}
 80093b2:	bf00      	nop
 80093b4:	3724      	adds	r7, #36	@ 0x24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	46020c00 	.word	0x46020c00
 80093c4:	4b742400 	.word	0x4b742400
 80093c8:	46000000 	.word	0x46000000
 80093cc:	080104d8 	.word	0x080104d8

080093d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08e      	sub	sp, #56	@ 0x38
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80093da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093de:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80093e2:	430b      	orrs	r3, r1
 80093e4:	d145      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80093e6:	4bac      	ldr	r3, [pc, #688]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80093e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093f0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80093f2:	4ba9      	ldr	r3, [pc, #676]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80093f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d108      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009406:	d104      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800940c:	637b      	str	r3, [r7, #52]	@ 0x34
 800940e:	f001 b8e3 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009412:	4ba1      	ldr	r3, [pc, #644]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800941c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009420:	d114      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009428:	d110      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800942a:	4b9b      	ldr	r3, [pc, #620]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800942c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009438:	d103      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800943a:	23fa      	movs	r3, #250	@ 0xfa
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800943e:	f001 b8cb 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8009442:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009448:	f001 b8c6 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800944c:	4b92      	ldr	r3, [pc, #584]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009458:	d107      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009460:	d103      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009462:	4b8e      	ldr	r3, [pc, #568]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009464:	637b      	str	r3, [r7, #52]	@ 0x34
 8009466:	f001 b8b7 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800946a:	2300      	movs	r3, #0
 800946c:	637b      	str	r3, [r7, #52]	@ 0x34
 800946e:	f001 b8b3 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009476:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800947a:	430b      	orrs	r3, r1
 800947c:	d151      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800947e:	4b86      	ldr	r3, [pc, #536]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009484:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009488:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800948a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948c:	2b80      	cmp	r3, #128	@ 0x80
 800948e:	d035      	beq.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009492:	2b80      	cmp	r3, #128	@ 0x80
 8009494:	d841      	bhi.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009498:	2b60      	cmp	r3, #96	@ 0x60
 800949a:	d02a      	beq.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	2b60      	cmp	r3, #96	@ 0x60
 80094a0:	d83b      	bhi.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	2b40      	cmp	r3, #64	@ 0x40
 80094a6:	d009      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	2b40      	cmp	r3, #64	@ 0x40
 80094ac:	d835      	bhi.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80094b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d012      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80094ba:	e02e      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fb77 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80094c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ca:	f001 b885 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ce:	f107 0318 	add.w	r3, r7, #24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff fcc8 	bl	8008e68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094dc:	f001 b87c 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e0:	f107 030c 	add.w	r3, r7, #12
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fe19 	bl	800911c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ee:	f001 b873 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80094f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80094f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094f8:	f001 b86e 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094fc:	4b66      	ldr	r3, [pc, #408]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009508:	d103      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800950a:	4b65      	ldr	r3, [pc, #404]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800950c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800950e:	f001 b863 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009516:	f001 b85f 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :
      {
        frequency = 0U;
 800951a:	2300      	movs	r3, #0
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800951e:	f001 b85b 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009526:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800952a:	430b      	orrs	r3, r1
 800952c:	d165      	bne.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800952e:	4b5a      	ldr	r3, [pc, #360]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009534:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009538:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009540:	d034      	beq.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009548:	d853      	bhi.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009550:	d00b      	beq.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009558:	d84b      	bhi.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	2b00      	cmp	r3, #0
 800955e:	d016      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009566:	d009      	beq.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009568:	e043      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800956a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fb20 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009578:	f001 b82e 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800957c:	f107 0318 	add.w	r3, r7, #24
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff fc71 	bl	8008e68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800958a:	f001 b825 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800958e:	4b42      	ldr	r3, [pc, #264]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800959a:	d103      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        {
          frequency = HSI48_VALUE;
 800959c:	4b41      	ldr	r3, [pc, #260]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800959e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095a0:	f001 b81a 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095a8:	f001 b816 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80095ac:	4b3a      	ldr	r3, [pc, #232]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0320 	and.w	r3, r3, #32
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	d118      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095b8:	4b37      	ldr	r3, [pc, #220]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d005      	beq.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 80095c4:	4b34      	ldr	r3, [pc, #208]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	0e1b      	lsrs	r3, r3, #24
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	e006      	b.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80095d0:	4b31      	ldr	r3, [pc, #196]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80095d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095d6:	041b      	lsls	r3, r3, #16
 80095d8:	0e1b      	lsrs	r3, r3, #24
 80095da:	f003 030f 	and.w	r3, r3, #15
 80095de:	4a32      	ldr	r2, [pc, #200]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80095e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095e6:	f000 bff7 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095ee:	f000 bff3 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :

        frequency = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095f6:	f000 bfef 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80095fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095fe:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009602:	430b      	orrs	r3, r1
 8009604:	f040 808a 	bne.w	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009608:	4b23      	ldr	r3, [pc, #140]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800960a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800960e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009612:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d16f      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800961a:	4b1f      	ldr	r3, [pc, #124]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800961c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009620:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009624:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800962c:	d03e      	beq.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009634:	d85d      	bhi.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800963c:	d00b      	beq.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009644:	d855      	bhi.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	2b00      	cmp	r3, #0
 800964a:	d016      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009652:	d009      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8009654:	e04d      	b.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff faaa 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009662:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009664:	f000 bfb8 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009668:	f107 0318 	add.w	r3, r7, #24
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff fbfb 	bl	8008e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009676:	f000 bfaf 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800967a:	4b07      	ldr	r3, [pc, #28]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009686:	d103      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          {
            frequency = HSI48_VALUE;
 8009688:	4b06      	ldr	r3, [pc, #24]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800968a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800968c:	f000 bfa4 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009694:	f000 bfa0 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009698:	46020c00 	.word	0x46020c00
 800969c:	0007a120 	.word	0x0007a120
 80096a0:	00f42400 	.word	0x00f42400
 80096a4:	02dc6c00 	.word	0x02dc6c00
 80096a8:	080104d8 	.word	0x080104d8
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096ac:	4bab      	ldr	r3, [pc, #684]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0320 	and.w	r3, r3, #32
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	d118      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096b8:	4ba8      	ldr	r3, [pc, #672]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80096c4:	4ba5      	ldr	r3, [pc, #660]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	0e1b      	lsrs	r3, r3, #24
 80096ca:	f003 030f 	and.w	r3, r3, #15
 80096ce:	e006      	b.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80096d0:	4ba2      	ldr	r3, [pc, #648]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096d6:	041b      	lsls	r3, r3, #16
 80096d8:	0e1b      	lsrs	r3, r3, #24
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	4aa0      	ldr	r2, [pc, #640]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80096e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80096e6:	f000 bf77 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80096ee:	f000 bf73 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        default :
        {
          frequency = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80096f6:	f000 bf6f 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009700:	d108      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff fa54 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009710:	f000 bf62 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else
    {
      frequency = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	637b      	str	r3, [r7, #52]	@ 0x34
 8009718:	f000 bf5e 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800971c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009720:	1e51      	subs	r1, r2, #1
 8009722:	430b      	orrs	r3, r1
 8009724:	d136      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009726:	4b8d      	ldr	r3, [pc, #564]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009738:	f7fe fc6c 	bl	8008014 <HAL_RCC_GetPCLK2Freq>
 800973c:	6378      	str	r0, [r7, #52]	@ 0x34
 800973e:	f000 bf4b 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	2b01      	cmp	r3, #1
 8009746:	d104      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009748:	f7fe fb34 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 800974c:	6378      	str	r0, [r7, #52]	@ 0x34
 800974e:	f000 bf43 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009752:	4b82      	ldr	r3, [pc, #520]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800975a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800975e:	d106      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	2b02      	cmp	r3, #2
 8009764:	d103      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
    {
      frequency = HSI_VALUE;
 8009766:	4b7f      	ldr	r3, [pc, #508]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009768:	637b      	str	r3, [r7, #52]	@ 0x34
 800976a:	f000 bf35 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800976e:	4b7b      	ldr	r3, [pc, #492]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009774:	f003 0302 	and.w	r3, r3, #2
 8009778:	2b02      	cmp	r3, #2
 800977a:	d107      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800977c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977e:	2b03      	cmp	r3, #3
 8009780:	d104      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
    {
      frequency = LSE_VALUE;
 8009782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009786:	637b      	str	r3, [r7, #52]	@ 0x34
 8009788:	f000 bf26 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009790:	f000 bf22 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009798:	1f11      	subs	r1, r2, #4
 800979a:	430b      	orrs	r3, r1
 800979c:	d136      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800979e:	4b6f      	ldr	r3, [pc, #444]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80097a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80097a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80097b0:	f7fe fc1c 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 80097b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80097b6:	f000 bf0f 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	2b10      	cmp	r3, #16
 80097be:	d104      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80097c0:	f7fe faf8 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 80097c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80097c6:	f000 bf07 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80097ca:	4b64      	ldr	r3, [pc, #400]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097d6:	d106      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d103      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      frequency = HSI_VALUE;
 80097de:	4b61      	ldr	r3, [pc, #388]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e2:	f000 bef9 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80097e6:	4b5d      	ldr	r3, [pc, #372]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d107      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	2b30      	cmp	r3, #48	@ 0x30
 80097f8:	d104      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
    {
      frequency = LSE_VALUE;
 80097fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009800:	f000 beea 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	637b      	str	r3, [r7, #52]	@ 0x34
 8009808:	f000 bee6 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800980c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009810:	f1a2 0108 	sub.w	r1, r2, #8
 8009814:	430b      	orrs	r3, r1
 8009816:	d136      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009818:	4b50      	ldr	r3, [pc, #320]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800981a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800981e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009822:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009826:	2b00      	cmp	r3, #0
 8009828:	d104      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800982a:	f7fe fbdf 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 800982e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009830:	f000 bed2 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009836:	2b40      	cmp	r3, #64	@ 0x40
 8009838:	d104      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800983a:	f7fe fabb 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 800983e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009840:	f000 beca 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009844:	4b45      	ldr	r3, [pc, #276]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800984c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009850:	d106      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	2b80      	cmp	r3, #128	@ 0x80
 8009856:	d103      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = HSI_VALUE;
 8009858:	4b42      	ldr	r3, [pc, #264]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800985a:	637b      	str	r3, [r7, #52]	@ 0x34
 800985c:	f000 bebc 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009860:	4b3e      	ldr	r3, [pc, #248]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	d107      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	2bc0      	cmp	r3, #192	@ 0xc0
 8009872:	d104      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
    {
      frequency = LSE_VALUE;
 8009874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009878:	637b      	str	r3, [r7, #52]	@ 0x34
 800987a:	f000 bead 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
 8009882:	f000 bea9 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800988a:	f1a2 0110 	sub.w	r1, r2, #16
 800988e:	430b      	orrs	r3, r1
 8009890:	d139      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009892:	4b32      	ldr	r3, [pc, #200]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800989c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80098a4:	f7fe fba2 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 80098a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80098aa:	f000 be95 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80098ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b4:	d104      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80098b6:	f7fe fa7d 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 80098ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80098bc:	f000 be8c 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80098c0:	4b26      	ldr	r3, [pc, #152]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098d4:	d103      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HSI_VALUE;
 80098d6:	4b23      	ldr	r3, [pc, #140]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098da:	f000 be7d 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80098de:	4b1f      	ldr	r3, [pc, #124]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80098e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d108      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80098ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098f2:	d104      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = LSE_VALUE;
 80098f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098fa:	f000 be6d 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
 8009902:	f000 be69 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800990a:	f1a2 0120 	sub.w	r1, r2, #32
 800990e:	430b      	orrs	r3, r1
 8009910:	d15f      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009912:	4b12      	ldr	r3, [pc, #72]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800991e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009924:	f7fe fb8a 	bl	800803c <HAL_RCC_GetPCLK3Freq>
 8009928:	6378      	str	r0, [r7, #52]	@ 0x34
 800992a:	f000 be55 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	2b01      	cmp	r3, #1
 8009932:	d104      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009934:	f7fe fa3e 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8009938:	6378      	str	r0, [r7, #52]	@ 0x34
 800993a:	f000 be4d 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800993e:	4b07      	ldr	r3, [pc, #28]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800994a:	d10d      	bne.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	2b02      	cmp	r3, #2
 8009950:	d10a      	bne.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HSI_VALUE;
 8009952:	4b04      	ldr	r3, [pc, #16]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009954:	637b      	str	r3, [r7, #52]	@ 0x34
 8009956:	f000 be3f 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800995a:	bf00      	nop
 800995c:	46020c00 	.word	0x46020c00
 8009960:	080104d8 	.word	0x080104d8
 8009964:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009968:	4baf      	ldr	r3, [pc, #700]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800996a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b02      	cmp	r3, #2
 8009974:	d107      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	2b03      	cmp	r3, #3
 800997a:	d104      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = LSE_VALUE;
 800997c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
 8009982:	f000 be29 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009986:	4ba8      	ldr	r3, [pc, #672]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b20      	cmp	r3, #32
 8009990:	d11b      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	2b04      	cmp	r3, #4
 8009996:	d118      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009998:	4ba3      	ldr	r3, [pc, #652]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 80099a4:	4ba0      	ldr	r3, [pc, #640]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	0e1b      	lsrs	r3, r3, #24
 80099aa:	f003 030f 	and.w	r3, r3, #15
 80099ae:	e006      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80099b0:	4b9d      	ldr	r3, [pc, #628]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80099b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099b6:	041b      	lsls	r3, r3, #16
 80099b8:	0e1b      	lsrs	r3, r3, #24
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	4a9b      	ldr	r2, [pc, #620]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80099c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c6:	f000 be07 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ce:	f000 be03 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80099d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80099da:	430b      	orrs	r3, r1
 80099dc:	d16c      	bne.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80099de:	4b92      	ldr	r3, [pc, #584]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80099e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80099e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099f0:	d104      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80099f2:	f7fe f9df 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 80099f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80099f8:	f000 bdee 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80099fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a02:	d108      	bne.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a04:	f107 0318 	add.w	r3, r7, #24
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff fa2d 	bl	8008e68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a12:	f000 bde1 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009a1c:	f7fe facc 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 8009a20:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a22:	f000 bdd9 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009a2c:	d122      	bne.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009a2e:	4b7e      	ldr	r3, [pc, #504]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d118      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8009a46:	4b78      	ldr	r3, [pc, #480]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	0e1b      	lsrs	r3, r3, #24
 8009a4c:	f003 030f 	and.w	r3, r3, #15
 8009a50:	e006      	b.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8009a52:	4b75      	ldr	r3, [pc, #468]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	0e1b      	lsrs	r3, r3, #24
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	4a72      	ldr	r2, [pc, #456]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8009a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a68:	f000 bdb6 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a70:	f000 bdb2 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009a74:	4b6c      	ldr	r3, [pc, #432]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a80:	d107      	bne.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a88:	d103      	bne.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
    {
      frequency = HSE_VALUE;
 8009a8a:	4b69      	ldr	r3, [pc, #420]	@ (8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8e:	f000 bda3 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009a92:	4b65      	ldr	r3, [pc, #404]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a9e:	d107      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aa6:	d103      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
    {
      frequency = HSI_VALUE;
 8009aa8:	4b61      	ldr	r3, [pc, #388]	@ (8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8009aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aac:	f000 bd94 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab4:	f000 bd90 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	d158      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009ac4:	4b58      	ldr	r3, [pc, #352]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009ac6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	d84b      	bhi.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8009ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009b15 	.word	0x08009b15
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009b03 	.word	0x08009b03
 8009ae8:	08009b1f 	.word	0x08009b1f
 8009aec:	08009b29 	.word	0x08009b29
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff f85d 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009afe:	f000 bd6b 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b02:	f107 030c 	add.w	r3, r7, #12
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fb08 	bl	800911c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b10:	f000 bd62 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009b14:	f7fe fa50 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 8009b18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b1a:	f000 bd5d 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009b1e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b24:	f000 bd58 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b28:	4b3f      	ldr	r3, [pc, #252]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d118      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b34:	4b3c      	ldr	r3, [pc, #240]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 8009b40:	4b39      	ldr	r3, [pc, #228]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	0e1b      	lsrs	r3, r3, #24
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	e006      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8009b4c:	4b36      	ldr	r3, [pc, #216]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b52:	041b      	lsls	r3, r3, #16
 8009b54:	0e1b      	lsrs	r3, r3, #24
 8009b56:	f003 030f 	and.w	r3, r3, #15
 8009b5a:	4a34      	ldr	r2, [pc, #208]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8009b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b62:	f000 bd39 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b6a:	f000 bd35 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b72:	f000 bd31 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b7a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009b7e:	430b      	orrs	r3, r1
 8009b80:	d16d      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009b82:	4b29      	ldr	r3, [pc, #164]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b88:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009b8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b94:	d036      	beq.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b9c:	d85b      	bhi.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ba4:	d029      	beq.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009bac:	d853      	bhi.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bb4:	d013      	beq.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bbc:	d84b      	bhi.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d015      	beq.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bca:	d144      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe ffef 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bda:	f000 bcfd 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bde:	f107 030c 	add.w	r3, r7, #12
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff fa9a 	bl	800911c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bec:	f000 bcf4 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009bf0:	f7fe f9e2 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 8009bf4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009bf6:	f000 bcef 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009bfa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009bfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c00:	f000 bcea 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c04:	4b08      	ldr	r3, [pc, #32]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0320 	and.w	r3, r3, #32
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	d11e      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c10:	4b05      	ldr	r3, [pc, #20]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009c1c:	4b02      	ldr	r3, [pc, #8]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	0e1b      	lsrs	r3, r3, #24
 8009c22:	f003 030f 	and.w	r3, r3, #15
 8009c26:	e00c      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8009c28:	46020c00 	.word	0x46020c00
 8009c2c:	080104d8 	.word	0x080104d8
 8009c30:	00f42400 	.word	0x00f42400
 8009c34:	4b9d      	ldr	r3, [pc, #628]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c3a:	041b      	lsls	r3, r3, #16
 8009c3c:	0e1b      	lsrs	r3, r3, #24
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	4a9b      	ldr	r2, [pc, #620]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8009c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c4a:	f000 bcc5 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c52:	f000 bcc1 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c5a:	f000 bcbd 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c62:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009c66:	430b      	orrs	r3, r1
 8009c68:	d14c      	bne.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009c6a:	4b90      	ldr	r3, [pc, #576]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d104      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009c7c:	f7fe f9b6 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 8009c80:	6378      	str	r0, [r7, #52]	@ 0x34
 8009c82:	f000 bca9 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c8c:	d104      	bne.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009c8e:	f7fe f891 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8009c92:	6378      	str	r0, [r7, #52]	@ 0x34
 8009c94:	f000 bca0 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009c98:	4b84      	ldr	r3, [pc, #528]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca4:	d107      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cac:	d103      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
    {
      frequency = HSI_VALUE;
 8009cae:	4b81      	ldr	r3, [pc, #516]	@ (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb2:	f000 bc91 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	d11c      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cc8:	d118      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009cca:	4b78      	ldr	r3, [pc, #480]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
 8009cd6:	4b75      	ldr	r3, [pc, #468]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	0e1b      	lsrs	r3, r3, #24
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	e006      	b.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8009ce2:	4b72      	ldr	r3, [pc, #456]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ce8:	041b      	lsls	r3, r3, #16
 8009cea:	0e1b      	lsrs	r3, r3, #24
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	4a6f      	ldr	r2, [pc, #444]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8009cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf8:	f000 bc6e 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d00:	f000 bc6a 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d08:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	d14c      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009d10:	4b66      	ldr	r3, [pc, #408]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009d1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d104      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009d22:	f7fe f963 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 8009d26:	6378      	str	r0, [r7, #52]	@ 0x34
 8009d28:	f000 bc56 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d32:	d104      	bne.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009d34:	f7fe f83e 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8009d38:	6378      	str	r0, [r7, #52]	@ 0x34
 8009d3a:	f000 bc4d 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d4a:	d107      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d52:	d103      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
    {
      frequency = HSI_VALUE;
 8009d54:	4b57      	ldr	r3, [pc, #348]	@ (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8009d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d58:	f000 bc3e 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009d5c:	4b53      	ldr	r3, [pc, #332]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0320 	and.w	r3, r3, #32
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	d11c      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d6e:	d118      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d70:	4b4e      	ldr	r3, [pc, #312]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d005      	beq.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	0e1b      	lsrs	r3, r3, #24
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	e006      	b.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8009d88:	4b48      	ldr	r3, [pc, #288]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d8e:	041b      	lsls	r3, r3, #16
 8009d90:	0e1b      	lsrs	r3, r3, #24
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	4a46      	ldr	r2, [pc, #280]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8009d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9e:	f000 bc1b 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da6:	f000 bc17 	b.w	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009db2:	430b      	orrs	r3, r1
 8009db4:	d151      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009db6:	4b3d      	ldr	r3, [pc, #244]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dbc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009dc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dc6:	d024      	beq.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dca:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dcc:	d842      	bhi.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd0:	2b80      	cmp	r3, #128	@ 0x80
 8009dd2:	d00d      	beq.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd6:	2b80      	cmp	r3, #128	@ 0x80
 8009dd8:	d83c      	bhi.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8009dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	2b40      	cmp	r3, #64	@ 0x40
 8009de4:	d011      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8009de6:	e035      	b.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009de8:	f7fe f928 	bl	800803c <HAL_RCC_GetPCLK3Freq>
 8009dec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009dee:	e3f3      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009df0:	4b2e      	ldr	r3, [pc, #184]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dfc:	d102      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
        {
          frequency = HSI_VALUE;
 8009dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8009e00:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e02:	e3e9      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e08:	e3e6      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009e0a:	f7fd ffd3 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8009e0e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e10:	e3e2      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009e12:	4b26      	ldr	r3, [pc, #152]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	d117      	bne.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e1e:	4b23      	ldr	r3, [pc, #140]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 8009e2a:	4b20      	ldr	r3, [pc, #128]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	0e1b      	lsrs	r3, r3, #24
 8009e30:	f003 030f 	and.w	r3, r3, #15
 8009e34:	e006      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8009e36:	4b1d      	ldr	r3, [pc, #116]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e3c:	041b      	lsls	r3, r3, #16
 8009e3e:	0e1b      	lsrs	r3, r3, #24
 8009e40:	f003 030f 	and.w	r3, r3, #15
 8009e44:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8009e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e4c:	e3c4      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e52:	e3c1      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      default:
      {
        frequency = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e58:	e3be      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e5e:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009e62:	430b      	orrs	r3, r1
 8009e64:	d14d      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009e66:	4b11      	ldr	r3, [pc, #68]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009e70:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d103      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009e78:	f7fe f8b8 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 8009e7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e7e:	e3ab      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e86:	d103      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009e88:	f7fd ff94 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8009e8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e8e:	e3a3      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009e90:	4b06      	ldr	r3, [pc, #24]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e9c:	d10c      	bne.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ea4:	d108      	bne.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 8009ea6:	4b03      	ldr	r3, [pc, #12]	@ (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8009ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eaa:	e395      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009eac:	46020c00 	.word	0x46020c00
 8009eb0:	080104d8 	.word	0x080104d8
 8009eb4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009eb8:	4ba4      	ldr	r3, [pc, #656]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0320 	and.w	r3, r3, #32
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d11b      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009eca:	d117      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ecc:	4b9f      	ldr	r3, [pc, #636]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d005      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8009ed8:	4b9c      	ldr	r3, [pc, #624]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	0e1b      	lsrs	r3, r3, #24
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	e006      	b.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8009ee4:	4b99      	ldr	r3, [pc, #612]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009eea:	041b      	lsls	r3, r3, #16
 8009eec:	0e1b      	lsrs	r3, r3, #24
 8009eee:	f003 030f 	and.w	r3, r3, #15
 8009ef2:	4a97      	ldr	r2, [pc, #604]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8009ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009efa:	e36d      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f00:	e36a      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f06:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009f0a:	430b      	orrs	r3, r1
 8009f0c:	d164      	bne.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d120      	bne.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f20:	4b8a      	ldr	r3, [pc, #552]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 0320 	and.w	r3, r3, #32
 8009f28:	2b20      	cmp	r3, #32
 8009f2a:	d117      	bne.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f2c:	4b87      	ldr	r3, [pc, #540]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 8009f38:	4b84      	ldr	r3, [pc, #528]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	0e1b      	lsrs	r3, r3, #24
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	e006      	b.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 8009f44:	4b81      	ldr	r3, [pc, #516]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f4a:	041b      	lsls	r3, r3, #16
 8009f4c:	0e1b      	lsrs	r3, r3, #24
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	4a7f      	ldr	r2, [pc, #508]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8009f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f5a:	e33d      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f60:	e33a      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009f62:	4b7a      	ldr	r3, [pc, #488]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f70:	d112      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f78:	d10e      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f7a:	4b74      	ldr	r3, [pc, #464]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f88:	d102      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      {
        frequency = LSI_VALUE / 128U;
 8009f8a:	23fa      	movs	r3, #250	@ 0xfa
 8009f8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f8e:	e323      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8009f90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009f94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f96:	e31f      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009f98:	4b6c      	ldr	r3, [pc, #432]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fa4:	d106      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fac:	d102      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
    {
      frequency = HSI_VALUE;
 8009fae:	4b69      	ldr	r3, [pc, #420]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb2:	e311      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009fb4:	4b65      	ldr	r3, [pc, #404]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d107      	bne.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fc8:	d103      	bne.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
    {
      frequency = LSE_VALUE;
 8009fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd0:	e302      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd6:	e2ff      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fdc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	d164      	bne.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009fe4:	4b59      	ldr	r3, [pc, #356]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009fee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d120      	bne.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ff6:	4b55      	ldr	r3, [pc, #340]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d117      	bne.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a002:	4b52      	ldr	r3, [pc, #328]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 800a00e:	4b4f      	ldr	r3, [pc, #316]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	0e1b      	lsrs	r3, r3, #24
 800a014:	f003 030f 	and.w	r3, r3, #15
 800a018:	e006      	b.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 800a01a:	4b4c      	ldr	r3, [pc, #304]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a01c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a020:	041b      	lsls	r3, r3, #16
 800a022:	0e1b      	lsrs	r3, r3, #24
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	4a49      	ldr	r2, [pc, #292]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800a02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a030:	e2d2      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	637b      	str	r3, [r7, #52]	@ 0x34
 800a036:	e2cf      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800a038:	4b44      	ldr	r3, [pc, #272]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a03a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a03e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a046:	d112      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
 800a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a04e:	d10e      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a050:	4b3e      	ldr	r3, [pc, #248]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a05a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a05e:	d102      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
      {
        frequency = LSI_VALUE / 128U;
 800a060:	23fa      	movs	r3, #250	@ 0xfa
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a064:	e2b8      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800a066:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a06a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a06c:	e2b4      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800a06e:	4b37      	ldr	r3, [pc, #220]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a07a:	d106      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800a07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a082:	d102      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = HSI_VALUE;
 800a084:	4b33      	ldr	r3, [pc, #204]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a086:	637b      	str	r3, [r7, #52]	@ 0x34
 800a088:	e2a6      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800a08a:	4b30      	ldr	r3, [pc, #192]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b02      	cmp	r3, #2
 800a096:	d107      	bne.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a09e:	d103      	bne.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
    {
      frequency = LSE_VALUE;
 800a0a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a6:	e297      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ac:	e294      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800a0ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b2:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	d14e      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a0ba:	4b24      	ldr	r3, [pc, #144]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a0bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a0c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d103      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a0cc:	f7fd ff8e 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 800a0d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a0d2:	e281      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800a0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a0d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0e2:	d112      	bne.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0ea:	d10e      	bne.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a0ec:	4b17      	ldr	r3, [pc, #92]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a0ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0fa:	d102      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
      {
        frequency = LSI_VALUE / 128U;
 800a0fc:	23fa      	movs	r3, #250	@ 0xfa
 800a0fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a100:	e26a      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800a102:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a106:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a108:	e266      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800a10a:	4b10      	ldr	r3, [pc, #64]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a116:	d106      	bne.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a11e:	d102      	bne.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = HSI_VALUE;
 800a120:	4b0c      	ldr	r3, [pc, #48]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a122:	637b      	str	r3, [r7, #52]	@ 0x34
 800a124:	e258      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800a126:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800a128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b02      	cmp	r3, #2
 800a132:	d107      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a13a:	d103      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
    {
      frequency = LSE_VALUE;
 800a13c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a140:	637b      	str	r3, [r7, #52]	@ 0x34
 800a142:	e249      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	637b      	str	r3, [r7, #52]	@ 0x34
 800a148:	e246      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a14a:	bf00      	nop
 800a14c:	46020c00 	.word	0x46020c00
 800a150:	080104d8 	.word	0x080104d8
 800a154:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800a158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a15c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800a160:	430b      	orrs	r3, r1
 800a162:	d12d      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800a164:	4ba9      	ldr	r3, [pc, #676]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a16a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a16e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800a170:	4ba6      	ldr	r3, [pc, #664]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a17c:	d105      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
    {
      frequency = HSE_VALUE;
 800a184:	4ba2      	ldr	r3, [pc, #648]	@ (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800a186:	637b      	str	r3, [r7, #52]	@ 0x34
 800a188:	e226      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a190:	d107      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fd0c 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a0:	e21a      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1a8:	d107      	bne.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1aa:	f107 0318 	add.w	r3, r7, #24
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fe5a 	bl	8008e68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1b8:	e20e      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1be:	e20b      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800a1c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1c4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	d156      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a1cc:	4b8f      	ldr	r3, [pc, #572]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a1ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1d2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a1d6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1de:	d028      	beq.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1e6:	d845      	bhi.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1ee:	d013      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1f6:	d83d      	bhi.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d004      	beq.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a200:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a204:	d004      	beq.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
 800a206:	e035      	b.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800a208:	f7fd ff04 	bl	8008014 <HAL_RCC_GetPCLK2Freq>
 800a20c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a20e:	e1e3      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a210:	f7fd fdd0 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 800a214:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a216:	e1df      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a218:	4b7c      	ldr	r3, [pc, #496]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a224:	d102      	bne.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI_VALUE;
 800a226:	4b7a      	ldr	r3, [pc, #488]	@ (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800a228:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a22a:	e1d5      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a230:	e1d2      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a232:	4b76      	ldr	r3, [pc, #472]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d117      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a23e:	4b73      	ldr	r3, [pc, #460]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800a24a:	4b70      	ldr	r3, [pc, #448]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	0e1b      	lsrs	r3, r3, #24
 800a250:	f003 030f 	and.w	r3, r3, #15
 800a254:	e006      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800a256:	4b6d      	ldr	r3, [pc, #436]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a25c:	041b      	lsls	r3, r3, #16
 800a25e:	0e1b      	lsrs	r3, r3, #24
 800a260:	f003 030f 	and.w	r3, r3, #15
 800a264:	4a6b      	ldr	r2, [pc, #428]	@ (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800a266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a26c:	e1b4      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a272:	e1b1      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a278:	e1ae      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800a27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800a282:	430b      	orrs	r3, r1
 800a284:	d156      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a286:	4b61      	ldr	r3, [pc, #388]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a28c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a290:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a294:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a298:	d028      	beq.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2a0:	d845      	bhi.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2a8:	d013      	beq.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2b0:	d83d      	bhi.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2be:	d004      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 800a2c0:	e035      	b.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800a2c2:	f7fd fe93 	bl	8007fec <HAL_RCC_GetPCLK1Freq>
 800a2c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a2c8:	e186      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a2ca:	f7fd fd73 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 800a2ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a2d0:	e182      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2d2:	4b4e      	ldr	r3, [pc, #312]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2de:	d102      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
        {
          frequency = HSI_VALUE;
 800a2e0:	4b4b      	ldr	r3, [pc, #300]	@ (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800a2e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a2e4:	e178      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2ea:	e175      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a2ec:	4b47      	ldr	r3, [pc, #284]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0320 	and.w	r3, r3, #32
 800a2f4:	2b20      	cmp	r3, #32
 800a2f6:	d117      	bne.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a2f8:	4b44      	ldr	r3, [pc, #272]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
 800a304:	4b41      	ldr	r3, [pc, #260]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	0e1b      	lsrs	r3, r3, #24
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	e006      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 800a310:	4b3e      	ldr	r3, [pc, #248]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a316:	041b      	lsls	r3, r3, #16
 800a318:	0e1b      	lsrs	r3, r3, #24
 800a31a:	f003 030f 	and.w	r3, r3, #15
 800a31e:	4a3d      	ldr	r2, [pc, #244]	@ (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800a320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a324:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a326:	e157      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a328:	2300      	movs	r3, #0
 800a32a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a32c:	e154      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a332:	e151      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a334:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a338:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800a33c:	430b      	orrs	r3, r1
 800a33e:	d17d      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a340:	4b32      	ldr	r3, [pc, #200]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a346:	f003 0318 	and.w	r3, r3, #24
 800a34a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	2b18      	cmp	r3, #24
 800a350:	d871      	bhi.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
 800a352:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>)
 800a354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a358:	0800a3bd 	.word	0x0800a3bd
 800a35c:	0800a437 	.word	0x0800a437
 800a360:	0800a437 	.word	0x0800a437
 800a364:	0800a437 	.word	0x0800a437
 800a368:	0800a437 	.word	0x0800a437
 800a36c:	0800a437 	.word	0x0800a437
 800a370:	0800a437 	.word	0x0800a437
 800a374:	0800a437 	.word	0x0800a437
 800a378:	0800a3c5 	.word	0x0800a3c5
 800a37c:	0800a437 	.word	0x0800a437
 800a380:	0800a437 	.word	0x0800a437
 800a384:	0800a437 	.word	0x0800a437
 800a388:	0800a437 	.word	0x0800a437
 800a38c:	0800a437 	.word	0x0800a437
 800a390:	0800a437 	.word	0x0800a437
 800a394:	0800a437 	.word	0x0800a437
 800a398:	0800a3cd 	.word	0x0800a3cd
 800a39c:	0800a437 	.word	0x0800a437
 800a3a0:	0800a437 	.word	0x0800a437
 800a3a4:	0800a437 	.word	0x0800a437
 800a3a8:	0800a437 	.word	0x0800a437
 800a3ac:	0800a437 	.word	0x0800a437
 800a3b0:	0800a437 	.word	0x0800a437
 800a3b4:	0800a437 	.word	0x0800a437
 800a3b8:	0800a3e7 	.word	0x0800a3e7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a3bc:	f7fd fe3e 	bl	800803c <HAL_RCC_GetPCLK3Freq>
 800a3c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a3c2:	e109      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a3c4:	f7fd fcf6 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 800a3c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a3ca:	e105      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3d8:	d102      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = HSI_VALUE;
 800a3da:	4b0d      	ldr	r3, [pc, #52]	@ (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800a3dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3de:	e0fb      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3e4:	e0f8      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a3e6:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b20      	cmp	r3, #32
 800a3f0:	d11e      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a3f2:	4b06      	ldr	r3, [pc, #24]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00c      	beq.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800a3fe:	4b03      	ldr	r3, [pc, #12]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	0e1b      	lsrs	r3, r3, #24
 800a404:	f003 030f 	and.w	r3, r3, #15
 800a408:	e00d      	b.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 800a40a:	bf00      	nop
 800a40c:	46020c00 	.word	0x46020c00
 800a410:	00f42400 	.word	0x00f42400
 800a414:	080104d8 	.word	0x080104d8
 800a418:	4b72      	ldr	r3, [pc, #456]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a41a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a41e:	041b      	lsls	r3, r3, #16
 800a420:	0e1b      	lsrs	r3, r3, #24
 800a422:	f003 030f 	and.w	r3, r3, #15
 800a426:	4a70      	ldr	r2, [pc, #448]	@ (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 800a428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a42e:	e0d3      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a434:	e0d0      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a43a:	e0cd      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a43c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a440:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a444:	430b      	orrs	r3, r1
 800a446:	d155      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a448:	4b66      	ldr	r3, [pc, #408]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a44a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a44e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a452:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a456:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a45a:	d013      	beq.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a462:	d844      	bhi.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a46a:	d013      	beq.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a472:	d83c      	bhi.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 800a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a476:	2b00      	cmp	r3, #0
 800a478:	d014      	beq.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a480:	d014      	beq.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 800a482:	e034      	b.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a484:	f107 0318 	add.w	r3, r7, #24
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fe fced 	bl	8008e68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a492:	e0a1      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fb8b 	bl	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4a2:	e099      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a4a4:	f7fd fc86 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 800a4a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a4aa:	e095      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a4ac:	4b4d      	ldr	r3, [pc, #308]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0320 	and.w	r3, r3, #32
 800a4b4:	2b20      	cmp	r3, #32
 800a4b6:	d117      	bne.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1118>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a4b8:	4b4a      	ldr	r3, [pc, #296]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 800a4c4:	4b47      	ldr	r3, [pc, #284]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	0e1b      	lsrs	r3, r3, #24
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	e006      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
 800a4d0:	4b44      	ldr	r3, [pc, #272]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a4d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4d6:	041b      	lsls	r3, r3, #16
 800a4d8:	0e1b      	lsrs	r3, r3, #24
 800a4da:	f003 030f 	and.w	r3, r3, #15
 800a4de:	4a42      	ldr	r2, [pc, #264]	@ (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 800a4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a4e6:	e077      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4ec:	e074      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4f2:	e071      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f8:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a4fc:	430b      	orrs	r3, r1
 800a4fe:	d131      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x1194>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a500:	4b38      	ldr	r3, [pc, #224]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a50a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a50c:	4b35      	ldr	r3, [pc, #212]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a50e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b02      	cmp	r3, #2
 800a518:	d106      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
 800a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
    {
      frequency = LSE_VALUE;
 800a520:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a524:	637b      	str	r3, [r7, #52]	@ 0x34
 800a526:	e057      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a528:	4b2e      	ldr	r3, [pc, #184]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a52e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a536:	d112      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
 800a538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a53e:	d10e      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a540:	4b28      	ldr	r3, [pc, #160]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a54a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a54e:	d102      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
      {
        frequency = LSI_VALUE / 128U;
 800a550:	23fa      	movs	r3, #250	@ 0xfa
 800a552:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a554:	e040      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800a556:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a55a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a55c:	e03c      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	637b      	str	r3, [r7, #52]	@ 0x34
 800a562:	e039      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a568:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a56c:	430b      	orrs	r3, r1
 800a56e:	d131      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a570:	4b1c      	ldr	r3, [pc, #112]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a576:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a57a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a57c:	4b19      	ldr	r3, [pc, #100]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a588:	d105      	bne.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 800a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
    {
      frequency = HSI48_VALUE;
 800a590:	4b16      	ldr	r3, [pc, #88]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34
 800a594:	e020      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a596:	4b13      	ldr	r3, [pc, #76]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a59e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5a2:	d106      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5aa:	d102      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a5ac:	4b10      	ldr	r3, [pc, #64]	@ (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 800a5ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5b0:	e012      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5be:	d106      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5c6:	d102      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
    {
      frequency = HSI_VALUE;
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5cc:	e004      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5d2:	e001      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3738      	adds	r7, #56	@ 0x38
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	46020c00 	.word	0x46020c00
 800a5e8:	080104d8 	.word	0x080104d8
 800a5ec:	02dc6c00 	.word	0x02dc6c00
 800a5f0:	016e3600 	.word	0x016e3600
 800a5f4:	00f42400 	.word	0x00f42400

0800a5f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a600:	4b47      	ldr	r3, [pc, #284]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a46      	ldr	r2, [pc, #280]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a606:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a60a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a60c:	f7f7 fe28 	bl	8002260 <HAL_GetTick>
 800a610:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a612:	e008      	b.n	800a626 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a614:	f7f7 fe24 	bl	8002260 <HAL_GetTick>
 800a618:	4602      	mov	r2, r0
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d901      	bls.n	800a626 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e077      	b.n	800a716 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a626:	4b3e      	ldr	r3, [pc, #248]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1f0      	bne.n	800a614 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a632:	4b3b      	ldr	r3, [pc, #236]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a636:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a63a:	f023 0303 	bic.w	r3, r3, #3
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	6811      	ldr	r1, [r2, #0]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	6852      	ldr	r2, [r2, #4]
 800a646:	3a01      	subs	r2, #1
 800a648:	0212      	lsls	r2, r2, #8
 800a64a:	430a      	orrs	r2, r1
 800a64c:	4934      	ldr	r1, [pc, #208]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a652:	4b33      	ldr	r3, [pc, #204]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a656:	4b33      	ldr	r3, [pc, #204]	@ (800a724 <RCCEx_PLL2_Config+0x12c>)
 800a658:	4013      	ands	r3, r2
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6892      	ldr	r2, [r2, #8]
 800a65e:	3a01      	subs	r2, #1
 800a660:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	68d2      	ldr	r2, [r2, #12]
 800a668:	3a01      	subs	r2, #1
 800a66a:	0252      	lsls	r2, r2, #9
 800a66c:	b292      	uxth	r2, r2
 800a66e:	4311      	orrs	r1, r2
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	6912      	ldr	r2, [r2, #16]
 800a674:	3a01      	subs	r2, #1
 800a676:	0412      	lsls	r2, r2, #16
 800a678:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a67c:	4311      	orrs	r1, r2
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6952      	ldr	r2, [r2, #20]
 800a682:	3a01      	subs	r2, #1
 800a684:	0612      	lsls	r2, r2, #24
 800a686:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a68a:	430a      	orrs	r2, r1
 800a68c:	4924      	ldr	r1, [pc, #144]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a692:	4b23      	ldr	r3, [pc, #140]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a696:	f023 020c 	bic.w	r2, r3, #12
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	4920      	ldr	r1, [pc, #128]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a6a4:	4b1e      	ldr	r3, [pc, #120]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	491c      	ldr	r1, [pc, #112]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a6b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6b8:	f023 0310 	bic.w	r3, r3, #16
 800a6bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a6be:	4b18      	ldr	r3, [pc, #96]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	69d2      	ldr	r2, [r2, #28]
 800a6ce:	00d2      	lsls	r2, r2, #3
 800a6d0:	4913      	ldr	r1, [pc, #76]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a6d6:	4b12      	ldr	r3, [pc, #72]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6da:	4a11      	ldr	r2, [pc, #68]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6dc:	f043 0310 	orr.w	r3, r3, #16
 800a6e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a6e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a6ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a6ee:	f7f7 fdb7 	bl	8002260 <HAL_GetTick>
 800a6f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6f4:	e008      	b.n	800a708 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a6f6:	f7f7 fdb3 	bl	8002260 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	2b02      	cmp	r3, #2
 800a702:	d901      	bls.n	800a708 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e006      	b.n	800a716 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a708:	4b05      	ldr	r3, [pc, #20]	@ (800a720 <RCCEx_PLL2_Config+0x128>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0f0      	beq.n	800a6f6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a714:	2300      	movs	r3, #0

}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	46020c00 	.word	0x46020c00
 800a724:	80800000 	.word	0x80800000

0800a728 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a730:	4b47      	ldr	r3, [pc, #284]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a46      	ldr	r2, [pc, #280]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a73a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a73c:	f7f7 fd90 	bl	8002260 <HAL_GetTick>
 800a740:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a742:	e008      	b.n	800a756 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a744:	f7f7 fd8c 	bl	8002260 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d901      	bls.n	800a756 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e077      	b.n	800a846 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a756:	4b3e      	ldr	r3, [pc, #248]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1f0      	bne.n	800a744 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a762:	4b3b      	ldr	r3, [pc, #236]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a766:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6811      	ldr	r1, [r2, #0]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6852      	ldr	r2, [r2, #4]
 800a776:	3a01      	subs	r2, #1
 800a778:	0212      	lsls	r2, r2, #8
 800a77a:	430a      	orrs	r2, r1
 800a77c:	4934      	ldr	r1, [pc, #208]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	630b      	str	r3, [r1, #48]	@ 0x30
 800a782:	4b33      	ldr	r3, [pc, #204]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a786:	4b33      	ldr	r3, [pc, #204]	@ (800a854 <RCCEx_PLL3_Config+0x12c>)
 800a788:	4013      	ands	r3, r2
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	6892      	ldr	r2, [r2, #8]
 800a78e:	3a01      	subs	r2, #1
 800a790:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	68d2      	ldr	r2, [r2, #12]
 800a798:	3a01      	subs	r2, #1
 800a79a:	0252      	lsls	r2, r2, #9
 800a79c:	b292      	uxth	r2, r2
 800a79e:	4311      	orrs	r1, r2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	6912      	ldr	r2, [r2, #16]
 800a7a4:	3a01      	subs	r2, #1
 800a7a6:	0412      	lsls	r2, r2, #16
 800a7a8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a7ac:	4311      	orrs	r1, r2
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6952      	ldr	r2, [r2, #20]
 800a7b2:	3a01      	subs	r2, #1
 800a7b4:	0612      	lsls	r2, r2, #24
 800a7b6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	4924      	ldr	r1, [pc, #144]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a7c2:	4b23      	ldr	r3, [pc, #140]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7c6:	f023 020c 	bic.w	r2, r3, #12
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	4920      	ldr	r1, [pc, #128]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a7d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	491c      	ldr	r1, [pc, #112]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7e8:	f023 0310 	bic.w	r3, r3, #16
 800a7ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a7ee:	4b18      	ldr	r3, [pc, #96]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a7f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	69d2      	ldr	r2, [r2, #28]
 800a7fe:	00d2      	lsls	r2, r2, #3
 800a800:	4913      	ldr	r1, [pc, #76]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a802:	4313      	orrs	r3, r2
 800a804:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a806:	4b12      	ldr	r3, [pc, #72]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a80a:	4a11      	ldr	r2, [pc, #68]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a80c:	f043 0310 	orr.w	r3, r3, #16
 800a810:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a812:	4b0f      	ldr	r3, [pc, #60]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a0e      	ldr	r2, [pc, #56]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a81c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a81e:	f7f7 fd1f 	bl	8002260 <HAL_GetTick>
 800a822:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a824:	e008      	b.n	800a838 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a826:	f7f7 fd1b 	bl	8002260 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d901      	bls.n	800a838 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e006      	b.n	800a846 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a838:	4b05      	ldr	r3, [pc, #20]	@ (800a850 <RCCEx_PLL3_Config+0x128>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0f0      	beq.n	800a826 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	46020c00 	.word	0x46020c00
 800a854:	80800000 	.word	0x80800000

0800a858 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e0fb      	b.n	800aa62 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a7f      	ldr	r2, [pc, #508]	@ (800aa6c <HAL_SPI_Init+0x214>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d004      	beq.n	800a87e <HAL_SPI_Init+0x26>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a7d      	ldr	r2, [pc, #500]	@ (800aa70 <HAL_SPI_Init+0x218>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	e000      	b.n	800a880 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a87e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a78      	ldr	r2, [pc, #480]	@ (800aa6c <HAL_SPI_Init+0x214>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d004      	beq.n	800a89a <HAL_SPI_Init+0x42>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a76      	ldr	r2, [pc, #472]	@ (800aa70 <HAL_SPI_Init+0x218>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d105      	bne.n	800a8a6 <HAL_SPI_Init+0x4e>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	2b0f      	cmp	r3, #15
 800a8a0:	d901      	bls.n	800a8a6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e0dd      	b.n	800aa62 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f001 f944 	bl	800bb34 <SPI_GetPacketSize>
 800a8ac:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a6e      	ldr	r2, [pc, #440]	@ (800aa6c <HAL_SPI_Init+0x214>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d004      	beq.n	800a8c2 <HAL_SPI_Init+0x6a>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a6c      	ldr	r2, [pc, #432]	@ (800aa70 <HAL_SPI_Init+0x218>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d102      	bne.n	800a8c8 <HAL_SPI_Init+0x70>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d816      	bhi.n	800a8f6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8cc:	4a69      	ldr	r2, [pc, #420]	@ (800aa74 <HAL_SPI_Init+0x21c>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00e      	beq.n	800a8f0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a68      	ldr	r2, [pc, #416]	@ (800aa78 <HAL_SPI_Init+0x220>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d009      	beq.n	800a8f0 <HAL_SPI_Init+0x98>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a66      	ldr	r2, [pc, #408]	@ (800aa7c <HAL_SPI_Init+0x224>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d004      	beq.n	800a8f0 <HAL_SPI_Init+0x98>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a65      	ldr	r2, [pc, #404]	@ (800aa80 <HAL_SPI_Init+0x228>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d104      	bne.n	800a8fa <HAL_SPI_Init+0xa2>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b10      	cmp	r3, #16
 800a8f4:	d901      	bls.n	800a8fa <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e0b3      	b.n	800aa62 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7f6 fd6c 	bl	80013ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f022 0201 	bic.w	r2, r2, #1
 800a92a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a936:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a940:	d119      	bne.n	800a976 <HAL_SPI_Init+0x11e>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a94a:	d103      	bne.n	800a954 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a950:	2b00      	cmp	r3, #0
 800a952:	d008      	beq.n	800a966 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10c      	bne.n	800a976 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a964:	d107      	bne.n	800a976 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a974:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00f      	beq.n	800a9a2 <HAL_SPI_Init+0x14a>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	2b06      	cmp	r3, #6
 800a988:	d90b      	bls.n	800a9a2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	430a      	orrs	r2, r1
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	e007      	b.n	800a9b2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a9b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69da      	ldr	r2, [r3, #28]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ba:	431a      	orrs	r2, r3
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c4:	ea42 0103 	orr.w	r1, r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9dc:	431a      	orrs	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	431a      	orrs	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa06:	431a      	orrs	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa12:	431a      	orrs	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa1e:	ea42 0103 	orr.w	r1, r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00a      	beq.n	800aa50 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	46002000 	.word	0x46002000
 800aa70:	56002000 	.word	0x56002000
 800aa74:	40013000 	.word	0x40013000
 800aa78:	50013000 	.word	0x50013000
 800aa7c:	40003800 	.word	0x40003800
 800aa80:	50003800 	.word	0x50003800

0800aa84 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	4613      	mov	r3, r2
 800aa92:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3320      	adds	r3, #32
 800aa9a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a90      	ldr	r2, [pc, #576]	@ (800ace4 <HAL_SPI_Transmit+0x260>)
 800aaa2:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aaa4:	f7f7 fbdc 	bl	8002260 <HAL_GetTick>
 800aaa8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d001      	beq.n	800aaba <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800aab6:	2302      	movs	r3, #2
 800aab8:	e1f4      	b.n	800aea4 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <HAL_SPI_Transmit+0x42>
 800aac0:	88fb      	ldrh	r3, [r7, #6]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e1ec      	b.n	800aea4 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_SPI_Transmit+0x54>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e1e5      	b.n	800aea4 <HAL_SPI_Transmit+0x420>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2203      	movs	r2, #3
 800aae4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	88fa      	ldrh	r2, [r7, #6]
 800aafa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	88fa      	ldrh	r2, [r7, #6]
 800ab02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ab30:	d108      	bne.n	800ab44 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	e009      	b.n	800ab58 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ab56:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	0c1b      	lsrs	r3, r3, #16
 800ab60:	041b      	lsls	r3, r3, #16
 800ab62:	88f9      	ldrh	r1, [r7, #6]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	6812      	ldr	r2, [r2, #0]
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10c      	bne.n	800aba4 <HAL_SPI_Transmit+0x120>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab92:	d107      	bne.n	800aba4 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b0f      	cmp	r3, #15
 800abaa:	d95b      	bls.n	800ac64 <HAL_SPI_Transmit+0x1e0>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a4d      	ldr	r2, [pc, #308]	@ (800ace8 <HAL_SPI_Transmit+0x264>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d04f      	beq.n	800ac56 <HAL_SPI_Transmit+0x1d2>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a4c      	ldr	r2, [pc, #304]	@ (800acec <HAL_SPI_Transmit+0x268>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d04a      	beq.n	800ac56 <HAL_SPI_Transmit+0x1d2>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a4a      	ldr	r2, [pc, #296]	@ (800acf0 <HAL_SPI_Transmit+0x26c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d045      	beq.n	800ac56 <HAL_SPI_Transmit+0x1d2>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a49      	ldr	r2, [pc, #292]	@ (800acf4 <HAL_SPI_Transmit+0x270>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d147      	bne.n	800ac64 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800abd4:	e03f      	b.n	800ac56 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d114      	bne.n	800ac0e <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6812      	ldr	r2, [r2, #0]
 800abee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abf4:	1d1a      	adds	r2, r3, #4
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ac0c:	e023      	b.n	800ac56 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac0e:	f7f7 fb27 	bl	8002260 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d803      	bhi.n	800ac26 <HAL_SPI_Transmit+0x1a2>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac24:	d102      	bne.n	800ac2c <HAL_SPI_Transmit+0x1a8>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d114      	bne.n	800ac56 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 feb3 	bl	800b998 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e126      	b.n	800aea4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1b9      	bne.n	800abd6 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ac62:	e0f9      	b.n	800ae58 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b07      	cmp	r3, #7
 800ac6a:	f240 80ee 	bls.w	800ae4a <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ac6e:	e067      	b.n	800ad40 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	f003 0302 	and.w	r3, r3, #2
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d13c      	bne.n	800acf8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d918      	bls.n	800acbc <HAL_SPI_Transmit+0x238>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d014      	beq.n	800acbc <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6812      	ldr	r2, [r2, #0]
 800ac9c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aca2:	1d1a      	adds	r2, r3, #4
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acae:	b29b      	uxth	r3, r3
 800acb0:	3b02      	subs	r3, #2
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800acba:	e041      	b.n	800ad40 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acc0:	881a      	ldrh	r2, [r3, #0]
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acca:	1c9a      	adds	r2, r3, #2
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	3b01      	subs	r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ace2:	e02d      	b.n	800ad40 <HAL_SPI_Transmit+0x2bc>
 800ace4:	46002000 	.word	0x46002000
 800ace8:	40013000 	.word	0x40013000
 800acec:	50013000 	.word	0x50013000
 800acf0:	40003800 	.word	0x40003800
 800acf4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acf8:	f7f7 fab2 	bl	8002260 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d803      	bhi.n	800ad10 <HAL_SPI_Transmit+0x28c>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d102      	bne.n	800ad16 <HAL_SPI_Transmit+0x292>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d114      	bne.n	800ad40 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 fe3e 	bl	800b998 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e0b1      	b.n	800aea4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d191      	bne.n	800ac70 <HAL_SPI_Transmit+0x1ec>
 800ad4c:	e084      	b.n	800ae58 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d152      	bne.n	800ae02 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	d918      	bls.n	800ad9a <HAL_SPI_Transmit+0x316>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad6c:	2b40      	cmp	r3, #64	@ 0x40
 800ad6e:	d914      	bls.n	800ad9a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6812      	ldr	r2, [r2, #0]
 800ad7a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad80:	1d1a      	adds	r2, r3, #4
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	3b04      	subs	r3, #4
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ad98:	e057      	b.n	800ae4a <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d917      	bls.n	800add6 <HAL_SPI_Transmit+0x352>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d013      	beq.n	800add6 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adb2:	881a      	ldrh	r2, [r3, #0]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adbc:	1c9a      	adds	r2, r3, #2
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3b02      	subs	r3, #2
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800add4:	e039      	b.n	800ae4a <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	3320      	adds	r3, #32
 800ade0:	7812      	ldrb	r2, [r2, #0]
 800ade2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	3b01      	subs	r3, #1
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae00:	e023      	b.n	800ae4a <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae02:	f7f7 fa2d 	bl	8002260 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d803      	bhi.n	800ae1a <HAL_SPI_Transmit+0x396>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d102      	bne.n	800ae20 <HAL_SPI_Transmit+0x39c>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d114      	bne.n	800ae4a <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 fdb9 	bl	800b998 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e02c      	b.n	800aea4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f47f af7b 	bne.w	800ad4e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2108      	movs	r1, #8
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 fe38 	bl	800bad8 <SPI_WaitOnFlagUntilTimeout>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d007      	beq.n	800ae7e <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae74:	f043 0220 	orr.w	r2, r3, #32
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 fd8a 	bl	800b998 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800aea2:	2300      	movs	r3, #0
  }
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08e      	sub	sp, #56	@ 0x38
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3320      	adds	r3, #32
 800aec0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3330      	adds	r3, #48	@ 0x30
 800aec8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aece:	095b      	lsrs	r3, r3, #5
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	3301      	adds	r3, #1
 800aed4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a90      	ldr	r2, [pc, #576]	@ (800b11c <HAL_SPI_TransmitReceive+0x270>)
 800aedc:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aede:	f7f7 f9bf 	bl	8002260 <HAL_GetTick>
 800aee2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800aee4:	887b      	ldrh	r3, [r7, #2]
 800aee6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800aee8:	887b      	ldrh	r3, [r7, #2]
 800aeea:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d001      	beq.n	800aefc <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 800aef8:	2302      	movs	r3, #2
 800aefa:	e332      	b.n	800b562 <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <HAL_SPI_TransmitReceive+0x62>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <HAL_SPI_TransmitReceive+0x62>
 800af08:	887b      	ldrh	r3, [r7, #2]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e327      	b.n	800b562 <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <HAL_SPI_TransmitReceive+0x74>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e320      	b.n	800b562 <HAL_SPI_TransmitReceive+0x6b6>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2205      	movs	r2, #5
 800af2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	887a      	ldrh	r2, [r7, #2]
 800af42:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	887a      	ldrh	r2, [r7, #2]
 800af4a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	887a      	ldrh	r2, [r7, #2]
 800af58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	887a      	ldrh	r2, [r7, #2]
 800af60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800af7e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a66      	ldr	r2, [pc, #408]	@ (800b120 <HAL_SPI_TransmitReceive+0x274>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d00e      	beq.n	800afa8 <HAL_SPI_TransmitReceive+0xfc>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a65      	ldr	r2, [pc, #404]	@ (800b124 <HAL_SPI_TransmitReceive+0x278>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d009      	beq.n	800afa8 <HAL_SPI_TransmitReceive+0xfc>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a63      	ldr	r2, [pc, #396]	@ (800b128 <HAL_SPI_TransmitReceive+0x27c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d004      	beq.n	800afa8 <HAL_SPI_TransmitReceive+0xfc>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a62      	ldr	r2, [pc, #392]	@ (800b12c <HAL_SPI_TransmitReceive+0x280>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d102      	bne.n	800afae <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800afa8:	2310      	movs	r3, #16
 800afaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afac:	e001      	b.n	800afb2 <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800afae:	2308      	movs	r3, #8
 800afb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	0c1b      	lsrs	r3, r3, #16
 800afba:	041b      	lsls	r3, r3, #16
 800afbc:	8879      	ldrh	r1, [r7, #2]
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	6812      	ldr	r2, [r2, #0]
 800afc2:	430b      	orrs	r3, r1
 800afc4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f042 0201 	orr.w	r2, r2, #1
 800afd4:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10c      	bne.n	800affe <HAL_SPI_TransmitReceive+0x152>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afec:	d107      	bne.n	800affe <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800affc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	2b0f      	cmp	r3, #15
 800b004:	f240 80c1 	bls.w	800b18a <HAL_SPI_TransmitReceive+0x2de>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a44      	ldr	r2, [pc, #272]	@ (800b120 <HAL_SPI_TransmitReceive+0x274>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d00f      	beq.n	800b032 <HAL_SPI_TransmitReceive+0x186>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a43      	ldr	r2, [pc, #268]	@ (800b124 <HAL_SPI_TransmitReceive+0x278>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00a      	beq.n	800b032 <HAL_SPI_TransmitReceive+0x186>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a41      	ldr	r2, [pc, #260]	@ (800b128 <HAL_SPI_TransmitReceive+0x27c>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d005      	beq.n	800b032 <HAL_SPI_TransmitReceive+0x186>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a40      	ldr	r2, [pc, #256]	@ (800b12c <HAL_SPI_TransmitReceive+0x280>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	f040 80ac 	bne.w	800b18a <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b034:	089b      	lsrs	r3, r3, #2
 800b036:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b038:	e09e      	b.n	800b178 <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	f003 0302 	and.w	r3, r3, #2
 800b044:	2b02      	cmp	r3, #2
 800b046:	d120      	bne.n	800b08a <HAL_SPI_TransmitReceive+0x1de>
 800b048:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d01d      	beq.n	800b08a <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b04e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b050:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b054:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b056:	429a      	cmp	r2, r3
 800b058:	d217      	bcs.n	800b08a <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6812      	ldr	r2, [r2, #0]
 800b064:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b06a:	1d1a      	adds	r2, r3, #4
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b076:	b29b      	uxth	r3, r3
 800b078:	3b01      	subs	r3, #1
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b088:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b092:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b094:	2b00      	cmp	r3, #0
 800b096:	d06f      	beq.n	800b178 <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d118      	bne.n	800b0d8 <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b0b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0b6:	1d1a      	adds	r2, r3, #4
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b0d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b0d6:	e04f      	b.n	800b178 <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b0d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b0da:	8bfb      	ldrh	r3, [r7, #30]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d227      	bcs.n	800b130 <HAL_SPI_TransmitReceive+0x284>
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d022      	beq.n	800b130 <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b0f4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0fa:	1d1a      	adds	r2, r3, #4
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b106:	b29b      	uxth	r3, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b118:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b11a:	e02d      	b.n	800b178 <HAL_SPI_TransmitReceive+0x2cc>
 800b11c:	46002000 	.word	0x46002000
 800b120:	40013000 	.word	0x40013000
 800b124:	50013000 	.word	0x50013000
 800b128:	40003800 	.word	0x40003800
 800b12c:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b130:	f7f7 f896 	bl	8002260 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d803      	bhi.n	800b148 <HAL_SPI_TransmitReceive+0x29c>
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d102      	bne.n	800b14e <HAL_SPI_TransmitReceive+0x2a2>
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d114      	bne.n	800b178 <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 fc22 	bl	800b998 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b15a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e1f4      	b.n	800b562 <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b178:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f47f af5d 	bne.w	800b03a <HAL_SPI_TransmitReceive+0x18e>
 800b180:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b182:	2b00      	cmp	r3, #0
 800b184:	f47f af59 	bne.w	800b03a <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b188:	e1c5      	b.n	800b516 <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	2b07      	cmp	r3, #7
 800b190:	f240 81b9 	bls.w	800b506 <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	085b      	lsrs	r3, r3, #1
 800b198:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b19a:	e0c0      	b.n	800b31e <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	f003 0302 	and.w	r3, r3, #2
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d11f      	bne.n	800b1ea <HAL_SPI_TransmitReceive+0x33e>
 800b1aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01c      	beq.n	800b1ea <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b1b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b1b2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d216      	bcs.n	800b1ea <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1c0:	881a      	ldrh	r2, [r3, #0]
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1ca:	1c9a      	adds	r2, r3, #2
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b1f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 8092 	beq.w	800b31e <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b01      	cmp	r3, #1
 800b206:	d118      	bne.n	800b23a <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b20c:	6a3a      	ldr	r2, [r7, #32]
 800b20e:	8812      	ldrh	r2, [r2, #0]
 800b210:	b292      	uxth	r2, r2
 800b212:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b218:	1c9a      	adds	r2, r3, #2
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b224:	b29b      	uxth	r3, r3
 800b226:	3b01      	subs	r3, #1
 800b228:	b29a      	uxth	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b236:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b238:	e071      	b.n	800b31e <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b23a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b23c:	8bfb      	ldrh	r3, [r7, #30]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d228      	bcs.n	800b294 <HAL_SPI_TransmitReceive+0x3e8>
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d023      	beq.n	800b294 <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b250:	6a3a      	ldr	r2, [r7, #32]
 800b252:	8812      	ldrh	r2, [r2, #0]
 800b254:	b292      	uxth	r2, r2
 800b256:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b25c:	1c9a      	adds	r2, r3, #2
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b266:	6a3a      	ldr	r2, [r7, #32]
 800b268:	8812      	ldrh	r2, [r2, #0]
 800b26a:	b292      	uxth	r2, r2
 800b26c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b272:	1c9a      	adds	r2, r3, #2
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b27e:	b29b      	uxth	r3, r3
 800b280:	3b02      	subs	r3, #2
 800b282:	b29a      	uxth	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b290:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b292:	e044      	b.n	800b31e <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b294:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b296:	2b01      	cmp	r3, #1
 800b298:	d11d      	bne.n	800b2d6 <HAL_SPI_TransmitReceive+0x42a>
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d018      	beq.n	800b2d6 <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2a8:	6a3a      	ldr	r2, [r7, #32]
 800b2aa:	8812      	ldrh	r2, [r2, #0]
 800b2ac:	b292      	uxth	r2, r2
 800b2ae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2b4:	1c9a      	adds	r2, r3, #2
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b2d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b2d4:	e023      	b.n	800b31e <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2d6:	f7f6 ffc3 	bl	8002260 <HAL_GetTick>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d803      	bhi.n	800b2ee <HAL_SPI_TransmitReceive+0x442>
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ec:	d102      	bne.n	800b2f4 <HAL_SPI_TransmitReceive+0x448>
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d114      	bne.n	800b31e <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 fb4f 	bl	800b998 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b300:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e121      	b.n	800b562 <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b31e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b320:	2b00      	cmp	r3, #0
 800b322:	f47f af3b 	bne.w	800b19c <HAL_SPI_TransmitReceive+0x2f0>
 800b326:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f47f af37 	bne.w	800b19c <HAL_SPI_TransmitReceive+0x2f0>
 800b32e:	e0f2      	b.n	800b516 <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	f003 0302 	and.w	r3, r3, #2
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d121      	bne.n	800b382 <HAL_SPI_TransmitReceive+0x4d6>
 800b33e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b340:	2b00      	cmp	r3, #0
 800b342:	d01e      	beq.n	800b382 <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b344:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b346:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d218      	bcs.n	800b382 <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3320      	adds	r3, #32
 800b35a:	7812      	ldrb	r2, [r2, #0]
 800b35c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	b29a      	uxth	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b380:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b38a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 80ba 	beq.w	800b506 <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d11b      	bne.n	800b3d8 <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3ac:	7812      	ldrb	r2, [r2, #0]
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b3d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b3d6:	e096      	b.n	800b506 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b3d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b3da:	8bfb      	ldrh	r3, [r7, #30]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d24a      	bcs.n	800b476 <HAL_SPI_TransmitReceive+0x5ca>
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d045      	beq.n	800b476 <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f6:	7812      	ldrb	r2, [r2, #0]
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b412:	7812      	ldrb	r2, [r2, #0]
 800b414:	b2d2      	uxtb	r2, r2
 800b416:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	b2d2      	uxtb	r2, r2
 800b432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b44a:	7812      	ldrb	r2, [r2, #0]
 800b44c:	b2d2      	uxtb	r2, r2
 800b44e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b454:	1c5a      	adds	r2, r3, #1
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b460:	b29b      	uxth	r3, r3
 800b462:	3b04      	subs	r3, #4
 800b464:	b29a      	uxth	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b472:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b474:	e047      	b.n	800b506 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b476:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d820      	bhi.n	800b4be <HAL_SPI_TransmitReceive+0x612>
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b482:	2b00      	cmp	r3, #0
 800b484:	d01b      	beq.n	800b4be <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b492:	7812      	ldrb	r2, [r2, #0]
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b4ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b4bc:	e023      	b.n	800b506 <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4be:	f7f6 fecf 	bl	8002260 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d803      	bhi.n	800b4d6 <HAL_SPI_TransmitReceive+0x62a>
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d4:	d102      	bne.n	800b4dc <HAL_SPI_TransmitReceive+0x630>
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d114      	bne.n	800b506 <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 fa5b 	bl	800b998 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e02d      	b.n	800b562 <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b506:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f47f af11 	bne.w	800b330 <HAL_SPI_TransmitReceive+0x484>
 800b50e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b510:	2b00      	cmp	r3, #0
 800b512:	f47f af0d 	bne.w	800b330 <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	2200      	movs	r2, #0
 800b51e:	2108      	movs	r1, #8
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fad9 	bl	800bad8 <SPI_WaitOnFlagUntilTimeout>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d007      	beq.n	800b53c <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b532:	f043 0220 	orr.w	r2, r3, #32
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 fa2b 	bl	800b998 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2201      	movs	r2, #1
 800b546:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e000      	b.n	800b562 <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 800b560:	2300      	movs	r3, #0
  }
}
 800b562:	4618      	mov	r0, r3
 800b564:	3730      	adds	r7, #48	@ 0x30
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop

0800b56c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b08a      	sub	sp, #40	@ 0x28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b584:	6a3a      	ldr	r2, [r7, #32]
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	4013      	ands	r3, r2
 800b58a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b594:	2300      	movs	r3, #0
 800b596:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b59e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3330      	adds	r3, #48	@ 0x30
 800b5a6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d010      	beq.n	800b5d4 <HAL_SPI_IRQHandler+0x68>
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	f003 0308 	and.w	r3, r3, #8
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00b      	beq.n	800b5d4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5ca:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f9bf 	bl	800b950 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b5d2:	e19a      	b.n	800b90a <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d113      	bne.n	800b606 <HAL_SPI_IRQHandler+0x9a>
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10e      	bne.n	800b606 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d009      	beq.n	800b606 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	4798      	blx	r3
    handled = 1UL;
 800b602:	2301      	movs	r3, #1
 800b604:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10f      	bne.n	800b630 <HAL_SPI_IRQHandler+0xc4>
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b620:	2b00      	cmp	r3, #0
 800b622:	d105      	bne.n	800b630 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
    handled = 1UL;
 800b62c:	2301      	movs	r3, #1
 800b62e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	f003 0320 	and.w	r3, r3, #32
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10f      	bne.n	800b65a <HAL_SPI_IRQHandler+0xee>
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	f003 0302 	and.w	r3, r3, #2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d105      	bne.n	800b65a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	4798      	blx	r3
    handled = 1UL;
 800b656:	2301      	movs	r3, #1
 800b658:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 814f 	bne.w	800b900 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	f003 0308 	and.w	r3, r3, #8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 808b 	beq.w	800b784 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f042 0208 	orr.w	r2, r2, #8
 800b67c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	699a      	ldr	r2, [r3, #24]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f042 0210 	orr.w	r2, r2, #16
 800b68c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	699a      	ldr	r2, [r3, #24]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b69c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 0208 	bic.w	r2, r2, #8
 800b6ac:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d13d      	bne.n	800b738 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b6bc:	e036      	b.n	800b72c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	2b0f      	cmp	r3, #15
 800b6c4:	d90b      	bls.n	800b6de <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b6d0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6d6:	1d1a      	adds	r2, r3, #4
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b6dc:	e01d      	b.n	800b71a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	2b07      	cmp	r3, #7
 800b6e4:	d90b      	bls.n	800b6fe <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	8812      	ldrh	r2, [r2, #0]
 800b6ee:	b292      	uxth	r2, r2
 800b6f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f6:	1c9a      	adds	r2, r3, #2
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b6fc:	e00d      	b.n	800b71a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b70a:	7812      	ldrb	r2, [r2, #0]
 800b70c:	b2d2      	uxtb	r2, r2
 800b70e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b720:	b29b      	uxth	r3, r3
 800b722:	3b01      	subs	r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b732:	b29b      	uxth	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1c2      	bne.n	800b6be <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f92d 	bl	800b998 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f8f3 	bl	800b93c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b756:	e0d8      	b.n	800b90a <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b758:	7cfb      	ldrb	r3, [r7, #19]
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d103      	bne.n	800b766 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f003 fc8a 	bl	800f078 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b764:	e0ce      	b.n	800b904 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b766:	7cfb      	ldrb	r3, [r7, #19]
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d103      	bne.n	800b774 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f8db 	bl	800b928 <HAL_SPI_RxCpltCallback>
    return;
 800b772:	e0c7      	b.n	800b904 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b774:	7cfb      	ldrb	r3, [r7, #19]
 800b776:	2b03      	cmp	r3, #3
 800b778:	f040 80c4 	bne.w	800b904 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f8c9 	bl	800b914 <HAL_SPI_TxCpltCallback>
    return;
 800b782:	e0bf      	b.n	800b904 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 80bd 	beq.w	800b90a <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00f      	beq.n	800b7ba <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7a0:	f043 0204 	orr.w	r2, r3, #4
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699a      	ldr	r2, [r3, #24]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00f      	beq.n	800b7e4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7ca:	f043 0201 	orr.w	r2, r3, #1
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	699a      	ldr	r2, [r3, #24]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7e2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00f      	beq.n	800b80e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7f4:	f043 0208 	orr.w	r2, r3, #8
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	699a      	ldr	r2, [r3, #24]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b80c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	f003 0320 	and.w	r3, r3, #32
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00f      	beq.n	800b838 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b81e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	699a      	ldr	r2, [r3, #24]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f042 0220 	orr.w	r2, r2, #32
 800b836:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d062      	beq.n	800b908 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0201 	bic.w	r2, r2, #1
 800b850:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	6812      	ldr	r2, [r2, #0]
 800b85c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800b860:	f023 0303 	bic.w	r3, r3, #3
 800b864:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b86c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b870:	d13e      	bne.n	800b8f0 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b880:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d015      	beq.n	800b8b8 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b892:	4a1f      	ldr	r2, [pc, #124]	@ (800b910 <HAL_SPI_IRQHandler+0x3a4>)
 800b894:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7f8 ff6b 	bl	8004778 <HAL_DMA_Abort_IT>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d007      	beq.n	800b8b8 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d022      	beq.n	800b908 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8c8:	4a11      	ldr	r2, [pc, #68]	@ (800b910 <HAL_SPI_IRQHandler+0x3a4>)
 800b8ca:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7f8 ff50 	bl	8004778 <HAL_DMA_Abort_IT>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d014      	beq.n	800b908 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b8ee:	e00b      	b.n	800b908 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f81f 	bl	800b93c <HAL_SPI_ErrorCallback>
    return;
 800b8fe:	e003      	b.n	800b908 <HAL_SPI_IRQHandler+0x39c>
    return;
 800b900:	bf00      	nop
 800b902:	e002      	b.n	800b90a <HAL_SPI_IRQHandler+0x39e>
    return;
 800b904:	bf00      	nop
 800b906:	e000      	b.n	800b90a <HAL_SPI_IRQHandler+0x39e>
    return;
 800b908:	bf00      	nop
  }
}
 800b90a:	3728      	adds	r7, #40	@ 0x28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	0800b965 	.word	0x0800b965

0800b914 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b970:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff ffd6 	bl	800b93c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b990:	bf00      	nop
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0208 	orr.w	r2, r2, #8
 800b9b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699a      	ldr	r2, [r3, #24]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f042 0210 	orr.w	r2, r2, #16
 800b9c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f022 0201 	bic.w	r2, r2, #1
 800b9d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6812      	ldr	r2, [r2, #0]
 800b9e2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800b9e6:	f023 0303 	bic.w	r3, r3, #3
 800b9ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689a      	ldr	r2, [r3, #8]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b9fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b04      	cmp	r3, #4
 800ba06:	d014      	beq.n	800ba32 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f003 0320 	and.w	r3, r3, #32
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00f      	beq.n	800ba32 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	699a      	ldr	r2, [r3, #24]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f042 0220 	orr.w	r2, r2, #32
 800ba30:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d014      	beq.n	800ba68 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00f      	beq.n	800ba68 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba4e:	f043 0204 	orr.w	r2, r3, #4
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	699a      	ldr	r2, [r3, #24]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba66:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00f      	beq.n	800ba92 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba78:	f043 0201 	orr.w	r2, r3, #1
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	699a      	ldr	r2, [r3, #24]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba90:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00f      	beq.n	800babc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800baa2:	f043 0208 	orr.w	r2, r3, #8
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800baba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800bacc:	bf00      	nop
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	603b      	str	r3, [r7, #0]
 800bae4:	4613      	mov	r3, r2
 800bae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bae8:	e010      	b.n	800bb0c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baea:	f7f6 fbb9 	bl	8002260 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d803      	bhi.n	800bb02 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb00:	d102      	bne.n	800bb08 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e00f      	b.n	800bb2c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	695a      	ldr	r2, [r3, #20]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	4013      	ands	r3, r2
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	bf0c      	ite	eq
 800bb1c:	2301      	moveq	r3, #1
 800bb1e:	2300      	movne	r3, #0
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	461a      	mov	r2, r3
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d0df      	beq.n	800baea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb40:	095b      	lsrs	r3, r3, #5
 800bb42:	3301      	adds	r3, #1
 800bb44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	3307      	adds	r3, #7
 800bb52:	08db      	lsrs	r3, r3, #3
 800bb54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d12e      	bne.n	800bbde <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e028      	b.n	800bbe0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0201 	bic.w	r2, r2, #1
 800bbac:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800bbba:	ea42 0103 	orr.w	r1, r2, r3
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	689a      	ldr	r2, [r3, #8]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e000      	b.n	800bbe0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
  }
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e049      	b.n	800bc92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7f6 f85a 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	f000 fbe0 	bl	800c3f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b082      	sub	sp, #8
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e049      	b.n	800bd40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 f841 	bl	800bd48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4610      	mov	r0, r2
 800bcda:	f000 fb89 	bl	800c3f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e097      	b.n	800bea0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d106      	bne.n	800bd8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7f5 ff01 	bl	8001b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	6812      	ldr	r2, [r2, #0]
 800bd9c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800bda0:	f023 0307 	bic.w	r3, r3, #7
 800bda4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	3304      	adds	r3, #4
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f000 fb1d 	bl	800c3f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6a1b      	ldr	r3, [r3, #32]
 800bdcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdde:	f023 0303 	bic.w	r3, r3, #3
 800bde2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	689a      	ldr	r2, [r3, #8]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	021b      	lsls	r3, r3, #8
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800bdfc:	f023 030c 	bic.w	r3, r3, #12
 800be00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	68da      	ldr	r2, [r3, #12]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	021b      	lsls	r3, r3, #8
 800be18:	4313      	orrs	r3, r2
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	011a      	lsls	r2, r3, #4
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	031b      	lsls	r3, r3, #12
 800be2c:	4313      	orrs	r3, r2
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	4313      	orrs	r3, r2
 800be32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800be3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800be42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	4313      	orrs	r3, r2
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800beb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bec0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bec8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bed0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d110      	bne.n	800befa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d102      	bne.n	800bee4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bede:	7b7b      	ldrb	r3, [r7, #13]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d001      	beq.n	800bee8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e069      	b.n	800bfbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2202      	movs	r2, #2
 800bef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bef8:	e031      	b.n	800bf5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b04      	cmp	r3, #4
 800befe:	d110      	bne.n	800bf22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf00:	7bbb      	ldrb	r3, [r7, #14]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d102      	bne.n	800bf0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf06:	7b3b      	ldrb	r3, [r7, #12]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d001      	beq.n	800bf10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e055      	b.n	800bfbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2202      	movs	r2, #2
 800bf14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf20:	e01d      	b.n	800bf5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d108      	bne.n	800bf3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d105      	bne.n	800bf3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf2e:	7b7b      	ldrb	r3, [r7, #13]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d102      	bne.n	800bf3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf34:	7b3b      	ldrb	r3, [r7, #12]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d001      	beq.n	800bf3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e03e      	b.n	800bfbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2202      	movs	r2, #2
 800bf42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2202      	movs	r2, #2
 800bf4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2202      	movs	r2, #2
 800bf5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <HAL_TIM_Encoder_Start+0xc4>
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d008      	beq.n	800bf7c <HAL_TIM_Encoder_Start+0xd4>
 800bf6a:	e00f      	b.n	800bf8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2201      	movs	r2, #1
 800bf72:	2100      	movs	r1, #0
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 ffad 	bl	800ced4 <TIM_CCxChannelCmd>
      break;
 800bf7a:	e016      	b.n	800bfaa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2201      	movs	r2, #1
 800bf82:	2104      	movs	r1, #4
 800bf84:	4618      	mov	r0, r3
 800bf86:	f000 ffa5 	bl	800ced4 <TIM_CCxChannelCmd>
      break;
 800bf8a:	e00e      	b.n	800bfaa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2201      	movs	r2, #1
 800bf92:	2100      	movs	r1, #0
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 ff9d 	bl	800ced4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	2104      	movs	r1, #4
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 ff96 	bl	800ced4 <TIM_CCxChannelCmd>
      break;
 800bfa8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f042 0201 	orr.w	r2, r2, #1
 800bfb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d101      	bne.n	800bfe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e0ff      	b.n	800c1e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b14      	cmp	r3, #20
 800bfee:	f200 80f0 	bhi.w	800c1d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bff2:	a201      	add	r2, pc, #4	@ (adr r2, 800bff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff8:	0800c04d 	.word	0x0800c04d
 800bffc:	0800c1d3 	.word	0x0800c1d3
 800c000:	0800c1d3 	.word	0x0800c1d3
 800c004:	0800c1d3 	.word	0x0800c1d3
 800c008:	0800c08d 	.word	0x0800c08d
 800c00c:	0800c1d3 	.word	0x0800c1d3
 800c010:	0800c1d3 	.word	0x0800c1d3
 800c014:	0800c1d3 	.word	0x0800c1d3
 800c018:	0800c0cf 	.word	0x0800c0cf
 800c01c:	0800c1d3 	.word	0x0800c1d3
 800c020:	0800c1d3 	.word	0x0800c1d3
 800c024:	0800c1d3 	.word	0x0800c1d3
 800c028:	0800c10f 	.word	0x0800c10f
 800c02c:	0800c1d3 	.word	0x0800c1d3
 800c030:	0800c1d3 	.word	0x0800c1d3
 800c034:	0800c1d3 	.word	0x0800c1d3
 800c038:	0800c151 	.word	0x0800c151
 800c03c:	0800c1d3 	.word	0x0800c1d3
 800c040:	0800c1d3 	.word	0x0800c1d3
 800c044:	0800c1d3 	.word	0x0800c1d3
 800c048:	0800c191 	.word	0x0800c191
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 facc 	bl	800c5f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	699a      	ldr	r2, [r3, #24]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f042 0208 	orr.w	r2, r2, #8
 800c066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	699a      	ldr	r2, [r3, #24]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0204 	bic.w	r2, r2, #4
 800c076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6999      	ldr	r1, [r3, #24]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	691a      	ldr	r2, [r3, #16]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	430a      	orrs	r2, r1
 800c088:	619a      	str	r2, [r3, #24]
      break;
 800c08a:	e0a5      	b.n	800c1d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68b9      	ldr	r1, [r7, #8]
 800c092:	4618      	mov	r0, r3
 800c094:	f000 fb6e 	bl	800c774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	699a      	ldr	r2, [r3, #24]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	699a      	ldr	r2, [r3, #24]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c0b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6999      	ldr	r1, [r3, #24]
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	021a      	lsls	r2, r3, #8
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	619a      	str	r2, [r3, #24]
      break;
 800c0cc:	e084      	b.n	800c1d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68b9      	ldr	r1, [r7, #8]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 fbfd 	bl	800c8d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	69da      	ldr	r2, [r3, #28]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f042 0208 	orr.w	r2, r2, #8
 800c0e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	69da      	ldr	r2, [r3, #28]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 0204 	bic.w	r2, r2, #4
 800c0f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	69d9      	ldr	r1, [r3, #28]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	691a      	ldr	r2, [r3, #16]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	430a      	orrs	r2, r1
 800c10a:	61da      	str	r2, [r3, #28]
      break;
 800c10c:	e064      	b.n	800c1d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68b9      	ldr	r1, [r7, #8]
 800c114:	4618      	mov	r0, r3
 800c116:	f000 fc8b 	bl	800ca30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69da      	ldr	r2, [r3, #28]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	69da      	ldr	r2, [r3, #28]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69d9      	ldr	r1, [r3, #28]
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	021a      	lsls	r2, r3, #8
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	430a      	orrs	r2, r1
 800c14c:	61da      	str	r2, [r3, #28]
      break;
 800c14e:	e043      	b.n	800c1d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68b9      	ldr	r1, [r7, #8]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fd1a 	bl	800cb90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f042 0208 	orr.w	r2, r2, #8
 800c16a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0204 	bic.w	r2, r2, #4
 800c17a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	691a      	ldr	r2, [r3, #16]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c18e:	e023      	b.n	800c1d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 fd7c 	bl	800cc94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	021a      	lsls	r2, r3, #8
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c1d0:	e002      	b.n	800c1d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c1d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop

0800c1ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c200:	2b01      	cmp	r3, #1
 800c202:	d101      	bne.n	800c208 <HAL_TIM_ConfigClockSource+0x1c>
 800c204:	2302      	movs	r3, #2
 800c206:	e0e6      	b.n	800c3d6 <HAL_TIM_ConfigClockSource+0x1ea>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2202      	movs	r2, #2
 800c214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c22a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a67      	ldr	r2, [pc, #412]	@ (800c3e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c242:	4293      	cmp	r3, r2
 800c244:	f000 80b1 	beq.w	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c248:	4a65      	ldr	r2, [pc, #404]	@ (800c3e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	f200 80b6 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c250:	4a64      	ldr	r2, [pc, #400]	@ (800c3e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800c252:	4293      	cmp	r3, r2
 800c254:	f000 80a9 	beq.w	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c258:	4a62      	ldr	r2, [pc, #392]	@ (800c3e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	f200 80ae 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c260:	4a61      	ldr	r2, [pc, #388]	@ (800c3e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c262:	4293      	cmp	r3, r2
 800c264:	f000 80a1 	beq.w	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c268:	4a5f      	ldr	r2, [pc, #380]	@ (800c3e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	f200 80a6 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c270:	4a5e      	ldr	r2, [pc, #376]	@ (800c3ec <HAL_TIM_ConfigClockSource+0x200>)
 800c272:	4293      	cmp	r3, r2
 800c274:	f000 8099 	beq.w	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c278:	4a5c      	ldr	r2, [pc, #368]	@ (800c3ec <HAL_TIM_ConfigClockSource+0x200>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	f200 809e 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c280:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c284:	f000 8091 	beq.w	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c288:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c28c:	f200 8096 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c290:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c294:	f000 8089 	beq.w	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c298:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c29c:	f200 808e 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2a4:	d03e      	beq.n	800c324 <HAL_TIM_ConfigClockSource+0x138>
 800c2a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2aa:	f200 8087 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2b2:	f000 8086 	beq.w	800c3c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c2b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2ba:	d87f      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2bc:	2b70      	cmp	r3, #112	@ 0x70
 800c2be:	d01a      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0x10a>
 800c2c0:	2b70      	cmp	r3, #112	@ 0x70
 800c2c2:	d87b      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2c4:	2b60      	cmp	r3, #96	@ 0x60
 800c2c6:	d050      	beq.n	800c36a <HAL_TIM_ConfigClockSource+0x17e>
 800c2c8:	2b60      	cmp	r3, #96	@ 0x60
 800c2ca:	d877      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2cc:	2b50      	cmp	r3, #80	@ 0x50
 800c2ce:	d03c      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x15e>
 800c2d0:	2b50      	cmp	r3, #80	@ 0x50
 800c2d2:	d873      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2d4:	2b40      	cmp	r3, #64	@ 0x40
 800c2d6:	d058      	beq.n	800c38a <HAL_TIM_ConfigClockSource+0x19e>
 800c2d8:	2b40      	cmp	r3, #64	@ 0x40
 800c2da:	d86f      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2dc:	2b30      	cmp	r3, #48	@ 0x30
 800c2de:	d064      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c2e0:	2b30      	cmp	r3, #48	@ 0x30
 800c2e2:	d86b      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2e4:	2b20      	cmp	r3, #32
 800c2e6:	d060      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c2e8:	2b20      	cmp	r3, #32
 800c2ea:	d867      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d05c      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c2f0:	2b10      	cmp	r3, #16
 800c2f2:	d05a      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x1be>
 800c2f4:	e062      	b.n	800c3bc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c306:	f000 fdc5 	bl	800ce94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	609a      	str	r2, [r3, #8]
      break;
 800c322:	e04f      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c334:	f000 fdae 	bl	800ce94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	689a      	ldr	r2, [r3, #8]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c346:	609a      	str	r2, [r3, #8]
      break;
 800c348:	e03c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c356:	461a      	mov	r2, r3
 800c358:	f000 fd20 	bl	800cd9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2150      	movs	r1, #80	@ 0x50
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fd79 	bl	800ce5a <TIM_ITRx_SetConfig>
      break;
 800c368:	e02c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c376:	461a      	mov	r2, r3
 800c378:	f000 fd3f 	bl	800cdfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2160      	movs	r1, #96	@ 0x60
 800c382:	4618      	mov	r0, r3
 800c384:	f000 fd69 	bl	800ce5a <TIM_ITRx_SetConfig>
      break;
 800c388:	e01c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c396:	461a      	mov	r2, r3
 800c398:	f000 fd00 	bl	800cd9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2140      	movs	r1, #64	@ 0x40
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 fd59 	bl	800ce5a <TIM_ITRx_SetConfig>
      break;
 800c3a8:	e00c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	f000 fd50 	bl	800ce5a <TIM_ITRx_SetConfig>
      break;
 800c3ba:	e003      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c0:	e000      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800c3c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	00100070 	.word	0x00100070
 800c3e4:	00100040 	.word	0x00100040
 800c3e8:	00100030 	.word	0x00100030
 800c3ec:	00100020 	.word	0x00100020

0800c3f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a6b      	ldr	r2, [pc, #428]	@ (800c5b0 <TIM_Base_SetConfig+0x1c0>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d02b      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a6a      	ldr	r2, [pc, #424]	@ (800c5b4 <TIM_Base_SetConfig+0x1c4>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d027      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c416:	d023      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c41e:	d01f      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a65      	ldr	r2, [pc, #404]	@ (800c5b8 <TIM_Base_SetConfig+0x1c8>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d01b      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a64      	ldr	r2, [pc, #400]	@ (800c5bc <TIM_Base_SetConfig+0x1cc>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d017      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a63      	ldr	r2, [pc, #396]	@ (800c5c0 <TIM_Base_SetConfig+0x1d0>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d013      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a62      	ldr	r2, [pc, #392]	@ (800c5c4 <TIM_Base_SetConfig+0x1d4>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00f      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a61      	ldr	r2, [pc, #388]	@ (800c5c8 <TIM_Base_SetConfig+0x1d8>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d00b      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a60      	ldr	r2, [pc, #384]	@ (800c5cc <TIM_Base_SetConfig+0x1dc>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d007      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a5f      	ldr	r2, [pc, #380]	@ (800c5d0 <TIM_Base_SetConfig+0x1e0>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d003      	beq.n	800c460 <TIM_Base_SetConfig+0x70>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a5e      	ldr	r2, [pc, #376]	@ (800c5d4 <TIM_Base_SetConfig+0x1e4>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d108      	bne.n	800c472 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a4e      	ldr	r2, [pc, #312]	@ (800c5b0 <TIM_Base_SetConfig+0x1c0>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d043      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a4d      	ldr	r2, [pc, #308]	@ (800c5b4 <TIM_Base_SetConfig+0x1c4>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d03f      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c488:	d03b      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c490:	d037      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a48      	ldr	r2, [pc, #288]	@ (800c5b8 <TIM_Base_SetConfig+0x1c8>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d033      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a47      	ldr	r2, [pc, #284]	@ (800c5bc <TIM_Base_SetConfig+0x1cc>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d02f      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a46      	ldr	r2, [pc, #280]	@ (800c5c0 <TIM_Base_SetConfig+0x1d0>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d02b      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a45      	ldr	r2, [pc, #276]	@ (800c5c4 <TIM_Base_SetConfig+0x1d4>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d027      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a44      	ldr	r2, [pc, #272]	@ (800c5c8 <TIM_Base_SetConfig+0x1d8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d023      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a43      	ldr	r2, [pc, #268]	@ (800c5cc <TIM_Base_SetConfig+0x1dc>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d01f      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a42      	ldr	r2, [pc, #264]	@ (800c5d0 <TIM_Base_SetConfig+0x1e0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d01b      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a41      	ldr	r2, [pc, #260]	@ (800c5d4 <TIM_Base_SetConfig+0x1e4>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d017      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a40      	ldr	r2, [pc, #256]	@ (800c5d8 <TIM_Base_SetConfig+0x1e8>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d013      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c5dc <TIM_Base_SetConfig+0x1ec>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d00f      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4a3e      	ldr	r2, [pc, #248]	@ (800c5e0 <TIM_Base_SetConfig+0x1f0>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d00b      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a3d      	ldr	r2, [pc, #244]	@ (800c5e4 <TIM_Base_SetConfig+0x1f4>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d007      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a3c      	ldr	r2, [pc, #240]	@ (800c5e8 <TIM_Base_SetConfig+0x1f8>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d003      	beq.n	800c502 <TIM_Base_SetConfig+0x112>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a3b      	ldr	r2, [pc, #236]	@ (800c5ec <TIM_Base_SetConfig+0x1fc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d108      	bne.n	800c514 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	4313      	orrs	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	689a      	ldr	r2, [r3, #8]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a1e      	ldr	r2, [pc, #120]	@ (800c5b0 <TIM_Base_SetConfig+0x1c0>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d023      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5b4 <TIM_Base_SetConfig+0x1c4>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d01f      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a22      	ldr	r2, [pc, #136]	@ (800c5d0 <TIM_Base_SetConfig+0x1e0>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d01b      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a21      	ldr	r2, [pc, #132]	@ (800c5d4 <TIM_Base_SetConfig+0x1e4>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d017      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a20      	ldr	r2, [pc, #128]	@ (800c5d8 <TIM_Base_SetConfig+0x1e8>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d013      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5dc <TIM_Base_SetConfig+0x1ec>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d00f      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a1e      	ldr	r2, [pc, #120]	@ (800c5e0 <TIM_Base_SetConfig+0x1f0>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d00b      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e4 <TIM_Base_SetConfig+0x1f4>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d007      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a1c      	ldr	r2, [pc, #112]	@ (800c5e8 <TIM_Base_SetConfig+0x1f8>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d003      	beq.n	800c582 <TIM_Base_SetConfig+0x192>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a1b      	ldr	r2, [pc, #108]	@ (800c5ec <TIM_Base_SetConfig+0x1fc>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d103      	bne.n	800c58a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	691a      	ldr	r2, [r3, #16]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f043 0204 	orr.w	r2, r3, #4
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	601a      	str	r2, [r3, #0]
}
 800c5a2:	bf00      	nop
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	40012c00 	.word	0x40012c00
 800c5b4:	50012c00 	.word	0x50012c00
 800c5b8:	40000400 	.word	0x40000400
 800c5bc:	50000400 	.word	0x50000400
 800c5c0:	40000800 	.word	0x40000800
 800c5c4:	50000800 	.word	0x50000800
 800c5c8:	40000c00 	.word	0x40000c00
 800c5cc:	50000c00 	.word	0x50000c00
 800c5d0:	40013400 	.word	0x40013400
 800c5d4:	50013400 	.word	0x50013400
 800c5d8:	40014000 	.word	0x40014000
 800c5dc:	50014000 	.word	0x50014000
 800c5e0:	40014400 	.word	0x40014400
 800c5e4:	50014400 	.word	0x50014400
 800c5e8:	40014800 	.word	0x40014800
 800c5ec:	50014800 	.word	0x50014800

0800c5f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b087      	sub	sp, #28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	f023 0201 	bic.w	r2, r3, #1
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0303 	bic.w	r3, r3, #3
 800c62a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	4313      	orrs	r3, r2
 800c634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	f023 0302 	bic.w	r3, r3, #2
 800c63c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	697a      	ldr	r2, [r7, #20]
 800c644:	4313      	orrs	r3, r2
 800c646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a40      	ldr	r2, [pc, #256]	@ (800c74c <TIM_OC1_SetConfig+0x15c>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d023      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a3f      	ldr	r2, [pc, #252]	@ (800c750 <TIM_OC1_SetConfig+0x160>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d01f      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a3e      	ldr	r2, [pc, #248]	@ (800c754 <TIM_OC1_SetConfig+0x164>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d01b      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a3d      	ldr	r2, [pc, #244]	@ (800c758 <TIM_OC1_SetConfig+0x168>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d017      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a3c      	ldr	r2, [pc, #240]	@ (800c75c <TIM_OC1_SetConfig+0x16c>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d013      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a3b      	ldr	r2, [pc, #236]	@ (800c760 <TIM_OC1_SetConfig+0x170>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d00f      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a3a      	ldr	r2, [pc, #232]	@ (800c764 <TIM_OC1_SetConfig+0x174>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d00b      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a39      	ldr	r2, [pc, #228]	@ (800c768 <TIM_OC1_SetConfig+0x178>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d007      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a38      	ldr	r2, [pc, #224]	@ (800c76c <TIM_OC1_SetConfig+0x17c>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d003      	beq.n	800c698 <TIM_OC1_SetConfig+0xa8>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a37      	ldr	r2, [pc, #220]	@ (800c770 <TIM_OC1_SetConfig+0x180>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d10c      	bne.n	800c6b2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	f023 0308 	bic.w	r3, r3, #8
 800c69e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	697a      	ldr	r2, [r7, #20]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f023 0304 	bic.w	r3, r3, #4
 800c6b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a25      	ldr	r2, [pc, #148]	@ (800c74c <TIM_OC1_SetConfig+0x15c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d023      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a24      	ldr	r2, [pc, #144]	@ (800c750 <TIM_OC1_SetConfig+0x160>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d01f      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a23      	ldr	r2, [pc, #140]	@ (800c754 <TIM_OC1_SetConfig+0x164>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d01b      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a22      	ldr	r2, [pc, #136]	@ (800c758 <TIM_OC1_SetConfig+0x168>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d017      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a21      	ldr	r2, [pc, #132]	@ (800c75c <TIM_OC1_SetConfig+0x16c>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d013      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a20      	ldr	r2, [pc, #128]	@ (800c760 <TIM_OC1_SetConfig+0x170>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d00f      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a1f      	ldr	r2, [pc, #124]	@ (800c764 <TIM_OC1_SetConfig+0x174>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d00b      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a1e      	ldr	r2, [pc, #120]	@ (800c768 <TIM_OC1_SetConfig+0x178>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d007      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c76c <TIM_OC1_SetConfig+0x17c>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d003      	beq.n	800c702 <TIM_OC1_SetConfig+0x112>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a1c      	ldr	r2, [pc, #112]	@ (800c770 <TIM_OC1_SetConfig+0x180>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d111      	bne.n	800c726 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	4313      	orrs	r3, r2
 800c71a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	4313      	orrs	r3, r2
 800c724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	697a      	ldr	r2, [r7, #20]
 800c73e:	621a      	str	r2, [r3, #32]
}
 800c740:	bf00      	nop
 800c742:	371c      	adds	r7, #28
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	40012c00 	.word	0x40012c00
 800c750:	50012c00 	.word	0x50012c00
 800c754:	40013400 	.word	0x40013400
 800c758:	50013400 	.word	0x50013400
 800c75c:	40014000 	.word	0x40014000
 800c760:	50014000 	.word	0x50014000
 800c764:	40014400 	.word	0x40014400
 800c768:	50014400 	.word	0x50014400
 800c76c:	40014800 	.word	0x40014800
 800c770:	50014800 	.word	0x50014800

0800c774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c774:	b480      	push	{r7}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6a1b      	ldr	r3, [r3, #32]
 800c788:	f023 0210 	bic.w	r2, r3, #16
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	699b      	ldr	r3, [r3, #24]
 800c79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c7a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	021b      	lsls	r3, r3, #8
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f023 0320 	bic.w	r3, r3, #32
 800c7c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	011b      	lsls	r3, r3, #4
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a36      	ldr	r2, [pc, #216]	@ (800c8ac <TIM_OC2_SetConfig+0x138>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d00b      	beq.n	800c7f0 <TIM_OC2_SetConfig+0x7c>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a35      	ldr	r2, [pc, #212]	@ (800c8b0 <TIM_OC2_SetConfig+0x13c>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d007      	beq.n	800c7f0 <TIM_OC2_SetConfig+0x7c>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a34      	ldr	r2, [pc, #208]	@ (800c8b4 <TIM_OC2_SetConfig+0x140>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d003      	beq.n	800c7f0 <TIM_OC2_SetConfig+0x7c>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a33      	ldr	r2, [pc, #204]	@ (800c8b8 <TIM_OC2_SetConfig+0x144>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d10d      	bne.n	800c80c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	011b      	lsls	r3, r3, #4
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	4313      	orrs	r3, r2
 800c802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c80a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a27      	ldr	r2, [pc, #156]	@ (800c8ac <TIM_OC2_SetConfig+0x138>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d023      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a26      	ldr	r2, [pc, #152]	@ (800c8b0 <TIM_OC2_SetConfig+0x13c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d01f      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a25      	ldr	r2, [pc, #148]	@ (800c8b4 <TIM_OC2_SetConfig+0x140>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d01b      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a24      	ldr	r2, [pc, #144]	@ (800c8b8 <TIM_OC2_SetConfig+0x144>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d017      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a23      	ldr	r2, [pc, #140]	@ (800c8bc <TIM_OC2_SetConfig+0x148>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d013      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a22      	ldr	r2, [pc, #136]	@ (800c8c0 <TIM_OC2_SetConfig+0x14c>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d00f      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a21      	ldr	r2, [pc, #132]	@ (800c8c4 <TIM_OC2_SetConfig+0x150>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d00b      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a20      	ldr	r2, [pc, #128]	@ (800c8c8 <TIM_OC2_SetConfig+0x154>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d007      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a1f      	ldr	r2, [pc, #124]	@ (800c8cc <TIM_OC2_SetConfig+0x158>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d003      	beq.n	800c85c <TIM_OC2_SetConfig+0xe8>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a1e      	ldr	r2, [pc, #120]	@ (800c8d0 <TIM_OC2_SetConfig+0x15c>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d113      	bne.n	800c884 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c86a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	4313      	orrs	r3, r2
 800c876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	699b      	ldr	r3, [r3, #24]
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	4313      	orrs	r3, r2
 800c882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	685a      	ldr	r2, [r3, #4]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	621a      	str	r2, [r3, #32]
}
 800c89e:	bf00      	nop
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	40012c00 	.word	0x40012c00
 800c8b0:	50012c00 	.word	0x50012c00
 800c8b4:	40013400 	.word	0x40013400
 800c8b8:	50013400 	.word	0x50013400
 800c8bc:	40014000 	.word	0x40014000
 800c8c0:	50014000 	.word	0x50014000
 800c8c4:	40014400 	.word	0x40014400
 800c8c8:	50014400 	.word	0x50014400
 800c8cc:	40014800 	.word	0x40014800
 800c8d0:	50014800 	.word	0x50014800

0800c8d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6a1b      	ldr	r3, [r3, #32]
 800c8e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	69db      	ldr	r3, [r3, #28]
 800c8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f023 0303 	bic.w	r3, r3, #3
 800c90e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	4313      	orrs	r3, r2
 800c918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	021b      	lsls	r3, r3, #8
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4a35      	ldr	r2, [pc, #212]	@ (800ca08 <TIM_OC3_SetConfig+0x134>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d00b      	beq.n	800c94e <TIM_OC3_SetConfig+0x7a>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a34      	ldr	r2, [pc, #208]	@ (800ca0c <TIM_OC3_SetConfig+0x138>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d007      	beq.n	800c94e <TIM_OC3_SetConfig+0x7a>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a33      	ldr	r2, [pc, #204]	@ (800ca10 <TIM_OC3_SetConfig+0x13c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d003      	beq.n	800c94e <TIM_OC3_SetConfig+0x7a>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a32      	ldr	r2, [pc, #200]	@ (800ca14 <TIM_OC3_SetConfig+0x140>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d10d      	bne.n	800c96a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	021b      	lsls	r3, r3, #8
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	4313      	orrs	r3, r2
 800c960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a26      	ldr	r2, [pc, #152]	@ (800ca08 <TIM_OC3_SetConfig+0x134>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d023      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a25      	ldr	r2, [pc, #148]	@ (800ca0c <TIM_OC3_SetConfig+0x138>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d01f      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a24      	ldr	r2, [pc, #144]	@ (800ca10 <TIM_OC3_SetConfig+0x13c>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d01b      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a23      	ldr	r2, [pc, #140]	@ (800ca14 <TIM_OC3_SetConfig+0x140>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d017      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a22      	ldr	r2, [pc, #136]	@ (800ca18 <TIM_OC3_SetConfig+0x144>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d013      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a21      	ldr	r2, [pc, #132]	@ (800ca1c <TIM_OC3_SetConfig+0x148>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d00f      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a20      	ldr	r2, [pc, #128]	@ (800ca20 <TIM_OC3_SetConfig+0x14c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d00b      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a1f      	ldr	r2, [pc, #124]	@ (800ca24 <TIM_OC3_SetConfig+0x150>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d007      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a1e      	ldr	r2, [pc, #120]	@ (800ca28 <TIM_OC3_SetConfig+0x154>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d003      	beq.n	800c9ba <TIM_OC3_SetConfig+0xe6>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a1d      	ldr	r2, [pc, #116]	@ (800ca2c <TIM_OC3_SetConfig+0x158>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d113      	bne.n	800c9e2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	011b      	lsls	r3, r3, #4
 800c9d0:	693a      	ldr	r2, [r7, #16]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	011b      	lsls	r3, r3, #4
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	685a      	ldr	r2, [r3, #4]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	621a      	str	r2, [r3, #32]
}
 800c9fc:	bf00      	nop
 800c9fe:	371c      	adds	r7, #28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	40012c00 	.word	0x40012c00
 800ca0c:	50012c00 	.word	0x50012c00
 800ca10:	40013400 	.word	0x40013400
 800ca14:	50013400 	.word	0x50013400
 800ca18:	40014000 	.word	0x40014000
 800ca1c:	50014000 	.word	0x50014000
 800ca20:	40014400 	.word	0x40014400
 800ca24:	50014400 	.word	0x50014400
 800ca28:	40014800 	.word	0x40014800
 800ca2c:	50014800 	.word	0x50014800

0800ca30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a1b      	ldr	r3, [r3, #32]
 800ca3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a1b      	ldr	r3, [r3, #32]
 800ca44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ca5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	021b      	lsls	r3, r3, #8
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	031b      	lsls	r3, r3, #12
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a36      	ldr	r2, [pc, #216]	@ (800cb68 <TIM_OC4_SetConfig+0x138>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00b      	beq.n	800caac <TIM_OC4_SetConfig+0x7c>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a35      	ldr	r2, [pc, #212]	@ (800cb6c <TIM_OC4_SetConfig+0x13c>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d007      	beq.n	800caac <TIM_OC4_SetConfig+0x7c>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a34      	ldr	r2, [pc, #208]	@ (800cb70 <TIM_OC4_SetConfig+0x140>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d003      	beq.n	800caac <TIM_OC4_SetConfig+0x7c>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a33      	ldr	r2, [pc, #204]	@ (800cb74 <TIM_OC4_SetConfig+0x144>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d10d      	bne.n	800cac8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	031b      	lsls	r3, r3, #12
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a27      	ldr	r2, [pc, #156]	@ (800cb68 <TIM_OC4_SetConfig+0x138>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d023      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a26      	ldr	r2, [pc, #152]	@ (800cb6c <TIM_OC4_SetConfig+0x13c>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d01f      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a25      	ldr	r2, [pc, #148]	@ (800cb70 <TIM_OC4_SetConfig+0x140>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d01b      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a24      	ldr	r2, [pc, #144]	@ (800cb74 <TIM_OC4_SetConfig+0x144>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d017      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a23      	ldr	r2, [pc, #140]	@ (800cb78 <TIM_OC4_SetConfig+0x148>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d013      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a22      	ldr	r2, [pc, #136]	@ (800cb7c <TIM_OC4_SetConfig+0x14c>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d00f      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a21      	ldr	r2, [pc, #132]	@ (800cb80 <TIM_OC4_SetConfig+0x150>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d00b      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a20      	ldr	r2, [pc, #128]	@ (800cb84 <TIM_OC4_SetConfig+0x154>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d007      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4a1f      	ldr	r2, [pc, #124]	@ (800cb88 <TIM_OC4_SetConfig+0x158>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d003      	beq.n	800cb18 <TIM_OC4_SetConfig+0xe8>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a1e      	ldr	r2, [pc, #120]	@ (800cb8c <TIM_OC4_SetConfig+0x15c>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d113      	bne.n	800cb40 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cb26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	019b      	lsls	r3, r3, #6
 800cb2e:	693a      	ldr	r2, [r7, #16]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	699b      	ldr	r3, [r3, #24]
 800cb38:	019b      	lsls	r3, r3, #6
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	621a      	str	r2, [r3, #32]
}
 800cb5a:	bf00      	nop
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	40012c00 	.word	0x40012c00
 800cb6c:	50012c00 	.word	0x50012c00
 800cb70:	40013400 	.word	0x40013400
 800cb74:	50013400 	.word	0x50013400
 800cb78:	40014000 	.word	0x40014000
 800cb7c:	50014000 	.word	0x50014000
 800cb80:	40014400 	.word	0x40014400
 800cb84:	50014400 	.word	0x50014400
 800cb88:	40014800 	.word	0x40014800
 800cb8c:	50014800 	.word	0x50014800

0800cb90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b087      	sub	sp, #28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a1b      	ldr	r3, [r3, #32]
 800cba4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cbd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	041b      	lsls	r3, r3, #16
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a21      	ldr	r2, [pc, #132]	@ (800cc6c <TIM_OC5_SetConfig+0xdc>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d023      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a20      	ldr	r2, [pc, #128]	@ (800cc70 <TIM_OC5_SetConfig+0xe0>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d01f      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a1f      	ldr	r2, [pc, #124]	@ (800cc74 <TIM_OC5_SetConfig+0xe4>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d01b      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a1e      	ldr	r2, [pc, #120]	@ (800cc78 <TIM_OC5_SetConfig+0xe8>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d017      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a1d      	ldr	r2, [pc, #116]	@ (800cc7c <TIM_OC5_SetConfig+0xec>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d013      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a1c      	ldr	r2, [pc, #112]	@ (800cc80 <TIM_OC5_SetConfig+0xf0>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00f      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a1b      	ldr	r2, [pc, #108]	@ (800cc84 <TIM_OC5_SetConfig+0xf4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00b      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a1a      	ldr	r2, [pc, #104]	@ (800cc88 <TIM_OC5_SetConfig+0xf8>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d007      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a19      	ldr	r2, [pc, #100]	@ (800cc8c <TIM_OC5_SetConfig+0xfc>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d003      	beq.n	800cc32 <TIM_OC5_SetConfig+0xa2>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a18      	ldr	r2, [pc, #96]	@ (800cc90 <TIM_OC5_SetConfig+0x100>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d109      	bne.n	800cc46 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	021b      	lsls	r3, r3, #8
 800cc40:	697a      	ldr	r2, [r7, #20]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	685a      	ldr	r2, [r3, #4]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	621a      	str	r2, [r3, #32]
}
 800cc60:	bf00      	nop
 800cc62:	371c      	adds	r7, #28
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	40012c00 	.word	0x40012c00
 800cc70:	50012c00 	.word	0x50012c00
 800cc74:	40013400 	.word	0x40013400
 800cc78:	50013400 	.word	0x50013400
 800cc7c:	40014000 	.word	0x40014000
 800cc80:	50014000 	.word	0x50014000
 800cc84:	40014400 	.word	0x40014400
 800cc88:	50014400 	.word	0x50014400
 800cc8c:	40014800 	.word	0x40014800
 800cc90:	50014800 	.word	0x50014800

0800cc94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ccc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	021b      	lsls	r3, r3, #8
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ccda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	051b      	lsls	r3, r3, #20
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a22      	ldr	r2, [pc, #136]	@ (800cd74 <TIM_OC6_SetConfig+0xe0>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d023      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a21      	ldr	r2, [pc, #132]	@ (800cd78 <TIM_OC6_SetConfig+0xe4>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d01f      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	4a20      	ldr	r2, [pc, #128]	@ (800cd7c <TIM_OC6_SetConfig+0xe8>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d01b      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4a1f      	ldr	r2, [pc, #124]	@ (800cd80 <TIM_OC6_SetConfig+0xec>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d017      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a1e      	ldr	r2, [pc, #120]	@ (800cd84 <TIM_OC6_SetConfig+0xf0>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d013      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a1d      	ldr	r2, [pc, #116]	@ (800cd88 <TIM_OC6_SetConfig+0xf4>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d00f      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a1c      	ldr	r2, [pc, #112]	@ (800cd8c <TIM_OC6_SetConfig+0xf8>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d00b      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a1b      	ldr	r2, [pc, #108]	@ (800cd90 <TIM_OC6_SetConfig+0xfc>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d007      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a1a      	ldr	r2, [pc, #104]	@ (800cd94 <TIM_OC6_SetConfig+0x100>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d003      	beq.n	800cd38 <TIM_OC6_SetConfig+0xa4>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a19      	ldr	r2, [pc, #100]	@ (800cd98 <TIM_OC6_SetConfig+0x104>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d109      	bne.n	800cd4c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	029b      	lsls	r3, r3, #10
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	693a      	ldr	r2, [r7, #16]
 800cd64:	621a      	str	r2, [r3, #32]
}
 800cd66:	bf00      	nop
 800cd68:	371c      	adds	r7, #28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	40012c00 	.word	0x40012c00
 800cd78:	50012c00 	.word	0x50012c00
 800cd7c:	40013400 	.word	0x40013400
 800cd80:	50013400 	.word	0x50013400
 800cd84:	40014000 	.word	0x40014000
 800cd88:	50014000 	.word	0x50014000
 800cd8c:	40014400 	.word	0x40014400
 800cd90:	50014400 	.word	0x50014400
 800cd94:	40014800 	.word	0x40014800
 800cd98:	50014800 	.word	0x50014800

0800cd9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6a1b      	ldr	r3, [r3, #32]
 800cdac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	f023 0201 	bic.w	r2, r3, #1
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cdc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	011b      	lsls	r3, r3, #4
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f023 030a 	bic.w	r3, r3, #10
 800cdd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	693a      	ldr	r2, [r7, #16]
 800cde6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	621a      	str	r2, [r3, #32]
}
 800cdee:	bf00      	nop
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b087      	sub	sp, #28
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	60f8      	str	r0, [r7, #12]
 800ce02:	60b9      	str	r1, [r7, #8]
 800ce04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6a1b      	ldr	r3, [r3, #32]
 800ce0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a1b      	ldr	r3, [r3, #32]
 800ce10:	f023 0210 	bic.w	r2, r3, #16
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ce24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	031b      	lsls	r3, r3, #12
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ce36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	011b      	lsls	r3, r3, #4
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	621a      	str	r2, [r3, #32]
}
 800ce4e:	bf00      	nop
 800ce50:	371c      	adds	r7, #28
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b085      	sub	sp, #20
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ce70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	f043 0307 	orr.w	r3, r3, #7
 800ce80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	609a      	str	r2, [r3, #8]
}
 800ce88:	bf00      	nop
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ceae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	021a      	lsls	r2, r3, #8
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	609a      	str	r2, [r3, #8]
}
 800cec8:	bf00      	nop
 800ceca:	371c      	adds	r7, #28
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	f003 031f 	and.w	r3, r3, #31
 800cee6:	2201      	movs	r2, #1
 800cee8:	fa02 f303 	lsl.w	r3, r2, r3
 800ceec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6a1a      	ldr	r2, [r3, #32]
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	43db      	mvns	r3, r3
 800cef6:	401a      	ands	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a1a      	ldr	r2, [r3, #32]
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	f003 031f 	and.w	r3, r3, #31
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	fa01 f303 	lsl.w	r3, r1, r3
 800cf0c:	431a      	orrs	r2, r3
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	621a      	str	r2, [r3, #32]
}
 800cf12:	bf00      	nop
 800cf14:	371c      	adds	r7, #28
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
	...

0800cf20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d101      	bne.n	800cf38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf34:	2302      	movs	r3, #2
 800cf36:	e097      	b.n	800d068 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2202      	movs	r2, #2
 800cf44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a45      	ldr	r2, [pc, #276]	@ (800d074 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d00e      	beq.n	800cf80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a44      	ldr	r2, [pc, #272]	@ (800d078 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d009      	beq.n	800cf80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a42      	ldr	r2, [pc, #264]	@ (800d07c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d004      	beq.n	800cf80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a41      	ldr	r2, [pc, #260]	@ (800d080 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d108      	bne.n	800cf92 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cf86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cf98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a2f      	ldr	r2, [pc, #188]	@ (800d074 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d040      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a2e      	ldr	r2, [pc, #184]	@ (800d078 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d03b      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfcc:	d036      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cfd6:	d031      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a29      	ldr	r2, [pc, #164]	@ (800d084 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d02c      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a28      	ldr	r2, [pc, #160]	@ (800d088 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d027      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a26      	ldr	r2, [pc, #152]	@ (800d08c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d022      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a25      	ldr	r2, [pc, #148]	@ (800d090 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d01d      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a23      	ldr	r2, [pc, #140]	@ (800d094 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d018      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a22      	ldr	r2, [pc, #136]	@ (800d098 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d013      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a18      	ldr	r2, [pc, #96]	@ (800d07c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d00e      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a17      	ldr	r2, [pc, #92]	@ (800d080 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d009      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a1b      	ldr	r2, [pc, #108]	@ (800d09c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d004      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a1a      	ldr	r2, [pc, #104]	@ (800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d10c      	bne.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d042:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3714      	adds	r7, #20
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	40012c00 	.word	0x40012c00
 800d078:	50012c00 	.word	0x50012c00
 800d07c:	40013400 	.word	0x40013400
 800d080:	50013400 	.word	0x50013400
 800d084:	40000400 	.word	0x40000400
 800d088:	50000400 	.word	0x50000400
 800d08c:	40000800 	.word	0x40000800
 800d090:	50000800 	.word	0x50000800
 800d094:	40000c00 	.word	0x40000c00
 800d098:	50000c00 	.word	0x50000c00
 800d09c:	40014000 	.word	0x40014000
 800d0a0:	50014000 	.word	0x50014000

0800d0a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d101      	bne.n	800d0c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d0bc:	2302      	movs	r3, #2
 800d0be:	e07d      	b.n	800d1bc <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	695b      	ldr	r3, [r3, #20]
 800d118:	4313      	orrs	r3, r2
 800d11a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d126:	4313      	orrs	r3, r2
 800d128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	041b      	lsls	r3, r3, #16
 800d136:	4313      	orrs	r3, r2
 800d138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	4313      	orrs	r3, r2
 800d146:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a1e      	ldr	r2, [pc, #120]	@ (800d1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d00e      	beq.n	800d170 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a1d      	ldr	r2, [pc, #116]	@ (800d1cc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d009      	beq.n	800d170 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a1b      	ldr	r2, [pc, #108]	@ (800d1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d004      	beq.n	800d170 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a1a      	ldr	r2, [pc, #104]	@ (800d1d4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d11c      	bne.n	800d1aa <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d17a:	051b      	lsls	r3, r3, #20
 800d17c:	4313      	orrs	r3, r2
 800d17e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	6a1b      	ldr	r3, [r3, #32]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d198:	4313      	orrs	r3, r2
 800d19a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	40012c00 	.word	0x40012c00
 800d1cc:	50012c00 	.word	0x50012c00
 800d1d0:	40013400 	.word	0x40013400
 800d1d4:	50013400 	.word	0x50013400

0800d1d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e042      	b.n	800d270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d106      	bne.n	800d202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7f4 fe4d 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2224      	movs	r2, #36	@ 0x24
 800d206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f022 0201 	bic.w	r2, r2, #1
 800d218:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d002      	beq.n	800d228 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 fec0 	bl	800dfa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fd25 	bl	800dc78 <UART_SetConfig>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b01      	cmp	r3, #1
 800d232:	d101      	bne.n	800d238 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e01b      	b.n	800d270 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689a      	ldr	r2, [r3, #8]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f042 0201 	orr.w	r2, r2, #1
 800d266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 ff3f 	bl	800e0ec <UART_CheckIdleState>
 800d26e:	4603      	mov	r3, r0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08c      	sub	sp, #48	@ 0x30
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	4613      	mov	r3, r2
 800d284:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800d286:	88fb      	ldrh	r3, [r7, #6]
 800d288:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d290:	2b20      	cmp	r3, #32
 800d292:	f040 80ad 	bne.w	800d3f0 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <HAL_UART_Transmit_DMA+0x2a>
 800d29c:	88fb      	ldrh	r3, [r7, #6]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e0a5      	b.n	800d3f2 <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	88fa      	ldrh	r2, [r7, #6]
 800d2b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	88fa      	ldrh	r2, [r7, #6]
 800d2b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2221      	movs	r2, #33	@ 0x21
 800d2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d06d      	beq.n	800d3b0 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2d8:	4a48      	ldr	r2, [pc, #288]	@ (800d3fc <HAL_UART_Transmit_DMA+0x184>)
 800d2da:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2e0:	4a47      	ldr	r2, [pc, #284]	@ (800d400 <HAL_UART_Transmit_DMA+0x188>)
 800d2e2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2e8:	4a46      	ldr	r2, [pc, #280]	@ (800d404 <HAL_UART_Transmit_DMA+0x18c>)
 800d2ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2fc:	d106      	bne.n	800d30c <HAL_UART_Transmit_DMA+0x94>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d102      	bne.n	800d30c <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 800d306:	88fb      	ldrh	r3, [r7, #6]
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d316:	2b00      	cmp	r3, #0
 800d318:	d02d      	beq.n	800d376 <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d31e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d320:	2b00      	cmp	r3, #0
 800d322:	d024      	beq.n	800d36e <HAL_UART_Transmit_DMA+0xf6>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d01e      	beq.n	800d36e <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800d33a:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d360:	4618      	mov	r0, r3
 800d362:	f7f7 ffad 	bl	80052c0 <HAL_DMAEx_List_Start_IT>
 800d366:	4603      	mov	r3, r0
 800d368:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d36c:	e012      	b.n	800d394 <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d374:	e00e      	b.n	800d394 <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d37e:	4619      	mov	r1, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3328      	adds	r3, #40	@ 0x28
 800d386:	461a      	mov	r2, r3
 800d388:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d38a:	f7f7 f919 	bl	80045c0 <HAL_DMA_Start_IT>
 800d38e:	4603      	mov	r3, r0
 800d390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800d394:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d009      	beq.n	800d3b0 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2210      	movs	r2, #16
 800d3a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2220      	movs	r2, #32
 800d3a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e020      	b.n	800d3f2 <HAL_UART_Transmit_DMA+0x17a>
      }
    }
#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2240      	movs	r2, #64	@ 0x40
 800d3b6:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3308      	adds	r3, #8
 800d3be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	e853 3f00 	ldrex	r3, [r3]
 800d3c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800d3da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3dc:	6a39      	ldr	r1, [r7, #32]
 800d3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3e0:	e841 2300 	strex	r3, r2, [r1]
 800d3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e5      	bne.n	800d3b8 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	e000      	b.n	800d3f2 <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800d3f0:	2302      	movs	r3, #2
  }
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3730      	adds	r7, #48	@ 0x30
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	0800e65b 	.word	0x0800e65b
 800d400:	0800e6ef 	.word	0x0800e6ef
 800d404:	0800e86f 	.word	0x0800e86f

0800d408 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b08a      	sub	sp, #40	@ 0x28
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	4613      	mov	r3, r2
 800d414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d41c:	2b20      	cmp	r3, #32
 800d41e:	d13c      	bne.n	800d49a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d002      	beq.n	800d42c <HAL_UART_Receive_DMA+0x24>
 800d426:	88fb      	ldrh	r3, [r7, #6]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e035      	b.n	800d49c <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a1a      	ldr	r2, [pc, #104]	@ (800d4a4 <HAL_UART_Receive_DMA+0x9c>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d024      	beq.n	800d48a <HAL_UART_Receive_DMA+0x82>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a18      	ldr	r2, [pc, #96]	@ (800d4a8 <HAL_UART_Receive_DMA+0xa0>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d01f      	beq.n	800d48a <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d018      	beq.n	800d48a <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	e853 3f00 	ldrex	r3, [r3]
 800d464:	613b      	str	r3, [r7, #16]
   return(result);
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d46c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	461a      	mov	r2, r3
 800d474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d476:	623b      	str	r3, [r7, #32]
 800d478:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47a:	69f9      	ldr	r1, [r7, #28]
 800d47c:	6a3a      	ldr	r2, [r7, #32]
 800d47e:	e841 2300 	strex	r3, r2, [r1]
 800d482:	61bb      	str	r3, [r7, #24]
   return(result);
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1e6      	bne.n	800d458 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d48a:	88fb      	ldrh	r3, [r7, #6]
 800d48c:	461a      	mov	r2, r3
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 ff43 	bl	800e31c <UART_Start_Receive_DMA>
 800d496:	4603      	mov	r3, r0
 800d498:	e000      	b.n	800d49c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d49a:	2302      	movs	r3, #2
  }
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3728      	adds	r7, #40	@ 0x28
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	46002400 	.word	0x46002400
 800d4a8:	56002400 	.word	0x56002400

0800d4ac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b090      	sub	sp, #64	@ 0x40
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d4c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ce:	2b80      	cmp	r3, #128	@ 0x80
 800d4d0:	d139      	bne.n	800d546 <HAL_UART_DMAStop+0x9a>
 800d4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d4:	2b21      	cmp	r3, #33	@ 0x21
 800d4d6:	d136      	bne.n	800d546 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	3308      	adds	r3, #8
 800d4de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e0:	6a3b      	ldr	r3, [r7, #32]
 800d4e2:	e853 3f00 	ldrex	r3, [r3]
 800d4e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d500:	e841 2300 	strex	r3, r2, [r1]
 800d504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1e5      	bne.n	800d4d8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d015      	beq.n	800d540 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d518:	4618      	mov	r0, r3
 800d51a:	f7f7 f8b1 	bl	8004680 <HAL_DMA_Abort>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00d      	beq.n	800d540 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d528:	4618      	mov	r0, r3
 800d52a:	f7f7 faaf 	bl	8004a8c <HAL_DMA_GetError>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b10      	cmp	r3, #16
 800d532:	d105      	bne.n	800d540 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2210      	movs	r2, #16
 800d538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800d53c:	2303      	movs	r3, #3
 800d53e:	e047      	b.n	800d5d0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 ffe3 	bl	800e50c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d550:	2b40      	cmp	r3, #64	@ 0x40
 800d552:	d13c      	bne.n	800d5ce <HAL_UART_DMAStop+0x122>
 800d554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d556:	2b22      	cmp	r3, #34	@ 0x22
 800d558:	d139      	bne.n	800d5ce <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3308      	adds	r3, #8
 800d560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	e853 3f00 	ldrex	r3, [r3]
 800d568:	60bb      	str	r3, [r7, #8]
   return(result);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d570:	633b      	str	r3, [r7, #48]	@ 0x30
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3308      	adds	r3, #8
 800d578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d57a:	61ba      	str	r2, [r7, #24]
 800d57c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57e:	6979      	ldr	r1, [r7, #20]
 800d580:	69ba      	ldr	r2, [r7, #24]
 800d582:	e841 2300 	strex	r3, r2, [r1]
 800d586:	613b      	str	r3, [r7, #16]
   return(result);
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1e5      	bne.n	800d55a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d594:	2b00      	cmp	r3, #0
 800d596:	d017      	beq.n	800d5c8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7f7 f86e 	bl	8004680 <HAL_DMA_Abort>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00e      	beq.n	800d5c8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f7 fa6b 	bl	8004a8c <HAL_DMA_GetError>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b10      	cmp	r3, #16
 800d5ba:	d105      	bne.n	800d5c8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2210      	movs	r2, #16
 800d5c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e003      	b.n	800d5d0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 ffe0 	bl	800e58e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3740      	adds	r7, #64	@ 0x40
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b0ba      	sub	sp, #232	@ 0xe8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d5fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d602:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d606:	4013      	ands	r3, r2
 800d608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d60c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d610:	2b00      	cmp	r3, #0
 800d612:	d11b      	bne.n	800d64c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d618:	f003 0320 	and.w	r3, r3, #32
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d015      	beq.n	800d64c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d624:	f003 0320 	and.w	r3, r3, #32
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d105      	bne.n	800d638 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d62c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d634:	2b00      	cmp	r3, #0
 800d636:	d009      	beq.n	800d64c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f000 82e5 	beq.w	800dc0c <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	4798      	blx	r3
      }
      return;
 800d64a:	e2df      	b.n	800dc0c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d64c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 8123 	beq.w	800d89c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d656:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d65a:	4b8d      	ldr	r3, [pc, #564]	@ (800d890 <HAL_UART_IRQHandler+0x2b8>)
 800d65c:	4013      	ands	r3, r2
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d662:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d666:	4b8b      	ldr	r3, [pc, #556]	@ (800d894 <HAL_UART_IRQHandler+0x2bc>)
 800d668:	4013      	ands	r3, r2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f000 8116 	beq.w	800d89c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d011      	beq.n	800d6a0 <HAL_UART_IRQHandler+0xc8>
 800d67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d684:	2b00      	cmp	r3, #0
 800d686:	d00b      	beq.n	800d6a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2201      	movs	r2, #1
 800d68e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d696:	f043 0201 	orr.w	r2, r3, #1
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6a4:	f003 0302 	and.w	r3, r3, #2
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d011      	beq.n	800d6d0 <HAL_UART_IRQHandler+0xf8>
 800d6ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6b0:	f003 0301 	and.w	r3, r3, #1
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2202      	movs	r2, #2
 800d6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6c6:	f043 0204 	orr.w	r2, r3, #4
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6d4:	f003 0304 	and.w	r3, r3, #4
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d011      	beq.n	800d700 <HAL_UART_IRQHandler+0x128>
 800d6dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00b      	beq.n	800d700 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6f6:	f043 0202 	orr.w	r2, r3, #2
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d704:	f003 0308 	and.w	r3, r3, #8
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d017      	beq.n	800d73c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d710:	f003 0320 	and.w	r3, r3, #32
 800d714:	2b00      	cmp	r3, #0
 800d716:	d105      	bne.n	800d724 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d718:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d71c:	4b5c      	ldr	r3, [pc, #368]	@ (800d890 <HAL_UART_IRQHandler+0x2b8>)
 800d71e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00b      	beq.n	800d73c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2208      	movs	r2, #8
 800d72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d732:	f043 0208 	orr.w	r2, r3, #8
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d744:	2b00      	cmp	r3, #0
 800d746:	d012      	beq.n	800d76e <HAL_UART_IRQHandler+0x196>
 800d748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d74c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00c      	beq.n	800d76e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d75c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d764:	f043 0220 	orr.w	r2, r3, #32
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 824b 	beq.w	800dc10 <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d77e:	f003 0320 	and.w	r3, r3, #32
 800d782:	2b00      	cmp	r3, #0
 800d784:	d013      	beq.n	800d7ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d78a:	f003 0320 	and.w	r3, r3, #32
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d105      	bne.n	800d79e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d007      	beq.n	800d7ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d003      	beq.n	800d7ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7c2:	2b40      	cmp	r3, #64	@ 0x40
 800d7c4:	d005      	beq.n	800d7d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d7c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d054      	beq.n	800d87c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fedb 	bl	800e58e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e2:	2b40      	cmp	r3, #64	@ 0x40
 800d7e4:	d146      	bne.n	800d874 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3308      	adds	r3, #8
 800d7ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d7f4:	e853 3f00 	ldrex	r3, [r3]
 800d7f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d7fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3308      	adds	r3, #8
 800d80e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d812:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d81e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d822:	e841 2300 	strex	r3, r2, [r1]
 800d826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d82a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1d9      	bne.n	800d7e6 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d017      	beq.n	800d86c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d842:	4a15      	ldr	r2, [pc, #84]	@ (800d898 <HAL_UART_IRQHandler+0x2c0>)
 800d844:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f6 ff93 	bl	8004778 <HAL_DMA_Abort_IT>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d019      	beq.n	800d88c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d866:	4610      	mov	r0, r2
 800d868:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d86a:	e00f      	b.n	800d88c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f9ed 	bl	800dc4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d872:	e00b      	b.n	800d88c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f9e9 	bl	800dc4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d87a:	e007      	b.n	800d88c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f9e5 	bl	800dc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d88a:	e1c1      	b.n	800dc10 <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d88c:	bf00      	nop
    return;
 800d88e:	e1bf      	b.n	800dc10 <HAL_UART_IRQHandler+0x638>
 800d890:	10000001 	.word	0x10000001
 800d894:	04000120 	.word	0x04000120
 800d898:	0800e8ef 	.word	0x0800e8ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	f040 816a 	bne.w	800db7a <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8aa:	f003 0310 	and.w	r3, r3, #16
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f000 8163 	beq.w	800db7a <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d8b8:	f003 0310 	and.w	r3, r3, #16
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 815c 	beq.w	800db7a <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2210      	movs	r2, #16
 800d8c8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8d4:	2b40      	cmp	r3, #64	@ 0x40
 800d8d6:	f040 80d2 	bne.w	800da7e <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d8e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 80ac 	beq.w	800da4a <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d8f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	f080 80a4 	bcs.w	800da4a <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d908:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d914:	2b81      	cmp	r3, #129	@ 0x81
 800d916:	f000 8087 	beq.w	800da28 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d922:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d926:	e853 3f00 	ldrex	r3, [r3]
 800d92a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d92e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d932:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d936:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d944:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d948:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d950:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d954:	e841 2300 	strex	r3, r2, [r1]
 800d958:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1da      	bne.n	800d91a <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3308      	adds	r3, #8
 800d96a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d96e:	e853 3f00 	ldrex	r3, [r3]
 800d972:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d976:	f023 0301 	bic.w	r3, r3, #1
 800d97a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	3308      	adds	r3, #8
 800d984:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d988:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d98c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d990:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d994:	e841 2300 	strex	r3, r2, [r1]
 800d998:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d99a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1e1      	bne.n	800d964 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9aa:	e853 3f00 	ldrex	r3, [r3]
 800d9ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d9b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	3308      	adds	r3, #8
 800d9c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d9c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d9c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d9ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d9cc:	e841 2300 	strex	r3, r2, [r1]
 800d9d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d9d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1e3      	bne.n	800d9a0 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2220      	movs	r2, #32
 800d9dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9ee:	e853 3f00 	ldrex	r3, [r3]
 800d9f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9f6:	f023 0310 	bic.w	r3, r3, #16
 800d9fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	461a      	mov	r2, r3
 800da04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da08:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da0a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da10:	e841 2300 	strex	r3, r2, [r1]
 800da14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800da16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1e4      	bne.n	800d9e6 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da22:	4618      	mov	r0, r3
 800da24:	f7f6 fe2c 	bl	8004680 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	b29b      	uxth	r3, r3
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f90c 	bl	800dc60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800da48:	e0e4      	b.n	800dc14 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800da50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800da54:	429a      	cmp	r2, r3
 800da56:	f040 80dd 	bne.w	800dc14 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da62:	2b81      	cmp	r3, #129	@ 0x81
 800da64:	f040 80d6 	bne.w	800dc14 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800da74:	4619      	mov	r1, r3
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f8f2 	bl	800dc60 <HAL_UARTEx_RxEventCallback>
      return;
 800da7c:	e0ca      	b.n	800dc14 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da98:	b29b      	uxth	r3, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 80bc 	beq.w	800dc18 <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 800daa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 80b7 	beq.w	800dc18 <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab2:	e853 3f00 	ldrex	r3, [r3]
 800dab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dabe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dacc:	647b      	str	r3, [r7, #68]	@ 0x44
 800dace:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dad4:	e841 2300 	strex	r3, r2, [r1]
 800dad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d1e4      	bne.n	800daaa <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3308      	adds	r3, #8
 800dae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daea:	e853 3f00 	ldrex	r3, [r3]
 800daee:	623b      	str	r3, [r7, #32]
   return(result);
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800daf6:	f023 0301 	bic.w	r3, r3, #1
 800dafa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	3308      	adds	r3, #8
 800db04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800db08:	633a      	str	r2, [r7, #48]	@ 0x30
 800db0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db10:	e841 2300 	strex	r3, r2, [r1]
 800db14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1e1      	bne.n	800dae0 <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2220      	movs	r2, #32
 800db20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	e853 3f00 	ldrex	r3, [r3]
 800db3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f023 0310 	bic.w	r3, r3, #16
 800db44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	461a      	mov	r2, r3
 800db4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800db52:	61fb      	str	r3, [r7, #28]
 800db54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db56:	69b9      	ldr	r1, [r7, #24]
 800db58:	69fa      	ldr	r2, [r7, #28]
 800db5a:	e841 2300 	strex	r3, r2, [r1]
 800db5e:	617b      	str	r3, [r7, #20]
   return(result);
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1e4      	bne.n	800db30 <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2202      	movs	r2, #2
 800db6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f874 	bl	800dc60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db78:	e04e      	b.n	800dc18 <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800db7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db82:	2b00      	cmp	r3, #0
 800db84:	d014      	beq.n	800dbb0 <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800db86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d105      	bne.n	800db9e <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d008      	beq.n	800dbb0 <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d03a      	beq.n	800dc1c <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	4798      	blx	r3
    }
    return;
 800dbae:	e035      	b.n	800dc1c <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dbb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d009      	beq.n	800dbd0 <HAL_UART_IRQHandler+0x5f8>
 800dbbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d003      	beq.n	800dbd0 <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 fea2 	bl	800e912 <UART_EndTransmit_IT>
    return;
 800dbce:	e026      	b.n	800dc1e <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d009      	beq.n	800dbf0 <HAL_UART_IRQHandler+0x618>
 800dbdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbe0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d003      	beq.n	800dbf0 <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fec7 	bl	800e97c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbee:	e016      	b.n	800dc1e <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d010      	beq.n	800dc1e <HAL_UART_IRQHandler+0x646>
 800dbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	da0c      	bge.n	800dc1e <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 feaf 	bl	800e968 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc0a:	e008      	b.n	800dc1e <HAL_UART_IRQHandler+0x646>
      return;
 800dc0c:	bf00      	nop
 800dc0e:	e006      	b.n	800dc1e <HAL_UART_IRQHandler+0x646>
    return;
 800dc10:	bf00      	nop
 800dc12:	e004      	b.n	800dc1e <HAL_UART_IRQHandler+0x646>
      return;
 800dc14:	bf00      	nop
 800dc16:	e002      	b.n	800dc1e <HAL_UART_IRQHandler+0x646>
      return;
 800dc18:	bf00      	nop
 800dc1a:	e000      	b.n	800dc1e <HAL_UART_IRQHandler+0x646>
    return;
 800dc1c:	bf00      	nop
  }
}
 800dc1e:	37e8      	adds	r7, #232	@ 0xe8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800dc2c:	bf00      	nop
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dc40:	bf00      	nop
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc7c:	b094      	sub	sp, #80	@ 0x50
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc82:	2300      	movs	r3, #0
 800dc84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	4b9b      	ldr	r3, [pc, #620]	@ (800defc <UART_SetConfig+0x284>)
 800dc8e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc92:	689a      	ldr	r2, [r3, #8]
 800dc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc96:	691b      	ldr	r3, [r3, #16]
 800dc98:	431a      	orrs	r2, r3
 800dc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc9c:	695b      	ldr	r3, [r3, #20]
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca2:	69db      	ldr	r3, [r3, #28]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4994      	ldr	r1, [pc, #592]	@ (800df00 <UART_SetConfig+0x288>)
 800dcb0:	4019      	ands	r1, r3
 800dcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcb8:	430b      	orrs	r3, r1
 800dcba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800dcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc8:	68d9      	ldr	r1, [r3, #12]
 800dcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	ea40 0301 	orr.w	r3, r0, r1
 800dcd2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	4b87      	ldr	r3, [pc, #540]	@ (800defc <UART_SetConfig+0x284>)
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d009      	beq.n	800dcf8 <UART_SetConfig+0x80>
 800dce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	4b86      	ldr	r3, [pc, #536]	@ (800df04 <UART_SetConfig+0x28c>)
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d004      	beq.n	800dcf8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf0:	6a1a      	ldr	r2, [r3, #32]
 800dcf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800dd02:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800dd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd0c:	430b      	orrs	r3, r1
 800dd0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd16:	f023 000f 	bic.w	r0, r3, #15
 800dd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800dd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	ea40 0301 	orr.w	r3, r0, r1
 800dd26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	4b76      	ldr	r3, [pc, #472]	@ (800df08 <UART_SetConfig+0x290>)
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d102      	bne.n	800dd38 <UART_SetConfig+0xc0>
 800dd32:	2301      	movs	r3, #1
 800dd34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd36:	e021      	b.n	800dd7c <UART_SetConfig+0x104>
 800dd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	4b73      	ldr	r3, [pc, #460]	@ (800df0c <UART_SetConfig+0x294>)
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d102      	bne.n	800dd48 <UART_SetConfig+0xd0>
 800dd42:	2304      	movs	r3, #4
 800dd44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd46:	e019      	b.n	800dd7c <UART_SetConfig+0x104>
 800dd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	4b70      	ldr	r3, [pc, #448]	@ (800df10 <UART_SetConfig+0x298>)
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d102      	bne.n	800dd58 <UART_SetConfig+0xe0>
 800dd52:	2308      	movs	r3, #8
 800dd54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd56:	e011      	b.n	800dd7c <UART_SetConfig+0x104>
 800dd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	4b6d      	ldr	r3, [pc, #436]	@ (800df14 <UART_SetConfig+0x29c>)
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d102      	bne.n	800dd68 <UART_SetConfig+0xf0>
 800dd62:	2310      	movs	r3, #16
 800dd64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd66:	e009      	b.n	800dd7c <UART_SetConfig+0x104>
 800dd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	4b63      	ldr	r3, [pc, #396]	@ (800defc <UART_SetConfig+0x284>)
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d102      	bne.n	800dd78 <UART_SetConfig+0x100>
 800dd72:	2320      	movs	r3, #32
 800dd74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd76:	e001      	b.n	800dd7c <UART_SetConfig+0x104>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	4b5e      	ldr	r3, [pc, #376]	@ (800defc <UART_SetConfig+0x284>)
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d004      	beq.n	800dd90 <UART_SetConfig+0x118>
 800dd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	4b5e      	ldr	r3, [pc, #376]	@ (800df04 <UART_SetConfig+0x28c>)
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d172      	bne.n	800de76 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dd90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd92:	2200      	movs	r2, #0
 800dd94:	623b      	str	r3, [r7, #32]
 800dd96:	627a      	str	r2, [r7, #36]	@ 0x24
 800dd98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dd9c:	f7fb fb18 	bl	80093d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800dda0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800dda2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 80e7 	beq.w	800df78 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddae:	4a5a      	ldr	r2, [pc, #360]	@ (800df18 <UART_SetConfig+0x2a0>)
 800ddb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddbc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	4413      	add	r3, r2
 800ddc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d305      	bcc.n	800ddda <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ddce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d903      	bls.n	800dde2 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dde0:	e048      	b.n	800de74 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dde2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dde4:	2200      	movs	r2, #0
 800dde6:	61bb      	str	r3, [r7, #24]
 800dde8:	61fa      	str	r2, [r7, #28]
 800ddea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddee:	4a4a      	ldr	r2, [pc, #296]	@ (800df18 <UART_SetConfig+0x2a0>)
 800ddf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	613b      	str	r3, [r7, #16]
 800ddfa:	617a      	str	r2, [r7, #20]
 800ddfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800de00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800de04:	f7f2 fa38 	bl	8000278 <__aeabi_uldivmod>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4610      	mov	r0, r2
 800de0e:	4619      	mov	r1, r3
 800de10:	f04f 0200 	mov.w	r2, #0
 800de14:	f04f 0300 	mov.w	r3, #0
 800de18:	020b      	lsls	r3, r1, #8
 800de1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800de1e:	0202      	lsls	r2, r0, #8
 800de20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de22:	6849      	ldr	r1, [r1, #4]
 800de24:	0849      	lsrs	r1, r1, #1
 800de26:	2000      	movs	r0, #0
 800de28:	460c      	mov	r4, r1
 800de2a:	4605      	mov	r5, r0
 800de2c:	eb12 0804 	adds.w	r8, r2, r4
 800de30:	eb43 0905 	adc.w	r9, r3, r5
 800de34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	60bb      	str	r3, [r7, #8]
 800de3c:	60fa      	str	r2, [r7, #12]
 800de3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de42:	4640      	mov	r0, r8
 800de44:	4649      	mov	r1, r9
 800de46:	f7f2 fa17 	bl	8000278 <__aeabi_uldivmod>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4613      	mov	r3, r2
 800de50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de58:	d308      	bcc.n	800de6c <UART_SetConfig+0x1f4>
 800de5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de60:	d204      	bcs.n	800de6c <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800de62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800de68:	60da      	str	r2, [r3, #12]
 800de6a:	e003      	b.n	800de74 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800de72:	e081      	b.n	800df78 <UART_SetConfig+0x300>
 800de74:	e080      	b.n	800df78 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de78:	69db      	ldr	r3, [r3, #28]
 800de7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de7e:	d14d      	bne.n	800df1c <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800de80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de82:	2200      	movs	r2, #0
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de8c:	f7fb faa0 	bl	80093d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800de90:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de94:	2b00      	cmp	r3, #0
 800de96:	d06f      	beq.n	800df78 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de9c:	4a1e      	ldr	r2, [pc, #120]	@ (800df18 <UART_SetConfig+0x2a0>)
 800de9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dea2:	461a      	mov	r2, r3
 800dea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800deaa:	005a      	lsls	r2, r3, #1
 800deac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	085b      	lsrs	r3, r3, #1
 800deb2:	441a      	add	r2, r3
 800deb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800debc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800debe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec0:	2b0f      	cmp	r3, #15
 800dec2:	d916      	bls.n	800def2 <UART_SetConfig+0x27a>
 800dec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800deca:	d212      	bcs.n	800def2 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800decc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dece:	b29b      	uxth	r3, r3
 800ded0:	f023 030f 	bic.w	r3, r3, #15
 800ded4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ded6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ded8:	085b      	lsrs	r3, r3, #1
 800deda:	b29b      	uxth	r3, r3
 800dedc:	f003 0307 	and.w	r3, r3, #7
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dee4:	4313      	orrs	r3, r2
 800dee6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800dee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800deee:	60da      	str	r2, [r3, #12]
 800def0:	e042      	b.n	800df78 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800def8:	e03e      	b.n	800df78 <UART_SetConfig+0x300>
 800defa:	bf00      	nop
 800defc:	46002400 	.word	0x46002400
 800df00:	cfff69f3 	.word	0xcfff69f3
 800df04:	56002400 	.word	0x56002400
 800df08:	40013800 	.word	0x40013800
 800df0c:	40004800 	.word	0x40004800
 800df10:	40004c00 	.word	0x40004c00
 800df14:	40005000 	.word	0x40005000
 800df18:	08010598 	.word	0x08010598
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800df1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df1e:	2200      	movs	r2, #0
 800df20:	469a      	mov	sl, r3
 800df22:	4693      	mov	fp, r2
 800df24:	4650      	mov	r0, sl
 800df26:	4659      	mov	r1, fp
 800df28:	f7fb fa52 	bl	80093d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800df2c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800df2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df30:	2b00      	cmp	r3, #0
 800df32:	d021      	beq.n	800df78 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df38:	4a1a      	ldr	r2, [pc, #104]	@ (800dfa4 <UART_SetConfig+0x32c>)
 800df3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df3e:	461a      	mov	r2, r3
 800df40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df42:	fbb3 f2f2 	udiv	r2, r3, r2
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	085b      	lsrs	r3, r3, #1
 800df4c:	441a      	add	r2, r3
 800df4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	fbb2 f3f3 	udiv	r3, r2, r3
 800df56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df5a:	2b0f      	cmp	r3, #15
 800df5c:	d909      	bls.n	800df72 <UART_SetConfig+0x2fa>
 800df5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df64:	d205      	bcs.n	800df72 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df68:	b29a      	uxth	r2, r3
 800df6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	60da      	str	r2, [r3, #12]
 800df70:	e002      	b.n	800df78 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df7a:	2201      	movs	r2, #1
 800df7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800df80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df82:	2201      	movs	r2, #1
 800df84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8a:	2200      	movs	r2, #0
 800df8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800df8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df90:	2200      	movs	r2, #0
 800df92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800df94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3750      	adds	r7, #80	@ 0x50
 800df9c:	46bd      	mov	sp, r7
 800df9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfa2:	bf00      	nop
 800dfa4:	08010598 	.word	0x08010598

0800dfa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb4:	f003 0308 	and.w	r3, r3, #8
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00a      	beq.n	800dfd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd6:	f003 0301 	and.w	r3, r3, #1
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	430a      	orrs	r2, r1
 800dff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff8:	f003 0302 	and.w	r3, r3, #2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00a      	beq.n	800e016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	430a      	orrs	r2, r1
 800e014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e01a:	f003 0304 	and.w	r3, r3, #4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00a      	beq.n	800e038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	430a      	orrs	r2, r1
 800e036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e03c:	f003 0310 	and.w	r3, r3, #16
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00a      	beq.n	800e05a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	430a      	orrs	r2, r1
 800e058:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05e:	f003 0320 	and.w	r3, r3, #32
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00a      	beq.n	800e07c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	430a      	orrs	r2, r1
 800e07a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e084:	2b00      	cmp	r3, #0
 800e086:	d01a      	beq.n	800e0be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	430a      	orrs	r2, r1
 800e09c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0a6:	d10a      	bne.n	800e0be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	430a      	orrs	r2, r1
 800e0bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00a      	beq.n	800e0e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	430a      	orrs	r2, r1
 800e0de:	605a      	str	r2, [r3, #4]
  }
}
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b098      	sub	sp, #96	@ 0x60
 800e0f0:	af02      	add	r7, sp, #8
 800e0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e0fc:	f7f4 f8b0 	bl	8002260 <HAL_GetTick>
 800e100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f003 0308 	and.w	r3, r3, #8
 800e10c:	2b08      	cmp	r3, #8
 800e10e:	d12f      	bne.n	800e170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e118:	2200      	movs	r2, #0
 800e11a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f88e 	bl	800e240 <UART_WaitOnFlagUntilTimeout>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d022      	beq.n	800e170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e132:	e853 3f00 	ldrex	r3, [r3]
 800e136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e13a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e13e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	461a      	mov	r2, r3
 800e146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e148:	647b      	str	r3, [r7, #68]	@ 0x44
 800e14a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e14e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e150:	e841 2300 	strex	r3, r2, [r1]
 800e154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1e6      	bne.n	800e12a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2220      	movs	r2, #32
 800e160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e16c:	2303      	movs	r3, #3
 800e16e:	e063      	b.n	800e238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f003 0304 	and.w	r3, r3, #4
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	d149      	bne.n	800e212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e17e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e186:	2200      	movs	r2, #0
 800e188:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 f857 	bl	800e240 <UART_WaitOnFlagUntilTimeout>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d03c      	beq.n	800e212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a0:	e853 3f00 	ldrex	r3, [r3]
 800e1a4:	623b      	str	r3, [r7, #32]
   return(result);
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1be:	e841 2300 	strex	r3, r2, [r1]
 800e1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1e6      	bne.n	800e198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	e853 3f00 	ldrex	r3, [r3]
 800e1d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f023 0301 	bic.w	r3, r3, #1
 800e1e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1ea:	61fa      	str	r2, [r7, #28]
 800e1ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ee:	69b9      	ldr	r1, [r7, #24]
 800e1f0:	69fa      	ldr	r2, [r7, #28]
 800e1f2:	e841 2300 	strex	r3, r2, [r1]
 800e1f6:	617b      	str	r3, [r7, #20]
   return(result);
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1e5      	bne.n	800e1ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2220      	movs	r2, #32
 800e202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e20e:	2303      	movs	r3, #3
 800e210:	e012      	b.n	800e238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2220      	movs	r2, #32
 800e216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2220      	movs	r2, #32
 800e21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3758      	adds	r7, #88	@ 0x58
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	603b      	str	r3, [r7, #0]
 800e24c:	4613      	mov	r3, r2
 800e24e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e250:	e04f      	b.n	800e2f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e258:	d04b      	beq.n	800e2f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e25a:	f7f4 f801 	bl	8002260 <HAL_GetTick>
 800e25e:	4602      	mov	r2, r0
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	69ba      	ldr	r2, [r7, #24]
 800e266:	429a      	cmp	r2, r3
 800e268:	d302      	bcc.n	800e270 <UART_WaitOnFlagUntilTimeout+0x30>
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d101      	bne.n	800e274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e270:	2303      	movs	r3, #3
 800e272:	e04e      	b.n	800e312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f003 0304 	and.w	r3, r3, #4
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d037      	beq.n	800e2f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2b80      	cmp	r3, #128	@ 0x80
 800e286:	d034      	beq.n	800e2f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2b40      	cmp	r3, #64	@ 0x40
 800e28c:	d031      	beq.n	800e2f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	69db      	ldr	r3, [r3, #28]
 800e294:	f003 0308 	and.w	r3, r3, #8
 800e298:	2b08      	cmp	r3, #8
 800e29a:	d110      	bne.n	800e2be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2208      	movs	r2, #8
 800e2a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f000 f972 	bl	800e58e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2208      	movs	r2, #8
 800e2ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e029      	b.n	800e312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	69db      	ldr	r3, [r3, #28]
 800e2c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e2cc:	d111      	bne.n	800e2f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f000 f958 	bl	800e58e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2220      	movs	r2, #32
 800e2e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e00f      	b.n	800e312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	69da      	ldr	r2, [r3, #28]
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	bf0c      	ite	eq
 800e302:	2301      	moveq	r3, #1
 800e304:	2300      	movne	r3, #0
 800e306:	b2db      	uxtb	r3, r3
 800e308:	461a      	mov	r2, r3
 800e30a:	79fb      	ldrb	r3, [r7, #7]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d0a0      	beq.n	800e252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
	...

0800e31c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b098      	sub	sp, #96	@ 0x60
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	4613      	mov	r3, r2
 800e328:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800e32a:	88fb      	ldrh	r3, [r7, #6]
 800e32c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	88fa      	ldrh	r2, [r7, #6]
 800e33a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2222      	movs	r2, #34	@ 0x22
 800e34a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e354:	2b00      	cmp	r3, #0
 800e356:	d07c      	beq.n	800e452 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e35e:	4a68      	ldr	r2, [pc, #416]	@ (800e500 <UART_Start_Receive_DMA+0x1e4>)
 800e360:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e368:	4a66      	ldr	r2, [pc, #408]	@ (800e504 <UART_Start_Receive_DMA+0x1e8>)
 800e36a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e372:	4a65      	ldr	r2, [pc, #404]	@ (800e508 <UART_Start_Receive_DMA+0x1ec>)
 800e374:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e37c:	2200      	movs	r2, #0
 800e37e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e388:	d107      	bne.n	800e39a <UART_Start_Receive_DMA+0x7e>
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d103      	bne.n	800e39a <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800e392:	88fb      	ldrh	r3, [r7, #6]
 800e394:	005b      	lsls	r3, r3, #1
 800e396:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d034      	beq.n	800e414 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d02a      	beq.n	800e40c <UART_Start_Receive_DMA+0xf0>
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d023      	beq.n	800e40c <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800e3d2:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f6 ff5e 	bl	80052c0 <HAL_DMAEx_List_Start_IT>
 800e404:	4603      	mov	r3, r0
 800e406:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e40a:	e014      	b.n	800e436 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e412:	e010      	b.n	800e436 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3324      	adds	r3, #36	@ 0x24
 800e420:	4619      	mov	r1, r3
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e426:	461a      	mov	r2, r3
 800e428:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800e42c:	f7f6 f8c8 	bl	80045c0 <HAL_DMA_Start_IT>
 800e430:	4603      	mov	r3, r0
 800e432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800e436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d009      	beq.n	800e452 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2210      	movs	r2, #16
 800e442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2220      	movs	r2, #32
 800e44a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e44e:	2301      	movs	r3, #1
 800e450:	e051      	b.n	800e4f6 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d018      	beq.n	800e48c <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e462:	e853 3f00 	ldrex	r3, [r3]
 800e466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e46a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e46e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	461a      	mov	r2, r3
 800e476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e47a:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e47e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e480:	e841 2300 	strex	r3, r2, [r1]
 800e484:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1e6      	bne.n	800e45a <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3308      	adds	r3, #8
 800e492:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e496:	e853 3f00 	ldrex	r3, [r3]
 800e49a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	f043 0301 	orr.w	r3, r3, #1
 800e4a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	3308      	adds	r3, #8
 800e4aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4ac:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e4ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e4b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4b4:	e841 2300 	strex	r3, r2, [r1]
 800e4b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1e5      	bne.n	800e48c <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	e853 3f00 	ldrex	r3, [r3]
 800e4ce:	617b      	str	r3, [r7, #20]
   return(result);
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3308      	adds	r3, #8
 800e4de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e4e0:	627a      	str	r2, [r7, #36]	@ 0x24
 800e4e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e4:	6a39      	ldr	r1, [r7, #32]
 800e4e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4e8:	e841 2300 	strex	r3, r2, [r1]
 800e4ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1e5      	bne.n	800e4c0 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3760      	adds	r7, #96	@ 0x60
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	0800e70b 	.word	0x0800e70b
 800e504:	0800e831 	.word	0x0800e831
 800e508:	0800e86f 	.word	0x0800e86f

0800e50c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b08f      	sub	sp, #60	@ 0x3c
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e51a:	6a3b      	ldr	r3, [r7, #32]
 800e51c:	e853 3f00 	ldrex	r3, [r3]
 800e520:	61fb      	str	r3, [r7, #28]
   return(result);
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e528:	637b      	str	r3, [r7, #52]	@ 0x34
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	461a      	mov	r2, r3
 800e530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e534:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e53a:	e841 2300 	strex	r3, r2, [r1]
 800e53e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1e6      	bne.n	800e514 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	3308      	adds	r3, #8
 800e54c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	e853 3f00 	ldrex	r3, [r3]
 800e554:	60bb      	str	r3, [r7, #8]
   return(result);
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e55c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3308      	adds	r3, #8
 800e564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e566:	61ba      	str	r2, [r7, #24]
 800e568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56a:	6979      	ldr	r1, [r7, #20]
 800e56c:	69ba      	ldr	r2, [r7, #24]
 800e56e:	e841 2300 	strex	r3, r2, [r1]
 800e572:	613b      	str	r3, [r7, #16]
   return(result);
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1e5      	bne.n	800e546 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2220      	movs	r2, #32
 800e57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e582:	bf00      	nop
 800e584:	373c      	adds	r7, #60	@ 0x3c
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e58e:	b480      	push	{r7}
 800e590:	b095      	sub	sp, #84	@ 0x54
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e59e:	e853 3f00 	ldrex	r3, [r3]
 800e5a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e5aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e5ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5bc:	e841 2300 	strex	r3, r2, [r1]
 800e5c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1e6      	bne.n	800e596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d0:	6a3b      	ldr	r3, [r7, #32]
 800e5d2:	e853 3f00 	ldrex	r3, [r3]
 800e5d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5de:	f023 0301 	bic.w	r3, r3, #1
 800e5e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	3308      	adds	r3, #8
 800e5ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5f4:	e841 2300 	strex	r3, r2, [r1]
 800e5f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1e3      	bne.n	800e5c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e604:	2b01      	cmp	r3, #1
 800e606:	d118      	bne.n	800e63a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	e853 3f00 	ldrex	r3, [r3]
 800e614:	60bb      	str	r3, [r7, #8]
   return(result);
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	f023 0310 	bic.w	r3, r3, #16
 800e61c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	461a      	mov	r2, r3
 800e624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e626:	61bb      	str	r3, [r7, #24]
 800e628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62a:	6979      	ldr	r1, [r7, #20]
 800e62c:	69ba      	ldr	r2, [r7, #24]
 800e62e:	e841 2300 	strex	r3, r2, [r1]
 800e632:	613b      	str	r3, [r7, #16]
   return(result);
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1e6      	bne.n	800e608 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2220      	movs	r2, #32
 800e63e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e64e:	bf00      	nop
 800e650:	3754      	adds	r7, #84	@ 0x54
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b090      	sub	sp, #64	@ 0x40
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e666:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e66c:	2b81      	cmp	r3, #129	@ 0x81
 800e66e:	d037      	beq.n	800e6e0 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800e670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e672:	2200      	movs	r2, #0
 800e674:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3308      	adds	r3, #8
 800e67e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e682:	e853 3f00 	ldrex	r3, [r3]
 800e686:	623b      	str	r3, [r7, #32]
   return(result);
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e68e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	3308      	adds	r3, #8
 800e696:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e698:	633a      	str	r2, [r7, #48]	@ 0x30
 800e69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e69c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e69e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6a0:	e841 2300 	strex	r3, r2, [r1]
 800e6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1e5      	bne.n	800e678 <UART_DMATransmitCplt+0x1e>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	e853 3f00 	ldrex	r3, [r3]
 800e6b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6ca:	61fb      	str	r3, [r7, #28]
 800e6cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ce:	69b9      	ldr	r1, [r7, #24]
 800e6d0:	69fa      	ldr	r2, [r7, #28]
 800e6d2:	e841 2300 	strex	r3, r2, [r1]
 800e6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d1e6      	bne.n	800e6ac <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e6de:	e002      	b.n	800e6e6 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800e6e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e6e2:	f000 fb29 	bl	800ed38 <HAL_UART_TxCpltCallback>
}
 800e6e6:	bf00      	nop
 800e6e8:	3740      	adds	r7, #64	@ 0x40
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b084      	sub	sp, #16
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7ff fa91 	bl	800dc24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b09c      	sub	sp, #112	@ 0x70
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e716:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e71c:	2b81      	cmp	r3, #129	@ 0x81
 800e71e:	d071      	beq.n	800e804 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800e720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e722:	2200      	movs	r2, #0
 800e724:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e730:	e853 3f00 	ldrex	r3, [r3]
 800e734:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e73c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e73e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	461a      	mov	r2, r3
 800e744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e746:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e748:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e74c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e74e:	e841 2300 	strex	r3, r2, [r1]
 800e752:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1e6      	bne.n	800e728 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e75a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	3308      	adds	r3, #8
 800e760:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e764:	e853 3f00 	ldrex	r3, [r3]
 800e768:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e76c:	f023 0301 	bic.w	r3, r3, #1
 800e770:	667b      	str	r3, [r7, #100]	@ 0x64
 800e772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3308      	adds	r3, #8
 800e778:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e77a:	647a      	str	r2, [r7, #68]	@ 0x44
 800e77c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e782:	e841 2300 	strex	r3, r2, [r1]
 800e786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1e5      	bne.n	800e75a <UART_DMAReceiveCplt+0x50>

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e78e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	3308      	adds	r3, #8
 800e794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e798:	e853 3f00 	ldrex	r3, [r3]
 800e79c:	623b      	str	r3, [r7, #32]
   return(result);
 800e79e:	6a3b      	ldr	r3, [r7, #32]
 800e7a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e7a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e7ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800e7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7b6:	e841 2300 	strex	r3, r2, [r1]
 800e7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1e5      	bne.n	800e78e <UART_DMAReceiveCplt+0x84>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e7c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7c4:	2220      	movs	r2, #32
 800e7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d118      	bne.n	800e804 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	e853 3f00 	ldrex	r3, [r3]
 800e7de:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f023 0310 	bic.w	r3, r3, #16
 800e7e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7f0:	61fb      	str	r3, [r7, #28]
 800e7f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f4:	69b9      	ldr	r1, [r7, #24]
 800e7f6:	69fa      	ldr	r2, [r7, #28]
 800e7f8:	e841 2300 	strex	r3, r2, [r1]
 800e7fc:	617b      	str	r3, [r7, #20]
   return(result);
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d1e6      	bne.n	800e7d2 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e806:	2200      	movs	r2, #0
 800e808:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e80a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e80c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d107      	bne.n	800e822 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e818:	4619      	mov	r1, r3
 800e81a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e81c:	f7ff fa20 	bl	800dc60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e820:	e002      	b.n	800e828 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e822:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e824:	f000 fa76 	bl	800ed14 <HAL_UART_RxCpltCallback>
}
 800e828:	bf00      	nop
 800e82a:	3770      	adds	r7, #112	@ 0x70
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e83c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2201      	movs	r2, #1
 800e842:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d109      	bne.n	800e860 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e852:	085b      	lsrs	r3, r3, #1
 800e854:	b29b      	uxth	r3, r3
 800e856:	4619      	mov	r1, r3
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f7ff fa01 	bl	800dc60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e85e:	e002      	b.n	800e866 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f7ff f9e9 	bl	800dc38 <HAL_UART_RxHalfCpltCallback>
}
 800e866:	bf00      	nop
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b086      	sub	sp, #24
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e87a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e882:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e88a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e896:	2b80      	cmp	r3, #128	@ 0x80
 800e898:	d109      	bne.n	800e8ae <UART_DMAError+0x40>
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	2b21      	cmp	r3, #33	@ 0x21
 800e89e:	d106      	bne.n	800e8ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e8a8:	6978      	ldr	r0, [r7, #20]
 800e8aa:	f7ff fe2f 	bl	800e50c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8b8:	2b40      	cmp	r3, #64	@ 0x40
 800e8ba:	d109      	bne.n	800e8d0 <UART_DMAError+0x62>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b22      	cmp	r3, #34	@ 0x22
 800e8c0:	d106      	bne.n	800e8d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e8ca:	6978      	ldr	r0, [r7, #20]
 800e8cc:	f7ff fe5f 	bl	800e58e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8d6:	f043 0210 	orr.w	r2, r3, #16
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e8e0:	6978      	ldr	r0, [r7, #20]
 800e8e2:	f7ff f9b3 	bl	800dc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8e6:	bf00      	nop
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b084      	sub	sp, #16
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f7ff f9a1 	bl	800dc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e90a:	bf00      	nop
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b088      	sub	sp, #32
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	60bb      	str	r3, [r7, #8]
   return(result);
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e92e:	61fb      	str	r3, [r7, #28]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	461a      	mov	r2, r3
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	61bb      	str	r3, [r7, #24]
 800e93a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93c:	6979      	ldr	r1, [r7, #20]
 800e93e:	69ba      	ldr	r2, [r7, #24]
 800e940:	e841 2300 	strex	r3, r2, [r1]
 800e944:	613b      	str	r3, [r7, #16]
   return(result);
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1e6      	bne.n	800e91a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2220      	movs	r2, #32
 800e950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 f9ec 	bl	800ed38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e960:	bf00      	nop
 800e962:	3720      	adds	r7, #32
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d101      	bne.n	800e9a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e9a2:	2302      	movs	r3, #2
 800e9a4:	e027      	b.n	800e9f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2224      	movs	r2, #36	@ 0x24
 800e9b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f022 0201 	bic.w	r2, r2, #1
 800e9cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e9d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2220      	movs	r2, #32
 800e9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d101      	bne.n	800ea1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea16:	2302      	movs	r3, #2
 800ea18:	e02d      	b.n	800ea76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2224      	movs	r2, #36	@ 0x24
 800ea26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f022 0201 	bic.w	r2, r2, #1
 800ea40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	683a      	ldr	r2, [r7, #0]
 800ea52:	430a      	orrs	r2, r1
 800ea54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 f850 	bl	800eafc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2220      	movs	r2, #32
 800ea68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b084      	sub	sp, #16
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d101      	bne.n	800ea96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ea92:	2302      	movs	r3, #2
 800ea94:	e02d      	b.n	800eaf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2224      	movs	r2, #36	@ 0x24
 800eaa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f022 0201 	bic.w	r2, r2, #1
 800eabc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	683a      	ldr	r2, [r7, #0]
 800eace:	430a      	orrs	r2, r1
 800ead0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 f812 	bl	800eafc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2220      	movs	r2, #32
 800eae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
	...

0800eafc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d108      	bne.n	800eb1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb1c:	e031      	b.n	800eb82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb1e:	2308      	movs	r3, #8
 800eb20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb22:	2308      	movs	r3, #8
 800eb24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	0e5b      	lsrs	r3, r3, #25
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	f003 0307 	and.w	r3, r3, #7
 800eb34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	0f5b      	lsrs	r3, r3, #29
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	f003 0307 	and.w	r3, r3, #7
 800eb44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
 800eb48:	7b3a      	ldrb	r2, [r7, #12]
 800eb4a:	4911      	ldr	r1, [pc, #68]	@ (800eb90 <UARTEx_SetNbDataToProcess+0x94>)
 800eb4c:	5c8a      	ldrb	r2, [r1, r2]
 800eb4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eb52:	7b3a      	ldrb	r2, [r7, #12]
 800eb54:	490f      	ldr	r1, [pc, #60]	@ (800eb94 <UARTEx_SetNbDataToProcess+0x98>)
 800eb56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb58:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	7b7a      	ldrb	r2, [r7, #13]
 800eb68:	4909      	ldr	r1, [pc, #36]	@ (800eb90 <UARTEx_SetNbDataToProcess+0x94>)
 800eb6a:	5c8a      	ldrb	r2, [r1, r2]
 800eb6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eb70:	7b7a      	ldrb	r2, [r7, #13]
 800eb72:	4908      	ldr	r1, [pc, #32]	@ (800eb94 <UARTEx_SetNbDataToProcess+0x98>)
 800eb74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb76:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800eb82:	bf00      	nop
 800eb84:	3714      	adds	r7, #20
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	080105b0 	.word	0x080105b0
 800eb94:	080105b8 	.word	0x080105b8

0800eb98 <Communicate_RxPushData>:
	return (*data);
}


void Communicate_RxPushData( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	af00      	add	r7, sp, #0
// head（DMACが受信データを書き込む位置）に新しく受信データが蓄積される．
// tailから読み出せばいい
// headがtailに追いつくとバッファオーバーフローとなり正しく読み出せない

	if(rx_buffer.queue_length() >= TRX_BUFFER_SIZE)
 800eb9c:	480a      	ldr	r0, [pc, #40]	@ (800ebc8 <Communicate_RxPushData+0x30>)
 800eb9e:	f000 f922 	bl	800ede6 <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b7f      	cmp	r3, #127	@ 0x7f
 800eba6:	bfcc      	ite	gt
 800eba8:	2301      	movgt	r3, #1
 800ebaa:	2300      	movle	r3, #0
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d107      	bne.n	800ebc2 <Communicate_RxPushData+0x2a>
	{
		return;
	}

	rx_buffer.push(rx_data);					// 書き込みポインタにデータを格納
 800ebb2:	4b06      	ldr	r3, [pc, #24]	@ (800ebcc <Communicate_RxPushData+0x34>)
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4803      	ldr	r0, [pc, #12]	@ (800ebc8 <Communicate_RxPushData+0x30>)
 800ebbc:	f000 f920 	bl	800ee00 <_ZN10ring_queueILj128EVhE4pushEh>
 800ebc0:	e000      	b.n	800ebc4 <Communicate_RxPushData+0x2c>
		return;
 800ebc2:	bf00      	nop

}
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	200007dc 	.word	0x200007dc
 800ebcc:	20000865 	.word	0x20000865

0800ebd0 <Communicate_RxPopData>:

uint8_t Communicate_RxPopData( void )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ebd6:	b672      	cpsid	i
}
 800ebd8:	bf00      	nop

	// この関数は多重に実行されるとまずいので割り込みを禁止する
	__disable_irq();

	// データがない場合
	if(rx_buffer.queue_length() == 0){
 800ebda:	4816      	ldr	r0, [pc, #88]	@ (800ec34 <Communicate_RxPopData+0x64>)
 800ebdc:	f000 f903 	bl	800ede6 <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	bf0c      	ite	eq
 800ebe6:	2301      	moveq	r3, #1
 800ebe8:	2300      	movne	r3, #0
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d014      	beq.n	800ec1a <Communicate_RxPopData+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800ebf0:	b662      	cpsie	i
}
 800ebf2:	bf00      	nop
		// 割り込み許可
		__enable_irq();

		// データを受信するまで待機
		while(rx_buffer.queue_length() == 0)
 800ebf4:	e004      	b.n	800ec00 <Communicate_RxPopData+0x30>
		{
			HAL_UART_Receive_DMA( &huart1, (uint8_t*)(&rx_data), 1 );
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	490f      	ldr	r1, [pc, #60]	@ (800ec38 <Communicate_RxPopData+0x68>)
 800ebfa:	4810      	ldr	r0, [pc, #64]	@ (800ec3c <Communicate_RxPopData+0x6c>)
 800ebfc:	f7fe fc04 	bl	800d408 <HAL_UART_Receive_DMA>
		while(rx_buffer.queue_length() == 0)
 800ec00:	480c      	ldr	r0, [pc, #48]	@ (800ec34 <Communicate_RxPopData+0x64>)
 800ec02:	f000 f8f0 	bl	800ede6 <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	bf0c      	ite	eq
 800ec0c:	2301      	moveq	r3, #1
 800ec0e:	2300      	movne	r3, #0
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d1ef      	bne.n	800ebf6 <Communicate_RxPopData+0x26>
  __ASM volatile ("cpsid i" : : : "memory");
 800ec16:	b672      	cpsid	i
}
 800ec18:	bf00      	nop
		}
		__disable_irq();
	} else;

	ch = rx_buffer.pop();	// 読み出しデータの取り出し
 800ec1a:	4806      	ldr	r0, [pc, #24]	@ (800ec34 <Communicate_RxPopData+0x64>)
 800ec1c:	f000 f926 	bl	800ee6c <_ZN10ring_queueILj128EVhE3popEv>
 800ec20:	4603      	mov	r3, r0
 800ec22:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 800ec24:	b662      	cpsie	i
}
 800ec26:	bf00      	nop


	// 割り込み許可
	__enable_irq();
	return ch;
 800ec28:	79fb      	ldrb	r3, [r7, #7]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	200007dc 	.word	0x200007dc
 800ec38:	20000865 	.word	0x20000865
 800ec3c:	200005cc 	.word	0x200005cc

0800ec40 <Communicate_TxPushData>:

/* ---------------------------------------------------------------
	UART1で1文字送信する関数
--------------------------------------------------------------- */
void Communicate_TxPushData( int8_t data )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec4a:	b672      	cpsid	i
}
 800ec4c:	bf00      	nop
	while(1) {
		// この関数は多重に実行されるとまずいので割り込みを禁止する
		__disable_irq();

		// DMAを一時的に停止
		HAL_DMA_Abort(huart1.hdmatx);
 800ec4e:	4b1a      	ldr	r3, [pc, #104]	@ (800ecb8 <Communicate_TxPushData+0x78>)
 800ec50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7f5 fd14 	bl	8004680 <HAL_DMA_Abort>

		// バッファに空きがあればループから抜ける
		if( tx_buffer.queue_length() < TRX_BUFFER_SIZE ) {
 800ec58:	4818      	ldr	r0, [pc, #96]	@ (800ecbc <Communicate_TxPushData+0x7c>)
 800ec5a:	f000 f8c4 	bl	800ede6 <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec62:	bfd4      	ite	le
 800ec64:	2301      	movle	r3, #1
 800ec66:	2300      	movgt	r3, #0
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d113      	bne.n	800ec96 <Communicate_TxPushData+0x56>
				break;
		} else;

		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
 800ec6e:	2201      	movs	r2, #1
 800ec70:	4913      	ldr	r1, [pc, #76]	@ (800ecc0 <Communicate_TxPushData+0x80>)
 800ec72:	4811      	ldr	r0, [pc, #68]	@ (800ecb8 <Communicate_TxPushData+0x78>)
 800ec74:	f7fe fb00 	bl	800d278 <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 800ec78:	b662      	cpsie	i
}
 800ec7a:	bf00      	nop

		// 割り込み許可
		__enable_irq();

		// バッファに空きができるまで待機（この間割り込みが発生してもよい）
		while(tx_buffer.queue_length() == TRX_BUFFER_SIZE);
 800ec7c:	bf00      	nop
 800ec7e:	480f      	ldr	r0, [pc, #60]	@ (800ecbc <Communicate_TxPushData+0x7c>)
 800ec80:	f000 f8b1 	bl	800ede6 <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b80      	cmp	r3, #128	@ 0x80
 800ec88:	bf0c      	ite	eq
 800ec8a:	2301      	moveq	r3, #1
 800ec8c:	2300      	movne	r3, #0
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d1f4      	bne.n	800ec7e <Communicate_TxPushData+0x3e>
		__disable_irq();
 800ec94:	e7d9      	b.n	800ec4a <Communicate_TxPushData+0xa>
				break;
 800ec96:	bf00      	nop
	}
	// ここの時点でDMACは停止，割り込みは禁止されている

	// 書き込みポインタにデータを格納
	tx_buffer.push((uint8_t)data);
 800ec98:	79fb      	ldrb	r3, [r7, #7]
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	4807      	ldr	r0, [pc, #28]	@ (800ecbc <Communicate_TxPushData+0x7c>)
 800ec9e:	f000 f8af 	bl	800ee00 <_ZN10ring_queueILj128EVhE4pushEh>

	// DMA動作再開
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
 800eca2:	2201      	movs	r2, #1
 800eca4:	4906      	ldr	r1, [pc, #24]	@ (800ecc0 <Communicate_TxPushData+0x80>)
 800eca6:	4804      	ldr	r0, [pc, #16]	@ (800ecb8 <Communicate_TxPushData+0x78>)
 800eca8:	f7fe fae6 	bl	800d278 <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 800ecac:	b662      	cpsie	i
}
 800ecae:	bf00      	nop

	// 割り込み許可
	__enable_irq();
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	200005cc 	.word	0x200005cc
 800ecbc:	20000754 	.word	0x20000754
 800ecc0:	20000864 	.word	0x20000864

0800ecc4 <Communicate_TxPopData>:

void Communicate_TxPopData( void )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	af00      	add	r7, sp, #0
	// データがない場合
	if(tx_buffer.queue_length() == 0)
 800ecc8:	480f      	ldr	r0, [pc, #60]	@ (800ed08 <Communicate_TxPopData+0x44>)
 800ecca:	f000 f88c 	bl	800ede6 <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	bf0c      	ite	eq
 800ecd4:	2301      	moveq	r3, #1
 800ecd6:	2300      	movne	r3, #0
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d006      	beq.n	800ecec <Communicate_TxPopData+0x28>
	{
		tx_data = '\0';
 800ecde:	4b0b      	ldr	r3, [pc, #44]	@ (800ed0c <Communicate_TxPopData+0x48>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	701a      	strb	r2, [r3, #0]
		// DMAを停止
		HAL_UART_DMAStop(&huart1);
 800ece4:	480a      	ldr	r0, [pc, #40]	@ (800ed10 <Communicate_TxPopData+0x4c>)
 800ece6:	f7fe fbe1 	bl	800d4ac <HAL_UART_DMAStop>
		// 読み出しデータの取り出し
		tx_data = tx_buffer.pop();
		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
	}
}
 800ecea:	e00b      	b.n	800ed04 <Communicate_TxPopData+0x40>
		tx_data = tx_buffer.pop();
 800ecec:	4806      	ldr	r0, [pc, #24]	@ (800ed08 <Communicate_TxPopData+0x44>)
 800ecee:	f000 f8bd 	bl	800ee6c <_ZN10ring_queueILj128EVhE3popEv>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	4b05      	ldr	r3, [pc, #20]	@ (800ed0c <Communicate_TxPopData+0x48>)
 800ecf8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	4903      	ldr	r1, [pc, #12]	@ (800ed0c <Communicate_TxPopData+0x48>)
 800ecfe:	4804      	ldr	r0, [pc, #16]	@ (800ed10 <Communicate_TxPopData+0x4c>)
 800ed00:	f7fe faba 	bl	800d278 <HAL_UART_Transmit_DMA>
}
 800ed04:	bf00      	nop
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	20000754 	.word	0x20000754
 800ed0c:	20000864 	.word	0x20000864
 800ed10:	200005cc 	.word	0x200005cc

0800ed14 <HAL_UART_RxCpltCallback>:

/* ---------------------------------------------------------------
	受信・送信完了時のコールバック関数
--------------------------------------------------------------- */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART1 ) {
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a04      	ldr	r2, [pc, #16]	@ (800ed34 <HAL_UART_RxCpltCallback+0x20>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d101      	bne.n	800ed2a <HAL_UART_RxCpltCallback+0x16>
        Communicate_RxPushData();
 800ed26:	f7ff ff37 	bl	800eb98 <Communicate_RxPushData>
    } else;
}
 800ed2a:	bf00      	nop
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	40013800 	.word	0x40013800

0800ed38 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART1 ) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a04      	ldr	r2, [pc, #16]	@ (800ed58 <HAL_UART_TxCpltCallback+0x20>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d101      	bne.n	800ed4e <HAL_UART_TxCpltCallback+0x16>
        Communicate_TxPopData();
 800ed4a:	f7ff ffbb 	bl	800ecc4 <Communicate_TxPopData>
    } else;
}
 800ed4e:	bf00      	nop
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	40013800 	.word	0x40013800

0800ed5c <Communicate_Initialize>:

/* ---------------------------------------------------------------
	printfとscanfを使用するための設定
--------------------------------------------------------------- */
void Communicate_Initialize( void )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
	setbuf(stdout, NULL);
 800ed60:	4b07      	ldr	r3, [pc, #28]	@ (800ed80 <Communicate_Initialize+0x24>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	2100      	movs	r1, #0
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f000 fc4d 	bl	800f608 <setbuf>
	setbuf(stdin, NULL);
 800ed6e:	4b04      	ldr	r3, [pc, #16]	@ (800ed80 <Communicate_Initialize+0x24>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	2100      	movs	r1, #0
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 fc46 	bl	800f608 <setbuf>
}
 800ed7c:	bf00      	nop
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	20000018 	.word	0x20000018

0800ed84 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
extern "C" PUTCHAR_PROTOTYPE
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
	Communicate_TxPushData(ch);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	b25b      	sxtb	r3, r3
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7ff ff55 	bl	800ec40 <Communicate_TxPushData>
	return 1;
 800ed96:	2301      	movs	r3, #1
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <__io_getchar>:
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
extern "C" GETCHAR_PROTOTYPE
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	af00      	add	r7, sp, #0
	//return Communicate_TerminalRecv();
	return Communicate_RxPopData();
 800eda4:	f7ff ff14 	bl	800ebd0 <Communicate_RxPopData>
 800eda8:	4603      	mov	r3, r0

}
 800edaa:	4618      	mov	r0, r3
 800edac:	bd80      	pop	{r7, pc}

0800edae <_ZN10ring_queueILj128EVhEC1Ev>:
		int16_t tail;
		int16_t head;
		int16_t length;
		const uint16_t cap = SIZE;
	public:
		ring_queue()
 800edae:	b480      	push	{r7}
 800edb0:	b083      	sub	sp, #12
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
		{
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2280      	movs	r2, #128	@ 0x80
 800edba:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
			tail = -1;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800edc4:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
			head = 0;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
			length = 0;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
		}
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4618      	mov	r0, r3
 800eddc:	370c      	adds	r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <_ZN10ring_queueILj128EVhE12queue_lengthEv>:
		{
			buff[(tail + 1)%cap] = push_data;
			tail = (tail + 1)%cap;
			length = length + 1;
		}
		int queue_length()
 800ede6:	b480      	push	{r7}
 800ede8:	b083      	sub	sp, #12
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
		{
			return length;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	@ 0x84
		}
 800edf4:	4618      	mov	r0, r3
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <_ZN10ring_queueILj128EVhE4pushEh>:
		void push(T push_data)
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	70fb      	strb	r3, [r7, #3]
			buff[(tail + 1)%cap] = push_data;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 800ee12:	3301      	adds	r3, #1
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	f8b2 2086 	ldrh.w	r2, [r2, #134]	@ 0x86
 800ee1a:	fb93 f1f2 	sdiv	r1, r3, r2
 800ee1e:	fb01 f202 	mul.w	r2, r1, r2
 800ee22:	1a9b      	subs	r3, r3, r2
 800ee24:	78fa      	ldrb	r2, [r7, #3]
 800ee26:	b2d1      	uxtb	r1, r2
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	54d1      	strb	r1, [r2, r3]
			tail = (tail + 1)%cap;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 800ee32:	3301      	adds	r3, #1
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	f8b2 2086 	ldrh.w	r2, [r2, #134]	@ 0x86
 800ee3a:	fb93 f1f2 	sdiv	r1, r3, r2
 800ee3e:	fb01 f202 	mul.w	r2, r1, r2
 800ee42:	1a9b      	subs	r3, r3, r2
 800ee44:	b21a      	sxth	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
			length = length + 1;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	@ 0x84
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	3301      	adds	r3, #1
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	b21a      	sxth	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
		}
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <_ZN10ring_queueILj128EVhE3popEv>:
		T pop()
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
			T pop_data = buff[head];
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	5c9b      	ldrb	r3, [r3, r2]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	73fb      	strb	r3, [r7, #15]
			head = (head + 1)%cap;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	f8b2 2086 	ldrh.w	r2, [r2, #134]	@ 0x86
 800ee92:	fb93 f1f2 	sdiv	r1, r3, r2
 800ee96:	fb01 f202 	mul.w	r2, r1, r2
 800ee9a:	1a9b      	subs	r3, r3, r2
 800ee9c:	b21a      	sxth	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
			length = length - 1;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	@ 0x84
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	3b01      	subs	r3, #1
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	b21a      	sxth	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
			return pop_data;
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
 800eeba:	b2db      	uxtb	r3, r3
		}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3714      	adds	r7, #20
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <_Z41__static_initialization_and_destruction_0v>:
 800eec8:	b580      	push	{r7, lr}
 800eeca:	af00      	add	r7, sp, #0
ring_queue<TRX_BUFFER_SIZE,volatile uint8_t> tx_buffer;
 800eecc:	4803      	ldr	r0, [pc, #12]	@ (800eedc <_Z41__static_initialization_and_destruction_0v+0x14>)
 800eece:	f7ff ff6e 	bl	800edae <_ZN10ring_queueILj128EVhEC1Ev>
ring_queue<TRX_BUFFER_SIZE,volatile uint8_t> rx_buffer;
 800eed2:	4803      	ldr	r0, [pc, #12]	@ (800eee0 <_Z41__static_initialization_and_destruction_0v+0x18>)
 800eed4:	f7ff ff6b 	bl	800edae <_ZN10ring_queueILj128EVhEC1Ev>
}
 800eed8:	bf00      	nop
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	20000754 	.word	0x20000754
 800eee0:	200007dc 	.word	0x200007dc

0800eee4 <_GLOBAL__sub_I_tx_buffer>:
 800eee4:	b580      	push	{r7, lr}
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	f7ff ffee 	bl	800eec8 <_Z41__static_initialization_and_destruction_0v>
 800eeec:	bd80      	pop	{r7, pc}
	...

0800eef0 <Encoder_Initialize>:
void set_ms_dt(float _m_dt)
{
	m_dt = _m_dt;
}

void Encoder_Initialize(){
 800eef0:	b580      	push	{r7, lr}
 800eef2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800eef4:	213c      	movs	r1, #60	@ 0x3c
 800eef6:	4806      	ldr	r0, [pc, #24]	@ (800ef10 <Encoder_Initialize+0x20>)
 800eef8:	f7fc ffd6 	bl	800bea8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800eefc:	213c      	movs	r1, #60	@ 0x3c
 800eefe:	4805      	ldr	r0, [pc, #20]	@ (800ef14 <Encoder_Initialize+0x24>)
 800ef00:	f7fc ffd2 	bl	800bea8 <HAL_TIM_Encoder_Start>
	Encoder_ResetPosition_Left();
 800ef04:	f000 f808 	bl	800ef18 <Encoder_ResetPosition_Left>
	Encoder_ResetPosition_Right();
 800ef08:	f000 f812 	bl	800ef30 <Encoder_ResetPosition_Right>
}
 800ef0c:	bf00      	nop
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	2000049c 	.word	0x2000049c
 800ef14:	200004e8 	.word	0x200004e8

0800ef18 <Encoder_ResetPosition_Left>:

void Encoder_ResetPosition_Left(){
 800ef18:	b480      	push	{r7}
 800ef1a:	af00      	add	r7, sp, #0
	ENC_CNT_L = ENC_ZERO;
 800ef1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ef20:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ef24:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ef26:	bf00      	nop
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <Encoder_ResetPosition_Right>:

void Encoder_ResetPosition_Right(){
 800ef30:	b480      	push	{r7}
 800ef32:	af00      	add	r7, sp, #0
	ENC_CNT_R = ENC_ZERO;
 800ef34:	4b04      	ldr	r3, [pc, #16]	@ (800ef48 <Encoder_ResetPosition_Right+0x18>)
 800ef36:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ef3a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ef3c:	bf00      	nop
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop
 800ef48:	40000400 	.word	0x40000400

0800ef4c <read_byte>:
uint8_t imu_value[13];

int16_t accel_data[3];
int16_t gyro_data[3];

uint8_t read_byte(uint8_t reg){
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af02      	add	r7, sp, #8
 800ef52:	4603      	mov	r3, r0
 800ef54:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0x00;
 800ef56:	2300      	movs	r3, #0
 800ef58:	73fb      	strb	r3, [r7, #15]
	uint8_t dammy = 0x00;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	73bb      	strb	r3, [r7, #14]
	reg = reg | 0x80; //mask
 800ef5e:	79fb      	ldrb	r3, [r7, #7]
 800ef60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ef6e:	480f      	ldr	r0, [pc, #60]	@ (800efac <read_byte+0x60>)
 800ef70:	f7f7 faf4 	bl	800655c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &reg, 1 , 100);
 800ef74:	1df9      	adds	r1, r7, #7
 800ef76:	2364      	movs	r3, #100	@ 0x64
 800ef78:	2201      	movs	r2, #1
 800ef7a:	480d      	ldr	r0, [pc, #52]	@ (800efb0 <read_byte+0x64>)
 800ef7c:	f7fb fd82 	bl	800aa84 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi2, &dammy, &val, 1, 100);
 800ef80:	f107 020f 	add.w	r2, r7, #15
 800ef84:	f107 010e 	add.w	r1, r7, #14
 800ef88:	2364      	movs	r3, #100	@ 0x64
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	4808      	ldr	r0, [pc, #32]	@ (800efb0 <read_byte+0x64>)
 800ef90:	f7fb ff8c 	bl	800aeac <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);
 800ef94:	2201      	movs	r2, #1
 800ef96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ef9a:	4804      	ldr	r0, [pc, #16]	@ (800efac <read_byte+0x60>)
 800ef9c:	f7f7 fade 	bl	800655c <HAL_GPIO_WritePin>

	return val;
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	42020400 	.word	0x42020400
 800efb0:	20000408 	.word	0x20000408

0800efb4 <write_byte>:

void write_byte(uint8_t reg, uint8_t data){
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	4603      	mov	r3, r0
 800efbc:	460a      	mov	r2, r1
 800efbe:	71fb      	strb	r3, [r7, #7]
 800efc0:	4613      	mov	r3, r2
 800efc2:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 800efc4:	79fb      	ldrb	r3, [r7, #7]
 800efc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
 800efce:	2200      	movs	r2, #0
 800efd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800efd4:	480c      	ldr	r0, [pc, #48]	@ (800f008 <write_byte+0x54>)
 800efd6:	f7f7 fac1 	bl	800655c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &reg, 1 , 100);
 800efda:	1df9      	adds	r1, r7, #7
 800efdc:	2364      	movs	r3, #100	@ 0x64
 800efde:	2201      	movs	r2, #1
 800efe0:	480a      	ldr	r0, [pc, #40]	@ (800f00c <write_byte+0x58>)
 800efe2:	f7fb fd4f 	bl	800aa84 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1 , 100);
 800efe6:	1db9      	adds	r1, r7, #6
 800efe8:	2364      	movs	r3, #100	@ 0x64
 800efea:	2201      	movs	r2, #1
 800efec:	4807      	ldr	r0, [pc, #28]	@ (800f00c <write_byte+0x58>)
 800efee:	f7fb fd49 	bl	800aa84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);
 800eff2:	2201      	movs	r2, #1
 800eff4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800eff8:	4803      	ldr	r0, [pc, #12]	@ (800f008 <write_byte+0x54>)
 800effa:	f7f7 faaf 	bl	800655c <HAL_GPIO_WritePin>
}
 800effe:	bf00      	nop
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	42020400 	.word	0x42020400
 800f00c:	20000408 	.word	0x20000408

0800f010 <IMU_initialize>:

void IMU_initialize()
{
 800f010:	b580      	push	{r7, lr}
 800f012:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 800f014:	2032      	movs	r0, #50	@ 0x32
 800f016:	f7f3 f92f 	bl	8002278 <HAL_Delay>
	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);
 800f01a:	2201      	movs	r2, #1
 800f01c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f020:	4814      	ldr	r0, [pc, #80]	@ (800f074 <IMU_initialize+0x64>)
 800f022:	f7f7 fa9b 	bl	800655c <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800f026:	2032      	movs	r0, #50	@ 0x32
 800f028:	f7f3 f926 	bl	8002278 <HAL_Delay>
	  read_byte(WHO_AM_I);
 800f02c:	200f      	movs	r0, #15
 800f02e:	f7ff ff8d 	bl	800ef4c <read_byte>
	  HAL_Delay(50);
 800f032:	2032      	movs	r0, #50	@ 0x32
 800f034:	f7f3 f920 	bl	8002278 <HAL_Delay>
	  write_byte(CTRL1_XL, ACCEL_ODR_SET|ACCEL_8G);
 800f038:	218e      	movs	r1, #142	@ 0x8e
 800f03a:	2010      	movs	r0, #16
 800f03c:	f7ff ffba 	bl	800efb4 <write_byte>
	  HAL_Delay(50);
 800f040:	2032      	movs	r0, #50	@ 0x32
 800f042:	f7f3 f919 	bl	8002278 <HAL_Delay>
	  write_byte(0x17, 0x29);
 800f046:	2129      	movs	r1, #41	@ 0x29
 800f048:	2017      	movs	r0, #23
 800f04a:	f7ff ffb3 	bl	800efb4 <write_byte>
	  HAL_Delay(50);
 800f04e:	2032      	movs	r0, #50	@ 0x32
 800f050:	f7f3 f912 	bl	8002278 <HAL_Delay>
	  write_byte(CTRL2_G, GYRO_ODR_SET|GYRO_4000_DPS);
 800f054:	2181      	movs	r1, #129	@ 0x81
 800f056:	2011      	movs	r0, #17
 800f058:	f7ff ffac 	bl	800efb4 <write_byte>
	  HAL_Delay(50);
 800f05c:	2032      	movs	r0, #50	@ 0x32
 800f05e:	f7f3 f90b 	bl	8002278 <HAL_Delay>
	  write_byte(0x15,0x00);
 800f062:	2100      	movs	r1, #0
 800f064:	2015      	movs	r0, #21
 800f066:	f7ff ffa5 	bl	800efb4 <write_byte>
	  HAL_Delay(50);
 800f06a:	2032      	movs	r0, #50	@ 0x32
 800f06c:	f7f3 f904 	bl	8002278 <HAL_Delay>

}
 800f070:	bf00      	nop
 800f072:	bd80      	pop	{r7, pc}
 800f074:	42020400 	.word	0x42020400

0800f078 <HAL_SPI_TxRxCpltCallback>:
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
	HAL_SPI_DMAStop(&hspi2);
}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi){
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
	    //HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);

		gyro_data[x_axis] = (((int16_t)imu_value[2]<<8 ) | ( (int16_t)imu_value[1]&0x00ff ) );
 800f080:	4b26      	ldr	r3, [pc, #152]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f082:	789b      	ldrb	r3, [r3, #2]
 800f084:	b21b      	sxth	r3, r3
 800f086:	021b      	lsls	r3, r3, #8
 800f088:	b21a      	sxth	r2, r3
 800f08a:	4b24      	ldr	r3, [pc, #144]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f08c:	785b      	ldrb	r3, [r3, #1]
 800f08e:	b21b      	sxth	r3, r3
 800f090:	4313      	orrs	r3, r2
 800f092:	b21a      	sxth	r2, r3
 800f094:	4b22      	ldr	r3, [pc, #136]	@ (800f120 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800f096:	801a      	strh	r2, [r3, #0]
		gyro_data[y_axis] = (((int16_t)imu_value[4]<<8 ) | ( (int16_t)imu_value[3]&0x00ff ) );
 800f098:	4b20      	ldr	r3, [pc, #128]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f09a:	791b      	ldrb	r3, [r3, #4]
 800f09c:	b21b      	sxth	r3, r3
 800f09e:	021b      	lsls	r3, r3, #8
 800f0a0:	b21a      	sxth	r2, r3
 800f0a2:	4b1e      	ldr	r3, [pc, #120]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0a4:	78db      	ldrb	r3, [r3, #3]
 800f0a6:	b21b      	sxth	r3, r3
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	b21a      	sxth	r2, r3
 800f0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800f120 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800f0ae:	805a      	strh	r2, [r3, #2]
		gyro_data[z_axis] = (((int16_t)imu_value[6]<<8 ) | ( (int16_t)imu_value[5]&0x00ff ) );
 800f0b0:	4b1a      	ldr	r3, [pc, #104]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0b2:	799b      	ldrb	r3, [r3, #6]
 800f0b4:	b21b      	sxth	r3, r3
 800f0b6:	021b      	lsls	r3, r3, #8
 800f0b8:	b21a      	sxth	r2, r3
 800f0ba:	4b18      	ldr	r3, [pc, #96]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0bc:	795b      	ldrb	r3, [r3, #5]
 800f0be:	b21b      	sxth	r3, r3
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	b21a      	sxth	r2, r3
 800f0c4:	4b16      	ldr	r3, [pc, #88]	@ (800f120 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800f0c6:	809a      	strh	r2, [r3, #4]
		accel_data[x_axis] = (((int16_t)imu_value[8]<<8 ) | ( (int16_t)imu_value[7]&0x00ff ) );
 800f0c8:	4b14      	ldr	r3, [pc, #80]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0ca:	7a1b      	ldrb	r3, [r3, #8]
 800f0cc:	b21b      	sxth	r3, r3
 800f0ce:	021b      	lsls	r3, r3, #8
 800f0d0:	b21a      	sxth	r2, r3
 800f0d2:	4b12      	ldr	r3, [pc, #72]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0d4:	79db      	ldrb	r3, [r3, #7]
 800f0d6:	b21b      	sxth	r3, r3
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	b21a      	sxth	r2, r3
 800f0dc:	4b11      	ldr	r3, [pc, #68]	@ (800f124 <HAL_SPI_TxRxCpltCallback+0xac>)
 800f0de:	801a      	strh	r2, [r3, #0]
		accel_data[y_axis] = (((int16_t)imu_value[10]<<8 ) | ( (int16_t)imu_value[9]&0x00ff ) );
 800f0e0:	4b0e      	ldr	r3, [pc, #56]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0e2:	7a9b      	ldrb	r3, [r3, #10]
 800f0e4:	b21b      	sxth	r3, r3
 800f0e6:	021b      	lsls	r3, r3, #8
 800f0e8:	b21a      	sxth	r2, r3
 800f0ea:	4b0c      	ldr	r3, [pc, #48]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0ec:	7a5b      	ldrb	r3, [r3, #9]
 800f0ee:	b21b      	sxth	r3, r3
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	b21a      	sxth	r2, r3
 800f0f4:	4b0b      	ldr	r3, [pc, #44]	@ (800f124 <HAL_SPI_TxRxCpltCallback+0xac>)
 800f0f6:	805a      	strh	r2, [r3, #2]
		accel_data[z_axis] = (((int16_t)imu_value[12]<<8 ) | ( (int16_t)imu_value[11]&0x00ff ) );
 800f0f8:	4b08      	ldr	r3, [pc, #32]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f0fa:	7b1b      	ldrb	r3, [r3, #12]
 800f0fc:	b21b      	sxth	r3, r3
 800f0fe:	021b      	lsls	r3, r3, #8
 800f100:	b21a      	sxth	r2, r3
 800f102:	4b06      	ldr	r3, [pc, #24]	@ (800f11c <HAL_SPI_TxRxCpltCallback+0xa4>)
 800f104:	7adb      	ldrb	r3, [r3, #11]
 800f106:	b21b      	sxth	r3, r3
 800f108:	4313      	orrs	r3, r2
 800f10a:	b21a      	sxth	r2, r3
 800f10c:	4b05      	ldr	r3, [pc, #20]	@ (800f124 <HAL_SPI_TxRxCpltCallback+0xac>)
 800f10e:	809a      	strh	r2, [r3, #4]

		//IMU_read_DMA_Start();
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr
 800f11c:	20000868 	.word	0x20000868
 800f120:	20000880 	.word	0x20000880
 800f124:	20000878 	.word	0x20000878

0800f128 <Indicate_LED>:
#include "gpio.h"
#include "interface.h"


void Indicate_LED(uint8_t led_num)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	4603      	mov	r3, r0
 800f130:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, (led_num >> 5)&0x01);
 800f132:	79fb      	ldrb	r3, [r7, #7]
 800f134:	095b      	lsrs	r3, r3, #5
 800f136:	b2db      	uxtb	r3, r3
 800f138:	f003 0301 	and.w	r3, r3, #1
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	461a      	mov	r2, r3
 800f140:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f144:	481f      	ldr	r0, [pc, #124]	@ (800f1c4 <Indicate_LED+0x9c>)
 800f146:	f7f7 fa09 	bl	800655c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, (led_num >> 0)&0x01);
 800f14a:	79fb      	ldrb	r3, [r7, #7]
 800f14c:	f003 0301 	and.w	r3, r3, #1
 800f150:	b2db      	uxtb	r3, r3
 800f152:	461a      	mov	r2, r3
 800f154:	2102      	movs	r1, #2
 800f156:	481c      	ldr	r0, [pc, #112]	@ (800f1c8 <Indicate_LED+0xa0>)
 800f158:	f7f7 fa00 	bl	800655c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, (led_num >> 1)&0x01);
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	085b      	lsrs	r3, r3, #1
 800f160:	b2db      	uxtb	r3, r3
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	b2db      	uxtb	r3, r3
 800f168:	461a      	mov	r2, r3
 800f16a:	2101      	movs	r1, #1
 800f16c:	4816      	ldr	r0, [pc, #88]	@ (800f1c8 <Indicate_LED+0xa0>)
 800f16e:	f7f7 f9f5 	bl	800655c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, (led_num >> 2)&0x01);
 800f172:	79fb      	ldrb	r3, [r7, #7]
 800f174:	089b      	lsrs	r3, r3, #2
 800f176:	b2db      	uxtb	r3, r3
 800f178:	f003 0301 	and.w	r3, r3, #1
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	461a      	mov	r2, r3
 800f180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f184:	4811      	ldr	r0, [pc, #68]	@ (800f1cc <Indicate_LED+0xa4>)
 800f186:	f7f7 f9e9 	bl	800655c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, (led_num >> 3)&0x01);
 800f18a:	79fb      	ldrb	r3, [r7, #7]
 800f18c:	08db      	lsrs	r3, r3, #3
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	f003 0301 	and.w	r3, r3, #1
 800f194:	b2db      	uxtb	r3, r3
 800f196:	461a      	mov	r2, r3
 800f198:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f19c:	480b      	ldr	r0, [pc, #44]	@ (800f1cc <Indicate_LED+0xa4>)
 800f19e:	f7f7 f9dd 	bl	800655c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, (led_num >> 4)&0x01);
 800f1a2:	79fb      	ldrb	r3, [r7, #7]
 800f1a4:	091b      	lsrs	r3, r3, #4
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	f003 0301 	and.w	r3, r3, #1
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f1b4:	4805      	ldr	r0, [pc, #20]	@ (800f1cc <Indicate_LED+0xa4>)
 800f1b6:	f7f7 f9d1 	bl	800655c <HAL_GPIO_WritePin>
}
 800f1ba:	bf00      	nop
 800f1bc:	3708      	adds	r7, #8
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	42020400 	.word	0x42020400
 800f1c8:	42021c00 	.word	0x42021c00
 800f1cc:	42020800 	.word	0x42020800

0800f1d0 <Sensor_TurnOffLED>:
										 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

static uint16_t		adc_value[NUM_ADC];		// AD変換値

void Sensor_TurnOffLED()
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	71fb      	strb	r3, [r7, #7]
 800f1da:	e012      	b.n	800f202 <Sensor_TurnOffLED+0x32>
		led_on_pattern[i] = 0x00000000;
 800f1dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1e0:	4a0d      	ldr	r2, [pc, #52]	@ (800f218 <Sensor_TurnOffLED+0x48>)
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		led_off_pattern[i] = (uint32_t)SENSOR_ALL_PATTERN << 16;
 800f1e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1ec:	4a0b      	ldr	r2, [pc, #44]	@ (800f21c <Sensor_TurnOffLED+0x4c>)
 800f1ee:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 800f1f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 800f1f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	71fb      	strb	r3, [r7, #7]
 800f202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f206:	2b09      	cmp	r3, #9
 800f208:	dde8      	ble.n	800f1dc <Sensor_TurnOffLED+0xc>
	}
}
 800f20a:	bf00      	nop
 800f20c:	bf00      	nop
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr
 800f218:	20000888 	.word	0x20000888
 800f21c:	200008b0 	.word	0x200008b0

0800f220 <Sensor_TurnOnLED>:

void Sensor_TurnOnLED()
{
 800f220:	b580      	push	{r7, lr}
 800f222:	af00      	add	r7, sp, #0
	Sensor_TurnOffLED();
 800f224:	f7ff ffd4 	bl	800f1d0 <Sensor_TurnOffLED>
	led_on_pattern[LED_FR_ON] = IR1_Pin;
 800f228:	4b06      	ldr	r3, [pc, #24]	@ (800f244 <Sensor_TurnOnLED+0x24>)
 800f22a:	2201      	movs	r2, #1
 800f22c:	601a      	str	r2, [r3, #0]
	led_on_pattern[LED_SR_ON] = IR2_Pin;
 800f22e:	4b05      	ldr	r3, [pc, #20]	@ (800f244 <Sensor_TurnOnLED+0x24>)
 800f230:	2202      	movs	r2, #2
 800f232:	609a      	str	r2, [r3, #8]
	led_on_pattern[LED_SL_ON] = IR3_Pin;
 800f234:	4b03      	ldr	r3, [pc, #12]	@ (800f244 <Sensor_TurnOnLED+0x24>)
 800f236:	2204      	movs	r2, #4
 800f238:	611a      	str	r2, [r3, #16]
	led_on_pattern[LED_FL_ON] = IR4_Pin;
 800f23a:	4b02      	ldr	r3, [pc, #8]	@ (800f244 <Sensor_TurnOnLED+0x24>)
 800f23c:	2208      	movs	r2, #8
 800f23e:	619a      	str	r2, [r3, #24]
}
 800f240:	bf00      	nop
 800f242:	bd80      	pop	{r7, pc}
 800f244:	20000888 	.word	0x20000888

0800f248 <Sensor_Initialize>:

void Sensor_Initialize()
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b0b6      	sub	sp, #216	@ 0xd8
 800f24c:	af00      	add	r7, sp, #0

	  Sensor_TurnOnLED();
 800f24e:	f7ff ffe7 	bl	800f220 <Sensor_TurnOnLED>
	  DMA_NodeConfTypeDef nodeConf1,nodeConf2;
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf1, &Node_GPDMA1_Channel0);
 800f252:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f256:	493e      	ldr	r1, [pc, #248]	@ (800f350 <Sensor_Initialize+0x108>)
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f6 f8db 	bl	8005414 <HAL_DMAEx_List_GetNodeConfig>
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf2, &Node_GPDMA1_Channel1);
 800f25e:	463b      	mov	r3, r7
 800f260:	493c      	ldr	r1, [pc, #240]	@ (800f354 <Sensor_Initialize+0x10c>)
 800f262:	4618      	mov	r0, r3
 800f264:	f7f6 f8d6 	bl	8005414 <HAL_DMAEx_List_GetNodeConfig>
	  // 書き換えたい部分だけ変更
	  nodeConf1.SrcAddress = (uint32_t)led_on_pattern;
 800f268:	4b3b      	ldr	r3, [pc, #236]	@ (800f358 <Sensor_Initialize+0x110>)
 800f26a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  nodeConf1.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 800f26e:	4b3b      	ldr	r3, [pc, #236]	@ (800f35c <Sensor_Initialize+0x114>)
 800f270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	  nodeConf1.DataSize   = 4*NUM_ADC;
 800f274:	2328      	movs	r3, #40	@ 0x28
 800f276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	  nodeConf2.SrcAddress = (uint32_t)led_off_pattern;
 800f27a:	4b39      	ldr	r3, [pc, #228]	@ (800f360 <Sensor_Initialize+0x118>)
 800f27c:	663b      	str	r3, [r7, #96]	@ 0x60
	  nodeConf2.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 800f27e:	4b37      	ldr	r3, [pc, #220]	@ (800f35c <Sensor_Initialize+0x114>)
 800f280:	667b      	str	r3, [r7, #100]	@ 0x64
	  nodeConf2.DataSize   = 4*NUM_ADC;
 800f282:	2328      	movs	r3, #40	@ 0x28
 800f284:	66bb      	str	r3, [r7, #104]	@ 0x68

	  // ノードを再構築（再設定）
	  if (HAL_DMAEx_List_BuildNode(&nodeConf1, &Node_GPDMA1_Channel0) != HAL_OK)
 800f286:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f28a:	4931      	ldr	r1, [pc, #196]	@ (800f350 <Sensor_Initialize+0x108>)
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7f6 f8ab 	bl	80053e8 <HAL_DMAEx_List_BuildNode>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <Sensor_Initialize+0x54>
	      Error_Handler();
 800f298:	f7f2 f832 	bl	8001300 <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800f29c:	4a2c      	ldr	r2, [pc, #176]	@ (800f350 <Sensor_Initialize+0x108>)
 800f29e:	2100      	movs	r1, #0
 800f2a0:	4830      	ldr	r0, [pc, #192]	@ (800f364 <Sensor_Initialize+0x11c>)
 800f2a2:	f7f6 f8cd 	bl	8005440 <HAL_DMAEx_List_InsertNode>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d001      	beq.n	800f2b0 <Sensor_Initialize+0x68>
	      Error_Handler();
 800f2ac:	f7f2 f828 	bl	8001300 <Error_Handler>
	  //Circularモードに
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800f2b0:	482c      	ldr	r0, [pc, #176]	@ (800f364 <Sensor_Initialize+0x11c>)
 800f2b2:	f7f6 f98e 	bl	80055d2 <HAL_DMAEx_List_SetCircularMode>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <Sensor_Initialize+0x78>
	      Error_Handler();
 800f2bc:	f7f2 f820 	bl	8001300 <Error_Handler>


	  if (HAL_DMAEx_List_BuildNode(&nodeConf2, &Node_GPDMA1_Channel1) != HAL_OK)
 800f2c0:	463b      	mov	r3, r7
 800f2c2:	4924      	ldr	r1, [pc, #144]	@ (800f354 <Sensor_Initialize+0x10c>)
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7f6 f88f 	bl	80053e8 <HAL_DMAEx_List_BuildNode>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d001      	beq.n	800f2d4 <Sensor_Initialize+0x8c>
	      Error_Handler();
 800f2d0:	f7f2 f816 	bl	8001300 <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800f2d4:	4a1f      	ldr	r2, [pc, #124]	@ (800f354 <Sensor_Initialize+0x10c>)
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	4823      	ldr	r0, [pc, #140]	@ (800f368 <Sensor_Initialize+0x120>)
 800f2da:	f7f6 f8b1 	bl	8005440 <HAL_DMAEx_List_InsertNode>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <Sensor_Initialize+0xa0>
	        Error_Handler();
 800f2e4:	f7f2 f80c 	bl	8001300 <Error_Handler>
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800f2e8:	481f      	ldr	r0, [pc, #124]	@ (800f368 <Sensor_Initialize+0x120>)
 800f2ea:	f7f6 f972 	bl	80055d2 <HAL_DMAEx_List_SetCircularMode>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d001      	beq.n	800f2f8 <Sensor_Initialize+0xb0>
	        Error_Handler();
 800f2f4:	f7f2 f804 	bl	8001300 <Error_Handler>

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_value, NUM_ADC);
 800f2f8:	220a      	movs	r2, #10
 800f2fa:	491c      	ldr	r1, [pc, #112]	@ (800f36c <Sensor_Initialize+0x124>)
 800f2fc:	481c      	ldr	r0, [pc, #112]	@ (800f370 <Sensor_Initialize+0x128>)
 800f2fe:	f7f3 fde3 	bl	8002ec8 <HAL_ADC_Start_DMA>

	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel0) != HAL_OK)
 800f302:	481c      	ldr	r0, [pc, #112]	@ (800f374 <Sensor_Initialize+0x12c>)
 800f304:	f7f5 ffdc 	bl	80052c0 <HAL_DMAEx_List_Start_IT>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <Sensor_Initialize+0xca>
	  {
		Error_Handler();
 800f30e:	f7f1 fff7 	bl	8001300 <Error_Handler>
	  }

	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel1) != HAL_OK)
 800f312:	4819      	ldr	r0, [pc, #100]	@ (800f378 <Sensor_Initialize+0x130>)
 800f314:	f7f5 ffd4 	bl	80052c0 <HAL_DMAEx_List_Start_IT>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <Sensor_Initialize+0xda>
	  {
	  	Error_Handler();
 800f31e:	f7f1 ffef 	bl	8001300 <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_1) != HAL_OK)
 800f322:	2100      	movs	r1, #0
 800f324:	4815      	ldr	r0, [pc, #84]	@ (800f37c <Sensor_Initialize+0x134>)
 800f326:	f7f7 fa61 	bl	80067ec <HAL_LPTIM_IC_Start>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <Sensor_Initialize+0xec>
	  {
	      Error_Handler();
 800f330:	f7f1 ffe6 	bl	8001300 <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_2) != HAL_OK)
 800f334:	2101      	movs	r1, #1
 800f336:	4811      	ldr	r0, [pc, #68]	@ (800f37c <Sensor_Initialize+0x134>)
 800f338:	f7f7 fa58 	bl	80067ec <HAL_LPTIM_IC_Start>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d001      	beq.n	800f346 <Sensor_Initialize+0xfe>
	  {
	      Error_Handler();
 800f342:	f7f1 ffdd 	bl	8001300 <Error_Handler>
	  }

}
 800f346:	bf00      	nop
 800f348:	37d8      	adds	r7, #216	@ 0xd8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	20000304 	.word	0x20000304
 800f354:	20000250 	.word	0x20000250
 800f358:	20000888 	.word	0x20000888
 800f35c:	42020018 	.word	0x42020018
 800f360:	200008b0 	.word	0x200008b0
 800f364:	20000328 	.word	0x20000328
 800f368:	20000274 	.word	0x20000274
 800f36c:	200008d8 	.word	0x200008d8
 800f370:	20000084 	.word	0x20000084
 800f374:	20000340 	.word	0x20000340
 800f378:	2000028c 	.word	0x2000028c
 800f37c:	200003b8 	.word	0x200003b8

0800f380 <ADC_get_value>:
	HAL_ADC_Stop_DMA(&hadc1);
}


int16_t ADC_get_value(int num)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
	return adc_value[num];
 800f388:	4a05      	ldr	r2, [pc, #20]	@ (800f3a0 <ADC_get_value+0x20>)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f390:	b21b      	sxth	r3, r3
}
 800f392:	4618      	mov	r0, r3
 800f394:	370c      	adds	r7, #12
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	200008d8 	.word	0x200008d8

0800f3a4 <std>:
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	b510      	push	{r4, lr}
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	6083      	str	r3, [r0, #8]
 800f3ac:	8181      	strh	r1, [r0, #12]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	6643      	str	r3, [r0, #100]	@ 0x64
 800f3b2:	81c2      	strh	r2, [r0, #14]
 800f3b4:	2208      	movs	r2, #8
 800f3b6:	6183      	str	r3, [r0, #24]
 800f3b8:	e9c0 3300 	strd	r3, r3, [r0]
 800f3bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3c0:	305c      	adds	r0, #92	@ 0x5c
 800f3c2:	f000 fab5 	bl	800f930 <memset>
 800f3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f3fc <std+0x58>)
 800f3c8:	6224      	str	r4, [r4, #32]
 800f3ca:	6263      	str	r3, [r4, #36]	@ 0x24
 800f3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800f400 <std+0x5c>)
 800f3ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800f404 <std+0x60>)
 800f3d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f408 <std+0x64>)
 800f3d6:	6323      	str	r3, [r4, #48]	@ 0x30
 800f3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800f40c <std+0x68>)
 800f3da:	429c      	cmp	r4, r3
 800f3dc:	d006      	beq.n	800f3ec <std+0x48>
 800f3de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f3e2:	4294      	cmp	r4, r2
 800f3e4:	d002      	beq.n	800f3ec <std+0x48>
 800f3e6:	33d0      	adds	r3, #208	@ 0xd0
 800f3e8:	429c      	cmp	r4, r3
 800f3ea:	d105      	bne.n	800f3f8 <std+0x54>
 800f3ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3f4:	f000 bb14 	b.w	800fa20 <__retarget_lock_init_recursive>
 800f3f8:	bd10      	pop	{r4, pc}
 800f3fa:	bf00      	nop
 800f3fc:	0800f781 	.word	0x0800f781
 800f400:	0800f7a3 	.word	0x0800f7a3
 800f404:	0800f7db 	.word	0x0800f7db
 800f408:	0800f7ff 	.word	0x0800f7ff
 800f40c:	200008ec 	.word	0x200008ec

0800f410 <stdio_exit_handler>:
 800f410:	4a02      	ldr	r2, [pc, #8]	@ (800f41c <stdio_exit_handler+0xc>)
 800f412:	4903      	ldr	r1, [pc, #12]	@ (800f420 <stdio_exit_handler+0x10>)
 800f414:	4803      	ldr	r0, [pc, #12]	@ (800f424 <stdio_exit_handler+0x14>)
 800f416:	f000 b869 	b.w	800f4ec <_fwalk_sglue>
 800f41a:	bf00      	nop
 800f41c:	2000000c 	.word	0x2000000c
 800f420:	080102d5 	.word	0x080102d5
 800f424:	2000001c 	.word	0x2000001c

0800f428 <cleanup_stdio>:
 800f428:	6841      	ldr	r1, [r0, #4]
 800f42a:	4b0c      	ldr	r3, [pc, #48]	@ (800f45c <cleanup_stdio+0x34>)
 800f42c:	4299      	cmp	r1, r3
 800f42e:	b510      	push	{r4, lr}
 800f430:	4604      	mov	r4, r0
 800f432:	d001      	beq.n	800f438 <cleanup_stdio+0x10>
 800f434:	f000 ff4e 	bl	80102d4 <_fflush_r>
 800f438:	68a1      	ldr	r1, [r4, #8]
 800f43a:	4b09      	ldr	r3, [pc, #36]	@ (800f460 <cleanup_stdio+0x38>)
 800f43c:	4299      	cmp	r1, r3
 800f43e:	d002      	beq.n	800f446 <cleanup_stdio+0x1e>
 800f440:	4620      	mov	r0, r4
 800f442:	f000 ff47 	bl	80102d4 <_fflush_r>
 800f446:	68e1      	ldr	r1, [r4, #12]
 800f448:	4b06      	ldr	r3, [pc, #24]	@ (800f464 <cleanup_stdio+0x3c>)
 800f44a:	4299      	cmp	r1, r3
 800f44c:	d004      	beq.n	800f458 <cleanup_stdio+0x30>
 800f44e:	4620      	mov	r0, r4
 800f450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f454:	f000 bf3e 	b.w	80102d4 <_fflush_r>
 800f458:	bd10      	pop	{r4, pc}
 800f45a:	bf00      	nop
 800f45c:	200008ec 	.word	0x200008ec
 800f460:	20000954 	.word	0x20000954
 800f464:	200009bc 	.word	0x200009bc

0800f468 <global_stdio_init.part.0>:
 800f468:	b510      	push	{r4, lr}
 800f46a:	4b0b      	ldr	r3, [pc, #44]	@ (800f498 <global_stdio_init.part.0+0x30>)
 800f46c:	2104      	movs	r1, #4
 800f46e:	4c0b      	ldr	r4, [pc, #44]	@ (800f49c <global_stdio_init.part.0+0x34>)
 800f470:	4a0b      	ldr	r2, [pc, #44]	@ (800f4a0 <global_stdio_init.part.0+0x38>)
 800f472:	4620      	mov	r0, r4
 800f474:	601a      	str	r2, [r3, #0]
 800f476:	2200      	movs	r2, #0
 800f478:	f7ff ff94 	bl	800f3a4 <std>
 800f47c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f480:	2201      	movs	r2, #1
 800f482:	2109      	movs	r1, #9
 800f484:	f7ff ff8e 	bl	800f3a4 <std>
 800f488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f48c:	2202      	movs	r2, #2
 800f48e:	2112      	movs	r1, #18
 800f490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f494:	f7ff bf86 	b.w	800f3a4 <std>
 800f498:	20000a24 	.word	0x20000a24
 800f49c:	200008ec 	.word	0x200008ec
 800f4a0:	0800f411 	.word	0x0800f411

0800f4a4 <__sfp_lock_acquire>:
 800f4a4:	4801      	ldr	r0, [pc, #4]	@ (800f4ac <__sfp_lock_acquire+0x8>)
 800f4a6:	f000 babc 	b.w	800fa22 <__retarget_lock_acquire_recursive>
 800f4aa:	bf00      	nop
 800f4ac:	20000a2d 	.word	0x20000a2d

0800f4b0 <__sfp_lock_release>:
 800f4b0:	4801      	ldr	r0, [pc, #4]	@ (800f4b8 <__sfp_lock_release+0x8>)
 800f4b2:	f000 bab7 	b.w	800fa24 <__retarget_lock_release_recursive>
 800f4b6:	bf00      	nop
 800f4b8:	20000a2d 	.word	0x20000a2d

0800f4bc <__sinit>:
 800f4bc:	b510      	push	{r4, lr}
 800f4be:	4604      	mov	r4, r0
 800f4c0:	f7ff fff0 	bl	800f4a4 <__sfp_lock_acquire>
 800f4c4:	6a23      	ldr	r3, [r4, #32]
 800f4c6:	b11b      	cbz	r3, 800f4d0 <__sinit+0x14>
 800f4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4cc:	f7ff bff0 	b.w	800f4b0 <__sfp_lock_release>
 800f4d0:	4b04      	ldr	r3, [pc, #16]	@ (800f4e4 <__sinit+0x28>)
 800f4d2:	6223      	str	r3, [r4, #32]
 800f4d4:	4b04      	ldr	r3, [pc, #16]	@ (800f4e8 <__sinit+0x2c>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1f5      	bne.n	800f4c8 <__sinit+0xc>
 800f4dc:	f7ff ffc4 	bl	800f468 <global_stdio_init.part.0>
 800f4e0:	e7f2      	b.n	800f4c8 <__sinit+0xc>
 800f4e2:	bf00      	nop
 800f4e4:	0800f429 	.word	0x0800f429
 800f4e8:	20000a24 	.word	0x20000a24

0800f4ec <_fwalk_sglue>:
 800f4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4f0:	4607      	mov	r7, r0
 800f4f2:	4688      	mov	r8, r1
 800f4f4:	4614      	mov	r4, r2
 800f4f6:	2600      	movs	r6, #0
 800f4f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4fc:	f1b9 0901 	subs.w	r9, r9, #1
 800f500:	d505      	bpl.n	800f50e <_fwalk_sglue+0x22>
 800f502:	6824      	ldr	r4, [r4, #0]
 800f504:	2c00      	cmp	r4, #0
 800f506:	d1f7      	bne.n	800f4f8 <_fwalk_sglue+0xc>
 800f508:	4630      	mov	r0, r6
 800f50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f50e:	89ab      	ldrh	r3, [r5, #12]
 800f510:	2b01      	cmp	r3, #1
 800f512:	d907      	bls.n	800f524 <_fwalk_sglue+0x38>
 800f514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f518:	3301      	adds	r3, #1
 800f51a:	d003      	beq.n	800f524 <_fwalk_sglue+0x38>
 800f51c:	4629      	mov	r1, r5
 800f51e:	4638      	mov	r0, r7
 800f520:	47c0      	blx	r8
 800f522:	4306      	orrs	r6, r0
 800f524:	3568      	adds	r5, #104	@ 0x68
 800f526:	e7e9      	b.n	800f4fc <_fwalk_sglue+0x10>

0800f528 <iprintf>:
 800f528:	b40f      	push	{r0, r1, r2, r3}
 800f52a:	b507      	push	{r0, r1, r2, lr}
 800f52c:	4906      	ldr	r1, [pc, #24]	@ (800f548 <iprintf+0x20>)
 800f52e:	ab04      	add	r3, sp, #16
 800f530:	6808      	ldr	r0, [r1, #0]
 800f532:	f853 2b04 	ldr.w	r2, [r3], #4
 800f536:	6881      	ldr	r1, [r0, #8]
 800f538:	9301      	str	r3, [sp, #4]
 800f53a:	f000 fb9f 	bl	800fc7c <_vfiprintf_r>
 800f53e:	b003      	add	sp, #12
 800f540:	f85d eb04 	ldr.w	lr, [sp], #4
 800f544:	b004      	add	sp, #16
 800f546:	4770      	bx	lr
 800f548:	20000018 	.word	0x20000018

0800f54c <_puts_r>:
 800f54c:	6a03      	ldr	r3, [r0, #32]
 800f54e:	b570      	push	{r4, r5, r6, lr}
 800f550:	4605      	mov	r5, r0
 800f552:	460e      	mov	r6, r1
 800f554:	6884      	ldr	r4, [r0, #8]
 800f556:	b90b      	cbnz	r3, 800f55c <_puts_r+0x10>
 800f558:	f7ff ffb0 	bl	800f4bc <__sinit>
 800f55c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f55e:	07db      	lsls	r3, r3, #31
 800f560:	d405      	bmi.n	800f56e <_puts_r+0x22>
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	0598      	lsls	r0, r3, #22
 800f566:	d402      	bmi.n	800f56e <_puts_r+0x22>
 800f568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f56a:	f000 fa5a 	bl	800fa22 <__retarget_lock_acquire_recursive>
 800f56e:	89a3      	ldrh	r3, [r4, #12]
 800f570:	0719      	lsls	r1, r3, #28
 800f572:	d502      	bpl.n	800f57a <_puts_r+0x2e>
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d135      	bne.n	800f5e6 <_puts_r+0x9a>
 800f57a:	4621      	mov	r1, r4
 800f57c:	4628      	mov	r0, r5
 800f57e:	f000 f981 	bl	800f884 <__swsetup_r>
 800f582:	b380      	cbz	r0, 800f5e6 <_puts_r+0x9a>
 800f584:	f04f 35ff 	mov.w	r5, #4294967295
 800f588:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f58a:	07da      	lsls	r2, r3, #31
 800f58c:	d405      	bmi.n	800f59a <_puts_r+0x4e>
 800f58e:	89a3      	ldrh	r3, [r4, #12]
 800f590:	059b      	lsls	r3, r3, #22
 800f592:	d402      	bmi.n	800f59a <_puts_r+0x4e>
 800f594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f596:	f000 fa45 	bl	800fa24 <__retarget_lock_release_recursive>
 800f59a:	4628      	mov	r0, r5
 800f59c:	bd70      	pop	{r4, r5, r6, pc}
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	da04      	bge.n	800f5ac <_puts_r+0x60>
 800f5a2:	69a2      	ldr	r2, [r4, #24]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	dc17      	bgt.n	800f5d8 <_puts_r+0x8c>
 800f5a8:	290a      	cmp	r1, #10
 800f5aa:	d015      	beq.n	800f5d8 <_puts_r+0x8c>
 800f5ac:	6823      	ldr	r3, [r4, #0]
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	6022      	str	r2, [r4, #0]
 800f5b2:	7019      	strb	r1, [r3, #0]
 800f5b4:	68a3      	ldr	r3, [r4, #8]
 800f5b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	60a3      	str	r3, [r4, #8]
 800f5be:	2900      	cmp	r1, #0
 800f5c0:	d1ed      	bne.n	800f59e <_puts_r+0x52>
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	da11      	bge.n	800f5ea <_puts_r+0x9e>
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	210a      	movs	r1, #10
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	f000 f91b 	bl	800f806 <__swbuf_r>
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	d0d7      	beq.n	800f584 <_puts_r+0x38>
 800f5d4:	250a      	movs	r5, #10
 800f5d6:	e7d7      	b.n	800f588 <_puts_r+0x3c>
 800f5d8:	4622      	mov	r2, r4
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f000 f913 	bl	800f806 <__swbuf_r>
 800f5e0:	3001      	adds	r0, #1
 800f5e2:	d1e7      	bne.n	800f5b4 <_puts_r+0x68>
 800f5e4:	e7ce      	b.n	800f584 <_puts_r+0x38>
 800f5e6:	3e01      	subs	r6, #1
 800f5e8:	e7e4      	b.n	800f5b4 <_puts_r+0x68>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	1c5a      	adds	r2, r3, #1
 800f5ee:	6022      	str	r2, [r4, #0]
 800f5f0:	220a      	movs	r2, #10
 800f5f2:	701a      	strb	r2, [r3, #0]
 800f5f4:	e7ee      	b.n	800f5d4 <_puts_r+0x88>
	...

0800f5f8 <puts>:
 800f5f8:	4b02      	ldr	r3, [pc, #8]	@ (800f604 <puts+0xc>)
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	6818      	ldr	r0, [r3, #0]
 800f5fe:	f7ff bfa5 	b.w	800f54c <_puts_r>
 800f602:	bf00      	nop
 800f604:	20000018 	.word	0x20000018

0800f608 <setbuf>:
 800f608:	fab1 f281 	clz	r2, r1
 800f60c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f610:	0952      	lsrs	r2, r2, #5
 800f612:	0052      	lsls	r2, r2, #1
 800f614:	f000 b800 	b.w	800f618 <setvbuf>

0800f618 <setvbuf>:
 800f618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f61c:	461d      	mov	r5, r3
 800f61e:	4b57      	ldr	r3, [pc, #348]	@ (800f77c <setvbuf+0x164>)
 800f620:	4604      	mov	r4, r0
 800f622:	460e      	mov	r6, r1
 800f624:	681f      	ldr	r7, [r3, #0]
 800f626:	4690      	mov	r8, r2
 800f628:	b127      	cbz	r7, 800f634 <setvbuf+0x1c>
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	b913      	cbnz	r3, 800f634 <setvbuf+0x1c>
 800f62e:	4638      	mov	r0, r7
 800f630:	f7ff ff44 	bl	800f4bc <__sinit>
 800f634:	f1b8 0f02 	cmp.w	r8, #2
 800f638:	d006      	beq.n	800f648 <setvbuf+0x30>
 800f63a:	f1b8 0f01 	cmp.w	r8, #1
 800f63e:	f200 8099 	bhi.w	800f774 <setvbuf+0x15c>
 800f642:	2d00      	cmp	r5, #0
 800f644:	f2c0 8096 	blt.w	800f774 <setvbuf+0x15c>
 800f648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f64a:	07d9      	lsls	r1, r3, #31
 800f64c:	d405      	bmi.n	800f65a <setvbuf+0x42>
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	059a      	lsls	r2, r3, #22
 800f652:	d402      	bmi.n	800f65a <setvbuf+0x42>
 800f654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f656:	f000 f9e4 	bl	800fa22 <__retarget_lock_acquire_recursive>
 800f65a:	4621      	mov	r1, r4
 800f65c:	4638      	mov	r0, r7
 800f65e:	f000 fe39 	bl	80102d4 <_fflush_r>
 800f662:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f664:	b141      	cbz	r1, 800f678 <setvbuf+0x60>
 800f666:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f66a:	4299      	cmp	r1, r3
 800f66c:	d002      	beq.n	800f674 <setvbuf+0x5c>
 800f66e:	4638      	mov	r0, r7
 800f670:	f000 f9da 	bl	800fa28 <_free_r>
 800f674:	2300      	movs	r3, #0
 800f676:	6363      	str	r3, [r4, #52]	@ 0x34
 800f678:	2300      	movs	r3, #0
 800f67a:	61a3      	str	r3, [r4, #24]
 800f67c:	6063      	str	r3, [r4, #4]
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	061b      	lsls	r3, r3, #24
 800f682:	d503      	bpl.n	800f68c <setvbuf+0x74>
 800f684:	6921      	ldr	r1, [r4, #16]
 800f686:	4638      	mov	r0, r7
 800f688:	f000 f9ce 	bl	800fa28 <_free_r>
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	f1b8 0f02 	cmp.w	r8, #2
 800f692:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800f696:	f023 0303 	bic.w	r3, r3, #3
 800f69a:	81a3      	strh	r3, [r4, #12]
 800f69c:	d060      	beq.n	800f760 <setvbuf+0x148>
 800f69e:	ab01      	add	r3, sp, #4
 800f6a0:	466a      	mov	r2, sp
 800f6a2:	4621      	mov	r1, r4
 800f6a4:	4638      	mov	r0, r7
 800f6a6:	f000 fe3d 	bl	8010324 <__swhatbuf_r>
 800f6aa:	89a3      	ldrh	r3, [r4, #12]
 800f6ac:	4318      	orrs	r0, r3
 800f6ae:	81a0      	strh	r0, [r4, #12]
 800f6b0:	bb2d      	cbnz	r5, 800f6fe <setvbuf+0xe6>
 800f6b2:	9d00      	ldr	r5, [sp, #0]
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	f000 fa01 	bl	800fabc <malloc>
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d151      	bne.n	800f764 <setvbuf+0x14c>
 800f6c0:	f8dd 9000 	ldr.w	r9, [sp]
 800f6c4:	45a9      	cmp	r9, r5
 800f6c6:	d13f      	bne.n	800f748 <setvbuf+0x130>
 800f6c8:	f04f 35ff 	mov.w	r5, #4294967295
 800f6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6d0:	f043 0202 	orr.w	r2, r3, #2
 800f6d4:	81a2      	strh	r2, [r4, #12]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	60a2      	str	r2, [r4, #8]
 800f6da:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800f6de:	6022      	str	r2, [r4, #0]
 800f6e0:	6122      	str	r2, [r4, #16]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	6162      	str	r2, [r4, #20]
 800f6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6e8:	07d6      	lsls	r6, r2, #31
 800f6ea:	d404      	bmi.n	800f6f6 <setvbuf+0xde>
 800f6ec:	0598      	lsls	r0, r3, #22
 800f6ee:	d402      	bmi.n	800f6f6 <setvbuf+0xde>
 800f6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6f2:	f000 f997 	bl	800fa24 <__retarget_lock_release_recursive>
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	b003      	add	sp, #12
 800f6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6fe:	2e00      	cmp	r6, #0
 800f700:	d0d8      	beq.n	800f6b4 <setvbuf+0x9c>
 800f702:	6a3b      	ldr	r3, [r7, #32]
 800f704:	b913      	cbnz	r3, 800f70c <setvbuf+0xf4>
 800f706:	4638      	mov	r0, r7
 800f708:	f7ff fed8 	bl	800f4bc <__sinit>
 800f70c:	f1b8 0f01 	cmp.w	r8, #1
 800f710:	6026      	str	r6, [r4, #0]
 800f712:	bf02      	ittt	eq
 800f714:	89a3      	ldrheq	r3, [r4, #12]
 800f716:	f043 0301 	orreq.w	r3, r3, #1
 800f71a:	81a3      	strheq	r3, [r4, #12]
 800f71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f720:	f013 0208 	ands.w	r2, r3, #8
 800f724:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f728:	d01e      	beq.n	800f768 <setvbuf+0x150>
 800f72a:	07d9      	lsls	r1, r3, #31
 800f72c:	bf45      	ittet	mi
 800f72e:	2200      	movmi	r2, #0
 800f730:	426d      	negmi	r5, r5
 800f732:	60a5      	strpl	r5, [r4, #8]
 800f734:	60a2      	strmi	r2, [r4, #8]
 800f736:	bf48      	it	mi
 800f738:	61a5      	strmi	r5, [r4, #24]
 800f73a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f73c:	07d2      	lsls	r2, r2, #31
 800f73e:	d401      	bmi.n	800f744 <setvbuf+0x12c>
 800f740:	059b      	lsls	r3, r3, #22
 800f742:	d513      	bpl.n	800f76c <setvbuf+0x154>
 800f744:	2500      	movs	r5, #0
 800f746:	e7d6      	b.n	800f6f6 <setvbuf+0xde>
 800f748:	4648      	mov	r0, r9
 800f74a:	f000 f9b7 	bl	800fabc <malloc>
 800f74e:	4606      	mov	r6, r0
 800f750:	2800      	cmp	r0, #0
 800f752:	d0b9      	beq.n	800f6c8 <setvbuf+0xb0>
 800f754:	89a3      	ldrh	r3, [r4, #12]
 800f756:	464d      	mov	r5, r9
 800f758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f75c:	81a3      	strh	r3, [r4, #12]
 800f75e:	e7d0      	b.n	800f702 <setvbuf+0xea>
 800f760:	2500      	movs	r5, #0
 800f762:	e7b3      	b.n	800f6cc <setvbuf+0xb4>
 800f764:	46a9      	mov	r9, r5
 800f766:	e7f5      	b.n	800f754 <setvbuf+0x13c>
 800f768:	60a2      	str	r2, [r4, #8]
 800f76a:	e7e6      	b.n	800f73a <setvbuf+0x122>
 800f76c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f76e:	f000 f959 	bl	800fa24 <__retarget_lock_release_recursive>
 800f772:	e7e7      	b.n	800f744 <setvbuf+0x12c>
 800f774:	f04f 35ff 	mov.w	r5, #4294967295
 800f778:	e7bd      	b.n	800f6f6 <setvbuf+0xde>
 800f77a:	bf00      	nop
 800f77c:	20000018 	.word	0x20000018

0800f780 <__sread>:
 800f780:	b510      	push	{r4, lr}
 800f782:	460c      	mov	r4, r1
 800f784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f788:	f000 f8fc 	bl	800f984 <_read_r>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	bfab      	itete	ge
 800f790:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f792:	89a3      	ldrhlt	r3, [r4, #12]
 800f794:	181b      	addge	r3, r3, r0
 800f796:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f79a:	bfac      	ite	ge
 800f79c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f79e:	81a3      	strhlt	r3, [r4, #12]
 800f7a0:	bd10      	pop	{r4, pc}

0800f7a2 <__swrite>:
 800f7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a6:	461f      	mov	r7, r3
 800f7a8:	898b      	ldrh	r3, [r1, #12]
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	460c      	mov	r4, r1
 800f7ae:	05db      	lsls	r3, r3, #23
 800f7b0:	4616      	mov	r6, r2
 800f7b2:	d505      	bpl.n	800f7c0 <__swrite+0x1e>
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7bc:	f000 f8d0 	bl	800f960 <_lseek_r>
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	4632      	mov	r2, r6
 800f7c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f7ce:	81a3      	strh	r3, [r4, #12]
 800f7d0:	463b      	mov	r3, r7
 800f7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d6:	f000 b8e7 	b.w	800f9a8 <_write_r>

0800f7da <__sseek>:
 800f7da:	b510      	push	{r4, lr}
 800f7dc:	460c      	mov	r4, r1
 800f7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7e2:	f000 f8bd 	bl	800f960 <_lseek_r>
 800f7e6:	1c43      	adds	r3, r0, #1
 800f7e8:	89a3      	ldrh	r3, [r4, #12]
 800f7ea:	bf15      	itete	ne
 800f7ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f7ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f7f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f7f6:	81a3      	strheq	r3, [r4, #12]
 800f7f8:	bf18      	it	ne
 800f7fa:	81a3      	strhne	r3, [r4, #12]
 800f7fc:	bd10      	pop	{r4, pc}

0800f7fe <__sclose>:
 800f7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f802:	f000 b89d 	b.w	800f940 <_close_r>

0800f806 <__swbuf_r>:
 800f806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f808:	460e      	mov	r6, r1
 800f80a:	4614      	mov	r4, r2
 800f80c:	4605      	mov	r5, r0
 800f80e:	b118      	cbz	r0, 800f818 <__swbuf_r+0x12>
 800f810:	6a03      	ldr	r3, [r0, #32]
 800f812:	b90b      	cbnz	r3, 800f818 <__swbuf_r+0x12>
 800f814:	f7ff fe52 	bl	800f4bc <__sinit>
 800f818:	69a3      	ldr	r3, [r4, #24]
 800f81a:	60a3      	str	r3, [r4, #8]
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	071a      	lsls	r2, r3, #28
 800f820:	d501      	bpl.n	800f826 <__swbuf_r+0x20>
 800f822:	6923      	ldr	r3, [r4, #16]
 800f824:	b943      	cbnz	r3, 800f838 <__swbuf_r+0x32>
 800f826:	4621      	mov	r1, r4
 800f828:	4628      	mov	r0, r5
 800f82a:	f000 f82b 	bl	800f884 <__swsetup_r>
 800f82e:	b118      	cbz	r0, 800f838 <__swbuf_r+0x32>
 800f830:	f04f 37ff 	mov.w	r7, #4294967295
 800f834:	4638      	mov	r0, r7
 800f836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f838:	6823      	ldr	r3, [r4, #0]
 800f83a:	b2f6      	uxtb	r6, r6
 800f83c:	6922      	ldr	r2, [r4, #16]
 800f83e:	4637      	mov	r7, r6
 800f840:	1a98      	subs	r0, r3, r2
 800f842:	6963      	ldr	r3, [r4, #20]
 800f844:	4283      	cmp	r3, r0
 800f846:	dc05      	bgt.n	800f854 <__swbuf_r+0x4e>
 800f848:	4621      	mov	r1, r4
 800f84a:	4628      	mov	r0, r5
 800f84c:	f000 fd42 	bl	80102d4 <_fflush_r>
 800f850:	2800      	cmp	r0, #0
 800f852:	d1ed      	bne.n	800f830 <__swbuf_r+0x2a>
 800f854:	68a3      	ldr	r3, [r4, #8]
 800f856:	3b01      	subs	r3, #1
 800f858:	60a3      	str	r3, [r4, #8]
 800f85a:	6823      	ldr	r3, [r4, #0]
 800f85c:	1c5a      	adds	r2, r3, #1
 800f85e:	6022      	str	r2, [r4, #0]
 800f860:	701e      	strb	r6, [r3, #0]
 800f862:	1c43      	adds	r3, r0, #1
 800f864:	6962      	ldr	r2, [r4, #20]
 800f866:	429a      	cmp	r2, r3
 800f868:	d004      	beq.n	800f874 <__swbuf_r+0x6e>
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	07db      	lsls	r3, r3, #31
 800f86e:	d5e1      	bpl.n	800f834 <__swbuf_r+0x2e>
 800f870:	2e0a      	cmp	r6, #10
 800f872:	d1df      	bne.n	800f834 <__swbuf_r+0x2e>
 800f874:	4621      	mov	r1, r4
 800f876:	4628      	mov	r0, r5
 800f878:	f000 fd2c 	bl	80102d4 <_fflush_r>
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d0d9      	beq.n	800f834 <__swbuf_r+0x2e>
 800f880:	e7d6      	b.n	800f830 <__swbuf_r+0x2a>
	...

0800f884 <__swsetup_r>:
 800f884:	b538      	push	{r3, r4, r5, lr}
 800f886:	4b29      	ldr	r3, [pc, #164]	@ (800f92c <__swsetup_r+0xa8>)
 800f888:	4605      	mov	r5, r0
 800f88a:	460c      	mov	r4, r1
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	b118      	cbz	r0, 800f898 <__swsetup_r+0x14>
 800f890:	6a03      	ldr	r3, [r0, #32]
 800f892:	b90b      	cbnz	r3, 800f898 <__swsetup_r+0x14>
 800f894:	f7ff fe12 	bl	800f4bc <__sinit>
 800f898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f89c:	0719      	lsls	r1, r3, #28
 800f89e:	d422      	bmi.n	800f8e6 <__swsetup_r+0x62>
 800f8a0:	06da      	lsls	r2, r3, #27
 800f8a2:	d407      	bmi.n	800f8b4 <__swsetup_r+0x30>
 800f8a4:	2209      	movs	r2, #9
 800f8a6:	602a      	str	r2, [r5, #0]
 800f8a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b0:	81a3      	strh	r3, [r4, #12]
 800f8b2:	e033      	b.n	800f91c <__swsetup_r+0x98>
 800f8b4:	0758      	lsls	r0, r3, #29
 800f8b6:	d512      	bpl.n	800f8de <__swsetup_r+0x5a>
 800f8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8ba:	b141      	cbz	r1, 800f8ce <__swsetup_r+0x4a>
 800f8bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8c0:	4299      	cmp	r1, r3
 800f8c2:	d002      	beq.n	800f8ca <__swsetup_r+0x46>
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f000 f8af 	bl	800fa28 <_free_r>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f8d4:	81a3      	strh	r3, [r4, #12]
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	6063      	str	r3, [r4, #4]
 800f8da:	6923      	ldr	r3, [r4, #16]
 800f8dc:	6023      	str	r3, [r4, #0]
 800f8de:	89a3      	ldrh	r3, [r4, #12]
 800f8e0:	f043 0308 	orr.w	r3, r3, #8
 800f8e4:	81a3      	strh	r3, [r4, #12]
 800f8e6:	6923      	ldr	r3, [r4, #16]
 800f8e8:	b94b      	cbnz	r3, 800f8fe <__swsetup_r+0x7a>
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8f4:	d003      	beq.n	800f8fe <__swsetup_r+0x7a>
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f000 fd38 	bl	801036e <__smakebuf_r>
 800f8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f902:	f013 0201 	ands.w	r2, r3, #1
 800f906:	d00a      	beq.n	800f91e <__swsetup_r+0x9a>
 800f908:	2200      	movs	r2, #0
 800f90a:	60a2      	str	r2, [r4, #8]
 800f90c:	6962      	ldr	r2, [r4, #20]
 800f90e:	4252      	negs	r2, r2
 800f910:	61a2      	str	r2, [r4, #24]
 800f912:	6922      	ldr	r2, [r4, #16]
 800f914:	b942      	cbnz	r2, 800f928 <__swsetup_r+0xa4>
 800f916:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f91a:	d1c5      	bne.n	800f8a8 <__swsetup_r+0x24>
 800f91c:	bd38      	pop	{r3, r4, r5, pc}
 800f91e:	0799      	lsls	r1, r3, #30
 800f920:	bf58      	it	pl
 800f922:	6962      	ldrpl	r2, [r4, #20]
 800f924:	60a2      	str	r2, [r4, #8]
 800f926:	e7f4      	b.n	800f912 <__swsetup_r+0x8e>
 800f928:	2000      	movs	r0, #0
 800f92a:	e7f7      	b.n	800f91c <__swsetup_r+0x98>
 800f92c:	20000018 	.word	0x20000018

0800f930 <memset>:
 800f930:	4402      	add	r2, r0
 800f932:	4603      	mov	r3, r0
 800f934:	4293      	cmp	r3, r2
 800f936:	d100      	bne.n	800f93a <memset+0xa>
 800f938:	4770      	bx	lr
 800f93a:	f803 1b01 	strb.w	r1, [r3], #1
 800f93e:	e7f9      	b.n	800f934 <memset+0x4>

0800f940 <_close_r>:
 800f940:	b538      	push	{r3, r4, r5, lr}
 800f942:	2300      	movs	r3, #0
 800f944:	4d05      	ldr	r5, [pc, #20]	@ (800f95c <_close_r+0x1c>)
 800f946:	4604      	mov	r4, r0
 800f948:	4608      	mov	r0, r1
 800f94a:	602b      	str	r3, [r5, #0]
 800f94c:	f7f1 fe89 	bl	8001662 <_close>
 800f950:	1c43      	adds	r3, r0, #1
 800f952:	d102      	bne.n	800f95a <_close_r+0x1a>
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	b103      	cbz	r3, 800f95a <_close_r+0x1a>
 800f958:	6023      	str	r3, [r4, #0]
 800f95a:	bd38      	pop	{r3, r4, r5, pc}
 800f95c:	20000a28 	.word	0x20000a28

0800f960 <_lseek_r>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4604      	mov	r4, r0
 800f964:	4d06      	ldr	r5, [pc, #24]	@ (800f980 <_lseek_r+0x20>)
 800f966:	4608      	mov	r0, r1
 800f968:	4611      	mov	r1, r2
 800f96a:	2200      	movs	r2, #0
 800f96c:	602a      	str	r2, [r5, #0]
 800f96e:	461a      	mov	r2, r3
 800f970:	f7f1 fe9e 	bl	80016b0 <_lseek>
 800f974:	1c43      	adds	r3, r0, #1
 800f976:	d102      	bne.n	800f97e <_lseek_r+0x1e>
 800f978:	682b      	ldr	r3, [r5, #0]
 800f97a:	b103      	cbz	r3, 800f97e <_lseek_r+0x1e>
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	bd38      	pop	{r3, r4, r5, pc}
 800f980:	20000a28 	.word	0x20000a28

0800f984 <_read_r>:
 800f984:	b538      	push	{r3, r4, r5, lr}
 800f986:	4604      	mov	r4, r0
 800f988:	4d06      	ldr	r5, [pc, #24]	@ (800f9a4 <_read_r+0x20>)
 800f98a:	4608      	mov	r0, r1
 800f98c:	4611      	mov	r1, r2
 800f98e:	2200      	movs	r2, #0
 800f990:	602a      	str	r2, [r5, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	f7f1 fe2c 	bl	80015f0 <_read>
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d102      	bne.n	800f9a2 <_read_r+0x1e>
 800f99c:	682b      	ldr	r3, [r5, #0]
 800f99e:	b103      	cbz	r3, 800f9a2 <_read_r+0x1e>
 800f9a0:	6023      	str	r3, [r4, #0]
 800f9a2:	bd38      	pop	{r3, r4, r5, pc}
 800f9a4:	20000a28 	.word	0x20000a28

0800f9a8 <_write_r>:
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	4d06      	ldr	r5, [pc, #24]	@ (800f9c8 <_write_r+0x20>)
 800f9ae:	4608      	mov	r0, r1
 800f9b0:	4611      	mov	r1, r2
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	602a      	str	r2, [r5, #0]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	f7f1 fe37 	bl	800162a <_write>
 800f9bc:	1c43      	adds	r3, r0, #1
 800f9be:	d102      	bne.n	800f9c6 <_write_r+0x1e>
 800f9c0:	682b      	ldr	r3, [r5, #0]
 800f9c2:	b103      	cbz	r3, 800f9c6 <_write_r+0x1e>
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	20000a28 	.word	0x20000a28

0800f9cc <__errno>:
 800f9cc:	4b01      	ldr	r3, [pc, #4]	@ (800f9d4 <__errno+0x8>)
 800f9ce:	6818      	ldr	r0, [r3, #0]
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	20000018 	.word	0x20000018

0800f9d8 <__libc_init_array>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	4d0d      	ldr	r5, [pc, #52]	@ (800fa10 <__libc_init_array+0x38>)
 800f9dc:	2600      	movs	r6, #0
 800f9de:	4c0d      	ldr	r4, [pc, #52]	@ (800fa14 <__libc_init_array+0x3c>)
 800f9e0:	1b64      	subs	r4, r4, r5
 800f9e2:	10a4      	asrs	r4, r4, #2
 800f9e4:	42a6      	cmp	r6, r4
 800f9e6:	d109      	bne.n	800f9fc <__libc_init_array+0x24>
 800f9e8:	4d0b      	ldr	r5, [pc, #44]	@ (800fa18 <__libc_init_array+0x40>)
 800f9ea:	2600      	movs	r6, #0
 800f9ec:	4c0b      	ldr	r4, [pc, #44]	@ (800fa1c <__libc_init_array+0x44>)
 800f9ee:	f000 fd3b 	bl	8010468 <_init>
 800f9f2:	1b64      	subs	r4, r4, r5
 800f9f4:	10a4      	asrs	r4, r4, #2
 800f9f6:	42a6      	cmp	r6, r4
 800f9f8:	d105      	bne.n	800fa06 <__libc_init_array+0x2e>
 800f9fa:	bd70      	pop	{r4, r5, r6, pc}
 800f9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa00:	3601      	adds	r6, #1
 800fa02:	4798      	blx	r3
 800fa04:	e7ee      	b.n	800f9e4 <__libc_init_array+0xc>
 800fa06:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa0a:	3601      	adds	r6, #1
 800fa0c:	4798      	blx	r3
 800fa0e:	e7f2      	b.n	800f9f6 <__libc_init_array+0x1e>
 800fa10:	080105fc 	.word	0x080105fc
 800fa14:	080105fc 	.word	0x080105fc
 800fa18:	080105fc 	.word	0x080105fc
 800fa1c:	08010604 	.word	0x08010604

0800fa20 <__retarget_lock_init_recursive>:
 800fa20:	4770      	bx	lr

0800fa22 <__retarget_lock_acquire_recursive>:
 800fa22:	4770      	bx	lr

0800fa24 <__retarget_lock_release_recursive>:
 800fa24:	4770      	bx	lr
	...

0800fa28 <_free_r>:
 800fa28:	b538      	push	{r3, r4, r5, lr}
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	2900      	cmp	r1, #0
 800fa2e:	d041      	beq.n	800fab4 <_free_r+0x8c>
 800fa30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa34:	1f0c      	subs	r4, r1, #4
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	bfb8      	it	lt
 800fa3a:	18e4      	addlt	r4, r4, r3
 800fa3c:	f000 f8e8 	bl	800fc10 <__malloc_lock>
 800fa40:	4a1d      	ldr	r2, [pc, #116]	@ (800fab8 <_free_r+0x90>)
 800fa42:	6813      	ldr	r3, [r2, #0]
 800fa44:	b933      	cbnz	r3, 800fa54 <_free_r+0x2c>
 800fa46:	6063      	str	r3, [r4, #4]
 800fa48:	6014      	str	r4, [r2, #0]
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa50:	f000 b8e4 	b.w	800fc1c <__malloc_unlock>
 800fa54:	42a3      	cmp	r3, r4
 800fa56:	d908      	bls.n	800fa6a <_free_r+0x42>
 800fa58:	6820      	ldr	r0, [r4, #0]
 800fa5a:	1821      	adds	r1, r4, r0
 800fa5c:	428b      	cmp	r3, r1
 800fa5e:	bf01      	itttt	eq
 800fa60:	6819      	ldreq	r1, [r3, #0]
 800fa62:	685b      	ldreq	r3, [r3, #4]
 800fa64:	1809      	addeq	r1, r1, r0
 800fa66:	6021      	streq	r1, [r4, #0]
 800fa68:	e7ed      	b.n	800fa46 <_free_r+0x1e>
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	b10b      	cbz	r3, 800fa74 <_free_r+0x4c>
 800fa70:	42a3      	cmp	r3, r4
 800fa72:	d9fa      	bls.n	800fa6a <_free_r+0x42>
 800fa74:	6811      	ldr	r1, [r2, #0]
 800fa76:	1850      	adds	r0, r2, r1
 800fa78:	42a0      	cmp	r0, r4
 800fa7a:	d10b      	bne.n	800fa94 <_free_r+0x6c>
 800fa7c:	6820      	ldr	r0, [r4, #0]
 800fa7e:	4401      	add	r1, r0
 800fa80:	1850      	adds	r0, r2, r1
 800fa82:	6011      	str	r1, [r2, #0]
 800fa84:	4283      	cmp	r3, r0
 800fa86:	d1e0      	bne.n	800fa4a <_free_r+0x22>
 800fa88:	6818      	ldr	r0, [r3, #0]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	4408      	add	r0, r1
 800fa8e:	6053      	str	r3, [r2, #4]
 800fa90:	6010      	str	r0, [r2, #0]
 800fa92:	e7da      	b.n	800fa4a <_free_r+0x22>
 800fa94:	d902      	bls.n	800fa9c <_free_r+0x74>
 800fa96:	230c      	movs	r3, #12
 800fa98:	602b      	str	r3, [r5, #0]
 800fa9a:	e7d6      	b.n	800fa4a <_free_r+0x22>
 800fa9c:	6820      	ldr	r0, [r4, #0]
 800fa9e:	1821      	adds	r1, r4, r0
 800faa0:	428b      	cmp	r3, r1
 800faa2:	bf02      	ittt	eq
 800faa4:	6819      	ldreq	r1, [r3, #0]
 800faa6:	685b      	ldreq	r3, [r3, #4]
 800faa8:	1809      	addeq	r1, r1, r0
 800faaa:	6063      	str	r3, [r4, #4]
 800faac:	bf08      	it	eq
 800faae:	6021      	streq	r1, [r4, #0]
 800fab0:	6054      	str	r4, [r2, #4]
 800fab2:	e7ca      	b.n	800fa4a <_free_r+0x22>
 800fab4:	bd38      	pop	{r3, r4, r5, pc}
 800fab6:	bf00      	nop
 800fab8:	20000a34 	.word	0x20000a34

0800fabc <malloc>:
 800fabc:	4b02      	ldr	r3, [pc, #8]	@ (800fac8 <malloc+0xc>)
 800fabe:	4601      	mov	r1, r0
 800fac0:	6818      	ldr	r0, [r3, #0]
 800fac2:	f000 b825 	b.w	800fb10 <_malloc_r>
 800fac6:	bf00      	nop
 800fac8:	20000018 	.word	0x20000018

0800facc <sbrk_aligned>:
 800facc:	b570      	push	{r4, r5, r6, lr}
 800face:	4e0f      	ldr	r6, [pc, #60]	@ (800fb0c <sbrk_aligned+0x40>)
 800fad0:	460c      	mov	r4, r1
 800fad2:	4605      	mov	r5, r0
 800fad4:	6831      	ldr	r1, [r6, #0]
 800fad6:	b911      	cbnz	r1, 800fade <sbrk_aligned+0x12>
 800fad8:	f000 fca8 	bl	801042c <_sbrk_r>
 800fadc:	6030      	str	r0, [r6, #0]
 800fade:	4621      	mov	r1, r4
 800fae0:	4628      	mov	r0, r5
 800fae2:	f000 fca3 	bl	801042c <_sbrk_r>
 800fae6:	1c43      	adds	r3, r0, #1
 800fae8:	d103      	bne.n	800faf2 <sbrk_aligned+0x26>
 800faea:	f04f 34ff 	mov.w	r4, #4294967295
 800faee:	4620      	mov	r0, r4
 800faf0:	bd70      	pop	{r4, r5, r6, pc}
 800faf2:	1cc4      	adds	r4, r0, #3
 800faf4:	f024 0403 	bic.w	r4, r4, #3
 800faf8:	42a0      	cmp	r0, r4
 800fafa:	d0f8      	beq.n	800faee <sbrk_aligned+0x22>
 800fafc:	1a21      	subs	r1, r4, r0
 800fafe:	4628      	mov	r0, r5
 800fb00:	f000 fc94 	bl	801042c <_sbrk_r>
 800fb04:	3001      	adds	r0, #1
 800fb06:	d1f2      	bne.n	800faee <sbrk_aligned+0x22>
 800fb08:	e7ef      	b.n	800faea <sbrk_aligned+0x1e>
 800fb0a:	bf00      	nop
 800fb0c:	20000a30 	.word	0x20000a30

0800fb10 <_malloc_r>:
 800fb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb14:	1ccd      	adds	r5, r1, #3
 800fb16:	4606      	mov	r6, r0
 800fb18:	f025 0503 	bic.w	r5, r5, #3
 800fb1c:	3508      	adds	r5, #8
 800fb1e:	2d0c      	cmp	r5, #12
 800fb20:	bf38      	it	cc
 800fb22:	250c      	movcc	r5, #12
 800fb24:	2d00      	cmp	r5, #0
 800fb26:	db01      	blt.n	800fb2c <_malloc_r+0x1c>
 800fb28:	42a9      	cmp	r1, r5
 800fb2a:	d904      	bls.n	800fb36 <_malloc_r+0x26>
 800fb2c:	230c      	movs	r3, #12
 800fb2e:	6033      	str	r3, [r6, #0]
 800fb30:	2000      	movs	r0, #0
 800fb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc0c <_malloc_r+0xfc>
 800fb3a:	f000 f869 	bl	800fc10 <__malloc_lock>
 800fb3e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb42:	461c      	mov	r4, r3
 800fb44:	bb44      	cbnz	r4, 800fb98 <_malloc_r+0x88>
 800fb46:	4629      	mov	r1, r5
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7ff ffbf 	bl	800facc <sbrk_aligned>
 800fb4e:	1c43      	adds	r3, r0, #1
 800fb50:	4604      	mov	r4, r0
 800fb52:	d158      	bne.n	800fc06 <_malloc_r+0xf6>
 800fb54:	f8d8 4000 	ldr.w	r4, [r8]
 800fb58:	4627      	mov	r7, r4
 800fb5a:	2f00      	cmp	r7, #0
 800fb5c:	d143      	bne.n	800fbe6 <_malloc_r+0xd6>
 800fb5e:	2c00      	cmp	r4, #0
 800fb60:	d04b      	beq.n	800fbfa <_malloc_r+0xea>
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	4639      	mov	r1, r7
 800fb66:	4630      	mov	r0, r6
 800fb68:	eb04 0903 	add.w	r9, r4, r3
 800fb6c:	f000 fc5e 	bl	801042c <_sbrk_r>
 800fb70:	4581      	cmp	r9, r0
 800fb72:	d142      	bne.n	800fbfa <_malloc_r+0xea>
 800fb74:	6821      	ldr	r1, [r4, #0]
 800fb76:	4630      	mov	r0, r6
 800fb78:	1a6d      	subs	r5, r5, r1
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	f7ff ffa6 	bl	800facc <sbrk_aligned>
 800fb80:	3001      	adds	r0, #1
 800fb82:	d03a      	beq.n	800fbfa <_malloc_r+0xea>
 800fb84:	6823      	ldr	r3, [r4, #0]
 800fb86:	442b      	add	r3, r5
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	f8d8 3000 	ldr.w	r3, [r8]
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	bb62      	cbnz	r2, 800fbec <_malloc_r+0xdc>
 800fb92:	f8c8 7000 	str.w	r7, [r8]
 800fb96:	e00f      	b.n	800fbb8 <_malloc_r+0xa8>
 800fb98:	6822      	ldr	r2, [r4, #0]
 800fb9a:	1b52      	subs	r2, r2, r5
 800fb9c:	d420      	bmi.n	800fbe0 <_malloc_r+0xd0>
 800fb9e:	2a0b      	cmp	r2, #11
 800fba0:	d917      	bls.n	800fbd2 <_malloc_r+0xc2>
 800fba2:	1961      	adds	r1, r4, r5
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	6025      	str	r5, [r4, #0]
 800fba8:	bf18      	it	ne
 800fbaa:	6059      	strne	r1, [r3, #4]
 800fbac:	6863      	ldr	r3, [r4, #4]
 800fbae:	bf08      	it	eq
 800fbb0:	f8c8 1000 	streq.w	r1, [r8]
 800fbb4:	5162      	str	r2, [r4, r5]
 800fbb6:	604b      	str	r3, [r1, #4]
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f000 f82f 	bl	800fc1c <__malloc_unlock>
 800fbbe:	f104 000b 	add.w	r0, r4, #11
 800fbc2:	1d23      	adds	r3, r4, #4
 800fbc4:	f020 0007 	bic.w	r0, r0, #7
 800fbc8:	1ac2      	subs	r2, r0, r3
 800fbca:	bf1c      	itt	ne
 800fbcc:	1a1b      	subne	r3, r3, r0
 800fbce:	50a3      	strne	r3, [r4, r2]
 800fbd0:	e7af      	b.n	800fb32 <_malloc_r+0x22>
 800fbd2:	6862      	ldr	r2, [r4, #4]
 800fbd4:	42a3      	cmp	r3, r4
 800fbd6:	bf0c      	ite	eq
 800fbd8:	f8c8 2000 	streq.w	r2, [r8]
 800fbdc:	605a      	strne	r2, [r3, #4]
 800fbde:	e7eb      	b.n	800fbb8 <_malloc_r+0xa8>
 800fbe0:	4623      	mov	r3, r4
 800fbe2:	6864      	ldr	r4, [r4, #4]
 800fbe4:	e7ae      	b.n	800fb44 <_malloc_r+0x34>
 800fbe6:	463c      	mov	r4, r7
 800fbe8:	687f      	ldr	r7, [r7, #4]
 800fbea:	e7b6      	b.n	800fb5a <_malloc_r+0x4a>
 800fbec:	461a      	mov	r2, r3
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	42a3      	cmp	r3, r4
 800fbf2:	d1fb      	bne.n	800fbec <_malloc_r+0xdc>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	6053      	str	r3, [r2, #4]
 800fbf8:	e7de      	b.n	800fbb8 <_malloc_r+0xa8>
 800fbfa:	230c      	movs	r3, #12
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	6033      	str	r3, [r6, #0]
 800fc00:	f000 f80c 	bl	800fc1c <__malloc_unlock>
 800fc04:	e794      	b.n	800fb30 <_malloc_r+0x20>
 800fc06:	6005      	str	r5, [r0, #0]
 800fc08:	e7d6      	b.n	800fbb8 <_malloc_r+0xa8>
 800fc0a:	bf00      	nop
 800fc0c:	20000a34 	.word	0x20000a34

0800fc10 <__malloc_lock>:
 800fc10:	4801      	ldr	r0, [pc, #4]	@ (800fc18 <__malloc_lock+0x8>)
 800fc12:	f7ff bf06 	b.w	800fa22 <__retarget_lock_acquire_recursive>
 800fc16:	bf00      	nop
 800fc18:	20000a2c 	.word	0x20000a2c

0800fc1c <__malloc_unlock>:
 800fc1c:	4801      	ldr	r0, [pc, #4]	@ (800fc24 <__malloc_unlock+0x8>)
 800fc1e:	f7ff bf01 	b.w	800fa24 <__retarget_lock_release_recursive>
 800fc22:	bf00      	nop
 800fc24:	20000a2c 	.word	0x20000a2c

0800fc28 <__sfputc_r>:
 800fc28:	6893      	ldr	r3, [r2, #8]
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	b410      	push	{r4}
 800fc30:	6093      	str	r3, [r2, #8]
 800fc32:	da08      	bge.n	800fc46 <__sfputc_r+0x1e>
 800fc34:	6994      	ldr	r4, [r2, #24]
 800fc36:	42a3      	cmp	r3, r4
 800fc38:	db01      	blt.n	800fc3e <__sfputc_r+0x16>
 800fc3a:	290a      	cmp	r1, #10
 800fc3c:	d103      	bne.n	800fc46 <__sfputc_r+0x1e>
 800fc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc42:	f7ff bde0 	b.w	800f806 <__swbuf_r>
 800fc46:	6813      	ldr	r3, [r2, #0]
 800fc48:	1c58      	adds	r0, r3, #1
 800fc4a:	6010      	str	r0, [r2, #0]
 800fc4c:	4608      	mov	r0, r1
 800fc4e:	7019      	strb	r1, [r3, #0]
 800fc50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <__sfputs_r>:
 800fc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc58:	4606      	mov	r6, r0
 800fc5a:	460f      	mov	r7, r1
 800fc5c:	4614      	mov	r4, r2
 800fc5e:	18d5      	adds	r5, r2, r3
 800fc60:	42ac      	cmp	r4, r5
 800fc62:	d101      	bne.n	800fc68 <__sfputs_r+0x12>
 800fc64:	2000      	movs	r0, #0
 800fc66:	e007      	b.n	800fc78 <__sfputs_r+0x22>
 800fc68:	463a      	mov	r2, r7
 800fc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7ff ffda 	bl	800fc28 <__sfputc_r>
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	d1f3      	bne.n	800fc60 <__sfputs_r+0xa>
 800fc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc7c <_vfiprintf_r>:
 800fc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc80:	460d      	mov	r5, r1
 800fc82:	b09d      	sub	sp, #116	@ 0x74
 800fc84:	4614      	mov	r4, r2
 800fc86:	4698      	mov	r8, r3
 800fc88:	4606      	mov	r6, r0
 800fc8a:	b118      	cbz	r0, 800fc94 <_vfiprintf_r+0x18>
 800fc8c:	6a03      	ldr	r3, [r0, #32]
 800fc8e:	b90b      	cbnz	r3, 800fc94 <_vfiprintf_r+0x18>
 800fc90:	f7ff fc14 	bl	800f4bc <__sinit>
 800fc94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc96:	07d9      	lsls	r1, r3, #31
 800fc98:	d405      	bmi.n	800fca6 <_vfiprintf_r+0x2a>
 800fc9a:	89ab      	ldrh	r3, [r5, #12]
 800fc9c:	059a      	lsls	r2, r3, #22
 800fc9e:	d402      	bmi.n	800fca6 <_vfiprintf_r+0x2a>
 800fca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fca2:	f7ff febe 	bl	800fa22 <__retarget_lock_acquire_recursive>
 800fca6:	89ab      	ldrh	r3, [r5, #12]
 800fca8:	071b      	lsls	r3, r3, #28
 800fcaa:	d501      	bpl.n	800fcb0 <_vfiprintf_r+0x34>
 800fcac:	692b      	ldr	r3, [r5, #16]
 800fcae:	b99b      	cbnz	r3, 800fcd8 <_vfiprintf_r+0x5c>
 800fcb0:	4629      	mov	r1, r5
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f7ff fde6 	bl	800f884 <__swsetup_r>
 800fcb8:	b170      	cbz	r0, 800fcd8 <_vfiprintf_r+0x5c>
 800fcba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcbc:	07dc      	lsls	r4, r3, #31
 800fcbe:	d504      	bpl.n	800fcca <_vfiprintf_r+0x4e>
 800fcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc4:	b01d      	add	sp, #116	@ 0x74
 800fcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcca:	89ab      	ldrh	r3, [r5, #12]
 800fccc:	0598      	lsls	r0, r3, #22
 800fcce:	d4f7      	bmi.n	800fcc0 <_vfiprintf_r+0x44>
 800fcd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcd2:	f7ff fea7 	bl	800fa24 <__retarget_lock_release_recursive>
 800fcd6:	e7f3      	b.n	800fcc0 <_vfiprintf_r+0x44>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcde:	f04f 0901 	mov.w	r9, #1
 800fce2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800fe98 <_vfiprintf_r+0x21c>
 800fce6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce8:	2320      	movs	r3, #32
 800fcea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fcee:	2330      	movs	r3, #48	@ 0x30
 800fcf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcf4:	4623      	mov	r3, r4
 800fcf6:	469a      	mov	sl, r3
 800fcf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcfc:	b10a      	cbz	r2, 800fd02 <_vfiprintf_r+0x86>
 800fcfe:	2a25      	cmp	r2, #37	@ 0x25
 800fd00:	d1f9      	bne.n	800fcf6 <_vfiprintf_r+0x7a>
 800fd02:	ebba 0b04 	subs.w	fp, sl, r4
 800fd06:	d00b      	beq.n	800fd20 <_vfiprintf_r+0xa4>
 800fd08:	465b      	mov	r3, fp
 800fd0a:	4622      	mov	r2, r4
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	4630      	mov	r0, r6
 800fd10:	f7ff ffa1 	bl	800fc56 <__sfputs_r>
 800fd14:	3001      	adds	r0, #1
 800fd16:	f000 80a7 	beq.w	800fe68 <_vfiprintf_r+0x1ec>
 800fd1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd1c:	445a      	add	r2, fp
 800fd1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd20:	f89a 3000 	ldrb.w	r3, [sl]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 809f 	beq.w	800fe68 <_vfiprintf_r+0x1ec>
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd30:	f10a 0a01 	add.w	sl, sl, #1
 800fd34:	9304      	str	r3, [sp, #16]
 800fd36:	9307      	str	r3, [sp, #28]
 800fd38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd42:	4654      	mov	r4, sl
 800fd44:	2205      	movs	r2, #5
 800fd46:	4854      	ldr	r0, [pc, #336]	@ (800fe98 <_vfiprintf_r+0x21c>)
 800fd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd4c:	f000 fb7e 	bl	801044c <memchr>
 800fd50:	9a04      	ldr	r2, [sp, #16]
 800fd52:	b9d8      	cbnz	r0, 800fd8c <_vfiprintf_r+0x110>
 800fd54:	06d1      	lsls	r1, r2, #27
 800fd56:	bf44      	itt	mi
 800fd58:	2320      	movmi	r3, #32
 800fd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd5e:	0713      	lsls	r3, r2, #28
 800fd60:	bf44      	itt	mi
 800fd62:	232b      	movmi	r3, #43	@ 0x2b
 800fd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd68:	f89a 3000 	ldrb.w	r3, [sl]
 800fd6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd6e:	d015      	beq.n	800fd9c <_vfiprintf_r+0x120>
 800fd70:	9a07      	ldr	r2, [sp, #28]
 800fd72:	4654      	mov	r4, sl
 800fd74:	2000      	movs	r0, #0
 800fd76:	f04f 0c0a 	mov.w	ip, #10
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd80:	3b30      	subs	r3, #48	@ 0x30
 800fd82:	2b09      	cmp	r3, #9
 800fd84:	d94b      	bls.n	800fe1e <_vfiprintf_r+0x1a2>
 800fd86:	b1b0      	cbz	r0, 800fdb6 <_vfiprintf_r+0x13a>
 800fd88:	9207      	str	r2, [sp, #28]
 800fd8a:	e014      	b.n	800fdb6 <_vfiprintf_r+0x13a>
 800fd8c:	eba0 0308 	sub.w	r3, r0, r8
 800fd90:	46a2      	mov	sl, r4
 800fd92:	fa09 f303 	lsl.w	r3, r9, r3
 800fd96:	4313      	orrs	r3, r2
 800fd98:	9304      	str	r3, [sp, #16]
 800fd9a:	e7d2      	b.n	800fd42 <_vfiprintf_r+0xc6>
 800fd9c:	9b03      	ldr	r3, [sp, #12]
 800fd9e:	1d19      	adds	r1, r3, #4
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	9103      	str	r1, [sp, #12]
 800fda6:	bfbb      	ittet	lt
 800fda8:	425b      	neglt	r3, r3
 800fdaa:	f042 0202 	orrlt.w	r2, r2, #2
 800fdae:	9307      	strge	r3, [sp, #28]
 800fdb0:	9307      	strlt	r3, [sp, #28]
 800fdb2:	bfb8      	it	lt
 800fdb4:	9204      	strlt	r2, [sp, #16]
 800fdb6:	7823      	ldrb	r3, [r4, #0]
 800fdb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdba:	d10a      	bne.n	800fdd2 <_vfiprintf_r+0x156>
 800fdbc:	7863      	ldrb	r3, [r4, #1]
 800fdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdc0:	d132      	bne.n	800fe28 <_vfiprintf_r+0x1ac>
 800fdc2:	9b03      	ldr	r3, [sp, #12]
 800fdc4:	3402      	adds	r4, #2
 800fdc6:	1d1a      	adds	r2, r3, #4
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdce:	9203      	str	r2, [sp, #12]
 800fdd0:	9305      	str	r3, [sp, #20]
 800fdd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fea8 <_vfiprintf_r+0x22c>
 800fdd6:	2203      	movs	r2, #3
 800fdd8:	7821      	ldrb	r1, [r4, #0]
 800fdda:	4650      	mov	r0, sl
 800fddc:	f000 fb36 	bl	801044c <memchr>
 800fde0:	b138      	cbz	r0, 800fdf2 <_vfiprintf_r+0x176>
 800fde2:	eba0 000a 	sub.w	r0, r0, sl
 800fde6:	2240      	movs	r2, #64	@ 0x40
 800fde8:	9b04      	ldr	r3, [sp, #16]
 800fdea:	3401      	adds	r4, #1
 800fdec:	4082      	lsls	r2, r0
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	9304      	str	r3, [sp, #16]
 800fdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdf6:	2206      	movs	r2, #6
 800fdf8:	4828      	ldr	r0, [pc, #160]	@ (800fe9c <_vfiprintf_r+0x220>)
 800fdfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fdfe:	f000 fb25 	bl	801044c <memchr>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d03f      	beq.n	800fe86 <_vfiprintf_r+0x20a>
 800fe06:	4b26      	ldr	r3, [pc, #152]	@ (800fea0 <_vfiprintf_r+0x224>)
 800fe08:	bb1b      	cbnz	r3, 800fe52 <_vfiprintf_r+0x1d6>
 800fe0a:	9b03      	ldr	r3, [sp, #12]
 800fe0c:	3307      	adds	r3, #7
 800fe0e:	f023 0307 	bic.w	r3, r3, #7
 800fe12:	3308      	adds	r3, #8
 800fe14:	9303      	str	r3, [sp, #12]
 800fe16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe18:	443b      	add	r3, r7
 800fe1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe1c:	e76a      	b.n	800fcf4 <_vfiprintf_r+0x78>
 800fe1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe22:	460c      	mov	r4, r1
 800fe24:	2001      	movs	r0, #1
 800fe26:	e7a8      	b.n	800fd7a <_vfiprintf_r+0xfe>
 800fe28:	2300      	movs	r3, #0
 800fe2a:	3401      	adds	r4, #1
 800fe2c:	f04f 0c0a 	mov.w	ip, #10
 800fe30:	4619      	mov	r1, r3
 800fe32:	9305      	str	r3, [sp, #20]
 800fe34:	4620      	mov	r0, r4
 800fe36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe3a:	3a30      	subs	r2, #48	@ 0x30
 800fe3c:	2a09      	cmp	r2, #9
 800fe3e:	d903      	bls.n	800fe48 <_vfiprintf_r+0x1cc>
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0c6      	beq.n	800fdd2 <_vfiprintf_r+0x156>
 800fe44:	9105      	str	r1, [sp, #20]
 800fe46:	e7c4      	b.n	800fdd2 <_vfiprintf_r+0x156>
 800fe48:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	2301      	movs	r3, #1
 800fe50:	e7f0      	b.n	800fe34 <_vfiprintf_r+0x1b8>
 800fe52:	ab03      	add	r3, sp, #12
 800fe54:	462a      	mov	r2, r5
 800fe56:	a904      	add	r1, sp, #16
 800fe58:	4630      	mov	r0, r6
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	4b11      	ldr	r3, [pc, #68]	@ (800fea4 <_vfiprintf_r+0x228>)
 800fe5e:	f3af 8000 	nop.w
 800fe62:	4607      	mov	r7, r0
 800fe64:	1c78      	adds	r0, r7, #1
 800fe66:	d1d6      	bne.n	800fe16 <_vfiprintf_r+0x19a>
 800fe68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe6a:	07d9      	lsls	r1, r3, #31
 800fe6c:	d405      	bmi.n	800fe7a <_vfiprintf_r+0x1fe>
 800fe6e:	89ab      	ldrh	r3, [r5, #12]
 800fe70:	059a      	lsls	r2, r3, #22
 800fe72:	d402      	bmi.n	800fe7a <_vfiprintf_r+0x1fe>
 800fe74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe76:	f7ff fdd5 	bl	800fa24 <__retarget_lock_release_recursive>
 800fe7a:	89ab      	ldrh	r3, [r5, #12]
 800fe7c:	065b      	lsls	r3, r3, #25
 800fe7e:	f53f af1f 	bmi.w	800fcc0 <_vfiprintf_r+0x44>
 800fe82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe84:	e71e      	b.n	800fcc4 <_vfiprintf_r+0x48>
 800fe86:	ab03      	add	r3, sp, #12
 800fe88:	462a      	mov	r2, r5
 800fe8a:	a904      	add	r1, sp, #16
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	4b04      	ldr	r3, [pc, #16]	@ (800fea4 <_vfiprintf_r+0x228>)
 800fe92:	f000 f87d 	bl	800ff90 <_printf_i>
 800fe96:	e7e4      	b.n	800fe62 <_vfiprintf_r+0x1e6>
 800fe98:	080105c0 	.word	0x080105c0
 800fe9c:	080105ca 	.word	0x080105ca
 800fea0:	00000000 	.word	0x00000000
 800fea4:	0800fc57 	.word	0x0800fc57
 800fea8:	080105c6 	.word	0x080105c6

0800feac <_printf_common>:
 800feac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feb0:	4616      	mov	r6, r2
 800feb2:	4698      	mov	r8, r3
 800feb4:	688a      	ldr	r2, [r1, #8]
 800feb6:	4607      	mov	r7, r0
 800feb8:	690b      	ldr	r3, [r1, #16]
 800feba:	460c      	mov	r4, r1
 800febc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fec0:	4293      	cmp	r3, r2
 800fec2:	bfb8      	it	lt
 800fec4:	4613      	movlt	r3, r2
 800fec6:	6033      	str	r3, [r6, #0]
 800fec8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fecc:	b10a      	cbz	r2, 800fed2 <_printf_common+0x26>
 800fece:	3301      	adds	r3, #1
 800fed0:	6033      	str	r3, [r6, #0]
 800fed2:	6823      	ldr	r3, [r4, #0]
 800fed4:	0699      	lsls	r1, r3, #26
 800fed6:	bf42      	ittt	mi
 800fed8:	6833      	ldrmi	r3, [r6, #0]
 800feda:	3302      	addmi	r3, #2
 800fedc:	6033      	strmi	r3, [r6, #0]
 800fede:	6825      	ldr	r5, [r4, #0]
 800fee0:	f015 0506 	ands.w	r5, r5, #6
 800fee4:	d106      	bne.n	800fef4 <_printf_common+0x48>
 800fee6:	f104 0a19 	add.w	sl, r4, #25
 800feea:	68e3      	ldr	r3, [r4, #12]
 800feec:	6832      	ldr	r2, [r6, #0]
 800feee:	1a9b      	subs	r3, r3, r2
 800fef0:	42ab      	cmp	r3, r5
 800fef2:	dc2b      	bgt.n	800ff4c <_printf_common+0xa0>
 800fef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fef8:	6822      	ldr	r2, [r4, #0]
 800fefa:	3b00      	subs	r3, #0
 800fefc:	bf18      	it	ne
 800fefe:	2301      	movne	r3, #1
 800ff00:	0692      	lsls	r2, r2, #26
 800ff02:	d430      	bmi.n	800ff66 <_printf_common+0xba>
 800ff04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff08:	4641      	mov	r1, r8
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	47c8      	blx	r9
 800ff0e:	3001      	adds	r0, #1
 800ff10:	d023      	beq.n	800ff5a <_printf_common+0xae>
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	341a      	adds	r4, #26
 800ff16:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ff1a:	f003 0306 	and.w	r3, r3, #6
 800ff1e:	2b04      	cmp	r3, #4
 800ff20:	bf0a      	itet	eq
 800ff22:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ff26:	2500      	movne	r5, #0
 800ff28:	6833      	ldreq	r3, [r6, #0]
 800ff2a:	f04f 0600 	mov.w	r6, #0
 800ff2e:	bf08      	it	eq
 800ff30:	1aed      	subeq	r5, r5, r3
 800ff32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ff36:	bf08      	it	eq
 800ff38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	bfc4      	itt	gt
 800ff40:	1a9b      	subgt	r3, r3, r2
 800ff42:	18ed      	addgt	r5, r5, r3
 800ff44:	42b5      	cmp	r5, r6
 800ff46:	d11a      	bne.n	800ff7e <_printf_common+0xd2>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	e008      	b.n	800ff5e <_printf_common+0xb2>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	4652      	mov	r2, sl
 800ff50:	4641      	mov	r1, r8
 800ff52:	4638      	mov	r0, r7
 800ff54:	47c8      	blx	r9
 800ff56:	3001      	adds	r0, #1
 800ff58:	d103      	bne.n	800ff62 <_printf_common+0xb6>
 800ff5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff62:	3501      	adds	r5, #1
 800ff64:	e7c1      	b.n	800feea <_printf_common+0x3e>
 800ff66:	18e1      	adds	r1, r4, r3
 800ff68:	1c5a      	adds	r2, r3, #1
 800ff6a:	2030      	movs	r0, #48	@ 0x30
 800ff6c:	3302      	adds	r3, #2
 800ff6e:	4422      	add	r2, r4
 800ff70:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff7c:	e7c2      	b.n	800ff04 <_printf_common+0x58>
 800ff7e:	2301      	movs	r3, #1
 800ff80:	4622      	mov	r2, r4
 800ff82:	4641      	mov	r1, r8
 800ff84:	4638      	mov	r0, r7
 800ff86:	47c8      	blx	r9
 800ff88:	3001      	adds	r0, #1
 800ff8a:	d0e6      	beq.n	800ff5a <_printf_common+0xae>
 800ff8c:	3601      	adds	r6, #1
 800ff8e:	e7d9      	b.n	800ff44 <_printf_common+0x98>

0800ff90 <_printf_i>:
 800ff90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff94:	7e0f      	ldrb	r7, [r1, #24]
 800ff96:	4691      	mov	r9, r2
 800ff98:	4680      	mov	r8, r0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	2f78      	cmp	r7, #120	@ 0x78
 800ff9e:	469a      	mov	sl, r3
 800ffa0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ffa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ffa6:	d807      	bhi.n	800ffb8 <_printf_i+0x28>
 800ffa8:	2f62      	cmp	r7, #98	@ 0x62
 800ffaa:	d80a      	bhi.n	800ffc2 <_printf_i+0x32>
 800ffac:	2f00      	cmp	r7, #0
 800ffae:	f000 80d1 	beq.w	8010154 <_printf_i+0x1c4>
 800ffb2:	2f58      	cmp	r7, #88	@ 0x58
 800ffb4:	f000 80b8 	beq.w	8010128 <_printf_i+0x198>
 800ffb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffc0:	e03a      	b.n	8010038 <_printf_i+0xa8>
 800ffc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffc6:	2b15      	cmp	r3, #21
 800ffc8:	d8f6      	bhi.n	800ffb8 <_printf_i+0x28>
 800ffca:	a101      	add	r1, pc, #4	@ (adr r1, 800ffd0 <_printf_i+0x40>)
 800ffcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffd0:	08010029 	.word	0x08010029
 800ffd4:	0801003d 	.word	0x0801003d
 800ffd8:	0800ffb9 	.word	0x0800ffb9
 800ffdc:	0800ffb9 	.word	0x0800ffb9
 800ffe0:	0800ffb9 	.word	0x0800ffb9
 800ffe4:	0800ffb9 	.word	0x0800ffb9
 800ffe8:	0801003d 	.word	0x0801003d
 800ffec:	0800ffb9 	.word	0x0800ffb9
 800fff0:	0800ffb9 	.word	0x0800ffb9
 800fff4:	0800ffb9 	.word	0x0800ffb9
 800fff8:	0800ffb9 	.word	0x0800ffb9
 800fffc:	0801013b 	.word	0x0801013b
 8010000:	08010067 	.word	0x08010067
 8010004:	080100f5 	.word	0x080100f5
 8010008:	0800ffb9 	.word	0x0800ffb9
 801000c:	0800ffb9 	.word	0x0800ffb9
 8010010:	0801015d 	.word	0x0801015d
 8010014:	0800ffb9 	.word	0x0800ffb9
 8010018:	08010067 	.word	0x08010067
 801001c:	0800ffb9 	.word	0x0800ffb9
 8010020:	0800ffb9 	.word	0x0800ffb9
 8010024:	080100fd 	.word	0x080100fd
 8010028:	6833      	ldr	r3, [r6, #0]
 801002a:	1d1a      	adds	r2, r3, #4
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	6032      	str	r2, [r6, #0]
 8010030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010038:	2301      	movs	r3, #1
 801003a:	e09c      	b.n	8010176 <_printf_i+0x1e6>
 801003c:	6833      	ldr	r3, [r6, #0]
 801003e:	6820      	ldr	r0, [r4, #0]
 8010040:	1d19      	adds	r1, r3, #4
 8010042:	6031      	str	r1, [r6, #0]
 8010044:	0606      	lsls	r6, r0, #24
 8010046:	d501      	bpl.n	801004c <_printf_i+0xbc>
 8010048:	681d      	ldr	r5, [r3, #0]
 801004a:	e003      	b.n	8010054 <_printf_i+0xc4>
 801004c:	0645      	lsls	r5, r0, #25
 801004e:	d5fb      	bpl.n	8010048 <_printf_i+0xb8>
 8010050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010054:	2d00      	cmp	r5, #0
 8010056:	da03      	bge.n	8010060 <_printf_i+0xd0>
 8010058:	232d      	movs	r3, #45	@ 0x2d
 801005a:	426d      	negs	r5, r5
 801005c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010060:	4858      	ldr	r0, [pc, #352]	@ (80101c4 <_printf_i+0x234>)
 8010062:	230a      	movs	r3, #10
 8010064:	e011      	b.n	801008a <_printf_i+0xfa>
 8010066:	6821      	ldr	r1, [r4, #0]
 8010068:	6833      	ldr	r3, [r6, #0]
 801006a:	0608      	lsls	r0, r1, #24
 801006c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010070:	d402      	bmi.n	8010078 <_printf_i+0xe8>
 8010072:	0649      	lsls	r1, r1, #25
 8010074:	bf48      	it	mi
 8010076:	b2ad      	uxthmi	r5, r5
 8010078:	2f6f      	cmp	r7, #111	@ 0x6f
 801007a:	6033      	str	r3, [r6, #0]
 801007c:	4851      	ldr	r0, [pc, #324]	@ (80101c4 <_printf_i+0x234>)
 801007e:	bf14      	ite	ne
 8010080:	230a      	movne	r3, #10
 8010082:	2308      	moveq	r3, #8
 8010084:	2100      	movs	r1, #0
 8010086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801008a:	6866      	ldr	r6, [r4, #4]
 801008c:	2e00      	cmp	r6, #0
 801008e:	60a6      	str	r6, [r4, #8]
 8010090:	db05      	blt.n	801009e <_printf_i+0x10e>
 8010092:	6821      	ldr	r1, [r4, #0]
 8010094:	432e      	orrs	r6, r5
 8010096:	f021 0104 	bic.w	r1, r1, #4
 801009a:	6021      	str	r1, [r4, #0]
 801009c:	d04b      	beq.n	8010136 <_printf_i+0x1a6>
 801009e:	4616      	mov	r6, r2
 80100a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80100a4:	fb03 5711 	mls	r7, r3, r1, r5
 80100a8:	5dc7      	ldrb	r7, [r0, r7]
 80100aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80100ae:	462f      	mov	r7, r5
 80100b0:	460d      	mov	r5, r1
 80100b2:	42bb      	cmp	r3, r7
 80100b4:	d9f4      	bls.n	80100a0 <_printf_i+0x110>
 80100b6:	2b08      	cmp	r3, #8
 80100b8:	d10b      	bne.n	80100d2 <_printf_i+0x142>
 80100ba:	6823      	ldr	r3, [r4, #0]
 80100bc:	07df      	lsls	r7, r3, #31
 80100be:	d508      	bpl.n	80100d2 <_printf_i+0x142>
 80100c0:	6923      	ldr	r3, [r4, #16]
 80100c2:	6861      	ldr	r1, [r4, #4]
 80100c4:	4299      	cmp	r1, r3
 80100c6:	bfde      	ittt	le
 80100c8:	2330      	movle	r3, #48	@ 0x30
 80100ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100d2:	1b92      	subs	r2, r2, r6
 80100d4:	6122      	str	r2, [r4, #16]
 80100d6:	464b      	mov	r3, r9
 80100d8:	aa03      	add	r2, sp, #12
 80100da:	4621      	mov	r1, r4
 80100dc:	4640      	mov	r0, r8
 80100de:	f8cd a000 	str.w	sl, [sp]
 80100e2:	f7ff fee3 	bl	800feac <_printf_common>
 80100e6:	3001      	adds	r0, #1
 80100e8:	d14a      	bne.n	8010180 <_printf_i+0x1f0>
 80100ea:	f04f 30ff 	mov.w	r0, #4294967295
 80100ee:	b004      	add	sp, #16
 80100f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f4:	6823      	ldr	r3, [r4, #0]
 80100f6:	f043 0320 	orr.w	r3, r3, #32
 80100fa:	6023      	str	r3, [r4, #0]
 80100fc:	2778      	movs	r7, #120	@ 0x78
 80100fe:	4832      	ldr	r0, [pc, #200]	@ (80101c8 <_printf_i+0x238>)
 8010100:	6823      	ldr	r3, [r4, #0]
 8010102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010106:	061f      	lsls	r7, r3, #24
 8010108:	6831      	ldr	r1, [r6, #0]
 801010a:	f851 5b04 	ldr.w	r5, [r1], #4
 801010e:	d402      	bmi.n	8010116 <_printf_i+0x186>
 8010110:	065f      	lsls	r7, r3, #25
 8010112:	bf48      	it	mi
 8010114:	b2ad      	uxthmi	r5, r5
 8010116:	6031      	str	r1, [r6, #0]
 8010118:	07d9      	lsls	r1, r3, #31
 801011a:	bf44      	itt	mi
 801011c:	f043 0320 	orrmi.w	r3, r3, #32
 8010120:	6023      	strmi	r3, [r4, #0]
 8010122:	b11d      	cbz	r5, 801012c <_printf_i+0x19c>
 8010124:	2310      	movs	r3, #16
 8010126:	e7ad      	b.n	8010084 <_printf_i+0xf4>
 8010128:	4826      	ldr	r0, [pc, #152]	@ (80101c4 <_printf_i+0x234>)
 801012a:	e7e9      	b.n	8010100 <_printf_i+0x170>
 801012c:	6823      	ldr	r3, [r4, #0]
 801012e:	f023 0320 	bic.w	r3, r3, #32
 8010132:	6023      	str	r3, [r4, #0]
 8010134:	e7f6      	b.n	8010124 <_printf_i+0x194>
 8010136:	4616      	mov	r6, r2
 8010138:	e7bd      	b.n	80100b6 <_printf_i+0x126>
 801013a:	6833      	ldr	r3, [r6, #0]
 801013c:	6825      	ldr	r5, [r4, #0]
 801013e:	1d18      	adds	r0, r3, #4
 8010140:	6961      	ldr	r1, [r4, #20]
 8010142:	6030      	str	r0, [r6, #0]
 8010144:	062e      	lsls	r6, r5, #24
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	d501      	bpl.n	801014e <_printf_i+0x1be>
 801014a:	6019      	str	r1, [r3, #0]
 801014c:	e002      	b.n	8010154 <_printf_i+0x1c4>
 801014e:	0668      	lsls	r0, r5, #25
 8010150:	d5fb      	bpl.n	801014a <_printf_i+0x1ba>
 8010152:	8019      	strh	r1, [r3, #0]
 8010154:	2300      	movs	r3, #0
 8010156:	4616      	mov	r6, r2
 8010158:	6123      	str	r3, [r4, #16]
 801015a:	e7bc      	b.n	80100d6 <_printf_i+0x146>
 801015c:	6833      	ldr	r3, [r6, #0]
 801015e:	2100      	movs	r1, #0
 8010160:	1d1a      	adds	r2, r3, #4
 8010162:	6032      	str	r2, [r6, #0]
 8010164:	681e      	ldr	r6, [r3, #0]
 8010166:	6862      	ldr	r2, [r4, #4]
 8010168:	4630      	mov	r0, r6
 801016a:	f000 f96f 	bl	801044c <memchr>
 801016e:	b108      	cbz	r0, 8010174 <_printf_i+0x1e4>
 8010170:	1b80      	subs	r0, r0, r6
 8010172:	6060      	str	r0, [r4, #4]
 8010174:	6863      	ldr	r3, [r4, #4]
 8010176:	6123      	str	r3, [r4, #16]
 8010178:	2300      	movs	r3, #0
 801017a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801017e:	e7aa      	b.n	80100d6 <_printf_i+0x146>
 8010180:	6923      	ldr	r3, [r4, #16]
 8010182:	4632      	mov	r2, r6
 8010184:	4649      	mov	r1, r9
 8010186:	4640      	mov	r0, r8
 8010188:	47d0      	blx	sl
 801018a:	3001      	adds	r0, #1
 801018c:	d0ad      	beq.n	80100ea <_printf_i+0x15a>
 801018e:	6823      	ldr	r3, [r4, #0]
 8010190:	079b      	lsls	r3, r3, #30
 8010192:	d413      	bmi.n	80101bc <_printf_i+0x22c>
 8010194:	68e0      	ldr	r0, [r4, #12]
 8010196:	9b03      	ldr	r3, [sp, #12]
 8010198:	4298      	cmp	r0, r3
 801019a:	bfb8      	it	lt
 801019c:	4618      	movlt	r0, r3
 801019e:	e7a6      	b.n	80100ee <_printf_i+0x15e>
 80101a0:	2301      	movs	r3, #1
 80101a2:	4632      	mov	r2, r6
 80101a4:	4649      	mov	r1, r9
 80101a6:	4640      	mov	r0, r8
 80101a8:	47d0      	blx	sl
 80101aa:	3001      	adds	r0, #1
 80101ac:	d09d      	beq.n	80100ea <_printf_i+0x15a>
 80101ae:	3501      	adds	r5, #1
 80101b0:	68e3      	ldr	r3, [r4, #12]
 80101b2:	9903      	ldr	r1, [sp, #12]
 80101b4:	1a5b      	subs	r3, r3, r1
 80101b6:	42ab      	cmp	r3, r5
 80101b8:	dcf2      	bgt.n	80101a0 <_printf_i+0x210>
 80101ba:	e7eb      	b.n	8010194 <_printf_i+0x204>
 80101bc:	2500      	movs	r5, #0
 80101be:	f104 0619 	add.w	r6, r4, #25
 80101c2:	e7f5      	b.n	80101b0 <_printf_i+0x220>
 80101c4:	080105d1 	.word	0x080105d1
 80101c8:	080105e2 	.word	0x080105e2

080101cc <__sflush_r>:
 80101cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d4:	0716      	lsls	r6, r2, #28
 80101d6:	4605      	mov	r5, r0
 80101d8:	460c      	mov	r4, r1
 80101da:	d454      	bmi.n	8010286 <__sflush_r+0xba>
 80101dc:	684b      	ldr	r3, [r1, #4]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	dc02      	bgt.n	80101e8 <__sflush_r+0x1c>
 80101e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	dd48      	ble.n	801027a <__sflush_r+0xae>
 80101e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101ea:	2e00      	cmp	r6, #0
 80101ec:	d045      	beq.n	801027a <__sflush_r+0xae>
 80101ee:	2300      	movs	r3, #0
 80101f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80101f4:	682f      	ldr	r7, [r5, #0]
 80101f6:	6a21      	ldr	r1, [r4, #32]
 80101f8:	602b      	str	r3, [r5, #0]
 80101fa:	d030      	beq.n	801025e <__sflush_r+0x92>
 80101fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80101fe:	89a3      	ldrh	r3, [r4, #12]
 8010200:	0759      	lsls	r1, r3, #29
 8010202:	d505      	bpl.n	8010210 <__sflush_r+0x44>
 8010204:	6863      	ldr	r3, [r4, #4]
 8010206:	1ad2      	subs	r2, r2, r3
 8010208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801020a:	b10b      	cbz	r3, 8010210 <__sflush_r+0x44>
 801020c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801020e:	1ad2      	subs	r2, r2, r3
 8010210:	2300      	movs	r3, #0
 8010212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010214:	6a21      	ldr	r1, [r4, #32]
 8010216:	4628      	mov	r0, r5
 8010218:	47b0      	blx	r6
 801021a:	1c43      	adds	r3, r0, #1
 801021c:	89a3      	ldrh	r3, [r4, #12]
 801021e:	d106      	bne.n	801022e <__sflush_r+0x62>
 8010220:	6829      	ldr	r1, [r5, #0]
 8010222:	291d      	cmp	r1, #29
 8010224:	d82b      	bhi.n	801027e <__sflush_r+0xb2>
 8010226:	4a2a      	ldr	r2, [pc, #168]	@ (80102d0 <__sflush_r+0x104>)
 8010228:	40ca      	lsrs	r2, r1
 801022a:	07d6      	lsls	r6, r2, #31
 801022c:	d527      	bpl.n	801027e <__sflush_r+0xb2>
 801022e:	2200      	movs	r2, #0
 8010230:	04d9      	lsls	r1, r3, #19
 8010232:	6062      	str	r2, [r4, #4]
 8010234:	6922      	ldr	r2, [r4, #16]
 8010236:	6022      	str	r2, [r4, #0]
 8010238:	d504      	bpl.n	8010244 <__sflush_r+0x78>
 801023a:	1c42      	adds	r2, r0, #1
 801023c:	d101      	bne.n	8010242 <__sflush_r+0x76>
 801023e:	682b      	ldr	r3, [r5, #0]
 8010240:	b903      	cbnz	r3, 8010244 <__sflush_r+0x78>
 8010242:	6560      	str	r0, [r4, #84]	@ 0x54
 8010244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010246:	602f      	str	r7, [r5, #0]
 8010248:	b1b9      	cbz	r1, 801027a <__sflush_r+0xae>
 801024a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801024e:	4299      	cmp	r1, r3
 8010250:	d002      	beq.n	8010258 <__sflush_r+0x8c>
 8010252:	4628      	mov	r0, r5
 8010254:	f7ff fbe8 	bl	800fa28 <_free_r>
 8010258:	2300      	movs	r3, #0
 801025a:	6363      	str	r3, [r4, #52]	@ 0x34
 801025c:	e00d      	b.n	801027a <__sflush_r+0xae>
 801025e:	2301      	movs	r3, #1
 8010260:	4628      	mov	r0, r5
 8010262:	47b0      	blx	r6
 8010264:	4602      	mov	r2, r0
 8010266:	1c50      	adds	r0, r2, #1
 8010268:	d1c9      	bne.n	80101fe <__sflush_r+0x32>
 801026a:	682b      	ldr	r3, [r5, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d0c6      	beq.n	80101fe <__sflush_r+0x32>
 8010270:	2b1d      	cmp	r3, #29
 8010272:	d001      	beq.n	8010278 <__sflush_r+0xac>
 8010274:	2b16      	cmp	r3, #22
 8010276:	d11d      	bne.n	80102b4 <__sflush_r+0xe8>
 8010278:	602f      	str	r7, [r5, #0]
 801027a:	2000      	movs	r0, #0
 801027c:	e021      	b.n	80102c2 <__sflush_r+0xf6>
 801027e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010282:	b21b      	sxth	r3, r3
 8010284:	e01a      	b.n	80102bc <__sflush_r+0xf0>
 8010286:	690f      	ldr	r7, [r1, #16]
 8010288:	2f00      	cmp	r7, #0
 801028a:	d0f6      	beq.n	801027a <__sflush_r+0xae>
 801028c:	0793      	lsls	r3, r2, #30
 801028e:	680e      	ldr	r6, [r1, #0]
 8010290:	600f      	str	r7, [r1, #0]
 8010292:	bf0c      	ite	eq
 8010294:	694b      	ldreq	r3, [r1, #20]
 8010296:	2300      	movne	r3, #0
 8010298:	eba6 0807 	sub.w	r8, r6, r7
 801029c:	608b      	str	r3, [r1, #8]
 801029e:	f1b8 0f00 	cmp.w	r8, #0
 80102a2:	ddea      	ble.n	801027a <__sflush_r+0xae>
 80102a4:	4643      	mov	r3, r8
 80102a6:	463a      	mov	r2, r7
 80102a8:	6a21      	ldr	r1, [r4, #32]
 80102aa:	4628      	mov	r0, r5
 80102ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80102ae:	47b0      	blx	r6
 80102b0:	2800      	cmp	r0, #0
 80102b2:	dc08      	bgt.n	80102c6 <__sflush_r+0xfa>
 80102b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102bc:	f04f 30ff 	mov.w	r0, #4294967295
 80102c0:	81a3      	strh	r3, [r4, #12]
 80102c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c6:	4407      	add	r7, r0
 80102c8:	eba8 0800 	sub.w	r8, r8, r0
 80102cc:	e7e7      	b.n	801029e <__sflush_r+0xd2>
 80102ce:	bf00      	nop
 80102d0:	20400001 	.word	0x20400001

080102d4 <_fflush_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	690b      	ldr	r3, [r1, #16]
 80102d8:	4605      	mov	r5, r0
 80102da:	460c      	mov	r4, r1
 80102dc:	b913      	cbnz	r3, 80102e4 <_fflush_r+0x10>
 80102de:	2500      	movs	r5, #0
 80102e0:	4628      	mov	r0, r5
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	b118      	cbz	r0, 80102ee <_fflush_r+0x1a>
 80102e6:	6a03      	ldr	r3, [r0, #32]
 80102e8:	b90b      	cbnz	r3, 80102ee <_fflush_r+0x1a>
 80102ea:	f7ff f8e7 	bl	800f4bc <__sinit>
 80102ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d0f3      	beq.n	80102de <_fflush_r+0xa>
 80102f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80102f8:	07d0      	lsls	r0, r2, #31
 80102fa:	d404      	bmi.n	8010306 <_fflush_r+0x32>
 80102fc:	0599      	lsls	r1, r3, #22
 80102fe:	d402      	bmi.n	8010306 <_fflush_r+0x32>
 8010300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010302:	f7ff fb8e 	bl	800fa22 <__retarget_lock_acquire_recursive>
 8010306:	4628      	mov	r0, r5
 8010308:	4621      	mov	r1, r4
 801030a:	f7ff ff5f 	bl	80101cc <__sflush_r>
 801030e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010310:	4605      	mov	r5, r0
 8010312:	07da      	lsls	r2, r3, #31
 8010314:	d4e4      	bmi.n	80102e0 <_fflush_r+0xc>
 8010316:	89a3      	ldrh	r3, [r4, #12]
 8010318:	059b      	lsls	r3, r3, #22
 801031a:	d4e1      	bmi.n	80102e0 <_fflush_r+0xc>
 801031c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801031e:	f7ff fb81 	bl	800fa24 <__retarget_lock_release_recursive>
 8010322:	e7dd      	b.n	80102e0 <_fflush_r+0xc>

08010324 <__swhatbuf_r>:
 8010324:	b570      	push	{r4, r5, r6, lr}
 8010326:	460c      	mov	r4, r1
 8010328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801032c:	b096      	sub	sp, #88	@ 0x58
 801032e:	4615      	mov	r5, r2
 8010330:	2900      	cmp	r1, #0
 8010332:	461e      	mov	r6, r3
 8010334:	da0c      	bge.n	8010350 <__swhatbuf_r+0x2c>
 8010336:	89a3      	ldrh	r3, [r4, #12]
 8010338:	2100      	movs	r1, #0
 801033a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801033e:	bf14      	ite	ne
 8010340:	2340      	movne	r3, #64	@ 0x40
 8010342:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010346:	2000      	movs	r0, #0
 8010348:	6031      	str	r1, [r6, #0]
 801034a:	602b      	str	r3, [r5, #0]
 801034c:	b016      	add	sp, #88	@ 0x58
 801034e:	bd70      	pop	{r4, r5, r6, pc}
 8010350:	466a      	mov	r2, sp
 8010352:	f000 f849 	bl	80103e8 <_fstat_r>
 8010356:	2800      	cmp	r0, #0
 8010358:	dbed      	blt.n	8010336 <__swhatbuf_r+0x12>
 801035a:	9901      	ldr	r1, [sp, #4]
 801035c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010360:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010364:	4259      	negs	r1, r3
 8010366:	4159      	adcs	r1, r3
 8010368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801036c:	e7eb      	b.n	8010346 <__swhatbuf_r+0x22>

0801036e <__smakebuf_r>:
 801036e:	898b      	ldrh	r3, [r1, #12]
 8010370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010372:	079d      	lsls	r5, r3, #30
 8010374:	4606      	mov	r6, r0
 8010376:	460c      	mov	r4, r1
 8010378:	d507      	bpl.n	801038a <__smakebuf_r+0x1c>
 801037a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801037e:	6023      	str	r3, [r4, #0]
 8010380:	6123      	str	r3, [r4, #16]
 8010382:	2301      	movs	r3, #1
 8010384:	6163      	str	r3, [r4, #20]
 8010386:	b003      	add	sp, #12
 8010388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801038a:	ab01      	add	r3, sp, #4
 801038c:	466a      	mov	r2, sp
 801038e:	f7ff ffc9 	bl	8010324 <__swhatbuf_r>
 8010392:	9f00      	ldr	r7, [sp, #0]
 8010394:	4605      	mov	r5, r0
 8010396:	4630      	mov	r0, r6
 8010398:	4639      	mov	r1, r7
 801039a:	f7ff fbb9 	bl	800fb10 <_malloc_r>
 801039e:	b948      	cbnz	r0, 80103b4 <__smakebuf_r+0x46>
 80103a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103a4:	059a      	lsls	r2, r3, #22
 80103a6:	d4ee      	bmi.n	8010386 <__smakebuf_r+0x18>
 80103a8:	f023 0303 	bic.w	r3, r3, #3
 80103ac:	f043 0302 	orr.w	r3, r3, #2
 80103b0:	81a3      	strh	r3, [r4, #12]
 80103b2:	e7e2      	b.n	801037a <__smakebuf_r+0xc>
 80103b4:	89a3      	ldrh	r3, [r4, #12]
 80103b6:	6020      	str	r0, [r4, #0]
 80103b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103bc:	81a3      	strh	r3, [r4, #12]
 80103be:	9b01      	ldr	r3, [sp, #4]
 80103c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80103c4:	b15b      	cbz	r3, 80103de <__smakebuf_r+0x70>
 80103c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103ca:	4630      	mov	r0, r6
 80103cc:	f000 f81e 	bl	801040c <_isatty_r>
 80103d0:	b128      	cbz	r0, 80103de <__smakebuf_r+0x70>
 80103d2:	89a3      	ldrh	r3, [r4, #12]
 80103d4:	f023 0303 	bic.w	r3, r3, #3
 80103d8:	f043 0301 	orr.w	r3, r3, #1
 80103dc:	81a3      	strh	r3, [r4, #12]
 80103de:	89a3      	ldrh	r3, [r4, #12]
 80103e0:	431d      	orrs	r5, r3
 80103e2:	81a5      	strh	r5, [r4, #12]
 80103e4:	e7cf      	b.n	8010386 <__smakebuf_r+0x18>
	...

080103e8 <_fstat_r>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	2300      	movs	r3, #0
 80103ec:	4d06      	ldr	r5, [pc, #24]	@ (8010408 <_fstat_r+0x20>)
 80103ee:	4604      	mov	r4, r0
 80103f0:	4608      	mov	r0, r1
 80103f2:	4611      	mov	r1, r2
 80103f4:	602b      	str	r3, [r5, #0]
 80103f6:	f7f1 f940 	bl	800167a <_fstat>
 80103fa:	1c43      	adds	r3, r0, #1
 80103fc:	d102      	bne.n	8010404 <_fstat_r+0x1c>
 80103fe:	682b      	ldr	r3, [r5, #0]
 8010400:	b103      	cbz	r3, 8010404 <_fstat_r+0x1c>
 8010402:	6023      	str	r3, [r4, #0]
 8010404:	bd38      	pop	{r3, r4, r5, pc}
 8010406:	bf00      	nop
 8010408:	20000a28 	.word	0x20000a28

0801040c <_isatty_r>:
 801040c:	b538      	push	{r3, r4, r5, lr}
 801040e:	2300      	movs	r3, #0
 8010410:	4d05      	ldr	r5, [pc, #20]	@ (8010428 <_isatty_r+0x1c>)
 8010412:	4604      	mov	r4, r0
 8010414:	4608      	mov	r0, r1
 8010416:	602b      	str	r3, [r5, #0]
 8010418:	f7f1 f93f 	bl	800169a <_isatty>
 801041c:	1c43      	adds	r3, r0, #1
 801041e:	d102      	bne.n	8010426 <_isatty_r+0x1a>
 8010420:	682b      	ldr	r3, [r5, #0]
 8010422:	b103      	cbz	r3, 8010426 <_isatty_r+0x1a>
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	bd38      	pop	{r3, r4, r5, pc}
 8010428:	20000a28 	.word	0x20000a28

0801042c <_sbrk_r>:
 801042c:	b538      	push	{r3, r4, r5, lr}
 801042e:	2300      	movs	r3, #0
 8010430:	4d05      	ldr	r5, [pc, #20]	@ (8010448 <_sbrk_r+0x1c>)
 8010432:	4604      	mov	r4, r0
 8010434:	4608      	mov	r0, r1
 8010436:	602b      	str	r3, [r5, #0]
 8010438:	f7f1 f948 	bl	80016cc <_sbrk>
 801043c:	1c43      	adds	r3, r0, #1
 801043e:	d102      	bne.n	8010446 <_sbrk_r+0x1a>
 8010440:	682b      	ldr	r3, [r5, #0]
 8010442:	b103      	cbz	r3, 8010446 <_sbrk_r+0x1a>
 8010444:	6023      	str	r3, [r4, #0]
 8010446:	bd38      	pop	{r3, r4, r5, pc}
 8010448:	20000a28 	.word	0x20000a28

0801044c <memchr>:
 801044c:	b2c9      	uxtb	r1, r1
 801044e:	4603      	mov	r3, r0
 8010450:	4402      	add	r2, r0
 8010452:	b510      	push	{r4, lr}
 8010454:	4293      	cmp	r3, r2
 8010456:	4618      	mov	r0, r3
 8010458:	d101      	bne.n	801045e <memchr+0x12>
 801045a:	2000      	movs	r0, #0
 801045c:	e003      	b.n	8010466 <memchr+0x1a>
 801045e:	7804      	ldrb	r4, [r0, #0]
 8010460:	3301      	adds	r3, #1
 8010462:	428c      	cmp	r4, r1
 8010464:	d1f6      	bne.n	8010454 <memchr+0x8>
 8010466:	bd10      	pop	{r4, pc}

08010468 <_init>:
 8010468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046a:	bf00      	nop
 801046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801046e:	bc08      	pop	{r3}
 8010470:	469e      	mov	lr, r3
 8010472:	4770      	bx	lr

08010474 <_fini>:
 8010474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010476:	bf00      	nop
 8010478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801047a:	bc08      	pop	{r3}
 801047c:	469e      	mov	lr, r3
 801047e:	4770      	bx	lr
