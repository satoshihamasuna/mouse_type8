
type8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a44  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008c7c  08008c7c  00009c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008d50  08008d50  00009d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  08008d54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000500  2000000c  08008d5d  0000a00c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000050c  08008d5d  0000a50c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000a009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d307  00000000  00000000  0000a03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003a0c  00000000  00000000  00027346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001958  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001388  00000000  00000000  0002c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000314c7  00000000  00000000  0002da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00021a39  00000000  00000000  0005eeff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013cf47  00000000  00000000  00080938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001bd87f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006bd0  00000000  00000000  001bd8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001c4494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08008c64 	.word	0x08008c64

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08008c64 	.word	0x08008c64

08000278 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027e:	463b      	mov	r3, r7
 8000280:	2220      	movs	r2, #32
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f008 fcc1 	bl	8008c0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800028a:	4b30      	ldr	r3, [pc, #192]	@ (800034c <MX_ADC1_Init+0xd4>)
 800028c:	4a30      	ldr	r2, [pc, #192]	@ (8000350 <MX_ADC1_Init+0xd8>)
 800028e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000290:	4b2e      	ldr	r3, [pc, #184]	@ (800034c <MX_ADC1_Init+0xd4>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000296:	4b2d      	ldr	r3, [pc, #180]	@ (800034c <MX_ADC1_Init+0xd4>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800029c:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <MX_ADC1_Init+0xd4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a2:	4b2a      	ldr	r3, [pc, #168]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a8:	4b28      	ldr	r3, [pc, #160]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ae:	4b27      	ldr	r3, [pc, #156]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002b0:	2204      	movs	r2, #4
 80002b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002b4:	4b25      	ldr	r3, [pc, #148]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002bc:	2200      	movs	r2, #0
 80002be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80002c2:	4b22      	ldr	r3, [pc, #136]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d0:	4b1e      	ldr	r3, [pc, #120]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002d8:	2200      	movs	r2, #0
 80002da:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002e4:	4b19      	ldr	r3, [pc, #100]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002ea:	4b18      	ldr	r3, [pc, #96]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80002f0:	4b16      	ldr	r3, [pc, #88]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80002f6:	4b15      	ldr	r3, [pc, #84]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80002fc:	4b13      	ldr	r3, [pc, #76]	@ (800034c <MX_ADC1_Init+0xd4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000304:	4811      	ldr	r0, [pc, #68]	@ (800034c <MX_ADC1_Init+0xd4>)
 8000306:	f001 fcd9 	bl	8001cbc <HAL_ADC_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000310:	f000 fc42 	bl	8000b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000314:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_ADC1_Init+0xdc>)
 8000316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000318:	2306      	movs	r3, #6
 800031a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000324:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000326:	2304      	movs	r3, #4
 8000328:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032e:	463b      	mov	r3, r7
 8000330:	4619      	mov	r1, r3
 8000332:	4806      	ldr	r0, [pc, #24]	@ (800034c <MX_ADC1_Init+0xd4>)
 8000334:	f001 ff8c 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800033e:	f000 fc2b 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	42028000 	.word	0x42028000
 8000354:	2a000400 	.word	0x2a000400

08000358 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	463b      	mov	r3, r7
 8000360:	2220      	movs	r2, #32
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f008 fc51 	bl	8008c0c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800036a:	4b2f      	ldr	r3, [pc, #188]	@ (8000428 <MX_ADC4_Init+0xd0>)
 800036c:	4a2f      	ldr	r2, [pc, #188]	@ (800042c <MX_ADC4_Init+0xd4>)
 800036e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000370:	4b2d      	ldr	r3, [pc, #180]	@ (8000428 <MX_ADC4_Init+0xd0>)
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	4b2c      	ldr	r3, [pc, #176]	@ (8000428 <MX_ADC4_Init+0xd0>)
 8000378:	2204      	movs	r2, #4
 800037a:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b2a      	ldr	r3, [pc, #168]	@ (8000428 <MX_ADC4_Init+0xd0>)
 800037e:	2200      	movs	r2, #0
 8000380:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 8000382:	4b29      	ldr	r3, [pc, #164]	@ (8000428 <MX_ADC4_Init+0xd0>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000388:	4b27      	ldr	r3, [pc, #156]	@ (8000428 <MX_ADC4_Init+0xd0>)
 800038a:	2204      	movs	r2, #4
 800038c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 800038e:	4b26      	ldr	r3, [pc, #152]	@ (8000428 <MX_ADC4_Init+0xd0>)
 8000390:	2200      	movs	r2, #0
 8000392:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000394:	4b24      	ldr	r3, [pc, #144]	@ (8000428 <MX_ADC4_Init+0xd0>)
 8000396:	2200      	movs	r2, #0
 8000398:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800039a:	4b23      	ldr	r3, [pc, #140]	@ (8000428 <MX_ADC4_Init+0xd0>)
 800039c:	2200      	movs	r2, #0
 800039e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 1;
 80003a2:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80003a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80003c4:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003c6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80003ca:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003cc:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 80003d2:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 80003d8:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80003e6:	4810      	ldr	r0, [pc, #64]	@ (8000428 <MX_ADC4_Init+0xd0>)
 80003e8:	f001 fc68 	bl	8001cbc <HAL_ADC_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC4_Init+0x9e>
  {
    Error_Handler();
 80003f2:	f000 fbd1 	bl	8000b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <MX_ADC4_Init+0xd8>)
 80003f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000402:	2304      	movs	r3, #4
 8000404:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800040a:	463b      	mov	r3, r7
 800040c:	4619      	mov	r1, r3
 800040e:	4806      	ldr	r0, [pc, #24]	@ (8000428 <MX_ADC4_Init+0xd0>)
 8000410:	f001 ff1e 	bl	8002250 <HAL_ADC_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 800041a:	f000 fbbd 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	3720      	adds	r7, #32
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000b4 	.word	0x200000b4
 800042c:	46021000 	.word	0x46021000
 8000430:	24000200 	.word	0x24000200

08000434 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b0bc      	sub	sp, #240	@ 0xf0
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800044c:	f107 0320 	add.w	r3, r7, #32
 8000450:	22b8      	movs	r2, #184	@ 0xb8
 8000452:	2100      	movs	r1, #0
 8000454:	4618      	mov	r0, r3
 8000456:	f008 fbd9 	bl	8008c0c <memset>
  if(adcHandle->Instance==ADC1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a56      	ldr	r2, [pc, #344]	@ (80005b8 <HAL_ADC_MspInit+0x184>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d15f      	bne.n	8000524 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000464:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000468:	f04f 0300 	mov.w	r3, #0
 800046c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000470:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000474:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000478:	f107 0320 	add.w	r3, r7, #32
 800047c:	4618      	mov	r0, r3
 800047e:	f006 f8f1 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000488:	f000 fb86 	bl	8000b98 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800048c:	4b4b      	ldr	r3, [pc, #300]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 800048e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000492:	4a4a      	ldr	r2, [pc, #296]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 8000494:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000498:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800049c:	4b47      	ldr	r3, [pc, #284]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 800049e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80004a6:	61fb      	str	r3, [r7, #28]
 80004a8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b44      	ldr	r3, [pc, #272]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 80004ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004b0:	4a42      	ldr	r2, [pc, #264]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004ba:	4b40      	ldr	r3, [pc, #256]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 80004bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
 80004c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b3c      	ldr	r3, [pc, #240]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 80004ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004ce:	4a3b      	ldr	r2, [pc, #236]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 80004d0:	f043 0302 	orr.w	r3, r3, #2
 80004d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004d8:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 80004da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697b      	ldr	r3, [r7, #20]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004e6:	23e0      	movs	r3, #224	@ 0xe0
 80004e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ec:	2303      	movs	r3, #3
 80004ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80004fc:	4619      	mov	r1, r3
 80004fe:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <HAL_ADC_MspInit+0x18c>)
 8000500:	f004 f90a 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000504:	2303      	movs	r3, #3
 8000506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050a:	2303      	movs	r3, #3
 800050c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800051a:	4619      	mov	r1, r3
 800051c:	4829      	ldr	r0, [pc, #164]	@ (80005c4 <HAL_ADC_MspInit+0x190>)
 800051e:	f004 f8fb 	bl	8004718 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000522:	e045      	b.n	80005b0 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC4)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <HAL_ADC_MspInit+0x194>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d140      	bne.n	80005b0 <HAL_ADC_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800052e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000532:	f04f 0300 	mov.w	r3, #0
 8000536:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800053a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800053e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	4618      	mov	r0, r3
 8000548:	f006 f88c 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_ADC_MspInit+0x122>
      Error_Handler();
 8000552:	f000 fb21 	bl	8000b98 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 8000558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800055c:	4a17      	ldr	r2, [pc, #92]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 8000568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800056c:	f003 0320 	and.w	r3, r3, #32
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 8000576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800057a:	4a10      	ldr	r2, [pc, #64]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000584:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <HAL_ADC_MspInit+0x188>)
 8000586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000592:	2310      	movs	r3, #16
 8000594:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000598:	2303      	movs	r3, #3
 800059a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <HAL_ADC_MspInit+0x18c>)
 80005ac:	f004 f8b4 	bl	8004718 <HAL_GPIO_Init>
}
 80005b0:	bf00      	nop
 80005b2:	37f0      	adds	r7, #240	@ 0xf0
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	42028000 	.word	0x42028000
 80005bc:	46020c00 	.word	0x46020c00
 80005c0:	42020000 	.word	0x42020000
 80005c4:	42020400 	.word	0x42020400
 80005c8:	46021000 	.word	0x46021000

080005cc <MX_GPDMA1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09c      	sub	sp, #112	@ 0x70
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  DMA_NodeConfTypeDef NodeConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	226c      	movs	r2, #108	@ 0x6c
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f008 fb17 	bl	8008c0c <memset>

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80005de:	4b73      	ldr	r3, [pc, #460]	@ (80007ac <MX_GPDMA1_Init+0x1e0>)
 80005e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e4:	4a71      	ldr	r2, [pc, #452]	@ (80007ac <MX_GPDMA1_Init+0x1e0>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80005ee:	4b6f      	ldr	r3, [pc, #444]	@ (80007ac <MX_GPDMA1_Init+0x1e0>)
 80005f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	201d      	movs	r0, #29
 8000602:	f002 fd6d 	bl	80030e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000606:	201d      	movs	r0, #29
 8000608:	f002 fd84 	bl	8003114 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	201e      	movs	r0, #30
 8000612:	f002 fd65 	bl	80030e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000616:	201e      	movs	r0, #30
 8000618:	f002 fd7c 	bl	8003114 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800061c:	2321      	movs	r3, #33	@ 0x21
 800061e:	607b      	str	r3, [r7, #4]
  NodeConfig.Init.Request = DMA_REQUEST_SW;
 8000620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000624:	60bb      	str	r3, [r7, #8]
  NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  NodeConfig.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800062a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062e:	613b      	str	r3, [r7, #16]
  NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000630:	2308      	movs	r3, #8
 8000632:	617b      	str	r3, [r7, #20]
  NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800063c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000640:	623b      	str	r3, [r7, #32]
  NodeConfig.Init.SrcBurstLength = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
  NodeConfig.Init.DestBurstLength = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800064a:	2300      	movs	r3, #0
 800064c:	633b      	str	r3, [r7, #48]	@ 0x30
  NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800064e:	2300      	movs	r3, #0
 8000650:	637b      	str	r3, [r7, #52]	@ 0x34
  NodeConfig.Init.Mode = DMA_NORMAL;
 8000652:	2300      	movs	r3, #0
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_SINGLE_BURST_TRANSFER;
 8000656:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_FALLING;
 800065c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
  NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_LPTIM1_CH2;
 8000662:	230c      	movs	r3, #12
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000666:	2300      	movs	r3, #0
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800066a:	2300      	movs	r3, #0
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  NodeConfig.SrcAddress = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	667b      	str	r3, [r7, #100]	@ 0x64
  NodeConfig.DstAddress = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	66bb      	str	r3, [r7, #104]	@ 0x68
  NodeConfig.DataSize = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	494c      	ldr	r1, [pc, #304]	@ (80007b0 <MX_GPDMA1_Init+0x1e4>)
 800067e:	4618      	mov	r0, r3
 8000680:	f003 f968 	bl	8003954 <HAL_DMAEx_List_BuildNode>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_GPDMA1_Init+0xc2>
  {
    Error_Handler();
 800068a:	f000 fa85 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800068e:	4a48      	ldr	r2, [pc, #288]	@ (80007b0 <MX_GPDMA1_Init+0x1e4>)
 8000690:	2100      	movs	r1, #0
 8000692:	4848      	ldr	r0, [pc, #288]	@ (80007b4 <MX_GPDMA1_Init+0x1e8>)
 8000694:	f003 f98a 	bl	80039ac <HAL_DMAEx_List_InsertNode>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_GPDMA1_Init+0xd6>
  {
    Error_Handler();
 800069e:	f000 fa7b 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80006a2:	4844      	ldr	r0, [pc, #272]	@ (80007b4 <MX_GPDMA1_Init+0x1e8>)
 80006a4:	f003 fa4b 	bl	8003b3e <HAL_DMAEx_List_SetCircularMode>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_GPDMA1_Init+0xe6>
  {
    Error_Handler();
 80006ae:	f000 fa73 	bl	8000b98 <Error_Handler>
  }
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80006b2:	4b41      	ldr	r3, [pc, #260]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006b4:	4a41      	ldr	r2, [pc, #260]	@ (80007bc <MX_GPDMA1_Init+0x1f0>)
 80006b6:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80006b8:	4b3f      	ldr	r3, [pc, #252]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006be:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80006c0:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80006c6:	4b3c      	ldr	r3, [pc, #240]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80006cc:	4b3a      	ldr	r3, [pc, #232]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80006d2:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006d4:	2281      	movs	r2, #129	@ 0x81
 80006d6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80006d8:	4837      	ldr	r0, [pc, #220]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006da:	f002 ff7b 	bl	80035d4 <HAL_DMAEx_List_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_GPDMA1_Init+0x11c>
  {
    Error_Handler();
 80006e4:	f000 fa58 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80006e8:	4932      	ldr	r1, [pc, #200]	@ (80007b4 <MX_GPDMA1_Init+0x1e8>)
 80006ea:	4833      	ldr	r0, [pc, #204]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006ec:	f003 fa88 	bl	8003c00 <HAL_DMAEx_List_LinkQ>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_GPDMA1_Init+0x12e>
  {
    Error_Handler();
 80006f6:	f000 fa4f 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80006fa:	2110      	movs	r1, #16
 80006fc:	482e      	ldr	r0, [pc, #184]	@ (80007b8 <MX_GPDMA1_Init+0x1ec>)
 80006fe:	f002 ff2c 	bl	800355a <HAL_DMA_ConfigChannelAttributes>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_GPDMA1_Init+0x140>
  {
    Error_Handler();
 8000708:	f000 fa46 	bl	8000b98 <Error_Handler>
  }
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 800070c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	492a      	ldr	r1, [pc, #168]	@ (80007c0 <MX_GPDMA1_Init+0x1f4>)
 8000716:	4618      	mov	r0, r3
 8000718:	f003 f91c 	bl	8003954 <HAL_DMAEx_List_BuildNode>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_GPDMA1_Init+0x15a>
  {
    Error_Handler();
 8000722:	f000 fa39 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8000726:	4a26      	ldr	r2, [pc, #152]	@ (80007c0 <MX_GPDMA1_Init+0x1f4>)
 8000728:	2100      	movs	r1, #0
 800072a:	4826      	ldr	r0, [pc, #152]	@ (80007c4 <MX_GPDMA1_Init+0x1f8>)
 800072c:	f003 f93e 	bl	80039ac <HAL_DMAEx_List_InsertNode>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_GPDMA1_Init+0x16e>
  {
    Error_Handler();
 8000736:	f000 fa2f 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800073a:	4822      	ldr	r0, [pc, #136]	@ (80007c4 <MX_GPDMA1_Init+0x1f8>)
 800073c:	f003 f9ff 	bl	8003b3e <HAL_DMAEx_List_SetCircularMode>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_GPDMA1_Init+0x17e>
  {
    Error_Handler();
 8000746:	f000 fa27 	bl	8000b98 <Error_Handler>
  }
  handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 800074c:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <MX_GPDMA1_Init+0x200>)
 800074e:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 8000752:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000756:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000758:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 800075a:	2200      	movs	r2, #0
 800075c:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 8000760:	2200      	movs	r2, #0
 8000762:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 8000766:	2200      	movs	r2, #0
 8000768:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 800076c:	2281      	movs	r2, #129	@ 0x81
 800076e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000770:	4815      	ldr	r0, [pc, #84]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 8000772:	f002 ff2f 	bl	80035d4 <HAL_DMAEx_List_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_GPDMA1_Init+0x1b4>
  {
    Error_Handler();
 800077c:	f000 fa0c 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8000780:	4910      	ldr	r1, [pc, #64]	@ (80007c4 <MX_GPDMA1_Init+0x1f8>)
 8000782:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 8000784:	f003 fa3c 	bl	8003c00 <HAL_DMAEx_List_LinkQ>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_GPDMA1_Init+0x1c6>
  {
    Error_Handler();
 800078e:	f000 fa03 	bl	8000b98 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000792:	2110      	movs	r1, #16
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_GPDMA1_Init+0x1fc>)
 8000796:	f002 fee0 	bl	800355a <HAL_DMA_ConfigChannelAttributes>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_GPDMA1_Init+0x1d8>
  {
    Error_Handler();
 80007a0:	f000 f9fa 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3770      	adds	r7, #112	@ 0x70
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	46020c00 	.word	0x46020c00
 80007b0:	20000140 	.word	0x20000140
 80007b4:	20000164 	.word	0x20000164
 80007b8:	2000017c 	.word	0x2000017c
 80007bc:	400200d0 	.word	0x400200d0
 80007c0:	200001f4 	.word	0x200001f4
 80007c4:	20000218 	.word	0x20000218
 80007c8:	20000230 	.word	0x20000230
 80007cc:	40020050 	.word	0x40020050

080007d0 <MX_GPIO_Init>:
     PA10   ------> USART1_RX
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b51      	ldr	r3, [pc, #324]	@ (800092c <MX_GPIO_Init+0x15c>)
 80007e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ec:	4a4f      	ldr	r2, [pc, #316]	@ (800092c <MX_GPIO_Init+0x15c>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007f6:	4b4d      	ldr	r3, [pc, #308]	@ (800092c <MX_GPIO_Init+0x15c>)
 80007f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000804:	4b49      	ldr	r3, [pc, #292]	@ (800092c <MX_GPIO_Init+0x15c>)
 8000806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080a:	4a48      	ldr	r2, [pc, #288]	@ (800092c <MX_GPIO_Init+0x15c>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000810:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000814:	4b45      	ldr	r3, [pc, #276]	@ (800092c <MX_GPIO_Init+0x15c>)
 8000816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800081a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b42      	ldr	r3, [pc, #264]	@ (800092c <MX_GPIO_Init+0x15c>)
 8000824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000828:	4a40      	ldr	r2, [pc, #256]	@ (800092c <MX_GPIO_Init+0x15c>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000832:	4b3e      	ldr	r3, [pc, #248]	@ (800092c <MX_GPIO_Init+0x15c>)
 8000834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b3a      	ldr	r3, [pc, #232]	@ (800092c <MX_GPIO_Init+0x15c>)
 8000842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000846:	4a39      	ldr	r2, [pc, #228]	@ (800092c <MX_GPIO_Init+0x15c>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000850:	4b36      	ldr	r3, [pc, #216]	@ (800092c <MX_GPIO_Init+0x15c>)
 8000852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000864:	4832      	ldr	r0, [pc, #200]	@ (8000930 <MX_GPIO_Init+0x160>)
 8000866:	f004 f92f 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2103      	movs	r1, #3
 800086e:	4831      	ldr	r0, [pc, #196]	@ (8000934 <MX_GPIO_Init+0x164>)
 8000870:	f004 f92a 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000874:	2200      	movs	r2, #0
 8000876:	f240 110f 	movw	r1, #271	@ 0x10f
 800087a:	482f      	ldr	r0, [pc, #188]	@ (8000938 <MX_GPIO_Init+0x168>)
 800087c:	f004 f924 	bl	8004ac8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000886:	482d      	ldr	r0, [pc, #180]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000888:	f004 f91e 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800088c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4822      	ldr	r0, [pc, #136]	@ (8000930 <MX_GPIO_Init+0x160>)
 80008a6:	f003 ff37 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008aa:	2303      	movs	r3, #3
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	481c      	ldr	r0, [pc, #112]	@ (8000934 <MX_GPIO_Init+0x164>)
 80008c2:	f003 ff29 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR2_Pin IR3_Pin IR4_Pin
                           PA8 */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 80008c6:	f240 130f 	movw	r3, #271	@ 0x10f
 80008ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4816      	ldr	r0, [pc, #88]	@ (8000938 <MX_GPIO_Init+0x168>)
 80008e0:	f003 ff1a 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	480f      	ldr	r0, [pc, #60]	@ (800093c <MX_GPIO_Init+0x16c>)
 80008fe:	f003 ff0b 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000902:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000914:	2307      	movs	r3, #7
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_GPIO_Init+0x168>)
 8000920:	f003 fefa 	bl	8004718 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	46020c00 	.word	0x46020c00
 8000930:	42020800 	.word	0x42020800
 8000934:	42021c00 	.word	0x42021c00
 8000938:	42020000 	.word	0x42020000
 800093c:	42020400 	.word	0x42020400

08000940 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000944:	2000      	movs	r0, #0
 8000946:	f004 f8d7 	bl	8004af8 <HAL_ICACHE_ConfigAssociativityMode>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000950:	f000 f922 	bl	8000b98 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000954:	f004 f8f0 	bl	8004b38 <HAL_ICACHE_Enable>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800095e:	f000 f91b 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LPTIM_OC_ConfigTypeDef sConfig1 = {0};
 800096e:	463b      	mov	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 8000978:	4a23      	ldr	r2, [pc, #140]	@ (8000a08 <MX_LPTIM1_Init+0xa0>)
 800097a:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800097c:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 8000984:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000988:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 800098c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000990:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 100;
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 8000994:	2264      	movs	r2, #100	@ 0x64
 8000996:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000998:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80009b6:	4813      	ldr	r0, [pc, #76]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 80009b8:	f004 f8ce 	bl	8004b58 <HAL_LPTIM_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_LPTIM1_Init+0x5e>
  {
    Error_Handler();
 80009c2:	f000 f8e9 	bl	8000b98 <Error_Handler>
  }
  sConfig1.Pulse = 50;
 80009c6:	2332      	movs	r3, #50	@ 0x32
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig1.OCPolarity = LPTIM_OCPOLARITY_LOW;
 80009ca:	2301      	movs	r3, #1
 80009cc:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_1) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	4619      	mov	r1, r3
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 80009d6:	f004 fa21 	bl	8004e1c <HAL_LPTIM_OC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_LPTIM1_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f8da 	bl	8000b98 <Error_Handler>
  }
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_2) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <MX_LPTIM1_Init+0x9c>)
 80009ec:	f004 fa16 	bl	8004e1c <HAL_LPTIM_OC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_LPTIM1_Init+0x92>
  {
    Error_Handler();
 80009f6:	f000 f8cf 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200002a8 	.word	0x200002a8
 8000a08:	46004400 	.word	0x46004400

08000a0c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0b2      	sub	sp, #200	@ 0xc8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	22b8      	movs	r2, #184	@ 0xb8
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 f8f5 	bl	8008c0c <memset>
  if(lptimHandle->Instance==LPTIM1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a15      	ldr	r2, [pc, #84]	@ (8000a7c <HAL_LPTIM_MspInit+0x70>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d122      	bne.n	8000a72 <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_HSI;
 8000a38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4618      	mov	r0, r3
 8000a46:	f005 fe0d 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8000a50:	f000 f8a2 	bl	8000b98 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_LPTIM_MspInit+0x74>)
 8000a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <HAL_LPTIM_MspInit+0x74>)
 8000a5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a60:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_LPTIM_MspInit+0x74>)
 8000a66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000a72:	bf00      	nop
 8000a74:	37c8      	adds	r7, #200	@ 0xc8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	46004400 	.word	0x46004400
 8000a80:	46020c00 	.word	0x46020c00

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f000 fd54 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f81a 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f7ff fe9e 	bl	80007d0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000a94:	f7ff fd9a 	bl	80005cc <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8000a98:	f7ff fbee 	bl	8000278 <MX_ADC1_Init>
  MX_ADC4_Init();
 8000a9c:	f7ff fc5c 	bl	8000358 <MX_ADC4_Init>
  MX_ICACHE_Init();
 8000aa0:	f7ff ff4e 	bl	8000940 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000aa4:	f7ff ff60 	bl	8000968 <MX_LPTIM1_Init>
  MX_SPI2_Init();
 8000aa8:	f000 f87c 	bl	8000ba4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000aac:	f000 f9ea 	bl	8000e84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ab0:	f000 fa3c 	bl	8000f2c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ab4:	f000 fa90 	bl	8000fd8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ab8:	f000 fb26 	bl	8001108 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  Sensor_Initialize();
 8000abc:	f008 f814 	bl	8008ae8 <Sensor_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <main+0x3c>

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09e      	sub	sp, #120	@ 0x78
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2260      	movs	r2, #96	@ 0x60
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f89a 	bl	8008c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000ae8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000aec:	f004 faae 	bl	800504c <HAL_PWREx_ControlVoltageScaling>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000af6:	f000 f84f 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000afa:	2312      	movs	r3, #18
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000b22:	2303      	movs	r3, #3
 8000b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000b26:	230c      	movs	r3, #12
 8000b28:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000b36:	230c      	movs	r3, #12
 8000b38:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 fb1d 	bl	8005184 <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b50:	f000 f822 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	231f      	movs	r3, #31
 8000b56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4618      	mov	r0, r3
 8000b72:	f005 f9e3 	bl	8005f3c <HAL_RCC_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b7c:	f000 f80c 	bl	8000b98 <Error_Handler>
  }

  /** Enable the force of HSI in stop mode
  */
  __HAL_RCC_HSISTOP_ENABLE();
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a03      	ldr	r2, [pc, #12]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	3778      	adds	r7, #120	@ 0x78
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	46020c00 	.word	0x46020c00

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bb4:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bb6:	4a32      	ldr	r2, [pc, #200]	@ (8000c80 <MX_SPI2_Init+0xdc>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b30      	ldr	r3, [pc, #192]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bdc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000be0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000bfe:	2207      	movs	r2, #7
 8000c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c40:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c42:	f006 fb61 	bl	8007308 <HAL_SPI_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000c4c:	f7ff ffa4 	bl	8000b98 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000c54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c58:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_SPI2_Init+0xd8>)
 8000c64:	f006 fc81 	bl	800756a <HAL_SPIEx_SetConfigAutonomousMode>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8000c6e:	f7ff ff93 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002f8 	.word	0x200002f8
 8000c80:	40003800 	.word	0x40003800

08000c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0b8      	sub	sp, #224	@ 0xe0
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	22b8      	movs	r2, #184	@ 0xb8
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f007 ffb1 	bl	8008c0c <memset>
  if(spiHandle->Instance==SPI2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a27      	ldr	r2, [pc, #156]	@ (8000d4c <HAL_SPI_MspInit+0xc8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d147      	bne.n	8000d44 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8000cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f005 fcc9 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000cd8:	f7ff ff5e 	bl	8000b98 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_SPI_MspInit+0xcc>)
 8000cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <HAL_SPI_MspInit+0xcc>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_SPI_MspInit+0xcc>)
 8000cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_SPI_MspInit+0xcc>)
 8000cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d00:	4a13      	ldr	r2, [pc, #76]	@ (8000d50 <HAL_SPI_MspInit+0xcc>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_SPI_MspInit+0xcc>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d18:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d32:	2305      	movs	r3, #5
 8000d34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <HAL_SPI_MspInit+0xd0>)
 8000d40:	f003 fcea 	bl	8004718 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d44:	bf00      	nop
 8000d46:	37e0      	adds	r7, #224	@ 0xe0
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40003800 	.word	0x40003800
 8000d50:	46020c00 	.word	0x46020c00
 8000d54:	42020400 	.word	0x42020400

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_MspInit+0x30>)
 8000d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d64:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_MspInit+0x30>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x30>)
 8000d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000d7c:	f004 f9f2 	bl	8005164 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	46020c00 	.word	0x46020c00

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 fc4d 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <GPDMA1_Channel0_IRQHandler+0x10>)
 8000df2:	f002 fa51 	bl	8003298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000230 	.word	0x20000230

08000e00 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <GPDMA1_Channel1_IRQHandler+0x10>)
 8000e06:	f002 fa47 	bl	8003298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000017c 	.word	0x2000017c

08000e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <SystemInit+0x68>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <SystemInit+0x68>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <SystemInit+0x6c>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <SystemInit+0x6c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <SystemInit+0x6c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <SystemInit+0x6c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <SystemInit+0x6c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0e      	ldr	r2, [pc, #56]	@ (8000e80 <SystemInit+0x6c>)
 8000e46:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e4a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <SystemInit+0x6c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <SystemInit+0x6c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <SystemInit+0x6c>)
 8000e5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <SystemInit+0x6c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <SystemInit+0x68>)
 8000e6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e6e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	46020c00 	.word	0x46020c00

08000e84 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	@ 0x30
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2224      	movs	r2, #36	@ 0x24
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f007 feba 	bl	8008c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000ea4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000eb8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ebc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000ef6:	f006 fc31 	bl	800775c <HAL_TIM_Encoder_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f00:	f7ff fe4a 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_TIM2_Init+0xa4>)
 8000f12:	f007 fc51 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f1c:	f7ff fe3c 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	@ 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000388 	.word	0x20000388

08000f2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	@ 0x30
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2224      	movs	r2, #36	@ 0x24
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 fe66 	bl	8008c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <MX_TIM3_Init+0xa8>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000f5e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000f9c:	f006 fbde 	bl	800775c <HAL_TIM_Encoder_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000fa6:	f7ff fdf7 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <MX_TIM3_Init+0xa4>)
 8000fb8:	f007 fbfe 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000fc2:	f7ff fde9 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	@ 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200003d4 	.word	0x200003d4
 8000fd4:	40000400 	.word	0x40000400

08000fd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	@ 0x38
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800100a:	4b3d      	ldr	r3, [pc, #244]	@ (8001100 <MX_TIM4_Init+0x128>)
 800100c:	4a3d      	ldr	r2, [pc, #244]	@ (8001104 <MX_TIM4_Init+0x12c>)
 800100e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001010:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <MX_TIM4_Init+0x128>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b3a      	ldr	r3, [pc, #232]	@ (8001100 <MX_TIM4_Init+0x128>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4294967295;
 800101c:	4b38      	ldr	r3, [pc, #224]	@ (8001100 <MX_TIM4_Init+0x128>)
 800101e:	f04f 32ff 	mov.w	r2, #4294967295
 8001022:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b36      	ldr	r3, [pc, #216]	@ (8001100 <MX_TIM4_Init+0x128>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <MX_TIM4_Init+0x128>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001030:	4833      	ldr	r0, [pc, #204]	@ (8001100 <MX_TIM4_Init+0x128>)
 8001032:	f006 fadb 	bl	80075ec <HAL_TIM_Base_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800103c:	f7ff fdac 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001046:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800104a:	4619      	mov	r1, r3
 800104c:	482c      	ldr	r0, [pc, #176]	@ (8001100 <MX_TIM4_Init+0x128>)
 800104e:	f006 fd3f 	bl	8007ad0 <HAL_TIM_ConfigClockSource>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001058:	f7ff fd9e 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800105c:	4828      	ldr	r0, [pc, #160]	@ (8001100 <MX_TIM4_Init+0x128>)
 800105e:	f006 fb1c 	bl	800769a <HAL_TIM_PWM_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001068:	f7ff fd96 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4821      	ldr	r0, [pc, #132]	@ (8001100 <MX_TIM4_Init+0x128>)
 800107c:	f007 fb9c 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001086:	f7ff fd87 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108a:	2360      	movs	r3, #96	@ 0x60
 800108c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	4817      	ldr	r0, [pc, #92]	@ (8001100 <MX_TIM4_Init+0x128>)
 80010a2:	f006 fc01 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80010ac:	f7ff fd74 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	2204      	movs	r2, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4812      	ldr	r0, [pc, #72]	@ (8001100 <MX_TIM4_Init+0x128>)
 80010b8:	f006 fbf6 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80010c2:	f7ff fd69 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2208      	movs	r2, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <MX_TIM4_Init+0x128>)
 80010ce:	f006 fbeb 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80010d8:	f7ff fd5e 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	220c      	movs	r2, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <MX_TIM4_Init+0x128>)
 80010e4:	f006 fbe0 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80010ee:	f7ff fd53 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <MX_TIM4_Init+0x128>)
 80010f4:	f000 f992 	bl	800141c <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3738      	adds	r7, #56	@ 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000420 	.word	0x20000420
 8001104:	40000800 	.word	0x40000800

08001108 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09c      	sub	sp, #112	@ 0x70
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2234      	movs	r2, #52	@ 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f007 fd62 	bl	8008c0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001148:	4b45      	ldr	r3, [pc, #276]	@ (8001260 <MX_TIM8_Init+0x158>)
 800114a:	4a46      	ldr	r2, [pc, #280]	@ (8001264 <MX_TIM8_Init+0x15c>)
 800114c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800114e:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b42      	ldr	r3, [pc, #264]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800115a:	4b41      	ldr	r3, [pc, #260]	@ (8001260 <MX_TIM8_Init+0x158>)
 800115c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001160:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001168:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <MX_TIM8_Init+0x158>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001174:	483a      	ldr	r0, [pc, #232]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001176:	f006 fa39 	bl	80075ec <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001180:	f7ff fd0a 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001188:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800118a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800118e:	4619      	mov	r1, r3
 8001190:	4833      	ldr	r0, [pc, #204]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001192:	f006 fc9d 	bl	8007ad0 <HAL_TIM_ConfigClockSource>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800119c:	f7ff fcfc 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011a0:	482f      	ldr	r0, [pc, #188]	@ (8001260 <MX_TIM8_Init+0x158>)
 80011a2:	f006 fa7a 	bl	800769a <HAL_TIM_PWM_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80011ac:	f7ff fcf4 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c0:	4619      	mov	r1, r3
 80011c2:	4827      	ldr	r0, [pc, #156]	@ (8001260 <MX_TIM8_Init+0x158>)
 80011c4:	f007 faf8 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80011ce:	f7ff fce3 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	@ 0x60
 80011d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011f2:	220c      	movs	r2, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	481a      	ldr	r0, [pc, #104]	@ (8001260 <MX_TIM8_Init+0x158>)
 80011f8:	f006 fb56 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001202:	f7ff fcc9 	bl	8000b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001244:	f007 fb7a 	bl	800893c <HAL_TIMEx_ConfigBreakDeadTime>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800124e:	f7ff fca3 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001252:	4803      	ldr	r0, [pc, #12]	@ (8001260 <MX_TIM8_Init+0x158>)
 8001254:	f000 f8e2 	bl	800141c <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3770      	adds	r7, #112	@ 0x70
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000046c 	.word	0x2000046c
 8001264:	40013400 	.word	0x40013400

08001268 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001288:	d14e      	bne.n	8001328 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128a:	4b43      	ldr	r3, [pc, #268]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 800128c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001290:	4a41      	ldr	r2, [pc, #260]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800129a:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 800129c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b8:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 80012ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 80012c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012cc:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012d6:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 80012d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012f6:	2301      	movs	r3, #1
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	4826      	ldr	r0, [pc, #152]	@ (800139c <HAL_TIM_Encoder_MspInit+0x134>)
 8001302:	f003 fa09 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001306:	2308      	movs	r3, #8
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001316:	2301      	movs	r3, #1
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	481f      	ldr	r0, [pc, #124]	@ (80013a0 <HAL_TIM_Encoder_MspInit+0x138>)
 8001322:	f003 f9f9 	bl	8004718 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001326:	e032      	b.n	800138e <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12d      	bne.n	800138e <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 8001334:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001338:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 8001344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 8001352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001356:	4a10      	ldr	r2, [pc, #64]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001360:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_TIM_Encoder_MspInit+0x130>)
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800136e:	2330      	movs	r3, #48	@ 0x30
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137e:	2302      	movs	r3, #2
 8001380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <HAL_TIM_Encoder_MspInit+0x138>)
 800138a:	f003 f9c5 	bl	8004718 <HAL_GPIO_Init>
}
 800138e:	bf00      	nop
 8001390:	3730      	adds	r7, #48	@ 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	46020c00 	.word	0x46020c00
 800139c:	42020000 	.word	0x42020000
 80013a0:	42020400 	.word	0x42020400
 80013a4:	40000400 	.word	0x40000400

080013a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <HAL_TIM_Base_MspInit+0x68>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10f      	bne.n	80013da <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80013d8:	e013      	b.n	8001402 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_TIM_Base_MspInit+0x70>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10e      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013f0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40000800 	.word	0x40000800
 8001414:	46020c00 	.word	0x46020c00
 8001418:	40013400 	.word	0x40013400

0800141c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a25      	ldr	r2, [pc, #148]	@ (80014d0 <HAL_TIM_MspPostInit+0xb4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d120      	bne.n	8001480 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <HAL_TIM_MspPostInit+0xb8>)
 8001440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001444:	4a23      	ldr	r2, [pc, #140]	@ (80014d4 <HAL_TIM_MspPostInit+0xb8>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800144e:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <HAL_TIM_MspPostInit+0xb8>)
 8001450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800145c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4817      	ldr	r0, [pc, #92]	@ (80014d8 <HAL_TIM_MspPostInit+0xbc>)
 800147a:	f003 f94d 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800147e:	e023      	b.n	80014c8 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM8)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a15      	ldr	r2, [pc, #84]	@ (80014dc <HAL_TIM_MspPostInit+0xc0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d11e      	bne.n	80014c8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_TIM_MspPostInit+0xb8>)
 800148c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001490:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_TIM_MspPostInit+0xb8>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_TIM_MspPostInit+0xb8>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a8:	2304      	movs	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014b8:	2303      	movs	r3, #3
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_TIM_MspPostInit+0xbc>)
 80014c4:	f003 f928 	bl	8004718 <HAL_GPIO_Init>
}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40000800 	.word	0x40000800
 80014d4:	46020c00 	.word	0x46020c00
 80014d8:	42020400 	.word	0x42020400
 80014dc:	40013400 	.word	0x40013400

080014e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014e0:	480d      	ldr	r0, [pc, #52]	@ (8001518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e4:	f7ff fc96 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <LoopForever+0x6>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	@ (8001520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <LoopForever+0xe>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	@ (800152c <LoopForever+0x16>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800150e:	f007 fb85 	bl	8008c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001512:	f7ff fab7 	bl	8000a84 <main>

08001516 <LoopForever>:

LoopForever:
    b LoopForever
 8001516:	e7fe      	b.n	8001516 <LoopForever>
  ldr   r0, =_estack
 8001518:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000009 	.word	0x20000009
  ldr r2, =_sidata
 8001524:	08008d54 	.word	0x08008d54
  ldr r2, =_sbss
 8001528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800152c:	2000050c 	.word	0x2000050c

08001530 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_IRQHandler>
	...

08001534 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_Init+0x50>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <HAL_Init+0x50>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f001 fdc0 	bl	80030ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800154a:	f004 fee9 	bl	8006320 <HAL_RCC_GetSysClockFreq>
 800154e:	4602      	mov	r2, r0
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_Init+0x54>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	490c      	ldr	r1, [pc, #48]	@ (800158c <HAL_Init+0x58>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <HAL_Init+0x5c>)
 8001562:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001564:	2004      	movs	r0, #4
 8001566:	f001 fe05 	bl	8003174 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f812 	bl	8001594 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e002      	b.n	8001580 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157a:	f7ff fbed 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40022000 	.word	0x40022000
 8001588:	46020c00 	.word	0x46020c00
 800158c:	08008c7c 	.word	0x08008c7c
 8001590:	20000000 	.word	0x20000000

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80015a0:	4b33      	ldr	r3, [pc, #204]	@ (8001670 <HAL_InitTick+0xdc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e05c      	b.n	8001666 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80015ac:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <HAL_InitTick+0xe0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d10c      	bne.n	80015d2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_InitTick+0xe4>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <HAL_InitTick+0xdc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e037      	b.n	8001642 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80015d2:	f001 fe27 	bl	8003224 <HAL_SYSTICK_GetCLKSourceConfig>
 80015d6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d023      	beq.n	8001626 <HAL_InitTick+0x92>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d82d      	bhi.n	8001640 <HAL_InitTick+0xac>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_InitTick+0x5e>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d00d      	beq.n	800160c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80015f0:	e026      	b.n	8001640 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <HAL_InitTick+0xe4>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <HAL_InitTick+0xdc>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001600:	fbb3 f3f1 	udiv	r3, r3, r1
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	60fb      	str	r3, [r7, #12]
        break;
 800160a:	e01a      	b.n	8001642 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_InitTick+0xdc>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	fbb3 f3f2 	udiv	r3, r3, r2
 800161a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
        break;
 8001624:	e00d      	b.n	8001642 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001626:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_InitTick+0xdc>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001630:	fbb3 f3f2 	udiv	r3, r3, r2
 8001634:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001638:	fbb2 f3f3 	udiv	r3, r2, r3
 800163c:	60fb      	str	r3, [r7, #12]
        break;
 800163e:	e000      	b.n	8001642 <HAL_InitTick+0xae>
        break;
 8001640:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f001 fd74 	bl	8003130 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e009      	b.n	8001666 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001652:	2200      	movs	r2, #0
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	f04f 30ff 	mov.w	r0, #4294967295
 800165a:	f001 fd41 	bl	80030e0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800165e:	4a07      	ldr	r2, [pc, #28]	@ (800167c <HAL_InitTick+0xe8>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	e000e010 	.word	0xe000e010
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	@ (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008
 80016a4:	200004b8 	.word	0x200004b8

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200004b8 	.word	0x200004b8

080016c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <HAL_GetREVID+0x18>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	b29b      	uxth	r3, r3
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e0044000 	.word	0xe0044000

080016dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <LL_ADC_SetResolution+0x3c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d104      	bne.n	8001764 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3b01      	subs	r3, #1
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f023 020c 	bic.w	r2, r3, #12
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	60da      	str	r2, [r3, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	46021000 	.word	0x46021000

08001784 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3360      	adds	r3, #96	@ 0x60
 8001796:	461a      	mov	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	430b      	orrs	r3, r1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3360      	adds	r3, #96	@ 0x60
 80017d4:	461a      	mov	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0edb      	lsrs	r3, r3, #27
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d807      	bhi.n	8001800 <LL_ADC_GetOffsetChannel+0x3a>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	069a      	lsls	r2, r3, #26
 80017f4:	2101      	movs	r1, #1
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	e008      	b.n	8001812 <LL_ADC_GetOffsetChannel+0x4c>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	069a      	lsls	r2, r3, #26
 8001804:	2101      	movs	r1, #1
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3360      	adds	r3, #96	@ 0x60
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	431a      	orrs	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3360      	adds	r3, #96	@ 0x60
 8001864:	461a      	mov	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800188a:	b480      	push	{r7}
 800188c:	b087      	sub	sp, #28
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3360      	adds	r3, #96	@ 0x60
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d002      	beq.n	80018f2 <LL_ADC_SetGainCompensation+0x32>
 80018ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018f0:	e000      	b.n	80018f4 <LL_ADC_SetGainCompensation+0x34>
 80018f2:	2200      	movs	r2, #0
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2107      	movs	r1, #7
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	401a      	ands	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	431a      	orrs	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4a2b      	ldr	r2, [pc, #172]	@ (8001a00 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d020      	beq.n	800199a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3330      	adds	r3, #48	@ 0x30
 800195c:	461a      	mov	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	4413      	add	r3, r2
 800196a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	211f      	movs	r1, #31
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0e9b      	lsrs	r3, r3, #26
 8001984:	f003 011f 	and.w	r1, r3, #31
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	431a      	orrs	r2, r3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001998:	e02b      	b.n	80019f2 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	210f      	movs	r1, #15
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	e010      	b.n	80019e4 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	613b      	str	r3, [r7, #16]
  return result;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80019d8:	2320      	movs	r3, #32
 80019da:	e003      	b.n	80019e4 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	f001 011f 	and.w	r1, r1, #31
 80019ea:	408b      	lsls	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019f2:	bf00      	nop
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	46021000 	.word	0x46021000

08001a04 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	0e9b      	lsrs	r3, r3, #26
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2201      	movs	r2, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	e015      	b.n	8001a54 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	60fb      	str	r3, [r7, #12]
  return result;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e003      	b.n	8001a4a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	2201      	movs	r2, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	0e9b      	lsrs	r3, r3, #26
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	401a      	ands	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b08b      	sub	sp, #44	@ 0x2c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001b60 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d042      	beq.n	8001b36 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d104      	bne.n	8001ac4 <LL_ADC_SetChannelSamplingTime+0x28>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	e011      	b.n	8001ae8 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	617b      	str	r3, [r7, #20]
  return result;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001ada:	2320      	movs	r3, #32
 8001adc:	e003      	b.n	8001ae6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0e5b      	lsrs	r3, r3, #25
 8001aec:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001af0:	460b      	mov	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	1ad2      	subs	r2, r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3314      	adds	r3, #20
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	0e5b      	lsrs	r3, r3, #25
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	4413      	add	r3, r2
 8001b14:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2107      	movs	r1, #7
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	401a      	ands	r2, r3
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001b34:	e00e      	b.n	8001b54 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	401a      	ands	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	0219      	lsls	r1, r3, #8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	400b      	ands	r3, r1
 8001b4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	615a      	str	r2, [r3, #20]
}
 8001b54:	bf00      	nop
 8001b56:	372c      	adds	r7, #44	@ 0x2c
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	46021000 	.word	0x46021000

08001b64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0318 	and.w	r3, r3, #24
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b92:	431a      	orrs	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	000fffff 	.word	0x000fffff

08001bac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6093      	str	r3, [r2, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001be4:	d101      	bne.n	8001bea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c34:	d101      	bne.n	8001c3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <LL_ADC_IsEnabled+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_ADC_IsEnabled+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d101      	bne.n	8001cac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e2b3      	b.n	8002244 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a8b      	ldr	r2, [pc, #556]	@ (8001f18 <HAL_ADC_Init+0x25c>)
 8001cea:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fb9d 	bl	8000434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff45 	bl	8001bac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff7a 	bl	8001c20 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff5e 	bl	8001bf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3c:	4b77      	ldr	r3, [pc, #476]	@ (8001f1c <HAL_ADC_Init+0x260>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	4a77      	ldr	r2, [pc, #476]	@ (8001f20 <HAL_ADC_Init+0x264>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff5c 	bl	8001c20 <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff6c 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 8001d96:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 8244 	bne.w	800222e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 8240 	bne.w	800222e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001db2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001db6:	f043 0202 	orr.w	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff40 	bl	8001c48 <LL_ADC_IsEnabled>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d140      	bne.n	8001e50 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a51      	ldr	r2, [pc, #324]	@ (8001f18 <HAL_ADC_Init+0x25c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d028      	beq.n	8001e2a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_ADC_Init+0x268>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_Init+0x13a>
 8001de2:	4850      	ldr	r0, [pc, #320]	@ (8001f24 <HAL_ADC_Init+0x268>)
 8001de4:	f7ff ff30 	bl	8001c48 <LL_ADC_IsEnabled>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	e008      	b.n	8001e08 <HAL_ADC_Init+0x14c>
 8001df6:	4848      	ldr	r0, [pc, #288]	@ (8001f18 <HAL_ADC_Init+0x25c>)
 8001df8:	f7ff ff26 	bl	8001c48 <LL_ADC_IsEnabled>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d021      	beq.n	8001e50 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a44      	ldr	r2, [pc, #272]	@ (8001f24 <HAL_ADC_Init+0x268>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Init+0x15e>
 8001e16:	4a44      	ldr	r2, [pc, #272]	@ (8001f28 <HAL_ADC_Init+0x26c>)
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_Init+0x160>
 8001e1a:	4a44      	ldr	r2, [pc, #272]	@ (8001f2c <HAL_ADC_Init+0x270>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f7ff fc5a 	bl	80016dc <LL_ADC_SetCommonClock>
 8001e28:	e012      	b.n	8001e50 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f7ff fc85 	bl	8001744 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f2c <HAL_ADC_Init+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001e4a:	4938      	ldr	r1, [pc, #224]	@ (8001f2c <HAL_ADC_Init+0x270>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a30      	ldr	r2, [pc, #192]	@ (8001f18 <HAL_ADC_Init+0x25c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d010      	beq.n	8001e7c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e60:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e66:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001e6c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e74:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001e76:	4313      	orrs	r3, r2
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	e030      	b.n	8001ede <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7f1b      	ldrb	r3, [r3, #28]
 8001e80:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e88:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e8a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_Init+0x1de>
 8001e94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e98:	e000      	b.n	8001e9c <HAL_ADC_Init+0x1e0>
 8001e9a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e9c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ea2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da04      	bge.n	8001eb6 <HAL_ADC_Init+0x1fa>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eb4:	e001      	b.n	8001eba <HAL_ADC_Init+0x1fe>
 8001eb6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001eba:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4918      	ldr	r1, [pc, #96]	@ (8001f24 <HAL_ADC_Init+0x268>)
 8001ec2:	428b      	cmp	r3, r1
 8001ec4:	d103      	bne.n	8001ece <HAL_ADC_Init+0x212>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ecc:	e003      	b.n	8001ed6 <HAL_ADC_Init+0x21a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ed4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ed6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ed8:	6a3a      	ldr	r2, [r7, #32]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d12f      	bne.n	8001f48 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_ADC_Init+0x25c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	045b      	lsls	r3, r3, #17
 8001efa:	6a3a      	ldr	r2, [r7, #32]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	e022      	b.n	8001f48 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d111      	bne.n	8001f30 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f12:	623b      	str	r3, [r7, #32]
 8001f14:	e018      	b.n	8001f48 <HAL_ADC_Init+0x28c>
 8001f16:	bf00      	nop
 8001f18:	46021000 	.word	0x46021000
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	053e2d63 	.word	0x053e2d63
 8001f24:	42028000 	.word	0x42028000
 8001f28:	42028308 	.word	0x42028308
 8001f2c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a92      	ldr	r2, [pc, #584]	@ (8002198 <HAL_ADC_Init+0x4dc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d018      	beq.n	8001f84 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f66:	4313      	orrs	r3, r2
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	4b89      	ldr	r3, [pc, #548]	@ (800219c <HAL_ADC_Init+0x4e0>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	60d3      	str	r3, [r2, #12]
 8001f82:	e031      	b.n	8001fe8 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f90:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	6a3a      	ldr	r2, [r7, #32]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4b7e      	ldr	r3, [pc, #504]	@ (80021a0 <HAL_ADC_Init+0x4e4>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	6a39      	ldr	r1, [r7, #32]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1a      	ldr	r2, [r3, #32]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	@ (8002198 <HAL_ADC_Init+0x4dc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	f000 8093 	beq.w	800211a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fe38 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 8001ffe:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fe45 	bl	8001c94 <LL_ADC_INJ_IsConversionOngoing>
 800200a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d161      	bne.n	80020d6 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d15e      	bne.n	80020d6 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7f1b      	ldrb	r3, [r3, #28]
 800201c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4960      	ldr	r1, [pc, #384]	@ (80021a4 <HAL_ADC_Init+0x4e8>)
 8002024:	428b      	cmp	r3, r1
 8002026:	d102      	bne.n	800202e <HAL_ADC_Init+0x372>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	e002      	b.n	8002034 <HAL_ADC_Init+0x378>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002032:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002034:	4313      	orrs	r3, r2
 8002036:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6a39      	ldr	r1, [r7, #32]
 800204c:	430b      	orrs	r3, r1
 800204e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff fc2c 	bl	80018c0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800206e:	2b01      	cmp	r3, #1
 8002070:	d11e      	bne.n	80020b0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	4b4a      	ldr	r3, [pc, #296]	@ (80021a8 <HAL_ADC_Init+0x4ec>)
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002086:	0411      	lsls	r1, r2, #16
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800208c:	4311      	orrs	r1, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800209e:	0892      	lsrs	r2, r2, #2
 80020a0:	430a      	orrs	r2, r1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	611a      	str	r2, [r3, #16]
 80020ae:	e007      	b.n	80020c0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d10c      	bne.n	80020f8 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	f023 010f 	bic.w	r1, r3, #15
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f6:	e007      	b.n	8002108 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 020f 	bic.w	r2, r2, #15
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800210c:	f023 0303 	bic.w	r3, r3, #3
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002118:	e092      	b.n	8002240 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002120:	2b01      	cmp	r3, #1
 8002122:	d111      	bne.n	8002148 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800212c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002132:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002138:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4313      	orrs	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <HAL_ADC_Init+0x4f0>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	69f9      	ldr	r1, [r7, #28]
 8002158:	430b      	orrs	r3, r1
 800215a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002164:	461a      	mov	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	f7ff fbcd 	bl	8001906 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002174:	461a      	mov	r2, r3
 8002176:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800217a:	f7ff fbc4 	bl	8001906 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d114      	bne.n	80021b0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f062 020f 	orn	r2, r2, #15
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
 8002196:	e024      	b.n	80021e2 <HAL_ADC_Init+0x526>
 8002198:	46021000 	.word	0x46021000
 800219c:	fff0c013 	.word	0xfff0c013
 80021a0:	ffde800d 	.word	0xffde800d
 80021a4:	42028000 	.word	0x42028000
 80021a8:	fc00f81e 	.word	0xfc00f81e
 80021ac:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021b8:	d113      	bne.n	80021e2 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f003 031c 	and.w	r3, r3, #28
 80021cc:	f06f 020f 	mvn.w	r2, #15
 80021d0:	fa02 f103 	lsl.w	r1, r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_ADC_Init+0x590>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d10b      	bne.n	800220a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021fc:	f023 0303 	bic.w	r3, r3, #3
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002208:	e01a      	b.n	8002240 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800220e:	f023 0312 	bic.w	r3, r3, #18
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800222c:	e008      	b.n	8002240 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002244:	4618      	mov	r0, r3
 8002246:	3728      	adds	r7, #40	@ 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	833ffff3 	.word	0x833ffff3

08002250 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0bc      	sub	sp, #240	@ 0xf0
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4aa8      	ldr	r2, [pc, #672]	@ (800250c <HAL_ADC_ConfigChannel+0x2bc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d103      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x36>
 8002280:	2302      	movs	r3, #2
 8002282:	f000 be6d 	b.w	8002f60 <HAL_ADC_ConfigChannel+0xd10>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fceb 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 864d 	bne.w	8002f3a <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a99      	ldr	r2, [pc, #612]	@ (800250c <HAL_ADC_ConfigChannel+0x2bc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	f000 83ea 	beq.w	8002a80 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d108      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x7a>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	e01d      	b.n	8002306 <HAL_ADC_ConfigChannel+0xb6>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 80022de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 80022e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e004      	b.n	80022fc <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80022f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2201      	movs	r2, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	69d1      	ldr	r1, [r2, #28]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	f7ff fb0f 	bl	8001944 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fc9f 	bl	8001c6e <LL_ADC_REG_IsConversionOngoing>
 8002330:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fcab 	bl	8001c94 <LL_ADC_INJ_IsConversionOngoing>
 800233e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 81ed 	bne.w	8002726 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800234c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 81e8 	bne.w	8002726 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	461a      	mov	r2, r3
 8002364:	f7ff fb9a 	bl	8001a9c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b04      	cmp	r3, #4
 8002388:	d046      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6919      	ldr	r1, [r3, #16]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800239a:	f7ff f9f3 	bl	8001784 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6919      	ldr	r1, [r3, #16]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7ff fa37 	bl	800181e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	7e9b      	ldrb	r3, [r3, #26]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11e      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x17e>
 80023c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x180>
 80023ce:	2300      	movs	r3, #0
 80023d0:	461a      	mov	r2, r3
 80023d2:	f7ff fa5a 	bl	800188a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x19c>
 80023e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80023ea:	e000      	b.n	80023ee <HAL_ADC_ConfigChannel+0x19e>
 80023ec:	2300      	movs	r3, #0
 80023ee:	461a      	mov	r2, r3
 80023f0:	f7ff fa30 	bl	8001854 <LL_ADC_SetOffsetSignedSaturation>
 80023f4:	e197      	b.n	8002726 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2200      	movs	r2, #0
 8002400:	4619      	mov	r1, r3
 8002402:	f7ff fa42 	bl	800188a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	f7ff fa1f 	bl	8001854 <LL_ADC_SetOffsetSignedSaturation>
 8002416:	e186      	b.n	8002726 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f9d1 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1f4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f9c6 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	f003 021f 	and.w	r2, r3, #31
 8002442:	e01e      	b.n	8002482 <HAL_ADC_ConfigChannel+0x232>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f9bb 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 800246a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e004      	b.n	8002480 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <HAL_ADC_ConfigChannel+0x24a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	e018      	b.n	80024cc <HAL_ADC_ConfigChannel+0x27c>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80024ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80024b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80024be:	2320      	movs	r3, #32
 80024c0:	e004      	b.n	80024cc <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80024c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d107      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	f7ff f952 	bl	8001784 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f96d 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x2c0>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2101      	movs	r1, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff f962 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	e020      	b.n	800254e <HAL_ADC_ConfigChannel+0x2fe>
 800250c:	46021000 	.word	0x46021000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f955 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800252e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002536:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e004      	b.n	800254c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002542:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x316>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	e018      	b.n	8002598 <HAL_ADC_ConfigChannel+0x348>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800257a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800257e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e004      	b.n	8002598 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800258e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002598:	429a      	cmp	r2, r3
 800259a:	d107      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2300      	movs	r3, #0
 80025a6:	2101      	movs	r1, #1
 80025a8:	f7ff f8ec 	bl	8001784 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2102      	movs	r1, #2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f907 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x388>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2102      	movs	r1, #2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f8fc 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	f003 021f 	and.w	r2, r3, #31
 80025d6:	e01e      	b.n	8002616 <HAL_ADC_ConfigChannel+0x3c6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2102      	movs	r1, #2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f8f1 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002606:	2320      	movs	r3, #32
 8002608:	e004      	b.n	8002614 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800260a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <HAL_ADC_ConfigChannel+0x3de>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	e018      	b.n	8002660 <HAL_ADC_ConfigChannel+0x410>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800264a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e004      	b.n	8002660 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002660:	429a      	cmp	r2, r3
 8002662:	d107      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2102      	movs	r1, #2
 8002670:	f7ff f888 	bl	8001784 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2103      	movs	r1, #3
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f8a3 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x450>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2103      	movs	r1, #3
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff f898 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	f003 021f 	and.w	r2, r3, #31
 800269e:	e01a      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x486>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2103      	movs	r1, #3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f88d 	bl	80017c6 <LL_ADC_GetOffsetChannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e004      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 80026ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x49e>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	e011      	b.n	8002712 <HAL_ADC_ConfigChannel+0x4c2>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80026fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002706:	2320      	movs	r3, #32
 8002708:	e003      	b.n	8002712 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 800270a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002712:	429a      	cmp	r2, r3
 8002714:	d107      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2300      	movs	r3, #0
 8002720:	2103      	movs	r1, #3
 8002722:	f7ff f82f 	bl	8001784 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fa8c 	bl	8001c48 <LL_ADC_IsEnabled>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 840e 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	461a      	mov	r2, r3
 8002746:	f7ff fa0d 	bl	8001b64 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002752:	f040 80d6 	bne.w	8002902 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <HAL_ADC_ConfigChannel+0x52a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	3301      	adds	r3, #1
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2b09      	cmp	r3, #9
 8002770:	bf94      	ite	ls
 8002772:	2301      	movls	r3, #1
 8002774:	2300      	movhi	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	e019      	b.n	80027ae <HAL_ADC_ConfigChannel+0x55e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800278a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800278c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002792:	2320      	movs	r3, #32
 8002794:	e003      	b.n	800279e <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002796:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04d      	beq.n	800284e <HAL_ADC_ConfigChannel+0x5fe>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x57e>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	3301      	adds	r3, #1
 80027c6:	069b      	lsls	r3, r3, #26
 80027c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027cc:	e015      	b.n	80027fa <HAL_ADC_ConfigChannel+0x5aa>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80027ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	069b      	lsls	r3, r3, #26
 80027f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_ADC_ConfigChannel+0x5ca>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	3301      	adds	r3, #1
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	e017      	b.n	800284a <HAL_ADC_ConfigChannel+0x5fa>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800282c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e003      	b.n	800283e <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	e04e      	b.n	80028ec <HAL_ADC_ConfigChannel+0x69c>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_ADC_ConfigChannel+0x61a>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	3301      	adds	r3, #1
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002868:	e015      	b.n	8002896 <HAL_ADC_ConfigChannel+0x646>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800287c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x666>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	e017      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x696>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80028d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80028fe:	f7ff f8cd 	bl	8001a9c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f280 8324 	bge.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a99      	ldr	r2, [pc, #612]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x6ca>
 8002916:	4b99      	ldr	r3, [pc, #612]	@ (8002b7c <HAL_ADC_ConfigChannel+0x92c>)
 8002918:	e000      	b.n	800291c <HAL_ADC_ConfigChannel+0x6cc>
 800291a:	4b99      	ldr	r3, [pc, #612]	@ (8002b80 <HAL_ADC_ConfigChannel+0x930>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe ff03 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 8002922:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a93      	ldr	r2, [pc, #588]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d109      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x6f4>
 8002930:	4891      	ldr	r0, [pc, #580]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 8002932:	f7ff f989 	bl	8001c48 <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e008      	b.n	8002956 <HAL_ADC_ConfigChannel+0x706>
 8002944:	488f      	ldr	r0, [pc, #572]	@ (8002b84 <HAL_ADC_ConfigChannel+0x934>)
 8002946:	f7ff f97f 	bl	8001c48 <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8088 	beq.w	8002a6c <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a89      	ldr	r2, [pc, #548]	@ (8002b88 <HAL_ADC_ConfigChannel+0x938>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d132      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800296a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d12c      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a80      	ldr	r2, [pc, #512]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d005      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x738>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a80      	ldr	r2, [pc, #512]	@ (8002b84 <HAL_ADC_ConfigChannel+0x934>)
 8002982:	4293      	cmp	r3, r2
 8002984:	f040 82e3 	bne.w	8002f4e <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a7a      	ldr	r2, [pc, #488]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x746>
 8002992:	4a7a      	ldr	r2, [pc, #488]	@ (8002b7c <HAL_ADC_ConfigChannel+0x92c>)
 8002994:	e000      	b.n	8002998 <HAL_ADC_ConfigChannel+0x748>
 8002996:	4a7a      	ldr	r2, [pc, #488]	@ (8002b80 <HAL_ADC_ConfigChannel+0x930>)
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7fe fead 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a8:	4b78      	ldr	r3, [pc, #480]	@ (8002b8c <HAL_ADC_ConfigChannel+0x93c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	4a78      	ldr	r2, [pc, #480]	@ (8002b90 <HAL_ADC_ConfigChannel+0x940>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80029ba:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80029bc:	e002      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f9      	bne.n	80029be <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ca:	e2c0      	b.n	8002f4e <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a70      	ldr	r2, [pc, #448]	@ (8002b94 <HAL_ADC_ConfigChannel+0x944>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d121      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11b      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a64      	ldr	r2, [pc, #400]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d005      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0x7a8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a64      	ldr	r2, [pc, #400]	@ (8002b84 <HAL_ADC_ConfigChannel+0x934>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	f040 82ad 	bne.w	8002f52 <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x7b6>
 8002a02:	4a5e      	ldr	r2, [pc, #376]	@ (8002b7c <HAL_ADC_ConfigChannel+0x92c>)
 8002a04:	e000      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x7b8>
 8002a06:	4a5e      	ldr	r2, [pc, #376]	@ (8002b80 <HAL_ADC_ConfigChannel+0x930>)
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7fe fe75 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a18:	e29b      	b.n	8002f52 <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002b98 <HAL_ADC_ConfigChannel+0x948>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	f040 8297 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8290 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4f      	ldr	r2, [pc, #316]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d005      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x7fa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a50      	ldr	r2, [pc, #320]	@ (8002b84 <HAL_ADC_ConfigChannel+0x934>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	f040 8285 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b78 <HAL_ADC_ConfigChannel+0x928>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x808>
 8002a54:	4a49      	ldr	r2, [pc, #292]	@ (8002b7c <HAL_ADC_ConfigChannel+0x92c>)
 8002a56:	e000      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x80a>
 8002a58:	4a49      	ldr	r2, [pc, #292]	@ (8002b80 <HAL_ADC_ConfigChannel+0x930>)
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f7fe fe4c 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8002a6a:	e273      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8002a7e:	e269      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f000 8191 	beq.w	8002db4 <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a9a:	d004      	beq.n	8002aa6 <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8002b9c <HAL_ADC_ConfigChannel+0x94c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d107      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ffa8 	bl	8001a04 <LL_ADC_REG_SetSequencerChAdd>
 8002ab4:	e0b0      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	401a      	ands	r2, r3
 8002ace:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ad2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x896>
 8002ada:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	e011      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x8ba>
 8002ae6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e003      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 8002b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	6849      	ldr	r1, [r1, #4]
 8002b0e:	f001 011f 	and.w	r1, r1, #31
 8002b12:	408b      	lsls	r3, r1
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d875      	bhi.n	8002c18 <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002b2c:	f7fe fdc8 	bl	80016c0 <HAL_GetREVID>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b36:	d866      	bhi.n	8002c06 <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8002b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002b3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x90a>
 8002b44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b13      	cmp	r3, #19
 8002b50:	bf8c      	ite	hi
 8002b52:	2301      	movhi	r3, #1
 8002b54:	2300      	movls	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	e02b      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x962>
 8002b5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002b5e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	61bb      	str	r3, [r7, #24]
  return result;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e018      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x958>
 8002b76:	bf00      	nop
 8002b78:	42028000 	.word	0x42028000
 8002b7c:	42028308 	.word	0x42028308
 8002b80:	46021308 	.word	0x46021308
 8002b84:	46021000 	.word	0x46021000
 8002b88:	ce080000 	.word	0xce080000
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	053e2d63 	.word	0x053e2d63
 8002b94:	ca040000 	.word	0xca040000
 8002b98:	80000001 	.word	0x80000001
 8002b9c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b13      	cmp	r3, #19
 8002baa:	bf8c      	ite	hi
 8002bac:	2301      	movhi	r3, #1
 8002bae:	2300      	movls	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d027      	beq.n	8002c06 <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8002bb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002bba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x986>
 8002bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	3b09      	subs	r3, #9
 8002bce:	2201      	movs	r2, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	e015      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x9b2>
 8002bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002bda:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	60fb      	str	r3, [r7, #12]
  return result;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3b09      	subs	r3, #9
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fe fe96 	bl	8001944 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002c26:	f7fe ff39 	bl	8001a9c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f280 8190 	bge.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a97      	ldr	r2, [pc, #604]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x9f2>
 8002c3e:	4b97      	ldr	r3, [pc, #604]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x9f4>
 8002c42:	4b97      	ldr	r3, [pc, #604]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fd6f 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 8002c4a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a94      	ldr	r2, [pc, #592]	@ (8002ea4 <HAL_ADC_ConfigChannel+0xc54>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d126      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d120      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a8b      	ldr	r2, [pc, #556]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0xa22>
 8002c6e:	4a8b      	ldr	r2, [pc, #556]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002c70:	e000      	b.n	8002c74 <HAL_ADC_ConfigChannel+0xa24>
 8002c72:	4a8b      	ldr	r2, [pc, #556]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f7fe fd3f 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c84:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xc58>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	4a88      	ldr	r2, [pc, #544]	@ (8002eac <HAL_ADC_ConfigChannel+0xc5c>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c96:	e002      	b.n	8002c9e <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f9      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002ca4:	e067      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a81      	ldr	r2, [pc, #516]	@ (8002eb0 <HAL_ADC_ConfigChannel+0xc60>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d116      	bne.n	8002cde <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d110      	bne.n	8002cde <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a75      	ldr	r2, [pc, #468]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0xa7a>
 8002cc6:	4a75      	ldr	r2, [pc, #468]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_ConfigChannel+0xa7c>
 8002cca:	4a75      	ldr	r2, [pc, #468]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f7fe fd13 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8002cdc:	e04b      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a74      	ldr	r2, [pc, #464]	@ (8002eb4 <HAL_ADC_ConfigChannel+0xc64>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d116      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d110      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a67      	ldr	r2, [pc, #412]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0xab2>
 8002cfe:	4a67      	ldr	r2, [pc, #412]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002d00:	e000      	b.n	8002d04 <HAL_ADC_ConfigChannel+0xab4>
 8002d02:	4a67      	ldr	r2, [pc, #412]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7fe fcf7 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8002d14:	e02f      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a67      	ldr	r2, [pc, #412]	@ (8002eb8 <HAL_ADC_ConfigChannel+0xc68>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d12a      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d124      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a62      	ldr	r2, [pc, #392]	@ (8002ebc <HAL_ADC_ConfigChannel+0xc6c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d11f      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0xaf4>
 8002d40:	4a56      	ldr	r2, [pc, #344]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002d42:	e000      	b.n	8002d46 <HAL_ADC_ConfigChannel+0xaf6>
 8002d44:	4a56      	ldr	r2, [pc, #344]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7fe fcd6 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002d56:	f7fe fcb3 	bl	80016c0 <HAL_GetREVID>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d60:	d809      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002d76:	f7fe fca3 	bl	80016c0 <HAL_GetREVID>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d80:	f040 80e8 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec0 <HAL_ADC_ConfigChannel+0xc70>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f040 80e2 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 80db 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002db2:	e0cf      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dbc:	d004      	beq.n	8002dc8 <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002dc2:	4a40      	ldr	r2, [pc, #256]	@ (8002ec4 <HAL_ADC_ConfigChannel+0xc74>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d106      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fe4a 	bl	8001a6a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f280 80ba 	bge.w	8002f54 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0xb9e>
 8002dea:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_ConfigChannel+0xba0>
 8002dee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fc99 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 8002df6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <HAL_ADC_ConfigChannel+0xc78>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d110      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0xbc2>
 8002e0e:	4a23      	ldr	r2, [pc, #140]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002e10:	e000      	b.n	8002e14 <HAL_ADC_ConfigChannel+0xbc4>
 8002e12:	4a23      	ldr	r2, [pc, #140]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e18:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f7fe fc6f 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8002e24:	e06d      	b.n	8002f02 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a28      	ldr	r2, [pc, #160]	@ (8002ecc <HAL_ADC_ConfigChannel+0xc7c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d110      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a18      	ldr	r2, [pc, #96]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0xbee>
 8002e3a:	4a18      	ldr	r2, [pc, #96]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_ConfigChannel+0xbf0>
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f7fe fc59 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8002e50:	e057      	b.n	8002f02 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a17      	ldr	r2, [pc, #92]	@ (8002eb4 <HAL_ADC_ConfigChannel+0xc64>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d110      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0xc1a>
 8002e66:	4a0d      	ldr	r2, [pc, #52]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002e68:	e000      	b.n	8002e6c <HAL_ADC_ConfigChannel+0xc1c>
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xc50>)
 8002e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e70:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f7fe fc43 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8002e7c:	e041      	b.n	8002f02 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <HAL_ADC_ConfigChannel+0xc68>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d13c      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a02      	ldr	r2, [pc, #8]	@ (8002e98 <HAL_ADC_ConfigChannel+0xc48>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d11e      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0xc80>
 8002e92:	4a02      	ldr	r2, [pc, #8]	@ (8002e9c <HAL_ADC_ConfigChannel+0xc4c>)
 8002e94:	e01d      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0xc82>
 8002e96:	bf00      	nop
 8002e98:	42028000 	.word	0x42028000
 8002e9c:	42028308 	.word	0x42028308
 8002ea0:	46021308 	.word	0x46021308
 8002ea4:	b6002000 	.word	0xb6002000
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	053e2d63 	.word	0x053e2d63
 8002eb0:	ba004000 	.word	0xba004000
 8002eb4:	80000001 	.word	0x80000001
 8002eb8:	b2001000 	.word	0xb2001000
 8002ebc:	46021000 	.word	0x46021000
 8002ec0:	d7200000 	.word	0xd7200000
 8002ec4:	80000010 	.word	0x80000010
 8002ec8:	ce080000 	.word	0xce080000
 8002ecc:	ca040000 	.word	0xca040000
 8002ed0:	4a25      	ldr	r2, [pc, #148]	@ (8002f68 <HAL_ADC_ConfigChannel+0xd18>)
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f7fe fc10 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002ee2:	f7fe fbed 	bl	80016c0 <HAL_GetREVID>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eec:	d809      	bhi.n	8002f02 <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002f02:	f7fe fbdd 	bl	80016c0 <HAL_GetREVID>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0c:	d122      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a16      	ldr	r2, [pc, #88]	@ (8002f6c <HAL_ADC_ConfigChannel+0xd1c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d11d      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d117      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002f38:	e00c      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8002f4c:	e002      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f52:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8002f5c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	37f0      	adds	r7, #240	@ 0xf0
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	46021308 	.word	0x46021308
 8002f6c:	d7200000 	.word	0xd7200000

08002f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f80:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 0307 	and.w	r3, r3, #7
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db0b      	blt.n	8002ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4907      	ldr	r1, [pc, #28]	@ (800300c <__NVIC_EnableIRQ+0x38>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	@ (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	@ (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ff4c 	bl	8002f70 <__NVIC_SetPriorityGrouping>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030ee:	f7ff ff63 	bl	8002fb8 <__NVIC_GetPriorityGrouping>
 80030f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7ff ffb3 	bl	8003064 <NVIC_EncodePriority>
 80030fe:	4602      	mov	r2, r0
 8003100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff82 	bl	8003010 <__NVIC_SetPriority>
}
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff56 	bl	8002fd4 <__NVIC_EnableIRQ>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003140:	d301      	bcc.n	8003146 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003142:	2301      	movs	r3, #1
 8003144:	e00d      	b.n	8003162 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <HAL_SYSTICK_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800314e:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <HAL_SYSTICK_Config+0x40>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003154:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_SYSTICK_Config+0x40>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <HAL_SYSTICK_Config+0x40>)
 800315a:	f043 0303 	orr.w	r3, r3, #3
 800315e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d844      	bhi.n	800320c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031ab 	.word	0x080031ab
 800318c:	080031c9 	.word	0x080031c9
 8003190:	080031eb 	.word	0x080031eb
 8003194:	0800320d 	.word	0x0800320d
 8003198:	0800319d 	.word	0x0800319d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800319c:	4b1f      	ldr	r3, [pc, #124]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6013      	str	r3, [r2, #0]
      break;
 80031a8:	e031      	b.n	800320e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80031aa:	4b1c      	ldr	r3, [pc, #112]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031bc:	4a18      	ldr	r2, [pc, #96]	@ (8003220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80031c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80031c6:	e022      	b.n	800320e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a13      	ldr	r2, [pc, #76]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80031d4:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80031de:	4a10      	ldr	r2, [pc, #64]	@ (8003220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80031e8:	e011      	b.n	800320e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a0b      	ldr	r2, [pc, #44]	@ (800321c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003200:	4a07      	ldr	r2, [pc, #28]	@ (8003220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003202:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800320a:	e000      	b.n	800320e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800320c:	bf00      	nop
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e010 	.word	0xe000e010
 8003220:	46020c00 	.word	0x46020c00

08003224 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800322a:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003236:	2304      	movs	r3, #4
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	e021      	b.n	8003280 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800323c:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003242:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003246:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800324e:	d011      	beq.n	8003274 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003256:	d810      	bhi.n	800327a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003264:	d003      	beq.n	800326e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003266:	e008      	b.n	800327a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
        break;
 800326c:	e008      	b.n	8003280 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800326e:	2301      	movs	r3, #1
 8003270:	607b      	str	r3, [r7, #4]
        break;
 8003272:	e005      	b.n	8003280 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003274:	2302      	movs	r3, #2
 8003276:	607b      	str	r3, [r7, #4]
        break;
 8003278:	e002      	b.n	8003280 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
        break;
 800327e:	bf00      	nop
    }
  }
  return systick_source;
 8003280:	687b      	ldr	r3, [r7, #4]
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010
 8003294:	46020c00 	.word	0x46020c00

08003298 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80032a8:	f023 030f 	bic.w	r3, r3, #15
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b6:	3b50      	subs	r3, #80	@ 0x50
 80032b8:	09db      	lsrs	r3, r3, #7
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2201      	movs	r2, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 813b 	beq.w	800354e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d011      	beq.n	800330a <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032fc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003314:	2b00      	cmp	r3, #0
 8003316:	d011      	beq.n	800333c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800332e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	f043 0202 	orr.w	r2, r3, #2
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003360:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d011      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003392:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003398:	f043 0208 	orr.w	r2, r3, #8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d013      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c4:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d04c      	beq.n	800347e <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d045      	beq.n	800347e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033fa:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b04      	cmp	r3, #4
 8003406:	d12e      	bne.n	8003466 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003416:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0202 	orr.w	r2, r2, #2
 8003426:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003440:	2201      	movs	r2, #1
 8003442:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2200      	movs	r2, #0
 800344a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d07a      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
        }

        return;
 8003464:	e075      	b.n	8003552 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2205      	movs	r2, #5
 800346a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d039      	beq.n	8003500 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d032      	beq.n	8003500 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d012      	beq.n	80034cc <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d116      	bne.n	80034de <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d111      	bne.n	80034de <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c6:	2201      	movs	r2, #1
 80034c8:	731a      	strb	r2, [r3, #12]
 80034ca:	e008      	b.n	80034de <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80034e6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	2b00      	cmp	r3, #0
 8003506:	d025      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0202 	orr.w	r2, r2, #2
 8003516:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003530:	2201      	movs	r2, #1
 8003532:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e002      	b.n	8003554 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003552:	bf00      	nop
    }
  }
}
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e02b      	b.n	80035c6 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003576:	f023 030f 	bic.w	r3, r3, #15
 800357a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	3b50      	subs	r3, #80	@ 0x50
 8003586:	09db      	lsrs	r3, r3, #7
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2201      	movs	r2, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f003 0311 	and.w	r3, r3, #17
 80035a4:	2b11      	cmp	r3, #17
 80035a6:	d106      	bne.n	80035b6 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	e006      	b.n	80035c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	43db      	mvns	r3, r3
 80035be:	401a      	ands	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7fe f864 	bl	80016a8 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0db      	b.n	80037a4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_DMAEx_List_Init+0x1d8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f000 809f 	beq.w	8003736 <HAL_DMAEx_List_Init+0x162>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6c      	ldr	r2, [pc, #432]	@ (80037b0 <HAL_DMAEx_List_Init+0x1dc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f000 8099 	beq.w	8003736 <HAL_DMAEx_List_Init+0x162>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a6a      	ldr	r2, [pc, #424]	@ (80037b4 <HAL_DMAEx_List_Init+0x1e0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	f000 8093 	beq.w	8003736 <HAL_DMAEx_List_Init+0x162>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a68      	ldr	r2, [pc, #416]	@ (80037b8 <HAL_DMAEx_List_Init+0x1e4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f000 808d 	beq.w	8003736 <HAL_DMAEx_List_Init+0x162>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a66      	ldr	r2, [pc, #408]	@ (80037bc <HAL_DMAEx_List_Init+0x1e8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	f000 8087 	beq.w	8003736 <HAL_DMAEx_List_Init+0x162>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a64      	ldr	r2, [pc, #400]	@ (80037c0 <HAL_DMAEx_List_Init+0x1ec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	f000 8081 	beq.w	8003736 <HAL_DMAEx_List_Init+0x162>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a62      	ldr	r2, [pc, #392]	@ (80037c4 <HAL_DMAEx_List_Init+0x1f0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d07b      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a61      	ldr	r2, [pc, #388]	@ (80037c8 <HAL_DMAEx_List_Init+0x1f4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d076      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a5f      	ldr	r2, [pc, #380]	@ (80037cc <HAL_DMAEx_List_Init+0x1f8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d071      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5e      	ldr	r2, [pc, #376]	@ (80037d0 <HAL_DMAEx_List_Init+0x1fc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d06c      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5c      	ldr	r2, [pc, #368]	@ (80037d4 <HAL_DMAEx_List_Init+0x200>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d067      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5b      	ldr	r2, [pc, #364]	@ (80037d8 <HAL_DMAEx_List_Init+0x204>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d062      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a59      	ldr	r2, [pc, #356]	@ (80037dc <HAL_DMAEx_List_Init+0x208>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d05d      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a58      	ldr	r2, [pc, #352]	@ (80037e0 <HAL_DMAEx_List_Init+0x20c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d058      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a56      	ldr	r2, [pc, #344]	@ (80037e4 <HAL_DMAEx_List_Init+0x210>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d053      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a55      	ldr	r2, [pc, #340]	@ (80037e8 <HAL_DMAEx_List_Init+0x214>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04e      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a53      	ldr	r2, [pc, #332]	@ (80037ec <HAL_DMAEx_List_Init+0x218>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d049      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a52      	ldr	r2, [pc, #328]	@ (80037f0 <HAL_DMAEx_List_Init+0x21c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d044      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a50      	ldr	r2, [pc, #320]	@ (80037f4 <HAL_DMAEx_List_Init+0x220>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03f      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4f      	ldr	r2, [pc, #316]	@ (80037f8 <HAL_DMAEx_List_Init+0x224>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03a      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a4d      	ldr	r2, [pc, #308]	@ (80037fc <HAL_DMAEx_List_Init+0x228>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d035      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003800 <HAL_DMAEx_List_Init+0x22c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d030      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003804 <HAL_DMAEx_List_Init+0x230>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02b      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a49      	ldr	r2, [pc, #292]	@ (8003808 <HAL_DMAEx_List_Init+0x234>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d026      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a47      	ldr	r2, [pc, #284]	@ (800380c <HAL_DMAEx_List_Init+0x238>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d021      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a46      	ldr	r2, [pc, #280]	@ (8003810 <HAL_DMAEx_List_Init+0x23c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01c      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a44      	ldr	r2, [pc, #272]	@ (8003814 <HAL_DMAEx_List_Init+0x240>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d017      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a43      	ldr	r2, [pc, #268]	@ (8003818 <HAL_DMAEx_List_Init+0x244>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d012      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a41      	ldr	r2, [pc, #260]	@ (800381c <HAL_DMAEx_List_Init+0x248>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00d      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a40      	ldr	r2, [pc, #256]	@ (8003820 <HAL_DMAEx_List_Init+0x24c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d008      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3e      	ldr	r2, [pc, #248]	@ (8003824 <HAL_DMAEx_List_Init+0x250>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <HAL_DMAEx_List_Init+0x162>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3d      	ldr	r2, [pc, #244]	@ (8003828 <HAL_DMAEx_List_Init+0x254>)
 8003734:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0206 	orr.w	r2, r2, #6
 8003754:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003756:	e00f      	b.n	8003778 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003758:	f7fd ffa6 	bl	80016a8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b05      	cmp	r3, #5
 8003764:	d908      	bls.n	8003778 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2210      	movs	r2, #16
 800376a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2203      	movs	r2, #3
 8003770:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e015      	b.n	80037a4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e8      	bne.n	8003758 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fad0 	bl	8003d2c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40020050 	.word	0x40020050
 80037b0:	50020050 	.word	0x50020050
 80037b4:	400200d0 	.word	0x400200d0
 80037b8:	500200d0 	.word	0x500200d0
 80037bc:	40020150 	.word	0x40020150
 80037c0:	50020150 	.word	0x50020150
 80037c4:	400201d0 	.word	0x400201d0
 80037c8:	500201d0 	.word	0x500201d0
 80037cc:	40020250 	.word	0x40020250
 80037d0:	50020250 	.word	0x50020250
 80037d4:	400202d0 	.word	0x400202d0
 80037d8:	500202d0 	.word	0x500202d0
 80037dc:	40020350 	.word	0x40020350
 80037e0:	50020350 	.word	0x50020350
 80037e4:	400203d0 	.word	0x400203d0
 80037e8:	500203d0 	.word	0x500203d0
 80037ec:	40020450 	.word	0x40020450
 80037f0:	50020450 	.word	0x50020450
 80037f4:	400204d0 	.word	0x400204d0
 80037f8:	500204d0 	.word	0x500204d0
 80037fc:	40020550 	.word	0x40020550
 8003800:	50020550 	.word	0x50020550
 8003804:	400205d0 	.word	0x400205d0
 8003808:	500205d0 	.word	0x500205d0
 800380c:	40020650 	.word	0x40020650
 8003810:	50020650 	.word	0x50020650
 8003814:	400206d0 	.word	0x400206d0
 8003818:	500206d0 	.word	0x500206d0
 800381c:	40020750 	.word	0x40020750
 8003820:	50020750 	.word	0x50020750
 8003824:	400207d0 	.word	0x400207d0
 8003828:	500207d0 	.word	0x500207d0

0800382c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_DMAEx_List_Start_IT+0x16>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e082      	b.n	800394c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800384c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003858:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d005      	beq.n	800386c <HAL_DMAEx_List_Start_IT+0x40>
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d16a      	bne.n	800393c <HAL_DMAEx_List_Start_IT+0x110>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d067      	beq.n	800393c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d157      	bne.n	8003928 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_DMAEx_List_Start_IT+0x5a>
 8003882:	2302      	movs	r3, #2
 8003884:	e062      	b.n	800394c <HAL_DMAEx_List_Start_IT+0x120>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389a:	2202      	movs	r2, #2
 800389c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80038ba:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038ea:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f107 010c 	add.w	r1, r7, #12
 80038f6:	2200      	movs	r2, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fe3d 	bl	8004578 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	0c0b      	lsrs	r3, r1, #16
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800391c:	4013      	ands	r3, r2
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	430b      	orrs	r3, r1
 8003926:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e007      	b.n	800394c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2240      	movs	r2, #64	@ 0x40
 8003940:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_DMAEx_List_BuildNode+0x16>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e004      	b.n	8003978 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fb33 	bl	8003fdc <DMA_List_BuildNode>

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e004      	b.n	80039a4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fc75 	bl	800428c <DMA_List_GetNodeConfig>

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	@ 0x30
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_DMAEx_List_InsertNode+0x18>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b6      	b.n	8003b36 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d104      	bne.n	80039da <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2204      	movs	r2, #4
 80039d4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0ad      	b.n	8003b36 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fd5c 	bl	80044a0 <DMA_List_CheckNodesBaseAddresses>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2205      	movs	r2, #5
 80039f2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e09e      	b.n	8003b36 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fd7d 	bl	8004500 <DMA_List_CheckNodesTypes>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e08f      	b.n	8003b36 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003a22:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fda3 	bl	8004578 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11a      	bne.n	8003a70 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	e06c      	b.n	8003b28 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a60:	4319      	orrs	r1, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	e05b      	b.n	8003b28 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003a80:	4013      	ands	r3, r2
 8003a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a86:	4319      	orrs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e043      	b.n	8003b1e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8003a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a98:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fd98 	bl	80045d8 <DMA_List_FindNode>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d132      	bne.n	8003b14 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d11a      	bne.n	8003aee <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003aca:	4013      	ands	r3, r2
 8003acc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ad0:	4319      	orrs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003ade:	4013      	ands	r3, r2
 8003ae0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ae4:	4319      	orrs	r1, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003aec:	e017      	b.n	8003b1e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b04:	4013      	ands	r3, r2
 8003b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b0a:	4319      	orrs	r1, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b12:	e004      	b.n	8003b1e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2206      	movs	r2, #6
 8003b18:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00b      	b.n	8003b36 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3730      	adds	r7, #48	@ 0x30
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b08a      	sub	sp, #40	@ 0x28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e052      	b.n	8003bf6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e049      	b.n	8003bf6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d101      	bne.n	8003b7a <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e03d      	b.n	8003bf6 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e038      	b.n	8003bf6 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d104      	bne.n	8003b96 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e02f      	b.n	8003bf6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f107 0220 	add.w	r2, r7, #32
 8003baa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fce2 	bl	8004578 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fd09 	bl	80045d8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003bda:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003bdc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3728      	adds	r7, #40	@ 0x28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_DMAEx_List_LinkQ+0x16>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e072      	b.n	8003d00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c20:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d002      	beq.n	8003c34 <HAL_DMAEx_List_LinkQ+0x34>
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d108      	bne.n	8003c46 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2240      	movs	r2, #64	@ 0x40
 8003c38:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e05c      	b.n	8003d00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	7b1b      	ldrb	r3, [r3, #12]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d104      	bne.n	8003c5a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2201      	movs	r2, #1
 8003c54:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e052      	b.n	8003d00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d0c <HAL_DMAEx_List_LinkQ+0x10c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d022      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0xaa>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a29      	ldr	r2, [pc, #164]	@ (8003d10 <HAL_DMAEx_List_LinkQ+0x110>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01d      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0xaa>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a28      	ldr	r2, [pc, #160]	@ (8003d14 <HAL_DMAEx_List_LinkQ+0x114>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d018      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0xaa>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	@ (8003d18 <HAL_DMAEx_List_LinkQ+0x118>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0xaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a25      	ldr	r2, [pc, #148]	@ (8003d1c <HAL_DMAEx_List_LinkQ+0x11c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0xaa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a23      	ldr	r2, [pc, #140]	@ (8003d20 <HAL_DMAEx_List_LinkQ+0x120>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0xaa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	@ (8003d24 <HAL_DMAEx_List_LinkQ+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0xaa>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a20      	ldr	r2, [pc, #128]	@ (8003d28 <HAL_DMAEx_List_LinkQ+0x128>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_DMAEx_List_LinkQ+0xae>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_DMAEx_List_LinkQ+0xb0>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e019      	b.n	8003d00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd0:	2b81      	cmp	r3, #129	@ 0x81
 8003cd2:	d108      	bne.n	8003ce6 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10d      	bne.n	8003cf8 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00c      	b.n	8003d00 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e003      	b.n	8003d00 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40020650 	.word	0x40020650
 8003d10:	50020650 	.word	0x50020650
 8003d14:	400206d0 	.word	0x400206d0
 8003d18:	500206d0 	.word	0x500206d0
 8003d1c:	40020750 	.word	0x40020750
 8003d20:	50020750 	.word	0x50020750
 8003d24:	400207d0 	.word	0x400207d0
 8003d28:	500207d0 	.word	0x500207d0

08003d2c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a85      	ldr	r2, [pc, #532]	@ (8003f5c <DMA_List_Init+0x230>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f000 80a0 	beq.w	8003e8c <DMA_List_Init+0x160>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a83      	ldr	r2, [pc, #524]	@ (8003f60 <DMA_List_Init+0x234>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	f000 809a 	beq.w	8003e8c <DMA_List_Init+0x160>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a81      	ldr	r2, [pc, #516]	@ (8003f64 <DMA_List_Init+0x238>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	f000 8094 	beq.w	8003e8c <DMA_List_Init+0x160>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a7f      	ldr	r2, [pc, #508]	@ (8003f68 <DMA_List_Init+0x23c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	f000 808e 	beq.w	8003e8c <DMA_List_Init+0x160>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a7d      	ldr	r2, [pc, #500]	@ (8003f6c <DMA_List_Init+0x240>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	f000 8088 	beq.w	8003e8c <DMA_List_Init+0x160>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a7b      	ldr	r2, [pc, #492]	@ (8003f70 <DMA_List_Init+0x244>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	f000 8082 	beq.w	8003e8c <DMA_List_Init+0x160>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a79      	ldr	r2, [pc, #484]	@ (8003f74 <DMA_List_Init+0x248>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d07c      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a78      	ldr	r2, [pc, #480]	@ (8003f78 <DMA_List_Init+0x24c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d077      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a76      	ldr	r2, [pc, #472]	@ (8003f7c <DMA_List_Init+0x250>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d072      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a75      	ldr	r2, [pc, #468]	@ (8003f80 <DMA_List_Init+0x254>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d06d      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a73      	ldr	r2, [pc, #460]	@ (8003f84 <DMA_List_Init+0x258>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d068      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a72      	ldr	r2, [pc, #456]	@ (8003f88 <DMA_List_Init+0x25c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d063      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a70      	ldr	r2, [pc, #448]	@ (8003f8c <DMA_List_Init+0x260>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d05e      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8003f90 <DMA_List_Init+0x264>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d059      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6d      	ldr	r2, [pc, #436]	@ (8003f94 <DMA_List_Init+0x268>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d054      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6c      	ldr	r2, [pc, #432]	@ (8003f98 <DMA_List_Init+0x26c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04f      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f9c <DMA_List_Init+0x270>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d04a      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a69      	ldr	r2, [pc, #420]	@ (8003fa0 <DMA_List_Init+0x274>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d045      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a67      	ldr	r2, [pc, #412]	@ (8003fa4 <DMA_List_Init+0x278>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d040      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a66      	ldr	r2, [pc, #408]	@ (8003fa8 <DMA_List_Init+0x27c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d03b      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a64      	ldr	r2, [pc, #400]	@ (8003fac <DMA_List_Init+0x280>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d036      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a63      	ldr	r2, [pc, #396]	@ (8003fb0 <DMA_List_Init+0x284>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d031      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a61      	ldr	r2, [pc, #388]	@ (8003fb4 <DMA_List_Init+0x288>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02c      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a60      	ldr	r2, [pc, #384]	@ (8003fb8 <DMA_List_Init+0x28c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d027      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5e      	ldr	r2, [pc, #376]	@ (8003fbc <DMA_List_Init+0x290>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5d      	ldr	r2, [pc, #372]	@ (8003fc0 <DMA_List_Init+0x294>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc4 <DMA_List_Init+0x298>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fc8 <DMA_List_Init+0x29c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a58      	ldr	r2, [pc, #352]	@ (8003fcc <DMA_List_Init+0x2a0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a57      	ldr	r2, [pc, #348]	@ (8003fd0 <DMA_List_Init+0x2a4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a55      	ldr	r2, [pc, #340]	@ (8003fd4 <DMA_List_Init+0x2a8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <DMA_List_Init+0x160>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a54      	ldr	r2, [pc, #336]	@ (8003fd8 <DMA_List_Init+0x2ac>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <DMA_List_Init+0x164>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <DMA_List_Init+0x166>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a36      	ldr	r2, [pc, #216]	@ (8003fbc <DMA_List_Init+0x290>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <DMA_List_Init+0x202>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a34      	ldr	r2, [pc, #208]	@ (8003fc0 <DMA_List_Init+0x294>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <DMA_List_Init+0x202>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a33      	ldr	r2, [pc, #204]	@ (8003fc4 <DMA_List_Init+0x298>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <DMA_List_Init+0x202>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a31      	ldr	r2, [pc, #196]	@ (8003fc8 <DMA_List_Init+0x29c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <DMA_List_Init+0x202>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a30      	ldr	r2, [pc, #192]	@ (8003fcc <DMA_List_Init+0x2a0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <DMA_List_Init+0x202>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd0 <DMA_List_Init+0x2a4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <DMA_List_Init+0x202>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fd4 <DMA_List_Init+0x2a8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <DMA_List_Init+0x202>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd8 <DMA_List_Init+0x2ac>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <DMA_List_Init+0x206>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <DMA_List_Init+0x208>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2200      	movs	r2, #0
 8003f46:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40020050 	.word	0x40020050
 8003f60:	50020050 	.word	0x50020050
 8003f64:	400200d0 	.word	0x400200d0
 8003f68:	500200d0 	.word	0x500200d0
 8003f6c:	40020150 	.word	0x40020150
 8003f70:	50020150 	.word	0x50020150
 8003f74:	400201d0 	.word	0x400201d0
 8003f78:	500201d0 	.word	0x500201d0
 8003f7c:	40020250 	.word	0x40020250
 8003f80:	50020250 	.word	0x50020250
 8003f84:	400202d0 	.word	0x400202d0
 8003f88:	500202d0 	.word	0x500202d0
 8003f8c:	40020350 	.word	0x40020350
 8003f90:	50020350 	.word	0x50020350
 8003f94:	400203d0 	.word	0x400203d0
 8003f98:	500203d0 	.word	0x500203d0
 8003f9c:	40020450 	.word	0x40020450
 8003fa0:	50020450 	.word	0x50020450
 8003fa4:	400204d0 	.word	0x400204d0
 8003fa8:	500204d0 	.word	0x500204d0
 8003fac:	40020550 	.word	0x40020550
 8003fb0:	50020550 	.word	0x50020550
 8003fb4:	400205d0 	.word	0x400205d0
 8003fb8:	500205d0 	.word	0x500205d0
 8003fbc:	40020650 	.word	0x40020650
 8003fc0:	50020650 	.word	0x50020650
 8003fc4:	400206d0 	.word	0x400206d0
 8003fc8:	500206d0 	.word	0x500206d0
 8003fcc:	40020750 	.word	0x40020750
 8003fd0:	50020750 	.word	0x50020750
 8003fd4:	400207d0 	.word	0x400207d0
 8003fd8:	500207d0 	.word	0x500207d0

08003fdc <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003fee:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003ff4:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003ffa:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004000:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	051b      	lsls	r3, r3, #20
 8004028:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800402c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	3b01      	subs	r3, #1
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800403a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800403c:	431a      	orrs	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	f240 237f 	movw	r3, #639	@ 0x27f
 800404e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004050:	431a      	orrs	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405e:	d10c      	bne.n	800407a <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d011      	beq.n	8004090 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	e00a      	b.n	8004090 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004082:	d105      	bne.n	8004090 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00f      	beq.n	80040b8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80040b0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80040b2:	431a      	orrs	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040bc:	b29a      	uxth	r2, r3
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d04e      	beq.n	800416c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d6:	3b01      	subs	r3, #1
 80040d8:	0419      	lsls	r1, r3, #16
 80040da:	4b6a      	ldr	r3, [pc, #424]	@ (8004284 <DMA_List_BuildNode+0x2a8>)
 80040dc:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80040de:	431a      	orrs	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da06      	bge.n	80040fa <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	e005      	b.n	8004106 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	2b00      	cmp	r3, #0
 800410c:	da06      	bge.n	800411c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	e005      	b.n	8004128 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	2b00      	cmp	r3, #0
 800412e:	da06      	bge.n	800413e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	e005      	b.n	800414a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	2b00      	cmp	r3, #0
 8004150:	da06      	bge.n	8004160 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	e005      	b.n	800416c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d05d      	beq.n	8004244 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	2b00      	cmp	r3, #0
 800418e:	da09      	bge.n	80041a4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004194:	425b      	negs	r3, r3
 8004196:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	615a      	str	r2, [r3, #20]
 80041a2:	e005      	b.n	80041b0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da0d      	bge.n	80041d4 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	425b      	negs	r3, r3
 80041be:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	0419      	lsls	r1, r3, #16
 80041c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <DMA_List_BuildNode+0x2ac>)
 80041ca:	400b      	ands	r3, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	615a      	str	r2, [r3, #20]
 80041d2:	e009      	b.n	80041e8 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041dc:	0419      	lsls	r1, r3, #16
 80041de:	4b2a      	ldr	r3, [pc, #168]	@ (8004288 <DMA_List_BuildNode+0x2ac>)
 80041e0:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80041e2:	431a      	orrs	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da08      	bge.n	8004202 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f4:	425b      	negs	r3, r3
 80041f6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	619a      	str	r2, [r3, #24]
 8004200:	e004      	b.n	800420c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004210:	2b00      	cmp	r3, #0
 8004212:	da0b      	bge.n	800422c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	425b      	negs	r3, r3
 800421a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004224:	431a      	orrs	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	619a      	str	r2, [r3, #24]
 800422a:	e007      	b.n	800423c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004236:	431a      	orrs	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	61da      	str	r2, [r3, #28]
 8004242:	e002      	b.n	800424a <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800426a:	e005      	b.n	8004278 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	07ff0000 	.word	0x07ff0000
 8004288:	1fff0000 	.word	0x1fff0000

0800428c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0208 	and.w	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0203 	and.w	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042da:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80042e4:	0d1b      	lsrs	r3, r3, #20
 80042e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042ea:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b66      	ldr	r3, [pc, #408]	@ (800449c <DMA_List_GetNodeConfig+0x210>)
 8004302:	4013      	ands	r3, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004326:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e013      	b.n	800435a <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	e002      	b.n	800435a <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8004382:	0c1b      	lsrs	r3, r3, #16
 8004384:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b8:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80043be:	e002      	b.n	80043c6 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04a      	beq.n	8004478 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043ec:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80043ee:	89fa      	ldrh	r2, [r7, #14]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004400:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8004402:	89fa      	ldrh	r2, [r7, #14]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004418:	425a      	negs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	425a      	negs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800443a:	89fa      	ldrh	r2, [r7, #14]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8004448:	89fa      	ldrh	r2, [r7, #14]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	425a      	negs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	da11      	bge.n	8004490 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	425a      	negs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8004476:	e00b      	b.n	8004490 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	0c002000 	.word	0x0c002000

080044a0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e00a      	b.n	80044e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e004      	b.n	80044e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	041b      	lsls	r3, r3, #16
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d001      	beq.n	80044f2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e00e      	b.n	800453e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e006      	b.n	800453e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	429a      	cmp	r2, r3
 800454e:	d001      	beq.n	8004554 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004550:	2302      	movs	r3, #2
 8004552:	e00b      	b.n	800456c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004566:	2303      	movs	r3, #3
 8004568:	e000      	b.n	800456c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800459a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00f      	beq.n	80045c2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2207      	movs	r2, #7
 80045a6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80045a8:	e00b      	b.n	80045c2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80045b4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2205      	movs	r2, #5
 80045c0:	601a      	str	r2, [r3, #0]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	fe010000 	.word	0xfe010000
 80045d4:	f8010000 	.word	0xf8010000

080045d8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	@ 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d142      	bne.n	8004682 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80045fc:	e01d      	b.n	800463a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	e00f      	b.n	8004634 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4413      	add	r3, r2
 8004624:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800462c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	3301      	adds	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	429a      	cmp	r2, r3
 8004642:	d3dc      	bcc.n	80045fe <DMA_List_FindNode+0x26>
 8004644:	e029      	b.n	800469a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e00f      	b.n	800467c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4413      	add	r3, r2
 800466c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004674:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3301      	adds	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	429a      	cmp	r2, r3
 800468a:	d206      	bcs.n	800469a <DMA_List_FindNode+0xc2>
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004692:	4013      	ands	r3, r2
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	429a      	cmp	r2, r3
 8004698:	d1d5      	bne.n	8004646 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80046a6:	4013      	ands	r3, r2
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e02b      	b.n	800470a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	461a      	mov	r2, r3
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00f      	beq.n	8004708 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	461a      	mov	r2, r3
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80046f8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3724      	adds	r7, #36	@ 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	@ 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800472a:	e1ba      	b.n	8004aa2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 81aa 	beq.w	8004a9c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a55      	ldr	r2, [pc, #340]	@ (80048a0 <HAL_GPIO_Init+0x188>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d15d      	bne.n	800480c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004756:	2201      	movs	r2, #1
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43db      	mvns	r3, r3
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	4013      	ands	r3, r2
 8004764:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 0201 	and.w	r2, r3, #1
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	4313      	orrs	r3, r2
 8004778:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004780:	4a48      	ldr	r2, [pc, #288]	@ (80048a4 <HAL_GPIO_Init+0x18c>)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004788:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800478a:	4a46      	ldr	r2, [pc, #280]	@ (80048a4 <HAL_GPIO_Init+0x18c>)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3208      	adds	r2, #8
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220b      	movs	r2, #11
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	08da      	lsrs	r2, r3, #3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3208      	adds	r2, #8
 80047d6:	69f9      	ldr	r1, [r7, #28]
 80047d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	2203      	movs	r2, #3
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2202      	movs	r2, #2
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	4313      	orrs	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e067      	b.n	80048dc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x104>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b12      	cmp	r3, #18
 800481a:	d145      	bne.n	80048a8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	08da      	lsrs	r2, r3, #3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3208      	adds	r2, #8
 8004824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004828:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	4013      	ands	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	08da      	lsrs	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3208      	adds	r2, #8
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	2203      	movs	r2, #3
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	4013      	ands	r3, r2
 800487e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 0203 	and.w	r2, r3, #3
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	4313      	orrs	r3, r2
 8004894:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e01e      	b.n	80048dc <HAL_GPIO_Init+0x1c4>
 800489e:	bf00      	nop
 80048a0:	46020000 	.word	0x46020000
 80048a4:	08008ccc 	.word	0x08008ccc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	4013      	ands	r3, r2
 80048be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0203 	and.w	r2, r3, #3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d00b      	beq.n	80048fc <HAL_GPIO_Init+0x1e4>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d007      	beq.n	80048fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048f0:	2b11      	cmp	r3, #17
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b12      	cmp	r3, #18
 80048fa:	d130      	bne.n	800495e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2203      	movs	r2, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	4013      	ands	r3, r2
 8004912:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	4313      	orrs	r3, r2
 8004924:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004932:	2201      	movs	r2, #1
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	4013      	ands	r3, r2
 8004940:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0201 	and.w	r2, r3, #1
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	4313      	orrs	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d017      	beq.n	8004996 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2203      	movs	r2, #3
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	4013      	ands	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	4313      	orrs	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d07c      	beq.n	8004a9c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80049a2:	4a47      	ldr	r2, [pc, #284]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3318      	adds	r3, #24
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0a9a      	lsrs	r2, r3, #10
 80049ca:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac4 <HAL_GPIO_Init+0x3ac>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	f002 0203 	and.w	r2, r2, #3
 80049d4:	00d2      	lsls	r2, r2, #3
 80049d6:	4093      	lsls	r3, r2
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80049de:	4938      	ldr	r1, [pc, #224]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	3318      	adds	r3, #24
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80049ec:	4b34      	ldr	r3, [pc, #208]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	4013      	ands	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004a10:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004a16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004a3a:	4a21      	ldr	r2, [pc, #132]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004a40:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004a66:	4a16      	ldr	r2, [pc, #88]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004a6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a74:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004a94:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f47f ae3d 	bne.w	800472c <HAL_GPIO_Init+0x14>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	3724      	adds	r7, #36	@ 0x24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	46022000 	.word	0x46022000
 8004ac4:	002f7f7f 	.word	0x002f7f7f

08004ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad8:	787b      	ldrb	r3, [r7, #1]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004ae4:	e002      	b.n	8004aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	e007      	b.n	8004b26 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004b16:	4b07      	ldr	r3, [pc, #28]	@ (8004b34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0204 	bic.w	r2, r3, #4
 8004b1e:	4905      	ldr	r1, [pc, #20]	@ (8004b34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40030400 	.word	0x40030400

08004b38 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004b3c:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_ICACHE_Enable+0x1c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a04      	ldr	r2, [pc, #16]	@ (8004b54 <HAL_ICACHE_Enable+0x1c>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40030400 	.word	0x40030400

08004b58 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0e7      	b.n	8004d3a <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fb ff41 	bl	8000a0c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004baa:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004bb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f962 	bl	8004e84 <LPTIM_WaitForFlag>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d101      	bne.n	8004bca <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0b7      	b.n	8004d3a <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6a12      	ldr	r2, [r2, #32]
 8004bda:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004bdc:	2110      	movs	r1, #16
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f950 	bl	8004e84 <LPTIM_WaitForFlag>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d101      	bne.n	8004bee <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e0a5      	b.n	8004d3a <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10e      	bne.n	8004c1a <HAL_LPTIM_Init+0xc2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <HAL_LPTIM_Init+0xc2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d004      	beq.n	8004c34 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c32:	d103      	bne.n	8004c3c <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 031e 	bic.w	r3, r3, #30
 8004c3a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d005      	beq.n	8004c54 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004c4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4b3b      	ldr	r3, [pc, #236]	@ (8004d44 <HAL_LPTIM_Init+0x1ec>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004c64:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8004c6a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004c70:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d107      	bne.n	8004c90 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d004      	beq.n	8004ca2 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ca0:	d107      	bne.n	8004cb2 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004caa:	4313      	orrs	r3, r2
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004cc6:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004ccc:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_LPTIM_Init+0x1f0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_LPTIM_Init+0x198>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_LPTIM_Init+0x1f4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d108      	bne.n	8004d02 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d00:	e00e      	b.n	8004d20 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a12      	ldr	r2, [pc, #72]	@ (8004d50 <HAL_LPTIM_Init+0x1f8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_LPTIM_Init+0x1be>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a10      	ldr	r2, [pc, #64]	@ (8004d54 <HAL_LPTIM_Init+0x1fc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d104      	bne.n	8004d20 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	ff39f1fe 	.word	0xff39f1fe
 8004d48:	46004400 	.word	0x46004400
 8004d4c:	40009400 	.word	0x40009400
 8004d50:	46004800 	.word	0x46004800
 8004d54:	46004c00 	.word	0x46004c00

08004d58 <HAL_LPTIM_IC_Start>:
  *            @arg LPTIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_IC_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INPUT_CAPTURE_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_LPTIM_IC_Start+0x24>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e008      	b.n	8004d8e <HAL_LPTIM_IC_Start+0x36>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_LPTIM_IC_Start+0x3e>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e03c      	b.n	8004e10 <HAL_LPTIM_IC_Start+0xb8>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_LPTIM_IC_Start+0x56>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8004dac:	e003      	b.n	8004db6 <HAL_LPTIM_IC_Start+0x5e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0204 	orr.w	r2, r2, #4
 8004dd4:	611a      	str	r2, [r3, #16]

  /* Enable capture */
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_LPTIM_IC_Start+0x8c>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d009      	beq.n	8004df6 <HAL_LPTIM_IC_Start+0x9e>
 8004de2:	e010      	b.n	8004e06 <HAL_LPTIM_IC_Start+0xae>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0202 	orr.w	r2, r2, #2
 8004df2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004df4:	e007      	b.n	8004e06 <HAL_LPTIM_IC_Start+0xae>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_LPTIM_OC_ConfigChannel+0x22>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d00b      	beq.n	8004e54 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 8004e3c:	e018      	b.n	8004e70 <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f84f 	bl	8004ee4 <LPTIM_OC1_SetConfig>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	e012      	b.n	8004e7a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f8aa 	bl	8004fb0 <LPTIM_OC2_SetConfig>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	e007      	b.n	8004e7a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 8004e6e:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004e92:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <LPTIM_WaitForFlag+0x58>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a12      	ldr	r2, [pc, #72]	@ (8004ee0 <LPTIM_WaitForFlag+0x5c>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	0b9b      	lsrs	r3, r3, #14
 8004e9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d002      	beq.n	8004ece <LPTIM_WaitForFlag+0x4a>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1ec      	bne.n	8004ea8 <LPTIM_WaitForFlag+0x24>

  return result;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	d1b71759 	.word	0xd1b71759

08004ee4 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f023 030d 	bic.w	r3, r3, #13
 8004efc:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2a      	ldr	r2, [pc, #168]	@ (8004fac <LPTIM_OC1_SetConfig+0xc8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d112      	bne.n	8004f2e <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f16:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	055b      	lsls	r3, r3, #21
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e005      	b.n	8004f3a <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2208      	movs	r2, #8
 8004f50:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 8004f5c:	2108      	movs	r1, #8
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ff90 	bl	8004e84 <LPTIM_WaitForFlag>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d101      	bne.n	8004f6e <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e01a      	b.n	8004fa4 <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10e      	bne.n	8004f9a <LPTIM_OC1_SetConfig+0xb6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d107      	bne.n	8004f9a <LPTIM_OC1_SetConfig+0xb6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	46004c00 	.word	0x46004c00

08004fb0 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8004fc8:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	049b      	lsls	r3, r3, #18
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004fee:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 8004ffa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ff40 	bl	8004e84 <LPTIM_WaitForFlag>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e01a      	b.n	8005044 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10e      	bne.n	800503a <LPTIM_OC2_SetConfig+0x8a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d107      	bne.n	800503a <LPTIM_OC2_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005054:	4b39      	ldr	r3, [pc, #228]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800505c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d10b      	bne.n	800507e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506c:	d905      	bls.n	800507a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800506e:	4b33      	ldr	r3, [pc, #204]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	4a32      	ldr	r2, [pc, #200]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005078:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e057      	b.n	800512e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005084:	d90a      	bls.n	800509c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005086:	4b2d      	ldr	r3, [pc, #180]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4313      	orrs	r3, r2
 8005092:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005098:	60d3      	str	r3, [r2, #12]
 800509a:	e007      	b.n	80050ac <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800509c:	4b27      	ldr	r3, [pc, #156]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80050a4:	4925      	ldr	r1, [pc, #148]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80050ac:	4b24      	ldr	r3, [pc, #144]	@ (8005140 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a24      	ldr	r2, [pc, #144]	@ (8005144 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	2232      	movs	r2, #50	@ 0x32
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	4a21      	ldr	r2, [pc, #132]	@ (8005144 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80050ca:	e002      	b.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80050d2:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d102      	bne.n	80050e4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f3      	bne.n	80050cc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01b      	beq.n	8005122 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80050ea:	4b15      	ldr	r3, [pc, #84]	@ (8005140 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	2232      	movs	r2, #50	@ 0x32
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	099b      	lsrs	r3, r3, #6
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005108:	e002      	b.n	8005110 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3b01      	subs	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005110:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d102      	bne.n	8005122 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f3      	bne.n	800510a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e000      	b.n	800512e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	46020800 	.word	0x46020800
 8005140:	20000000 	.word	0x20000000
 8005144:	10624dd3 	.word	0x10624dd3

08005148 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800514c:	4b04      	ldr	r3, [pc, #16]	@ (8005160 <HAL_PWREx_GetVoltageRange+0x18>)
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	46020800 	.word	0x46020800

08005164 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_PWREx_EnableVddA+0x1c>)
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <HAL_PWREx_EnableVddA+0x1c>)
 800516e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005172:	6113      	str	r3, [r2, #16]
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	46020800 	.word	0x46020800

08005184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	@ 0x38
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	f000 bec8 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519e:	4b99      	ldr	r3, [pc, #612]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a8:	4b96      	ldr	r3, [pc, #600]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 816c 	beq.w	8005498 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_RCC_OscConfig+0x52>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	f040 80de 	bne.w	800538a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f040 80da 	bne.w	800538a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f000 bea5 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051e8:	4b86      	ldr	r3, [pc, #536]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_RCC_OscConfig+0x7a>
 80051f4:	4b83      	ldr	r3, [pc, #524]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80051fc:	e005      	b.n	800520a <HAL_RCC_OscConfig+0x86>
 80051fe:	4b81      	ldr	r3, [pc, #516]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800520a:	4293      	cmp	r3, r2
 800520c:	d255      	bcs.n	80052ba <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	4618      	mov	r0, r3
 800521a:	f001 f99d 	bl	8006558 <RCC_SetFlashLatencyFromMSIRange>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f000 be82 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800522a:	4b76      	ldr	r3, [pc, #472]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	4a75      	ldr	r2, [pc, #468]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005230:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005234:	6093      	str	r3, [r2, #8]
 8005236:	4b73      	ldr	r3, [pc, #460]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	4970      	ldr	r1, [pc, #448]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005244:	4313      	orrs	r3, r2
 8005246:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005250:	d309      	bcc.n	8005266 <HAL_RCC_OscConfig+0xe2>
 8005252:	4b6c      	ldr	r3, [pc, #432]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f023 021f 	bic.w	r2, r3, #31
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4969      	ldr	r1, [pc, #420]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005260:	4313      	orrs	r3, r2
 8005262:	60cb      	str	r3, [r1, #12]
 8005264:	e07e      	b.n	8005364 <HAL_RCC_OscConfig+0x1e0>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	da0a      	bge.n	8005284 <HAL_RCC_OscConfig+0x100>
 800526e:	4b65      	ldr	r3, [pc, #404]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	015b      	lsls	r3, r3, #5
 800527c:	4961      	ldr	r1, [pc, #388]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 800527e:	4313      	orrs	r3, r2
 8005280:	60cb      	str	r3, [r1, #12]
 8005282:	e06f      	b.n	8005364 <HAL_RCC_OscConfig+0x1e0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528c:	d30a      	bcc.n	80052a4 <HAL_RCC_OscConfig+0x120>
 800528e:	4b5d      	ldr	r3, [pc, #372]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	4959      	ldr	r1, [pc, #356]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	60cb      	str	r3, [r1, #12]
 80052a2:	e05f      	b.n	8005364 <HAL_RCC_OscConfig+0x1e0>
 80052a4:	4b57      	ldr	r3, [pc, #348]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	03db      	lsls	r3, r3, #15
 80052b2:	4954      	ldr	r1, [pc, #336]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60cb      	str	r3, [r1, #12]
 80052b8:	e054      	b.n	8005364 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80052ba:	4b52      	ldr	r3, [pc, #328]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4a51      	ldr	r2, [pc, #324]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052c4:	6093      	str	r3, [r2, #8]
 80052c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	494c      	ldr	r1, [pc, #304]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80052e0:	d309      	bcc.n	80052f6 <HAL_RCC_OscConfig+0x172>
 80052e2:	4b48      	ldr	r3, [pc, #288]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f023 021f 	bic.w	r2, r3, #31
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4945      	ldr	r1, [pc, #276]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60cb      	str	r3, [r1, #12]
 80052f4:	e028      	b.n	8005348 <HAL_RCC_OscConfig+0x1c4>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da0a      	bge.n	8005314 <HAL_RCC_OscConfig+0x190>
 80052fe:	4b41      	ldr	r3, [pc, #260]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	015b      	lsls	r3, r3, #5
 800530c:	493d      	ldr	r1, [pc, #244]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 800530e:	4313      	orrs	r3, r2
 8005310:	60cb      	str	r3, [r1, #12]
 8005312:	e019      	b.n	8005348 <HAL_RCC_OscConfig+0x1c4>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531c:	d30a      	bcc.n	8005334 <HAL_RCC_OscConfig+0x1b0>
 800531e:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	4935      	ldr	r1, [pc, #212]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 800532e:	4313      	orrs	r3, r2
 8005330:	60cb      	str	r3, [r1, #12]
 8005332:	e009      	b.n	8005348 <HAL_RCC_OscConfig+0x1c4>
 8005334:	4b33      	ldr	r3, [pc, #204]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	03db      	lsls	r3, r3, #15
 8005342:	4930      	ldr	r1, [pc, #192]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005344:	4313      	orrs	r3, r2
 8005346:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	4618      	mov	r0, r3
 8005354:	f001 f900 	bl	8006558 <RCC_SetFlashLatencyFromMSIRange>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f000 bde5 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005364:	f001 f8de 	bl	8006524 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005368:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <HAL_RCC_OscConfig+0x284>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f7fc f911 	bl	8001594 <HAL_InitTick>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 808a 	beq.w	8005496 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005386:	f000 bdd2 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d066      	beq.n	8005460 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005392:	4b1c      	ldr	r3, [pc, #112]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1b      	ldr	r2, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800539e:	f7fc f983 	bl	80016a8 <HAL_GetTick>
 80053a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80053a4:	e009      	b.n	80053ba <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053a6:	f7fc f97f 	bl	80016a8 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d902      	bls.n	80053ba <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	f000 bdba 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80053ba:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0ef      	beq.n	80053a6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80053c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80053cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053d0:	6093      	str	r3, [r2, #8]
 80053d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	4909      	ldr	r1, [pc, #36]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80053ec:	d30e      	bcc.n	800540c <HAL_RCC_OscConfig+0x288>
 80053ee:	4b05      	ldr	r3, [pc, #20]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f023 021f 	bic.w	r2, r3, #31
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4902      	ldr	r1, [pc, #8]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60cb      	str	r3, [r1, #12]
 8005400:	e04a      	b.n	8005498 <HAL_RCC_OscConfig+0x314>
 8005402:	bf00      	nop
 8005404:	46020c00 	.word	0x46020c00
 8005408:	20000004 	.word	0x20000004
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	da0a      	bge.n	800542a <HAL_RCC_OscConfig+0x2a6>
 8005414:	4b98      	ldr	r3, [pc, #608]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	015b      	lsls	r3, r3, #5
 8005422:	4995      	ldr	r1, [pc, #596]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	60cb      	str	r3, [r1, #12]
 8005428:	e036      	b.n	8005498 <HAL_RCC_OscConfig+0x314>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005432:	d30a      	bcc.n	800544a <HAL_RCC_OscConfig+0x2c6>
 8005434:	4b90      	ldr	r3, [pc, #576]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	498d      	ldr	r1, [pc, #564]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005444:	4313      	orrs	r3, r2
 8005446:	60cb      	str	r3, [r1, #12]
 8005448:	e026      	b.n	8005498 <HAL_RCC_OscConfig+0x314>
 800544a:	4b8b      	ldr	r3, [pc, #556]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	03db      	lsls	r3, r3, #15
 8005458:	4987      	ldr	r1, [pc, #540]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	60cb      	str	r3, [r1, #12]
 800545e:	e01b      	b.n	8005498 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005460:	4b85      	ldr	r3, [pc, #532]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a84      	ldr	r2, [pc, #528]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800546c:	f7fc f91c 	bl	80016a8 <HAL_GetTick>
 8005470:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005472:	e009      	b.n	8005488 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005474:	f7fc f918 	bl	80016a8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d902      	bls.n	8005488 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	f000 bd53 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005488:	4b7b      	ldr	r3, [pc, #492]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ef      	bne.n	8005474 <HAL_RCC_OscConfig+0x2f0>
 8005494:	e000      	b.n	8005498 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005496:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 808b 	beq.w	80055bc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_OscConfig+0x334>
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d109      	bne.n	80054c6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d17d      	bne.n	80055bc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f000 bd34 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ce:	d106      	bne.n	80054de <HAL_RCC_OscConfig+0x35a>
 80054d0:	4b69      	ldr	r3, [pc, #420]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a68      	ldr	r2, [pc, #416]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e041      	b.n	8005562 <HAL_RCC_OscConfig+0x3de>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e6:	d112      	bne.n	800550e <HAL_RCC_OscConfig+0x38a>
 80054e8:	4b63      	ldr	r3, [pc, #396]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a62      	ldr	r2, [pc, #392]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	4b60      	ldr	r3, [pc, #384]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5f      	ldr	r2, [pc, #380]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b5d      	ldr	r3, [pc, #372]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a5c      	ldr	r2, [pc, #368]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e029      	b.n	8005562 <HAL_RCC_OscConfig+0x3de>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005516:	d112      	bne.n	800553e <HAL_RCC_OscConfig+0x3ba>
 8005518:	4b57      	ldr	r3, [pc, #348]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a56      	ldr	r2, [pc, #344]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800551e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b54      	ldr	r3, [pc, #336]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a53      	ldr	r2, [pc, #332]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800552a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b51      	ldr	r3, [pc, #324]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a50      	ldr	r2, [pc, #320]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	e011      	b.n	8005562 <HAL_RCC_OscConfig+0x3de>
 800553e:	4b4e      	ldr	r3, [pc, #312]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a4d      	ldr	r2, [pc, #308]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b4b      	ldr	r3, [pc, #300]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4a      	ldr	r2, [pc, #296]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005550:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	4b48      	ldr	r3, [pc, #288]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a47      	ldr	r2, [pc, #284]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800555c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005560:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d014      	beq.n	8005594 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800556a:	f7fc f89d 	bl	80016a8 <HAL_GetTick>
 800556e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005570:	e009      	b.n	8005586 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005572:	f7fc f899 	bl	80016a8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b64      	cmp	r3, #100	@ 0x64
 800557e:	d902      	bls.n	8005586 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	f000 bcd4 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005586:	4b3c      	ldr	r3, [pc, #240]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ef      	beq.n	8005572 <HAL_RCC_OscConfig+0x3ee>
 8005592:	e013      	b.n	80055bc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005594:	f7fc f888 	bl	80016a8 <HAL_GetTick>
 8005598:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800559a:	e009      	b.n	80055b0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559c:	f7fc f884 	bl	80016a8 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	@ 0x64
 80055a8:	d902      	bls.n	80055b0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	f000 bcbf 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055b0:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ef      	bne.n	800559c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d05f      	beq.n	8005688 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d005      	beq.n	80055da <HAL_RCC_OscConfig+0x456>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d114      	bne.n	80055fe <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d111      	bne.n	80055fe <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f000 bca3 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80055e8:	4b23      	ldr	r3, [pc, #140]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	4920      	ldr	r1, [pc, #128]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055fc:	e044      	b.n	8005688 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d024      	beq.n	8005650 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005606:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1b      	ldr	r2, [pc, #108]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005610:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005612:	f7fc f849 	bl	80016a8 <HAL_GetTick>
 8005616:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005618:	e009      	b.n	800562e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800561a:	f7fc f845 	bl	80016a8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d902      	bls.n	800562e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	f000 bc80 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800562e:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0ef      	beq.n	800561a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800563a:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	490b      	ldr	r1, [pc, #44]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800564a:	4313      	orrs	r3, r2
 800564c:	610b      	str	r3, [r1, #16]
 800564e:	e01b      	b.n	8005688 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005650:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a08      	ldr	r2, [pc, #32]	@ (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005656:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800565a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800565c:	f7fc f824 	bl	80016a8 <HAL_GetTick>
 8005660:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005662:	e00b      	b.n	800567c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005664:	f7fc f820 	bl	80016a8 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d904      	bls.n	800567c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	f000 bc5b 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
 8005678:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800567c:	4baf      	ldr	r3, [pc, #700]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1ed      	bne.n	8005664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80c8 	beq.w	8005826 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569c:	4ba7      	ldr	r3, [pc, #668]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800569e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d111      	bne.n	80056ce <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	4ba4      	ldr	r3, [pc, #656]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80056ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056b0:	4aa2      	ldr	r2, [pc, #648]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80056b2:	f043 0304 	orr.w	r3, r3, #4
 80056b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80056ba:	4ba0      	ldr	r3, [pc, #640]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80056bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d119      	bne.n	800570e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80056da:	4b99      	ldr	r3, [pc, #612]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056de:	4a98      	ldr	r2, [pc, #608]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e6:	f7fb ffdf 	bl	80016a8 <HAL_GetTick>
 80056ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056ec:	e009      	b.n	8005702 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ee:	f7fb ffdb 	bl	80016a8 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d902      	bls.n	8005702 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	f000 bc16 	b.w	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005702:	4b8f      	ldr	r3, [pc, #572]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0ef      	beq.n	80056ee <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d05f      	beq.n	80057d6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005716:	4b89      	ldr	r3, [pc, #548]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800571c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005728:	429a      	cmp	r2, r3
 800572a:	d037      	beq.n	800579c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e3f4      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01b      	beq.n	8005786 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800574e:	4b7b      	ldr	r3, [pc, #492]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005754:	4a79      	ldr	r2, [pc, #484]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005756:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800575a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800575e:	f7fb ffa3 	bl	80016a8 <HAL_GetTick>
 8005762:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005766:	f7fb ff9f 	bl	80016a8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b05      	cmp	r3, #5
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e3da      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005778:	4b70      	ldr	r3, [pc, #448]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800577a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800577e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ef      	bne.n	8005766 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005786:	4b6d      	ldr	r3, [pc, #436]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800578c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	4969      	ldr	r1, [pc, #420]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800579c:	4b67      	ldr	r3, [pc, #412]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800579e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057a2:	4a66      	ldr	r2, [pc, #408]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80057a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80057ac:	f7fb ff7c 	bl	80016a8 <HAL_GetTick>
 80057b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fb ff78 	bl	80016a8 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e3b3      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80057c6:	4b5d      	ldr	r3, [pc, #372]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80057c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <HAL_RCC_OscConfig+0x630>
 80057d4:	e01b      	b.n	800580e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80057d6:	4b59      	ldr	r3, [pc, #356]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80057d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057dc:	4a57      	ldr	r2, [pc, #348]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80057de:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80057e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80057e6:	f7fb ff5f 	bl	80016a8 <HAL_GetTick>
 80057ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fb ff5b 	bl	80016a8 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b05      	cmp	r3, #5
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e396      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005800:	4b4e      	ldr	r3, [pc, #312]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005806:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ef      	bne.n	80057ee <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800580e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005816:	4b49      	ldr	r3, [pc, #292]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800581c:	4a47      	ldr	r2, [pc, #284]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800581e:	f023 0304 	bic.w	r3, r3, #4
 8005822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8111 	beq.w	8005a56 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005834:	2300      	movs	r3, #0
 8005836:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583a:	4b40      	ldr	r3, [pc, #256]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800583c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d111      	bne.n	800586c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005848:	4b3c      	ldr	r3, [pc, #240]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800584a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800584e:	4a3b      	ldr	r2, [pc, #236]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005850:	f043 0304 	orr.w	r3, r3, #4
 8005854:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005858:	4b38      	ldr	r3, [pc, #224]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800585a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800586c:	4b34      	ldr	r3, [pc, #208]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d118      	bne.n	80058aa <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005878:	4b31      	ldr	r3, [pc, #196]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	4a30      	ldr	r2, [pc, #192]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005884:	f7fb ff10 	bl	80016a8 <HAL_GetTick>
 8005888:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588c:	f7fb ff0c 	bl	80016a8 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e347      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800589e:	4b28      	ldr	r3, [pc, #160]	@ (8005940 <HAL_RCC_OscConfig+0x7bc>)
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d01f      	beq.n	80058f6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d010      	beq.n	80058e4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058c2:	4b1e      	ldr	r3, [pc, #120]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058c8:	4a1c      	ldr	r2, [pc, #112]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058ca:	f043 0304 	orr.w	r3, r3, #4
 80058ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058d2:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058d8:	4a18      	ldr	r2, [pc, #96]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058e2:	e018      	b.n	8005916 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058e4:	4b15      	ldr	r3, [pc, #84]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058ea:	4a14      	ldr	r2, [pc, #80]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058f4:	e00f      	b.n	8005916 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058f6:	4b11      	ldr	r3, [pc, #68]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058fc:	4a0f      	ldr	r2, [pc, #60]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 8005908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800590c:	4a0b      	ldr	r2, [pc, #44]	@ (800593c <HAL_RCC_OscConfig+0x7b8>)
 800590e:	f023 0304 	bic.w	r3, r3, #4
 8005912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d057      	beq.n	80059ce <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800591e:	f7fb fec3 	bl	80016a8 <HAL_GetTick>
 8005922:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005924:	e00e      	b.n	8005944 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005926:	f7fb febf 	bl	80016a8 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005934:	4293      	cmp	r3, r2
 8005936:	d905      	bls.n	8005944 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e2f8      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
 800593c:	46020c00 	.word	0x46020c00
 8005940:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005944:	4b9c      	ldr	r3, [pc, #624]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0e9      	beq.n	8005926 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01b      	beq.n	8005996 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800595e:	4b96      	ldr	r3, [pc, #600]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005964:	4a94      	ldr	r2, [pc, #592]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005970:	f7fb fe9a 	bl	80016a8 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e2d3      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005986:	4b8c      	ldr	r3, [pc, #560]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800598c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0ed      	beq.n	8005970 <HAL_RCC_OscConfig+0x7ec>
 8005994:	e053      	b.n	8005a3e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005996:	4b88      	ldr	r3, [pc, #544]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800599c:	4a86      	ldr	r2, [pc, #536]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 800599e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059a6:	e00a      	b.n	80059be <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a8:	f7fb fe7e 	bl	80016a8 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e2b7      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059be:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 80059c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ed      	bne.n	80059a8 <HAL_RCC_OscConfig+0x824>
 80059cc:	e037      	b.n	8005a3e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80059ce:	f7fb fe6b 	bl	80016a8 <HAL_GetTick>
 80059d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fb fe67 	bl	80016a8 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e2a0      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059ec:	4b72      	ldr	r3, [pc, #456]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 80059ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1ed      	bne.n	80059d6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80059fa:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 80059fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01a      	beq.n	8005a3e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a08:	4b6b      	ldr	r3, [pc, #428]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a18:	e00a      	b.n	8005a30 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1a:	f7fb fe45 	bl	80016a8 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e27e      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a30:	4b61      	ldr	r3, [pc, #388]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ed      	bne.n	8005a1a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a3e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a46:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a4e:	f023 0304 	bic.w	r3, r3, #4
 8005a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d036      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d019      	beq.n	8005a9e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005a6a:	4b53      	ldr	r3, [pc, #332]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a52      	ldr	r2, [pc, #328]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a74:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a76:	f7fb fe17 	bl	80016a8 <HAL_GetTick>
 8005a7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a7e:	f7fb fe13 	bl	80016a8 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e24e      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a90:	4b49      	ldr	r3, [pc, #292]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0x8fa>
 8005a9c:	e018      	b.n	8005ad0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005a9e:	4b46      	ldr	r3, [pc, #280]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a45      	ldr	r2, [pc, #276]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005aa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005aa8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005aaa:	f7fb fdfd 	bl	80016a8 <HAL_GetTick>
 8005aae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ab2:	f7fb fdf9 	bl	80016a8 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e234      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d036      	beq.n	8005b4a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d019      	beq.n	8005b18 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005ae4:	4b34      	ldr	r3, [pc, #208]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a33      	ldr	r2, [pc, #204]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005aea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005aee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005af0:	f7fb fdda 	bl	80016a8 <HAL_GetTick>
 8005af4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005af8:	f7fb fdd6 	bl	80016a8 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e211      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x974>
 8005b16:	e018      	b.n	8005b4a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005b18:	4b27      	ldr	r3, [pc, #156]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a26      	ldr	r2, [pc, #152]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b24:	f7fb fdc0 	bl	80016a8 <HAL_GetTick>
 8005b28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005b2c:	f7fb fdbc 	bl	80016a8 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e1f7      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d07f      	beq.n	8005c56 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d062      	beq.n	8005c24 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005b5e:	4b16      	ldr	r3, [pc, #88]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	4b13      	ldr	r3, [pc, #76]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	4910      	ldr	r1, [pc, #64]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005b84:	d309      	bcc.n	8005b9a <HAL_RCC_OscConfig+0xa16>
 8005b86:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f023 021f 	bic.w	r2, r3, #31
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	4909      	ldr	r1, [pc, #36]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60cb      	str	r3, [r1, #12]
 8005b98:	e02a      	b.n	8005bf0 <HAL_RCC_OscConfig+0xa6c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da0c      	bge.n	8005bbc <HAL_RCC_OscConfig+0xa38>
 8005ba2:	4b05      	ldr	r3, [pc, #20]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	4901      	ldr	r1, [pc, #4]	@ (8005bb8 <HAL_RCC_OscConfig+0xa34>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60cb      	str	r3, [r1, #12]
 8005bb6:	e01b      	b.n	8005bf0 <HAL_RCC_OscConfig+0xa6c>
 8005bb8:	46020c00 	.word	0x46020c00
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc4:	d30a      	bcc.n	8005bdc <HAL_RCC_OscConfig+0xa58>
 8005bc6:	4ba1      	ldr	r3, [pc, #644]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	499d      	ldr	r1, [pc, #628]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60cb      	str	r3, [r1, #12]
 8005bda:	e009      	b.n	8005bf0 <HAL_RCC_OscConfig+0xa6c>
 8005bdc:	4b9b      	ldr	r3, [pc, #620]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	03db      	lsls	r3, r3, #15
 8005bea:	4998      	ldr	r1, [pc, #608]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005bf0:	4b96      	ldr	r3, [pc, #600]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a95      	ldr	r2, [pc, #596]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005bf6:	f043 0310 	orr.w	r3, r3, #16
 8005bfa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005bfc:	f7fb fd54 	bl	80016a8 <HAL_GetTick>
 8005c00:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005c04:	f7fb fd50 	bl	80016a8 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e18b      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005c16:	4b8d      	ldr	r3, [pc, #564]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xa80>
 8005c22:	e018      	b.n	8005c56 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005c24:	4b89      	ldr	r3, [pc, #548]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a88      	ldr	r2, [pc, #544]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c30:	f7fb fd3a 	bl	80016a8 <HAL_GetTick>
 8005c34:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005c38:	f7fb fd36 	bl	80016a8 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e171      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005c4a:	4b80      	ldr	r3, [pc, #512]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f0      	bne.n	8005c38 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8166 	beq.w	8005f2c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c66:	4b79      	ldr	r3, [pc, #484]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	f000 80f2 	beq.w	8005e58 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	f040 80c5 	bne.w	8005e08 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005c7e:	4b73      	ldr	r3, [pc, #460]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a72      	ldr	r2, [pc, #456]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005c84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c88:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c8a:	f7fb fd0d 	bl	80016a8 <HAL_GetTick>
 8005c8e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c92:	f7fb fd09 	bl	80016a8 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e144      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ca4:	4b69      	ldr	r3, [pc, #420]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f0      	bne.n	8005c92 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb0:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d111      	bne.n	8005ce2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005cbe:	4b63      	ldr	r3, [pc, #396]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc4:	4a61      	ldr	r2, [pc, #388]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005cc6:	f043 0304 	orr.w	r3, r3, #4
 8005cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005cce:	4b5f      	ldr	r3, [pc, #380]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e50 <HAL_RCC_OscConfig+0xccc>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cee:	d102      	bne.n	8005cf6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005cf6:	4b56      	ldr	r3, [pc, #344]	@ (8005e50 <HAL_RCC_OscConfig+0xccc>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4a55      	ldr	r2, [pc, #340]	@ (8005e50 <HAL_RCC_OscConfig+0xccc>)
 8005cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d00:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005d02:	4b52      	ldr	r3, [pc, #328]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005d16:	3a01      	subs	r2, #1
 8005d18:	0212      	lsls	r2, r2, #8
 8005d1a:	4311      	orrs	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005d20:	430a      	orrs	r2, r1
 8005d22:	494a      	ldr	r1, [pc, #296]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d28:	4b48      	ldr	r3, [pc, #288]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d2c:	4b49      	ldr	r3, [pc, #292]	@ (8005e54 <HAL_RCC_OscConfig+0xcd0>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d34:	3a01      	subs	r2, #1
 8005d36:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005d3e:	3a01      	subs	r2, #1
 8005d40:	0252      	lsls	r2, r2, #9
 8005d42:	b292      	uxth	r2, r2
 8005d44:	4311      	orrs	r1, r2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	0412      	lsls	r2, r2, #16
 8005d4e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005d52:	4311      	orrs	r1, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d58:	3a01      	subs	r2, #1
 8005d5a:	0612      	lsls	r2, r2, #24
 8005d5c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005d60:	430a      	orrs	r2, r1
 8005d62:	493a      	ldr	r1, [pc, #232]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005d68:	4b38      	ldr	r3, [pc, #224]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	4a37      	ldr	r2, [pc, #220]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d6e:	f023 0310 	bic.w	r3, r3, #16
 8005d72:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d78:	4a34      	ldr	r2, [pc, #208]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005d7e:	4b33      	ldr	r3, [pc, #204]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	4a32      	ldr	r2, [pc, #200]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d84:	f043 0310 	orr.w	r3, r3, #16
 8005d88:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005d8a:	4b30      	ldr	r3, [pc, #192]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	f023 020c 	bic.w	r2, r3, #12
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d96:	492d      	ldr	r1, [pc, #180]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005da4:	4b2a      	ldr	r3, [pc, #168]	@ (8005e50 <HAL_RCC_OscConfig+0xccc>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a29      	ldr	r2, [pc, #164]	@ (8005e50 <HAL_RCC_OscConfig+0xccc>)
 8005daa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dae:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005db0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005db8:	4b24      	ldr	r3, [pc, #144]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dbe:	4a23      	ldr	r2, [pc, #140]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005dc0:	f023 0304 	bic.w	r3, r3, #4
 8005dc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005dc8:	4b20      	ldr	r3, [pc, #128]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005dd4:	f7fb fc68 	bl	80016a8 <HAL_GetTick>
 8005dd8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fb fc64 	bl	80016a8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e09f      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005dee:	4b17      	ldr	r3, [pc, #92]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005dfa:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfe:	4a13      	ldr	r2, [pc, #76]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e04:	6293      	str	r3, [r2, #40]	@ 0x28
 8005e06:	e091      	b.n	8005f2c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005e08:	4b10      	ldr	r3, [pc, #64]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e14:	f7fb fc48 	bl	80016a8 <HAL_GetTick>
 8005e18:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fb fc44 	bl	80016a8 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e07f      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e2e:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005e3a:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	4a03      	ldr	r2, [pc, #12]	@ (8005e4c <HAL_RCC_OscConfig+0xcc8>)
 8005e40:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005e44:	f023 0303 	bic.w	r3, r3, #3
 8005e48:	6293      	str	r3, [r2, #40]	@ 0x28
 8005e4a:	e06f      	b.n	8005f2c <HAL_RCC_OscConfig+0xda8>
 8005e4c:	46020c00 	.word	0x46020c00
 8005e50:	46020800 	.word	0x46020800
 8005e54:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005e58:	4b37      	ldr	r3, [pc, #220]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e5e:	4b36      	ldr	r3, [pc, #216]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e62:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d039      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0203 	and.w	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d132      	bne.n	8005ee0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d129      	bne.n	8005ee0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d122      	bne.n	8005ee0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d11a      	bne.n	8005ee0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	0a5b      	lsrs	r3, r3, #9
 8005eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d111      	bne.n	8005ee0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d108      	bne.n	8005ee0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	0e1b      	lsrs	r3, r3, #24
 8005ed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eda:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e024      	b.n	8005f2e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ee4:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d01a      	beq.n	8005f2c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005ef6:	4b10      	ldr	r3, [pc, #64]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	4a0f      	ldr	r2, [pc, #60]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005efc:	f023 0310 	bic.w	r3, r3, #16
 8005f00:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f02:	f7fb fbd1 	bl	80016a8 <HAL_GetTick>
 8005f06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005f08:	bf00      	nop
 8005f0a:	f7fb fbcd 	bl	80016a8 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d0f9      	beq.n	8005f0a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1a:	4a07      	ldr	r2, [pc, #28]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005f20:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f24:	4a04      	ldr	r2, [pc, #16]	@ (8005f38 <HAL_RCC_OscConfig+0xdb4>)
 8005f26:	f043 0310 	orr.w	r3, r3, #16
 8005f2a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3738      	adds	r7, #56	@ 0x38
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	46020c00 	.word	0x46020c00

08005f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e1d9      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f50:	4b9b      	ldr	r3, [pc, #620]	@ (80061c0 <HAL_RCC_ClockConfig+0x284>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d910      	bls.n	8005f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b98      	ldr	r3, [pc, #608]	@ (80061c0 <HAL_RCC_ClockConfig+0x284>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 020f 	bic.w	r2, r3, #15
 8005f66:	4996      	ldr	r1, [pc, #600]	@ (80061c0 <HAL_RCC_ClockConfig+0x284>)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b94      	ldr	r3, [pc, #592]	@ (80061c0 <HAL_RCC_ClockConfig+0x284>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e1c1      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d010      	beq.n	8005fae <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	4b8c      	ldr	r3, [pc, #560]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d908      	bls.n	8005fae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005f9c:	4b89      	ldr	r3, [pc, #548]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	4986      	ldr	r1, [pc, #536]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	4b81      	ldr	r3, [pc, #516]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d909      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005fcc:	4b7d      	ldr	r3, [pc, #500]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	497a      	ldr	r1, [pc, #488]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d010      	beq.n	800600e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	4b74      	ldr	r3, [pc, #464]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d908      	bls.n	800600e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ffc:	4b71      	ldr	r3, [pc, #452]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	496e      	ldr	r1, [pc, #440]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 800600a:	4313      	orrs	r3, r2
 800600c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d010      	beq.n	800603c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	4b69      	ldr	r3, [pc, #420]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	429a      	cmp	r2, r3
 8006028:	d908      	bls.n	800603c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800602a:	4b66      	ldr	r3, [pc, #408]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 020f 	bic.w	r2, r3, #15
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	4963      	ldr	r1, [pc, #396]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006038:	4313      	orrs	r3, r2
 800603a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80d2 	beq.w	80061ee <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b03      	cmp	r3, #3
 8006054:	d143      	bne.n	80060de <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006056:	4b5b      	ldr	r3, [pc, #364]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d110      	bne.n	8006086 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006064:	4b57      	ldr	r3, [pc, #348]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800606a:	4a56      	ldr	r2, [pc, #344]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 800606c:	f043 0304 	orr.w	r3, r3, #4
 8006070:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006074:	4b53      	ldr	r3, [pc, #332]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	60bb      	str	r3, [r7, #8]
 8006080:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006086:	f7fb fb0f 	bl	80016a8 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800608c:	4b4e      	ldr	r3, [pc, #312]	@ (80061c8 <HAL_RCC_ClockConfig+0x28c>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00f      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006098:	e008      	b.n	80060ac <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800609a:	f7fb fb05 	bl	80016a8 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e12b      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80060ac:	4b46      	ldr	r3, [pc, #280]	@ (80061c8 <HAL_RCC_ClockConfig+0x28c>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d107      	bne.n	80060ce <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80060be:	4b41      	ldr	r3, [pc, #260]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 80060c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060c4:	4a3f      	ldr	r2, [pc, #252]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 80060c6:	f023 0304 	bic.w	r3, r3, #4
 80060ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80060ce:	4b3d      	ldr	r3, [pc, #244]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d121      	bne.n	800611e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e112      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060e6:	4b37      	ldr	r3, [pc, #220]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e106      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d107      	bne.n	800610e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80060fe:	4b31      	ldr	r3, [pc, #196]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e0fa      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800610e:	4b2d      	ldr	r3, [pc, #180]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e0f2      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800611e:	4b29      	ldr	r3, [pc, #164]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4926      	ldr	r1, [pc, #152]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 800612c:	4313      	orrs	r3, r2
 800612e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006130:	f7fb faba 	bl	80016a8 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b03      	cmp	r3, #3
 800613c:	d112      	bne.n	8006164 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800613e:	e00a      	b.n	8006156 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006140:	f7fb fab2 	bl	80016a8 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e0d6      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006156:	4b1b      	ldr	r3, [pc, #108]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b0c      	cmp	r3, #12
 8006160:	d1ee      	bne.n	8006140 <HAL_RCC_ClockConfig+0x204>
 8006162:	e044      	b.n	80061ee <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d112      	bne.n	8006192 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800616e:	f7fb fa9b 	bl	80016a8 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e0bf      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006184:	4b0f      	ldr	r3, [pc, #60]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d1ee      	bne.n	800616e <HAL_RCC_ClockConfig+0x232>
 8006190:	e02d      	b.n	80061ee <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d123      	bne.n	80061e2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800619a:	e00a      	b.n	80061b2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800619c:	f7fb fa84 	bl	80016a8 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e0a8      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80061b2:	4b04      	ldr	r3, [pc, #16]	@ (80061c4 <HAL_RCC_ClockConfig+0x288>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f003 030c 	and.w	r3, r3, #12
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1ee      	bne.n	800619c <HAL_RCC_ClockConfig+0x260>
 80061be:	e016      	b.n	80061ee <HAL_RCC_ClockConfig+0x2b2>
 80061c0:	40022000 	.word	0x40022000
 80061c4:	46020c00 	.word	0x46020c00
 80061c8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061cc:	f7fb fa6c 	bl	80016a8 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061da:	4293      	cmp	r3, r2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e090      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80061e2:	4b4a      	ldr	r3, [pc, #296]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d1ee      	bne.n	80061cc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d010      	beq.n	800621c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	4b43      	ldr	r3, [pc, #268]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	429a      	cmp	r2, r3
 8006208:	d208      	bcs.n	800621c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800620a:	4b40      	ldr	r3, [pc, #256]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 020f 	bic.w	r2, r3, #15
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	493d      	ldr	r1, [pc, #244]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 8006218:	4313      	orrs	r3, r2
 800621a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800621c:	4b3c      	ldr	r3, [pc, #240]	@ (8006310 <HAL_RCC_ClockConfig+0x3d4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d210      	bcs.n	800624c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b39      	ldr	r3, [pc, #228]	@ (8006310 <HAL_RCC_ClockConfig+0x3d4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 020f 	bic.w	r2, r3, #15
 8006232:	4937      	ldr	r1, [pc, #220]	@ (8006310 <HAL_RCC_ClockConfig+0x3d4>)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4313      	orrs	r3, r2
 8006238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b35      	ldr	r3, [pc, #212]	@ (8006310 <HAL_RCC_ClockConfig+0x3d4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e05b      	b.n	8006304 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	4b2b      	ldr	r3, [pc, #172]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006264:	429a      	cmp	r2, r3
 8006266:	d208      	bcs.n	800627a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006268:	4b28      	ldr	r3, [pc, #160]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	4925      	ldr	r1, [pc, #148]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 8006276:	4313      	orrs	r3, r2
 8006278:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d012      	beq.n	80062ac <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	4b20      	ldr	r3, [pc, #128]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	091b      	lsrs	r3, r3, #4
 8006290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006294:	429a      	cmp	r2, r3
 8006296:	d209      	bcs.n	80062ac <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006298:	4b1c      	ldr	r3, [pc, #112]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	4919      	ldr	r1, [pc, #100]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d010      	beq.n	80062da <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	4b13      	ldr	r3, [pc, #76]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d208      	bcs.n	80062da <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80062c8:	4b10      	ldr	r3, [pc, #64]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	490d      	ldr	r1, [pc, #52]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80062da:	f000 f821 	bl	8006320 <HAL_RCC_GetSysClockFreq>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b0a      	ldr	r3, [pc, #40]	@ (800630c <HAL_RCC_ClockConfig+0x3d0>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	490a      	ldr	r1, [pc, #40]	@ (8006314 <HAL_RCC_ClockConfig+0x3d8>)
 80062ea:	5ccb      	ldrb	r3, [r1, r3]
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	4a09      	ldr	r2, [pc, #36]	@ (8006318 <HAL_RCC_ClockConfig+0x3dc>)
 80062f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062f4:	4b09      	ldr	r3, [pc, #36]	@ (800631c <HAL_RCC_ClockConfig+0x3e0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fb f94b 	bl	8001594 <HAL_InitTick>
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]

  return status;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	46020c00 	.word	0x46020c00
 8006310:	40022000 	.word	0x40022000
 8006314:	08008c7c 	.word	0x08008c7c
 8006318:	20000000 	.word	0x20000000
 800631c:	20000004 	.word	0x20000004

08006320 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006320:	b480      	push	{r7}
 8006322:	b08b      	sub	sp, #44	@ 0x2c
 8006324:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800632e:	4b78      	ldr	r3, [pc, #480]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006338:	4b75      	ldr	r3, [pc, #468]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x34>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b0c      	cmp	r3, #12
 800634c:	d121      	bne.n	8006392 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d11e      	bne.n	8006392 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006354:	4b6e      	ldr	r3, [pc, #440]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006360:	4b6b      	ldr	r3, [pc, #428]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006366:	0b1b      	lsrs	r3, r3, #12
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
 800636e:	e005      	b.n	800637c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006370:	4b67      	ldr	r3, [pc, #412]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	0f1b      	lsrs	r3, r3, #28
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800637c:	4a65      	ldr	r2, [pc, #404]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d110      	bne.n	80063ae <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006390:	e00d      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006392:	4b5f      	ldr	r3, [pc, #380]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b04      	cmp	r3, #4
 800639c:	d102      	bne.n	80063a4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800639e:	4b5e      	ldr	r3, [pc, #376]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	e004      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80063ac:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	f040 80a5 	bne.w	8006500 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80063b6:	4b56      	ldr	r3, [pc, #344]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80063c0:	4b53      	ldr	r3, [pc, #332]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	0a1b      	lsrs	r3, r3, #8
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	3301      	adds	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80063ce:	4b50      	ldr	r3, [pc, #320]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80063da:	4b4d      	ldr	r3, [pc, #308]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	08db      	lsrs	r3, r3, #3
 80063e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d003      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0xe4>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d022      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0x128>
 8006402:	e043      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800651c <HAL_RCC_GetSysClockFreq+0x1fc>
 8006412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006416:	4b3e      	ldr	r3, [pc, #248]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006426:	ed97 6a01 	vldr	s12, [r7, #4]
 800642a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x200>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006446:	e046      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800651c <HAL_RCC_GetSysClockFreq+0x1fc>
 8006456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645a:	4b2d      	ldr	r3, [pc, #180]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800645c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800646a:	ed97 6a01 	vldr	s12, [r7, #4]
 800646e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x200>
 8006472:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006476:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800647a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800648a:	e024      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80064a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80064b4:	ed97 6a01 	vldr	s12, [r7, #4]
 80064b8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x200>
 80064bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80064c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064d4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80064d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80064d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064da:	0e1b      	lsrs	r3, r3, #24
 80064dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e0:	3301      	adds	r3, #1
 80064e2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fa:	ee17 3a90 	vmov	r3, s15
 80064fe:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006500:	6a3b      	ldr	r3, [r7, #32]
}
 8006502:	4618      	mov	r0, r3
 8006504:	372c      	adds	r7, #44	@ 0x2c
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	46020c00 	.word	0x46020c00
 8006514:	08008c8c 	.word	0x08008c8c
 8006518:	00f42400 	.word	0x00f42400
 800651c:	4b742400 	.word	0x4b742400
 8006520:	46000000 	.word	0x46000000

08006524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006528:	f7ff fefa 	bl	8006320 <HAL_RCC_GetSysClockFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b07      	ldr	r3, [pc, #28]	@ (800654c <HAL_RCC_GetHCLKFreq+0x28>)
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	4906      	ldr	r1, [pc, #24]	@ (8006550 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006538:	5ccb      	ldrb	r3, [r1, r3]
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	4a05      	ldr	r2, [pc, #20]	@ (8006554 <HAL_RCC_GetHCLKFreq+0x30>)
 8006540:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006542:	4b04      	ldr	r3, [pc, #16]	@ (8006554 <HAL_RCC_GetHCLKFreq+0x30>)
 8006544:	681b      	ldr	r3, [r3, #0]
}
 8006546:	4618      	mov	r0, r3
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	46020c00 	.word	0x46020c00
 8006550:	08008c7c 	.word	0x08008c7c
 8006554:	20000000 	.word	0x20000000

08006558 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006560:	4b3e      	ldr	r3, [pc, #248]	@ (800665c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800656e:	f7fe fdeb 	bl	8005148 <HAL_PWREx_GetVoltageRange>
 8006572:	6178      	str	r0, [r7, #20]
 8006574:	e019      	b.n	80065aa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006576:	4b39      	ldr	r3, [pc, #228]	@ (800665c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657c:	4a37      	ldr	r2, [pc, #220]	@ (800665c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800657e:	f043 0304 	orr.w	r3, r3, #4
 8006582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006586:	4b35      	ldr	r3, [pc, #212]	@ (800665c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006594:	f7fe fdd8 	bl	8005148 <HAL_PWREx_GetVoltageRange>
 8006598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800659a:	4b30      	ldr	r3, [pc, #192]	@ (800665c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800659c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a0:	4a2e      	ldr	r2, [pc, #184]	@ (800665c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80065a2:	f023 0304 	bic.w	r3, r3, #4
 80065a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065b0:	d003      	beq.n	80065ba <RCC_SetFlashLatencyFromMSIRange+0x62>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065b8:	d109      	bne.n	80065ce <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065c0:	d202      	bcs.n	80065c8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80065c2:	2301      	movs	r3, #1
 80065c4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80065c6:	e033      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80065cc:	e030      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065d4:	d208      	bcs.n	80065e8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065dc:	d102      	bne.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80065de:	2303      	movs	r3, #3
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e025      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e035      	b.n	8006654 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ee:	d90f      	bls.n	8006610 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065fc:	d902      	bls.n	8006604 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80065fe:	2300      	movs	r3, #0
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	e015      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006604:	2301      	movs	r3, #1
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	e012      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e00f      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006616:	d109      	bne.n	800662c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661e:	d102      	bne.n	8006626 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006620:	2301      	movs	r3, #1
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	e004      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006626:	2302      	movs	r3, #2
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	e001      	b.n	8006630 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800662c:	2301      	movs	r3, #1
 800662e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f023 020f 	bic.w	r2, r3, #15
 8006638:	4909      	ldr	r1, [pc, #36]	@ (8006660 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006640:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	429a      	cmp	r2, r3
 800664c:	d001      	beq.n	8006652 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	46020c00 	.word	0x46020c00
 8006660:	40022000 	.word	0x40022000

08006664 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006668:	b0b4      	sub	sp, #208	@ 0xd0
 800666a:	af00      	add	r7, sp, #0
 800666c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006670:	2300      	movs	r3, #0
 8006672:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006676:	2300      	movs	r3, #0
 8006678:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800667c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f002 0401 	and.w	r4, r2, #1
 8006688:	2500      	movs	r5, #0
 800668a:	ea54 0305 	orrs.w	r3, r4, r5
 800668e:	d00b      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006690:	4bc4      	ldr	r3, [pc, #784]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006696:	f023 0103 	bic.w	r1, r3, #3
 800669a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800669e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a0:	4ac0      	ldr	r2, [pc, #768]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 0804 	and.w	r8, r2, #4
 80066b4:	f04f 0900 	mov.w	r9, #0
 80066b8:	ea58 0309 	orrs.w	r3, r8, r9
 80066bc:	d00b      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80066be:	4bb9      	ldr	r3, [pc, #740]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80066c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ce:	4ab5      	ldr	r2, [pc, #724]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f002 0a08 	and.w	sl, r2, #8
 80066e2:	f04f 0b00 	mov.w	fp, #0
 80066e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80066ea:	d00b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80066ec:	4bad      	ldr	r3, [pc, #692]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80066f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fc:	4aa9      	ldr	r2, [pc, #676]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066fe:	430b      	orrs	r3, r1
 8006700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f002 0310 	and.w	r3, r2, #16
 8006710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006714:	2300      	movs	r3, #0
 8006716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800671a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d00b      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006724:	4b9f      	ldr	r3, [pc, #636]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800672a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800672e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006734:	4a9b      	ldr	r2, [pc, #620]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006736:	430b      	orrs	r3, r1
 8006738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800673c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f002 0320 	and.w	r3, r2, #32
 8006748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006752:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006756:	460b      	mov	r3, r1
 8006758:	4313      	orrs	r3, r2
 800675a:	d00b      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800675c:	4b91      	ldr	r3, [pc, #580]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800675e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006762:	f023 0107 	bic.w	r1, r3, #7
 8006766:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800676a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676c:	4a8d      	ldr	r2, [pc, #564]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800676e:	430b      	orrs	r3, r1
 8006770:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006774:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006780:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006784:	2300      	movs	r3, #0
 8006786:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800678a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800678e:	460b      	mov	r3, r1
 8006790:	4313      	orrs	r3, r2
 8006792:	d00b      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006794:	4b83      	ldr	r3, [pc, #524]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800679a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800679e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a4:	4a7f      	ldr	r2, [pc, #508]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80067a6:	430b      	orrs	r3, r1
 80067a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067c6:	460b      	mov	r3, r1
 80067c8:	4313      	orrs	r3, r2
 80067ca:	d00b      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80067cc:	4b75      	ldr	r3, [pc, #468]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80067ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067dc:	4a71      	ldr	r2, [pc, #452]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80067f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d00b      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006804:	4b67      	ldr	r3, [pc, #412]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800680a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800680e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006814:	4a63      	ldr	r2, [pc, #396]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006816:	430b      	orrs	r3, r1
 8006818:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800681c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006832:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d00b      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800683c:	4b59      	ldr	r3, [pc, #356]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800683e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006842:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8006846:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800684a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684c:	4a55      	ldr	r2, [pc, #340]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800684e:	430b      	orrs	r3, r1
 8006850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006864:	2300      	movs	r3, #0
 8006866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800686a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d00b      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006874:	4b4b      	ldr	r3, [pc, #300]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800687a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800687e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006884:	4a47      	ldr	r2, [pc, #284]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006886:	430b      	orrs	r3, r1
 8006888:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800688c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800689a:	2300      	movs	r3, #0
 800689c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800689e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d00b      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80068a8:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80068aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ae:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80068b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068b8:	4a3a      	ldr	r2, [pc, #232]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80068c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80068cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80068ce:	2300      	movs	r3, #0
 80068d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80068d2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068d6:	460b      	mov	r3, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	d00b      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80068dc:	4b31      	ldr	r3, [pc, #196]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80068de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068ec:	4a2d      	ldr	r2, [pc, #180]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80068f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006902:	2300      	movs	r3, #0
 8006904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006906:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	d04f      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006918:	2b80      	cmp	r3, #128	@ 0x80
 800691a:	d02d      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800691c:	2b80      	cmp	r3, #128	@ 0x80
 800691e:	d827      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006920:	2b60      	cmp	r3, #96	@ 0x60
 8006922:	d02b      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006924:	2b60      	cmp	r3, #96	@ 0x60
 8006926:	d823      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	d006      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d81f      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d011      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8006938:	e01a      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800693a:	4b1a      	ldr	r3, [pc, #104]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	4a19      	ldr	r2, [pc, #100]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006944:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006946:	e01a      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006948:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800694c:	3308      	adds	r3, #8
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fbaa 	bl	80070a8 <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800695a:	e010      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800695c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006960:	332c      	adds	r3, #44	@ 0x2c
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fc38 	bl	80071d8 <RCCEx_PLL3_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800696e:	e006      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006976:	e002      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8006978:	bf00      	nop
 800697a:	e000      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 800697c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006982:	2b00      	cmp	r3, #0
 8006984:	d110      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006986:	4b07      	ldr	r3, [pc, #28]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800698c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006998:	4a02      	ldr	r2, [pc, #8]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800699a:	430b      	orrs	r3, r1
 800699c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80069a0:	e006      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80069a2:	bf00      	nop
 80069a4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a8:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80069ac:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80069b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80069bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80069be:	2300      	movs	r3, #0
 80069c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80069c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80069c6:	460b      	mov	r3, r1
 80069c8:	4313      	orrs	r3, r2
 80069ca:	d046      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80069cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069d8:	d028      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80069da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069de:	d821      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80069e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069e4:	d022      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80069e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ea:	d81b      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80069ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069f0:	d01c      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80069f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069f6:	d815      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80069f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fc:	d008      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80069fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a02:	d80f      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d011      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0c:	d00e      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8006a0e:	e009      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a14:	3308      	adds	r3, #8
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb46 	bl	80070a8 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006a22:	e004      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 8006a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10d      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006a36:	4bb6      	ldr	r3, [pc, #728]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a48:	4ab1      	ldr	r2, [pc, #708]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006a50:	e003      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a52:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006a56:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006a5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a68:	2300      	movs	r3, #0
 8006a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a6c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a70:	460b      	mov	r3, r1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	d03e      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006a76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d81d      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aab 	.word	0x08006aab
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006ac7 	.word	0x08006ac7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa0:	4a9b      	ldr	r2, [pc, #620]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006aa8:	e00e      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006aaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006aae:	332c      	adds	r3, #44	@ 0x2c
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fb91 	bl	80071d8 <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006abc:	e004      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 8006ac6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ac8:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10d      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006ad0:	4b8f      	ldr	r3, [pc, #572]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006ad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ad6:	f023 0107 	bic.w	r1, r3, #7
 8006ada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ae2:	4a8b      	ldr	r2, [pc, #556]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006aea:	e003      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006af0:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006af4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b00:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b02:	2300      	movs	r3, #0
 8006b04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	d04a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b1c:	d028      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006b1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b22:	d821      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006b24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b28:	d024      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006b2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b2e:	d81b      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b34:	d00e      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b3a:	d815      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b44:	d110      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b46:	4b72      	ldr	r3, [pc, #456]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	4a71      	ldr	r2, [pc, #452]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b50:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006b52:	e012      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b58:	332c      	adds	r3, #44	@ 0x2c
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fb3c 	bl	80071d8 <RCCEx_PLL3_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006b66:	e008      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006b6e:	e004      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8006b70:	bf00      	nop
 8006b72:	e002      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8006b74:	bf00      	nop
 8006b76:	e000      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8006b78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b7a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10d      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006b82:	4b63      	ldr	r3, [pc, #396]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b94:	4a5e      	ldr	r2, [pc, #376]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006b96:	430b      	orrs	r3, r1
 8006b98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b9c:	e003      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006ba2:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f000 80ba 	beq.w	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bca:	4b51      	ldr	r3, [pc, #324]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d113      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bde:	4a4c      	ldr	r2, [pc, #304]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006be0:	f043 0304 	orr.w	r3, r3, #4
 8006be4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006be8:	4b49      	ldr	r3, [pc, #292]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
      pwrclkchanged = SET;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c00:	4b44      	ldr	r3, [pc, #272]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c04:	4a43      	ldr	r2, [pc, #268]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c0c:	f7fa fd4c 	bl	80016a8 <HAL_GetTick>
 8006c10:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c14:	e00b      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c16:	f7fa fd47 	bl	80016a8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d903      	bls.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006c2c:	e005      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c2e:	4b39      	ldr	r3, [pc, #228]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0ed      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8006c3a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d16a      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c42:	4b33      	ldr	r3, [pc, #204]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d023      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8006c58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c5c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8006c60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d01b      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c68:	4b29      	ldr	r3, [pc, #164]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c76:	4b26      	ldr	r3, [pc, #152]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c7c:	4a24      	ldr	r2, [pc, #144]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c86:	4b22      	ldr	r3, [pc, #136]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c8c:	4a20      	ldr	r2, [pc, #128]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c96:	4a1e      	ldr	r2, [pc, #120]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d019      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fa fcfc 	bl	80016a8 <HAL_GetTick>
 8006cb0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cb4:	e00d      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb6:	f7fa fcf7 	bl	80016a8 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d903      	bls.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
            break;
 8006cd0:	e006      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ea      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 8006ce0:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10d      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006ce8:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cfa:	4a05      	ldr	r2, [pc, #20]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d02:	e00d      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d04:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006d08:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
 8006d0c:	e008      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006d0e:	bf00      	nop
 8006d10:	46020c00 	.word	0x46020c00
 8006d14:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006d1c:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d20:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d107      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d28:	4bc0      	ldr	r3, [pc, #768]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d2e:	4abf      	ldr	r2, [pc, #764]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d46:	2300      	movs	r3, #0
 8006d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	d042      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006d54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d5c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d60:	d022      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8006d62:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d66:	d81b      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8006d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d6c:	d011      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8006d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d72:	d815      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d019      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d7c:	d110      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d82:	3308      	adds	r3, #8
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f98f 	bl	80070a8 <RCCEx_PLL2_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006d90:	e00d      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d92:	4ba6      	ldr	r3, [pc, #664]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	4aa5      	ldr	r2, [pc, #660]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d9c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006d9e:	e006      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006da6:	e002      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8006dac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006dae:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10d      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006db6:	4b9d      	ldr	r3, [pc, #628]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dbc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006dc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dc8:	4a98      	ldr	r2, [pc, #608]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dd0:	e003      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd2:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006dd6:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006de8:	2300      	movs	r3, #0
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d02d      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e02:	d00b      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8006e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e08:	d804      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e12:	d007      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8006e1a:	e004      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e002      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8006e20:	bf00      	nop
 8006e22:	e000      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8006e24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e26:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10d      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e40:	4a7a      	ldr	r2, [pc, #488]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e42:	430b      	orrs	r3, r1
 8006e44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006e4e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006e52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e60:	2300      	movs	r3, #0
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d019      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006e6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e7a:	d105      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e80:	4a6a      	ldr	r2, [pc, #424]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e86:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006e88:	4b68      	ldr	r3, [pc, #416]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e8e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e9a:	4a64      	ldr	r2, [pc, #400]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d00c      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ec4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006ecc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ed0:	4956      	ldr	r1, [pc, #344]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006ed8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ee4:	623b      	str	r3, [r7, #32]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	d00c      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006efa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f06:	4949      	ldr	r1, [pc, #292]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006f0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d00c      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006f2a:	4b40      	ldr	r3, [pc, #256]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f30:	f023 0218 	bic.w	r2, r3, #24
 8006f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f3c:	493b      	ldr	r1, [pc, #236]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	d032      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006f60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f6c:	d105      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	4a2e      	ldr	r2, [pc, #184]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f78:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006f7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f86:	d108      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f88a 	bl	80070a8 <RCCEx_PLL2_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    }
    if (ret == HAL_OK)
 8006f9a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10d      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006fa2:	4b22      	ldr	r3, [pc, #136]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fa8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fb4:	491d      	ldr	r1, [pc, #116]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006fbc:	e003      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbe:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8006fc2:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d03d      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006fe2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fee:	d00e      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8006ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ff4:	d815      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ffe:	d110      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	4a09      	ldr	r2, [pc, #36]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800700c:	e011      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800700e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007012:	3308      	adds	r3, #8
 8007014:	4618      	mov	r0, r3
 8007016:	f000 f847 	bl	80070a8 <RCCEx_PLL2_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007020:	e007      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8007028:	e003      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 800702a:	bf00      	nop
 800702c:	46020c00 	.word	0x46020c00
        break;
 8007030:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007032:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10d      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800703a:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800703c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007040:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007044:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704c:	4915      	ldr	r1, [pc, #84]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800705a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800705e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	2300      	movs	r3, #0
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007074:	460b      	mov	r3, r1
 8007076:	4313      	orrs	r3, r2
 8007078:	d00c      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800707a:	4b0a      	ldr	r3, [pc, #40]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800707c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007080:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007084:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007088:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800708c:	4905      	ldr	r1, [pc, #20]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007094:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
}
 8007098:	4618      	mov	r0, r3
 800709a:	37d0      	adds	r7, #208	@ 0xd0
 800709c:	46bd      	mov	sp, r7
 800709e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a2:	bf00      	nop
 80070a4:	46020c00 	.word	0x46020c00

080070a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80070b0:	4b47      	ldr	r3, [pc, #284]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a46      	ldr	r2, [pc, #280]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 80070b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070bc:	f7fa faf4 	bl	80016a8 <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070c2:	e008      	b.n	80070d6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070c4:	f7fa faf0 	bl	80016a8 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e077      	b.n	80071c6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d6:	4b3e      	ldr	r3, [pc, #248]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f0      	bne.n	80070c4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80070e2:	4b3b      	ldr	r3, [pc, #236]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6811      	ldr	r1, [r2, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6852      	ldr	r2, [r2, #4]
 80070f6:	3a01      	subs	r2, #1
 80070f8:	0212      	lsls	r2, r2, #8
 80070fa:	430a      	orrs	r2, r1
 80070fc:	4934      	ldr	r1, [pc, #208]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007102:	4b33      	ldr	r3, [pc, #204]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007106:	4b33      	ldr	r3, [pc, #204]	@ (80071d4 <RCCEx_PLL2_Config+0x12c>)
 8007108:	4013      	ands	r3, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6892      	ldr	r2, [r2, #8]
 800710e:	3a01      	subs	r2, #1
 8007110:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	68d2      	ldr	r2, [r2, #12]
 8007118:	3a01      	subs	r2, #1
 800711a:	0252      	lsls	r2, r2, #9
 800711c:	b292      	uxth	r2, r2
 800711e:	4311      	orrs	r1, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6912      	ldr	r2, [r2, #16]
 8007124:	3a01      	subs	r2, #1
 8007126:	0412      	lsls	r2, r2, #16
 8007128:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800712c:	4311      	orrs	r1, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6952      	ldr	r2, [r2, #20]
 8007132:	3a01      	subs	r2, #1
 8007134:	0612      	lsls	r2, r2, #24
 8007136:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800713a:	430a      	orrs	r2, r1
 800713c:	4924      	ldr	r1, [pc, #144]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 800713e:	4313      	orrs	r3, r2
 8007140:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007142:	4b23      	ldr	r3, [pc, #140]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	f023 020c 	bic.w	r2, r3, #12
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	4920      	ldr	r1, [pc, #128]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007150:	4313      	orrs	r3, r2
 8007152:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007154:	4b1e      	ldr	r3, [pc, #120]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	491c      	ldr	r1, [pc, #112]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 800715e:	4313      	orrs	r3, r2
 8007160:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007162:	4b1b      	ldr	r3, [pc, #108]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007166:	4a1a      	ldr	r2, [pc, #104]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007168:	f023 0310 	bic.w	r3, r3, #16
 800716c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800716e:	4b18      	ldr	r3, [pc, #96]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007176:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	69d2      	ldr	r2, [r2, #28]
 800717e:	00d2      	lsls	r2, r2, #3
 8007180:	4913      	ldr	r1, [pc, #76]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007182:	4313      	orrs	r3, r2
 8007184:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007186:	4b12      	ldr	r3, [pc, #72]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718a:	4a11      	ldr	r2, [pc, #68]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 800718c:	f043 0310 	orr.w	r3, r3, #16
 8007190:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007192:	4b0f      	ldr	r3, [pc, #60]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a0e      	ldr	r2, [pc, #56]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 8007198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800719c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800719e:	f7fa fa83 	bl	80016a8 <HAL_GetTick>
 80071a2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071a4:	e008      	b.n	80071b8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071a6:	f7fa fa7f 	bl	80016a8 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e006      	b.n	80071c6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071b8:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <RCCEx_PLL2_Config+0x128>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0f0      	beq.n	80071a6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0

}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	46020c00 	.word	0x46020c00
 80071d4:	80800000 	.word	0x80800000

080071d8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80071e0:	4b47      	ldr	r3, [pc, #284]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a46      	ldr	r2, [pc, #280]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80071e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071ec:	f7fa fa5c 	bl	80016a8 <HAL_GetTick>
 80071f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071f2:	e008      	b.n	8007206 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071f4:	f7fa fa58 	bl	80016a8 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e077      	b.n	80072f6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007206:	4b3e      	ldr	r3, [pc, #248]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007212:	4b3b      	ldr	r3, [pc, #236]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007216:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6811      	ldr	r1, [r2, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6852      	ldr	r2, [r2, #4]
 8007226:	3a01      	subs	r2, #1
 8007228:	0212      	lsls	r2, r2, #8
 800722a:	430a      	orrs	r2, r1
 800722c:	4934      	ldr	r1, [pc, #208]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 800722e:	4313      	orrs	r3, r2
 8007230:	630b      	str	r3, [r1, #48]	@ 0x30
 8007232:	4b33      	ldr	r3, [pc, #204]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007236:	4b33      	ldr	r3, [pc, #204]	@ (8007304 <RCCEx_PLL3_Config+0x12c>)
 8007238:	4013      	ands	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6892      	ldr	r2, [r2, #8]
 800723e:	3a01      	subs	r2, #1
 8007240:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	68d2      	ldr	r2, [r2, #12]
 8007248:	3a01      	subs	r2, #1
 800724a:	0252      	lsls	r2, r2, #9
 800724c:	b292      	uxth	r2, r2
 800724e:	4311      	orrs	r1, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6912      	ldr	r2, [r2, #16]
 8007254:	3a01      	subs	r2, #1
 8007256:	0412      	lsls	r2, r2, #16
 8007258:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800725c:	4311      	orrs	r1, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6952      	ldr	r2, [r2, #20]
 8007262:	3a01      	subs	r2, #1
 8007264:	0612      	lsls	r2, r2, #24
 8007266:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800726a:	430a      	orrs	r2, r1
 800726c:	4924      	ldr	r1, [pc, #144]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 800726e:	4313      	orrs	r3, r2
 8007270:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007272:	4b23      	ldr	r3, [pc, #140]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007276:	f023 020c 	bic.w	r2, r3, #12
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	4920      	ldr	r1, [pc, #128]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007280:	4313      	orrs	r3, r2
 8007282:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007284:	4b1e      	ldr	r3, [pc, #120]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	491c      	ldr	r1, [pc, #112]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 800728e:	4313      	orrs	r3, r2
 8007290:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007292:	4b1b      	ldr	r3, [pc, #108]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	4a1a      	ldr	r2, [pc, #104]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 8007298:	f023 0310 	bic.w	r3, r3, #16
 800729c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800729e:	4b18      	ldr	r3, [pc, #96]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80072a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	69d2      	ldr	r2, [r2, #28]
 80072ae:	00d2      	lsls	r2, r2, #3
 80072b0:	4913      	ldr	r1, [pc, #76]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80072b6:	4b12      	ldr	r3, [pc, #72]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ba:	4a11      	ldr	r2, [pc, #68]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80072bc:	f043 0310 	orr.w	r3, r3, #16
 80072c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80072c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80072c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072cc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072ce:	f7fa f9eb 	bl	80016a8 <HAL_GetTick>
 80072d2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072d4:	e008      	b.n	80072e8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072d6:	f7fa f9e7 	bl	80016a8 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e006      	b.n	80072f6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <RCCEx_PLL3_Config+0x128>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	46020c00 	.word	0x46020c00
 8007304:	80800000 	.word	0x80800000

08007308 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e0fb      	b.n	8007512 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a7f      	ldr	r2, [pc, #508]	@ (800751c <HAL_SPI_Init+0x214>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <HAL_SPI_Init+0x26>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a7d      	ldr	r2, [pc, #500]	@ (8007520 <HAL_SPI_Init+0x218>)
 800732a:	4293      	cmp	r3, r2
 800732c:	e000      	b.n	8007330 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800732e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a78      	ldr	r2, [pc, #480]	@ (800751c <HAL_SPI_Init+0x214>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d004      	beq.n	800734a <HAL_SPI_Init+0x42>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a76      	ldr	r2, [pc, #472]	@ (8007520 <HAL_SPI_Init+0x218>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d105      	bne.n	8007356 <HAL_SPI_Init+0x4e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d901      	bls.n	8007356 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e0dd      	b.n	8007512 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f8ec 	bl	8007534 <SPI_GetPacketSize>
 800735c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6e      	ldr	r2, [pc, #440]	@ (800751c <HAL_SPI_Init+0x214>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d004      	beq.n	8007372 <HAL_SPI_Init+0x6a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a6c      	ldr	r2, [pc, #432]	@ (8007520 <HAL_SPI_Init+0x218>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d102      	bne.n	8007378 <HAL_SPI_Init+0x70>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d816      	bhi.n	80073a6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800737c:	4a69      	ldr	r2, [pc, #420]	@ (8007524 <HAL_SPI_Init+0x21c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a68      	ldr	r2, [pc, #416]	@ (8007528 <HAL_SPI_Init+0x220>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_SPI_Init+0x98>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a66      	ldr	r2, [pc, #408]	@ (800752c <HAL_SPI_Init+0x224>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_SPI_Init+0x98>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a65      	ldr	r2, [pc, #404]	@ (8007530 <HAL_SPI_Init+0x228>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d104      	bne.n	80073aa <HAL_SPI_Init+0xa2>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d901      	bls.n	80073aa <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e0b3      	b.n	8007512 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7f9 fc60 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0201 	bic.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80073e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073f0:	d119      	bne.n	8007426 <HAL_SPI_Init+0x11e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073fa:	d103      	bne.n	8007404 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10c      	bne.n	8007426 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007414:	d107      	bne.n	8007426 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007424:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00f      	beq.n	8007452 <HAL_SPI_Init+0x14a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	2b06      	cmp	r3, #6
 8007438:	d90b      	bls.n	8007452 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e007      	b.n	8007462 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007460:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69da      	ldr	r2, [r3, #28]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746a:	431a      	orrs	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007474:	ea42 0103 	orr.w	r1, r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ce:	ea42 0103 	orr.w	r1, r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	46002000 	.word	0x46002000
 8007520:	56002000 	.word	0x56002000
 8007524:	40013000 	.word	0x40013000
 8007528:	50013000 	.word	0x50013000
 800752c:	40003800 	.word	0x40003800
 8007530:	50003800 	.word	0x50003800

08007534 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	3307      	adds	r3, #7
 8007552:	08db      	lsrs	r3, r3, #3
 8007554:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	fb02 f303 	mul.w	r3, r2, r3
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b01      	cmp	r3, #1
 800757e:	d12e      	bne.n	80075de <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007586:	2b01      	cmp	r3, #1
 8007588:	d101      	bne.n	800758e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800758a:	2302      	movs	r3, #2
 800758c:	e028      	b.n	80075e0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80075ba:	ea42 0103 	orr.w	r1, r2, r3
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e000      	b.n	80075e0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
  }
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e049      	b.n	8007692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7f9 fec8 	bl	80013a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f000 fb52 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e049      	b.n	8007740 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f841 	bl	8007748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f000 fafb 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e097      	b.n	80078a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7f9 fd6f 	bl	8001268 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2202      	movs	r2, #2
 800778e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6812      	ldr	r2, [r2, #0]
 800779c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80077a0:	f023 0307 	bic.w	r3, r3, #7
 80077a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f000 fa8f 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	4313      	orrs	r3, r2
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80077fc:	f023 030c 	bic.w	r3, r3, #12
 8007800:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007808:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800780c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	4313      	orrs	r3, r2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	011a      	lsls	r2, r3, #4
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	031b      	lsls	r3, r3, #12
 800782c:	4313      	orrs	r3, r2
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800783a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	4313      	orrs	r3, r2
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e0ff      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b14      	cmp	r3, #20
 80078d2:	f200 80f0 	bhi.w	8007ab6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078d6:	a201      	add	r2, pc, #4	@ (adr r2, 80078dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007931 	.word	0x08007931
 80078e0:	08007ab7 	.word	0x08007ab7
 80078e4:	08007ab7 	.word	0x08007ab7
 80078e8:	08007ab7 	.word	0x08007ab7
 80078ec:	08007971 	.word	0x08007971
 80078f0:	08007ab7 	.word	0x08007ab7
 80078f4:	08007ab7 	.word	0x08007ab7
 80078f8:	08007ab7 	.word	0x08007ab7
 80078fc:	080079b3 	.word	0x080079b3
 8007900:	08007ab7 	.word	0x08007ab7
 8007904:	08007ab7 	.word	0x08007ab7
 8007908:	08007ab7 	.word	0x08007ab7
 800790c:	080079f3 	.word	0x080079f3
 8007910:	08007ab7 	.word	0x08007ab7
 8007914:	08007ab7 	.word	0x08007ab7
 8007918:	08007ab7 	.word	0x08007ab7
 800791c:	08007a35 	.word	0x08007a35
 8007920:	08007ab7 	.word	0x08007ab7
 8007924:	08007ab7 	.word	0x08007ab7
 8007928:	08007ab7 	.word	0x08007ab7
 800792c:	08007a75 	.word	0x08007a75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 facc 	bl	8007ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0208 	orr.w	r2, r2, #8
 800794a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0204 	bic.w	r2, r2, #4
 800795a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6999      	ldr	r1, [r3, #24]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	619a      	str	r2, [r3, #24]
      break;
 800796e:	e0a5      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fb6e 	bl	8008058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800798a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6999      	ldr	r1, [r3, #24]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	021a      	lsls	r2, r3, #8
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	619a      	str	r2, [r3, #24]
      break;
 80079b0:	e084      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fbfd 	bl	80081b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0208 	orr.w	r2, r2, #8
 80079cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0204 	bic.w	r2, r2, #4
 80079dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69d9      	ldr	r1, [r3, #28]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	61da      	str	r2, [r3, #28]
      break;
 80079f0:	e064      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fc8b 	bl	8008314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	021a      	lsls	r2, r3, #8
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	61da      	str	r2, [r3, #28]
      break;
 8007a32:	e043      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fd1a 	bl	8008474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0208 	orr.w	r2, r2, #8
 8007a4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0204 	bic.w	r2, r2, #4
 8007a5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007a72:	e023      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fd7c 	bl	8008578 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	021a      	lsls	r2, r3, #8
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007ab4:	e002      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop

08007ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIM_ConfigClockSource+0x1c>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e0e6      	b.n	8007cba <HAL_TIM_ConfigClockSource+0x1ea>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007b0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a67      	ldr	r2, [pc, #412]	@ (8007cc4 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	f000 80b1 	beq.w	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007b2c:	4a65      	ldr	r2, [pc, #404]	@ (8007cc4 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	f200 80b6 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b34:	4a64      	ldr	r2, [pc, #400]	@ (8007cc8 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f000 80a9 	beq.w	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007b3c:	4a62      	ldr	r2, [pc, #392]	@ (8007cc8 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	f200 80ae 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b44:	4a61      	ldr	r2, [pc, #388]	@ (8007ccc <HAL_TIM_ConfigClockSource+0x1fc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	f000 80a1 	beq.w	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007b4c:	4a5f      	ldr	r2, [pc, #380]	@ (8007ccc <HAL_TIM_ConfigClockSource+0x1fc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	f200 80a6 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b54:	4a5e      	ldr	r2, [pc, #376]	@ (8007cd0 <HAL_TIM_ConfigClockSource+0x200>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	f000 8099 	beq.w	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8007cd0 <HAL_TIM_ConfigClockSource+0x200>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	f200 809e 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b68:	f000 8091 	beq.w	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007b6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b70:	f200 8096 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b78:	f000 8089 	beq.w	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b80:	f200 808e 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b88:	d03e      	beq.n	8007c08 <HAL_TIM_ConfigClockSource+0x138>
 8007b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b8e:	f200 8087 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b96:	f000 8086 	beq.w	8007ca6 <HAL_TIM_ConfigClockSource+0x1d6>
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b9e:	d87f      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ba0:	2b70      	cmp	r3, #112	@ 0x70
 8007ba2:	d01a      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0x10a>
 8007ba4:	2b70      	cmp	r3, #112	@ 0x70
 8007ba6:	d87b      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ba8:	2b60      	cmp	r3, #96	@ 0x60
 8007baa:	d050      	beq.n	8007c4e <HAL_TIM_ConfigClockSource+0x17e>
 8007bac:	2b60      	cmp	r3, #96	@ 0x60
 8007bae:	d877      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007bb0:	2b50      	cmp	r3, #80	@ 0x50
 8007bb2:	d03c      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15e>
 8007bb4:	2b50      	cmp	r3, #80	@ 0x50
 8007bb6:	d873      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007bb8:	2b40      	cmp	r3, #64	@ 0x40
 8007bba:	d058      	beq.n	8007c6e <HAL_TIM_ConfigClockSource+0x19e>
 8007bbc:	2b40      	cmp	r3, #64	@ 0x40
 8007bbe:	d86f      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007bc0:	2b30      	cmp	r3, #48	@ 0x30
 8007bc2:	d064      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007bc4:	2b30      	cmp	r3, #48	@ 0x30
 8007bc6:	d86b      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d060      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	d867      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d05c      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007bd4:	2b10      	cmp	r3, #16
 8007bd6:	d05a      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x1be>
 8007bd8:	e062      	b.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bea:	f000 fdc5 	bl	8008778 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	609a      	str	r2, [r3, #8]
      break;
 8007c06:	e04f      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c18:	f000 fdae 	bl	8008778 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c2a:	609a      	str	r2, [r3, #8]
      break;
 8007c2c:	e03c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f000 fd20 	bl	8008680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2150      	movs	r1, #80	@ 0x50
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fd79 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 8007c4c:	e02c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f000 fd3f 	bl	80086de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2160      	movs	r1, #96	@ 0x60
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fd69 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 8007c6c:	e01c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f000 fd00 	bl	8008680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2140      	movs	r1, #64	@ 0x40
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fd59 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 8007c8c:	e00c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f000 fd50 	bl	800873e <TIM_ITRx_SetConfig>
      break;
 8007c9e:	e003      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca4:	e000      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8007ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	00100070 	.word	0x00100070
 8007cc8:	00100040 	.word	0x00100040
 8007ccc:	00100030 	.word	0x00100030
 8007cd0:	00100020 	.word	0x00100020

08007cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8007e94 <TIM_Base_SetConfig+0x1c0>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d02b      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a6a      	ldr	r2, [pc, #424]	@ (8007e98 <TIM_Base_SetConfig+0x1c4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d027      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfa:	d023      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d02:	d01f      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a65      	ldr	r2, [pc, #404]	@ (8007e9c <TIM_Base_SetConfig+0x1c8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01b      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a64      	ldr	r2, [pc, #400]	@ (8007ea0 <TIM_Base_SetConfig+0x1cc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d017      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a63      	ldr	r2, [pc, #396]	@ (8007ea4 <TIM_Base_SetConfig+0x1d0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d013      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a62      	ldr	r2, [pc, #392]	@ (8007ea8 <TIM_Base_SetConfig+0x1d4>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00f      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a61      	ldr	r2, [pc, #388]	@ (8007eac <TIM_Base_SetConfig+0x1d8>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00b      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a60      	ldr	r2, [pc, #384]	@ (8007eb0 <TIM_Base_SetConfig+0x1dc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d007      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a5f      	ldr	r2, [pc, #380]	@ (8007eb4 <TIM_Base_SetConfig+0x1e0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <TIM_Base_SetConfig+0x70>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8007eb8 <TIM_Base_SetConfig+0x1e4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d108      	bne.n	8007d56 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a4e      	ldr	r2, [pc, #312]	@ (8007e94 <TIM_Base_SetConfig+0x1c0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d043      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a4d      	ldr	r2, [pc, #308]	@ (8007e98 <TIM_Base_SetConfig+0x1c4>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d03f      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d6c:	d03b      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d74:	d037      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a48      	ldr	r2, [pc, #288]	@ (8007e9c <TIM_Base_SetConfig+0x1c8>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d033      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a47      	ldr	r2, [pc, #284]	@ (8007ea0 <TIM_Base_SetConfig+0x1cc>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d02f      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a46      	ldr	r2, [pc, #280]	@ (8007ea4 <TIM_Base_SetConfig+0x1d0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d02b      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a45      	ldr	r2, [pc, #276]	@ (8007ea8 <TIM_Base_SetConfig+0x1d4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d027      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a44      	ldr	r2, [pc, #272]	@ (8007eac <TIM_Base_SetConfig+0x1d8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d023      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a43      	ldr	r2, [pc, #268]	@ (8007eb0 <TIM_Base_SetConfig+0x1dc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d01f      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a42      	ldr	r2, [pc, #264]	@ (8007eb4 <TIM_Base_SetConfig+0x1e0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01b      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a41      	ldr	r2, [pc, #260]	@ (8007eb8 <TIM_Base_SetConfig+0x1e4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d017      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a40      	ldr	r2, [pc, #256]	@ (8007ebc <TIM_Base_SetConfig+0x1e8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ec0 <TIM_Base_SetConfig+0x1ec>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00f      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec4 <TIM_Base_SetConfig+0x1f0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00b      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8007ec8 <TIM_Base_SetConfig+0x1f4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d007      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8007ecc <TIM_Base_SetConfig+0x1f8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d003      	beq.n	8007de6 <TIM_Base_SetConfig+0x112>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a3b      	ldr	r2, [pc, #236]	@ (8007ed0 <TIM_Base_SetConfig+0x1fc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d108      	bne.n	8007df8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a1e      	ldr	r2, [pc, #120]	@ (8007e94 <TIM_Base_SetConfig+0x1c0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d023      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1d      	ldr	r2, [pc, #116]	@ (8007e98 <TIM_Base_SetConfig+0x1c4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d01f      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a22      	ldr	r2, [pc, #136]	@ (8007eb4 <TIM_Base_SetConfig+0x1e0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01b      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a21      	ldr	r2, [pc, #132]	@ (8007eb8 <TIM_Base_SetConfig+0x1e4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d017      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a20      	ldr	r2, [pc, #128]	@ (8007ebc <TIM_Base_SetConfig+0x1e8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d013      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1f      	ldr	r2, [pc, #124]	@ (8007ec0 <TIM_Base_SetConfig+0x1ec>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00f      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec4 <TIM_Base_SetConfig+0x1f0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00b      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec8 <TIM_Base_SetConfig+0x1f4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d007      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ecc <TIM_Base_SetConfig+0x1f8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d003      	beq.n	8007e66 <TIM_Base_SetConfig+0x192>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed0 <TIM_Base_SetConfig+0x1fc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d103      	bne.n	8007e6e <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f043 0204 	orr.w	r2, r3, #4
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	601a      	str	r2, [r3, #0]
}
 8007e86:	bf00      	nop
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40012c00 	.word	0x40012c00
 8007e98:	50012c00 	.word	0x50012c00
 8007e9c:	40000400 	.word	0x40000400
 8007ea0:	50000400 	.word	0x50000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	50000800 	.word	0x50000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	50000c00 	.word	0x50000c00
 8007eb4:	40013400 	.word	0x40013400
 8007eb8:	50013400 	.word	0x50013400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	50014000 	.word	0x50014000
 8007ec4:	40014400 	.word	0x40014400
 8007ec8:	50014400 	.word	0x50014400
 8007ecc:	40014800 	.word	0x40014800
 8007ed0:	50014800 	.word	0x50014800

08007ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	f023 0201 	bic.w	r2, r3, #1
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f023 0302 	bic.w	r3, r3, #2
 8007f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a40      	ldr	r2, [pc, #256]	@ (8008030 <TIM_OC1_SetConfig+0x15c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d023      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a3f      	ldr	r2, [pc, #252]	@ (8008034 <TIM_OC1_SetConfig+0x160>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d01f      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8008038 <TIM_OC1_SetConfig+0x164>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d01b      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a3d      	ldr	r2, [pc, #244]	@ (800803c <TIM_OC1_SetConfig+0x168>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d017      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a3c      	ldr	r2, [pc, #240]	@ (8008040 <TIM_OC1_SetConfig+0x16c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d013      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a3b      	ldr	r2, [pc, #236]	@ (8008044 <TIM_OC1_SetConfig+0x170>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00f      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8008048 <TIM_OC1_SetConfig+0x174>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00b      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a39      	ldr	r2, [pc, #228]	@ (800804c <TIM_OC1_SetConfig+0x178>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d007      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a38      	ldr	r2, [pc, #224]	@ (8008050 <TIM_OC1_SetConfig+0x17c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_OC1_SetConfig+0xa8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a37      	ldr	r2, [pc, #220]	@ (8008054 <TIM_OC1_SetConfig+0x180>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d10c      	bne.n	8007f96 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f023 0308 	bic.w	r3, r3, #8
 8007f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f023 0304 	bic.w	r3, r3, #4
 8007f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a25      	ldr	r2, [pc, #148]	@ (8008030 <TIM_OC1_SetConfig+0x15c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d023      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a24      	ldr	r2, [pc, #144]	@ (8008034 <TIM_OC1_SetConfig+0x160>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01f      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a23      	ldr	r2, [pc, #140]	@ (8008038 <TIM_OC1_SetConfig+0x164>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01b      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a22      	ldr	r2, [pc, #136]	@ (800803c <TIM_OC1_SetConfig+0x168>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d017      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a21      	ldr	r2, [pc, #132]	@ (8008040 <TIM_OC1_SetConfig+0x16c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a20      	ldr	r2, [pc, #128]	@ (8008044 <TIM_OC1_SetConfig+0x170>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00f      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8008048 <TIM_OC1_SetConfig+0x174>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00b      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800804c <TIM_OC1_SetConfig+0x178>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d007      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008050 <TIM_OC1_SetConfig+0x17c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d003      	beq.n	8007fe6 <TIM_OC1_SetConfig+0x112>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8008054 <TIM_OC1_SetConfig+0x180>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d111      	bne.n	800800a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	621a      	str	r2, [r3, #32]
}
 8008024:	bf00      	nop
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	40012c00 	.word	0x40012c00
 8008034:	50012c00 	.word	0x50012c00
 8008038:	40013400 	.word	0x40013400
 800803c:	50013400 	.word	0x50013400
 8008040:	40014000 	.word	0x40014000
 8008044:	50014000 	.word	0x50014000
 8008048:	40014400 	.word	0x40014400
 800804c:	50014400 	.word	0x50014400
 8008050:	40014800 	.word	0x40014800
 8008054:	50014800 	.word	0x50014800

08008058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	f023 0210 	bic.w	r2, r3, #16
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800808a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f023 0320 	bic.w	r3, r3, #32
 80080a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a36      	ldr	r2, [pc, #216]	@ (8008190 <TIM_OC2_SetConfig+0x138>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00b      	beq.n	80080d4 <TIM_OC2_SetConfig+0x7c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a35      	ldr	r2, [pc, #212]	@ (8008194 <TIM_OC2_SetConfig+0x13c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d007      	beq.n	80080d4 <TIM_OC2_SetConfig+0x7c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a34      	ldr	r2, [pc, #208]	@ (8008198 <TIM_OC2_SetConfig+0x140>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d003      	beq.n	80080d4 <TIM_OC2_SetConfig+0x7c>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a33      	ldr	r2, [pc, #204]	@ (800819c <TIM_OC2_SetConfig+0x144>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d10d      	bne.n	80080f0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a27      	ldr	r2, [pc, #156]	@ (8008190 <TIM_OC2_SetConfig+0x138>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d023      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a26      	ldr	r2, [pc, #152]	@ (8008194 <TIM_OC2_SetConfig+0x13c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d01f      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a25      	ldr	r2, [pc, #148]	@ (8008198 <TIM_OC2_SetConfig+0x140>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d01b      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a24      	ldr	r2, [pc, #144]	@ (800819c <TIM_OC2_SetConfig+0x144>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d017      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a23      	ldr	r2, [pc, #140]	@ (80081a0 <TIM_OC2_SetConfig+0x148>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a22      	ldr	r2, [pc, #136]	@ (80081a4 <TIM_OC2_SetConfig+0x14c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00f      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a21      	ldr	r2, [pc, #132]	@ (80081a8 <TIM_OC2_SetConfig+0x150>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00b      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a20      	ldr	r2, [pc, #128]	@ (80081ac <TIM_OC2_SetConfig+0x154>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a1f      	ldr	r2, [pc, #124]	@ (80081b0 <TIM_OC2_SetConfig+0x158>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_OC2_SetConfig+0xe8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a1e      	ldr	r2, [pc, #120]	@ (80081b4 <TIM_OC2_SetConfig+0x15c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d113      	bne.n	8008168 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800814e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	621a      	str	r2, [r3, #32]
}
 8008182:	bf00      	nop
 8008184:	371c      	adds	r7, #28
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	40012c00 	.word	0x40012c00
 8008194:	50012c00 	.word	0x50012c00
 8008198:	40013400 	.word	0x40013400
 800819c:	50013400 	.word	0x50013400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	50014000 	.word	0x50014000
 80081a8:	40014400 	.word	0x40014400
 80081ac:	50014400 	.word	0x50014400
 80081b0:	40014800 	.word	0x40014800
 80081b4:	50014800 	.word	0x50014800

080081b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a35      	ldr	r2, [pc, #212]	@ (80082ec <TIM_OC3_SetConfig+0x134>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d00b      	beq.n	8008232 <TIM_OC3_SetConfig+0x7a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a34      	ldr	r2, [pc, #208]	@ (80082f0 <TIM_OC3_SetConfig+0x138>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d007      	beq.n	8008232 <TIM_OC3_SetConfig+0x7a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a33      	ldr	r2, [pc, #204]	@ (80082f4 <TIM_OC3_SetConfig+0x13c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d003      	beq.n	8008232 <TIM_OC3_SetConfig+0x7a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a32      	ldr	r2, [pc, #200]	@ (80082f8 <TIM_OC3_SetConfig+0x140>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d10d      	bne.n	800824e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800824c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a26      	ldr	r2, [pc, #152]	@ (80082ec <TIM_OC3_SetConfig+0x134>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d023      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a25      	ldr	r2, [pc, #148]	@ (80082f0 <TIM_OC3_SetConfig+0x138>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d01f      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a24      	ldr	r2, [pc, #144]	@ (80082f4 <TIM_OC3_SetConfig+0x13c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01b      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a23      	ldr	r2, [pc, #140]	@ (80082f8 <TIM_OC3_SetConfig+0x140>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d017      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a22      	ldr	r2, [pc, #136]	@ (80082fc <TIM_OC3_SetConfig+0x144>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a21      	ldr	r2, [pc, #132]	@ (8008300 <TIM_OC3_SetConfig+0x148>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00f      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a20      	ldr	r2, [pc, #128]	@ (8008304 <TIM_OC3_SetConfig+0x14c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00b      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a1f      	ldr	r2, [pc, #124]	@ (8008308 <TIM_OC3_SetConfig+0x150>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d007      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1e      	ldr	r2, [pc, #120]	@ (800830c <TIM_OC3_SetConfig+0x154>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d003      	beq.n	800829e <TIM_OC3_SetConfig+0xe6>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a1d      	ldr	r2, [pc, #116]	@ (8008310 <TIM_OC3_SetConfig+0x158>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d113      	bne.n	80082c6 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	621a      	str	r2, [r3, #32]
}
 80082e0:	bf00      	nop
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	40012c00 	.word	0x40012c00
 80082f0:	50012c00 	.word	0x50012c00
 80082f4:	40013400 	.word	0x40013400
 80082f8:	50013400 	.word	0x50013400
 80082fc:	40014000 	.word	0x40014000
 8008300:	50014000 	.word	0x50014000
 8008304:	40014400 	.word	0x40014400
 8008308:	50014400 	.word	0x50014400
 800830c:	40014800 	.word	0x40014800
 8008310:	50014800 	.word	0x50014800

08008314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800834e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	031b      	lsls	r3, r3, #12
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4313      	orrs	r3, r2
 800836e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a36      	ldr	r2, [pc, #216]	@ (800844c <TIM_OC4_SetConfig+0x138>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00b      	beq.n	8008390 <TIM_OC4_SetConfig+0x7c>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a35      	ldr	r2, [pc, #212]	@ (8008450 <TIM_OC4_SetConfig+0x13c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d007      	beq.n	8008390 <TIM_OC4_SetConfig+0x7c>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a34      	ldr	r2, [pc, #208]	@ (8008454 <TIM_OC4_SetConfig+0x140>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d003      	beq.n	8008390 <TIM_OC4_SetConfig+0x7c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a33      	ldr	r2, [pc, #204]	@ (8008458 <TIM_OC4_SetConfig+0x144>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10d      	bne.n	80083ac <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	031b      	lsls	r3, r3, #12
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a27      	ldr	r2, [pc, #156]	@ (800844c <TIM_OC4_SetConfig+0x138>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d023      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a26      	ldr	r2, [pc, #152]	@ (8008450 <TIM_OC4_SetConfig+0x13c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d01f      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a25      	ldr	r2, [pc, #148]	@ (8008454 <TIM_OC4_SetConfig+0x140>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d01b      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a24      	ldr	r2, [pc, #144]	@ (8008458 <TIM_OC4_SetConfig+0x144>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d017      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a23      	ldr	r2, [pc, #140]	@ (800845c <TIM_OC4_SetConfig+0x148>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d013      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a22      	ldr	r2, [pc, #136]	@ (8008460 <TIM_OC4_SetConfig+0x14c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00f      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a21      	ldr	r2, [pc, #132]	@ (8008464 <TIM_OC4_SetConfig+0x150>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00b      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a20      	ldr	r2, [pc, #128]	@ (8008468 <TIM_OC4_SetConfig+0x154>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a1f      	ldr	r2, [pc, #124]	@ (800846c <TIM_OC4_SetConfig+0x158>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC4_SetConfig+0xe8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008470 <TIM_OC4_SetConfig+0x15c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d113      	bne.n	8008424 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008402:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800840a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	019b      	lsls	r3, r3, #6
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	019b      	lsls	r3, r3, #6
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4313      	orrs	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40012c00 	.word	0x40012c00
 8008450:	50012c00 	.word	0x50012c00
 8008454:	40013400 	.word	0x40013400
 8008458:	50013400 	.word	0x50013400
 800845c:	40014000 	.word	0x40014000
 8008460:	50014000 	.word	0x50014000
 8008464:	40014400 	.word	0x40014400
 8008468:	50014400 	.word	0x50014400
 800846c:	40014800 	.word	0x40014800
 8008470:	50014800 	.word	0x50014800

08008474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800849a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80084b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	041b      	lsls	r3, r3, #16
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a21      	ldr	r2, [pc, #132]	@ (8008550 <TIM_OC5_SetConfig+0xdc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d023      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a20      	ldr	r2, [pc, #128]	@ (8008554 <TIM_OC5_SetConfig+0xe0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d01f      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008558 <TIM_OC5_SetConfig+0xe4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01b      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a1e      	ldr	r2, [pc, #120]	@ (800855c <TIM_OC5_SetConfig+0xe8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d017      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008560 <TIM_OC5_SetConfig+0xec>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d013      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008564 <TIM_OC5_SetConfig+0xf0>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00f      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008568 <TIM_OC5_SetConfig+0xf4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00b      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a1a      	ldr	r2, [pc, #104]	@ (800856c <TIM_OC5_SetConfig+0xf8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d007      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a19      	ldr	r2, [pc, #100]	@ (8008570 <TIM_OC5_SetConfig+0xfc>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d003      	beq.n	8008516 <TIM_OC5_SetConfig+0xa2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a18      	ldr	r2, [pc, #96]	@ (8008574 <TIM_OC5_SetConfig+0x100>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d109      	bne.n	800852a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800851c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	621a      	str	r2, [r3, #32]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	40012c00 	.word	0x40012c00
 8008554:	50012c00 	.word	0x50012c00
 8008558:	40013400 	.word	0x40013400
 800855c:	50013400 	.word	0x50013400
 8008560:	40014000 	.word	0x40014000
 8008564:	50014000 	.word	0x50014000
 8008568:	40014400 	.word	0x40014400
 800856c:	50014400 	.word	0x50014400
 8008570:	40014800 	.word	0x40014800
 8008574:	50014800 	.word	0x50014800

08008578 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	021b      	lsls	r3, r3, #8
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	051b      	lsls	r3, r3, #20
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a22      	ldr	r2, [pc, #136]	@ (8008658 <TIM_OC6_SetConfig+0xe0>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d023      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a21      	ldr	r2, [pc, #132]	@ (800865c <TIM_OC6_SetConfig+0xe4>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d01f      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a20      	ldr	r2, [pc, #128]	@ (8008660 <TIM_OC6_SetConfig+0xe8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d01b      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008664 <TIM_OC6_SetConfig+0xec>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d017      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008668 <TIM_OC6_SetConfig+0xf0>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d013      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1d      	ldr	r2, [pc, #116]	@ (800866c <TIM_OC6_SetConfig+0xf4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00f      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008670 <TIM_OC6_SetConfig+0xf8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00b      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1b      	ldr	r2, [pc, #108]	@ (8008674 <TIM_OC6_SetConfig+0xfc>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d007      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a1a      	ldr	r2, [pc, #104]	@ (8008678 <TIM_OC6_SetConfig+0x100>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_OC6_SetConfig+0xa4>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a19      	ldr	r2, [pc, #100]	@ (800867c <TIM_OC6_SetConfig+0x104>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d109      	bne.n	8008630 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008622:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	4313      	orrs	r3, r2
 800862e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	621a      	str	r2, [r3, #32]
}
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40012c00 	.word	0x40012c00
 800865c:	50012c00 	.word	0x50012c00
 8008660:	40013400 	.word	0x40013400
 8008664:	50013400 	.word	0x50013400
 8008668:	40014000 	.word	0x40014000
 800866c:	50014000 	.word	0x50014000
 8008670:	40014400 	.word	0x40014400
 8008674:	50014400 	.word	0x50014400
 8008678:	40014800 	.word	0x40014800
 800867c:	50014800 	.word	0x50014800

08008680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	f023 0201 	bic.w	r2, r3, #1
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f023 030a 	bic.w	r3, r3, #10
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086de:	b480      	push	{r7}
 80086e0:	b087      	sub	sp, #28
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	f023 0210 	bic.w	r2, r3, #16
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	031b      	lsls	r3, r3, #12
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	4313      	orrs	r3, r2
 8008712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800871a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800873e:	b480      	push	{r7}
 8008740:	b085      	sub	sp, #20
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	f043 0307 	orr.w	r3, r3, #7
 8008764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	609a      	str	r2, [r3, #8]
}
 800876c:	bf00      	nop
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	021a      	lsls	r2, r3, #8
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	431a      	orrs	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4313      	orrs	r3, r2
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	609a      	str	r2, [r3, #8]
}
 80087ac:	bf00      	nop
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e097      	b.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a45      	ldr	r2, [pc, #276]	@ (800890c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00e      	beq.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a44      	ldr	r2, [pc, #272]	@ (8008910 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a42      	ldr	r2, [pc, #264]	@ (8008914 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a41      	ldr	r2, [pc, #260]	@ (8008918 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d108      	bne.n	800882a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800881e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008834:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a2f      	ldr	r2, [pc, #188]	@ (800890c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d040      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a2e      	ldr	r2, [pc, #184]	@ (8008910 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d03b      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008864:	d036      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800886e:	d031      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a29      	ldr	r2, [pc, #164]	@ (800891c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d02c      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a28      	ldr	r2, [pc, #160]	@ (8008920 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d027      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a26      	ldr	r2, [pc, #152]	@ (8008924 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d022      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a25      	ldr	r2, [pc, #148]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d01d      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a23      	ldr	r2, [pc, #140]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d018      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a22      	ldr	r2, [pc, #136]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d013      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a18      	ldr	r2, [pc, #96]	@ (8008914 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00e      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a17      	ldr	r2, [pc, #92]	@ (8008918 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d009      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d004      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d10c      	bne.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	40012c00 	.word	0x40012c00
 8008910:	50012c00 	.word	0x50012c00
 8008914:	40013400 	.word	0x40013400
 8008918:	50013400 	.word	0x50013400
 800891c:	40000400 	.word	0x40000400
 8008920:	50000400 	.word	0x50000400
 8008924:	40000800 	.word	0x40000800
 8008928:	50000800 	.word	0x50000800
 800892c:	40000c00 	.word	0x40000c00
 8008930:	50000c00 	.word	0x50000c00
 8008934:	40014000 	.word	0x40014000
 8008938:	50014000 	.word	0x50014000

0800893c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008950:	2b01      	cmp	r3, #1
 8008952:	d101      	bne.n	8008958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008954:	2302      	movs	r3, #2
 8008956:	e07d      	b.n	8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4313      	orrs	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008a60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00e      	beq.n	8008a08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008a64 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d009      	beq.n	8008a08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008a68 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d004      	beq.n	8008a08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1a      	ldr	r2, [pc, #104]	@ (8008a6c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d11c      	bne.n	8008a42 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a12:	051b      	lsls	r3, r3, #20
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	40012c00 	.word	0x40012c00
 8008a64:	50012c00 	.word	0x50012c00
 8008a68:	40013400 	.word	0x40013400
 8008a6c:	50013400 	.word	0x50013400

08008a70 <Sensor_TurnOffLED>:
										 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

//static uint16_t		adc_value[NUM_ADC];		// AD変換値

void Sensor_TurnOffLED()
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 8008a76:	2300      	movs	r3, #0
 8008a78:	71fb      	strb	r3, [r7, #7]
 8008a7a:	e012      	b.n	8008aa2 <Sensor_TurnOffLED+0x32>
		led_on_pattern[i] = 0x00000000;
 8008a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a80:	4a0d      	ldr	r2, [pc, #52]	@ (8008ab8 <Sensor_TurnOffLED+0x48>)
 8008a82:	2100      	movs	r1, #0
 8008a84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		led_off_pattern[i] = (uint32_t)SENSOR_ALL_PATTERN << 16;
 8008a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8008abc <Sensor_TurnOffLED+0x4c>)
 8008a8e:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 8008a92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 8008a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	71fb      	strb	r3, [r7, #7]
 8008aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aa6:	2b09      	cmp	r3, #9
 8008aa8:	dde8      	ble.n	8008a7c <Sensor_TurnOffLED+0xc>
	}
}
 8008aaa:	bf00      	nop
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	200004bc 	.word	0x200004bc
 8008abc:	200004e4 	.word	0x200004e4

08008ac0 <Sensor_TurnOnLED>:

void Sensor_TurnOnLED()
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
	Sensor_TurnOffLED();
 8008ac4:	f7ff ffd4 	bl	8008a70 <Sensor_TurnOffLED>
	led_on_pattern[LED_SL_ON] = IR1_Pin;
 8008ac8:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <Sensor_TurnOnLED+0x24>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	619a      	str	r2, [r3, #24]
	led_on_pattern[LED_SR_ON] = IR2_Pin;
 8008ace:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <Sensor_TurnOnLED+0x24>)
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	611a      	str	r2, [r3, #16]
	led_on_pattern[LED_FL_ON] = IR3_Pin;
 8008ad4:	4b03      	ldr	r3, [pc, #12]	@ (8008ae4 <Sensor_TurnOnLED+0x24>)
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	609a      	str	r2, [r3, #8]
	led_on_pattern[LED_FR_ON] = IR4_Pin;
 8008ada:	4b02      	ldr	r3, [pc, #8]	@ (8008ae4 <Sensor_TurnOnLED+0x24>)
 8008adc:	2208      	movs	r2, #8
 8008ade:	601a      	str	r2, [r3, #0]
}
 8008ae0:	bf00      	nop
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	200004bc 	.word	0x200004bc

08008ae8 <Sensor_Initialize>:

void Sensor_Initialize()
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b0b6      	sub	sp, #216	@ 0xd8
 8008aec:	af00      	add	r7, sp, #0

	  Sensor_TurnOnLED();
 8008aee:	f7ff ffe7 	bl	8008ac0 <Sensor_TurnOnLED>
	  DMA_NodeConfTypeDef nodeConf1,nodeConf2;
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf1, &Node_GPDMA1_Channel0);
 8008af2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008af6:	493b      	ldr	r1, [pc, #236]	@ (8008be4 <Sensor_Initialize+0xfc>)
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fa ff41 	bl	8003980 <HAL_DMAEx_List_GetNodeConfig>
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf2, &Node_GPDMA1_Channel1);
 8008afe:	463b      	mov	r3, r7
 8008b00:	4939      	ldr	r1, [pc, #228]	@ (8008be8 <Sensor_Initialize+0x100>)
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fa ff3c 	bl	8003980 <HAL_DMAEx_List_GetNodeConfig>
	  // 書き換えたい部分だけ変更
	  nodeConf1.SrcAddress = (uint32_t)led_on_pattern;
 8008b08:	4b38      	ldr	r3, [pc, #224]	@ (8008bec <Sensor_Initialize+0x104>)
 8008b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  nodeConf1.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 8008b0e:	4b38      	ldr	r3, [pc, #224]	@ (8008bf0 <Sensor_Initialize+0x108>)
 8008b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	  nodeConf1.DataSize   = 4*NUM_ADC;
 8008b14:	2328      	movs	r3, #40	@ 0x28
 8008b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	  nodeConf2.SrcAddress = (uint32_t)led_off_pattern;
 8008b1a:	4b36      	ldr	r3, [pc, #216]	@ (8008bf4 <Sensor_Initialize+0x10c>)
 8008b1c:	663b      	str	r3, [r7, #96]	@ 0x60
	  nodeConf2.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 8008b1e:	4b34      	ldr	r3, [pc, #208]	@ (8008bf0 <Sensor_Initialize+0x108>)
 8008b20:	667b      	str	r3, [r7, #100]	@ 0x64
	  nodeConf2.DataSize   = 4*NUM_ADC	;
 8008b22:	2328      	movs	r3, #40	@ 0x28
 8008b24:	66bb      	str	r3, [r7, #104]	@ 0x68

	  // ノードを再構築（再設定）
	  if (HAL_DMAEx_List_BuildNode(&nodeConf1, &Node_GPDMA1_Channel0) != HAL_OK)
 8008b26:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008b2a:	492e      	ldr	r1, [pc, #184]	@ (8008be4 <Sensor_Initialize+0xfc>)
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fa ff11 	bl	8003954 <HAL_DMAEx_List_BuildNode>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <Sensor_Initialize+0x54>
	      Error_Handler();
 8008b38:	f7f8 f82e 	bl	8000b98 <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8008b3c:	4a29      	ldr	r2, [pc, #164]	@ (8008be4 <Sensor_Initialize+0xfc>)
 8008b3e:	2100      	movs	r1, #0
 8008b40:	482d      	ldr	r0, [pc, #180]	@ (8008bf8 <Sensor_Initialize+0x110>)
 8008b42:	f7fa ff33 	bl	80039ac <HAL_DMAEx_List_InsertNode>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <Sensor_Initialize+0x68>
	      Error_Handler();
 8008b4c:	f7f8 f824 	bl	8000b98 <Error_Handler>
	  // ★ Circularモードに
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8008b50:	4829      	ldr	r0, [pc, #164]	@ (8008bf8 <Sensor_Initialize+0x110>)
 8008b52:	f7fa fff4 	bl	8003b3e <HAL_DMAEx_List_SetCircularMode>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <Sensor_Initialize+0x78>
	      Error_Handler();
 8008b5c:	f7f8 f81c 	bl	8000b98 <Error_Handler>


	  if (HAL_DMAEx_List_BuildNode(&nodeConf2, &Node_GPDMA1_Channel1) != HAL_OK)
 8008b60:	463b      	mov	r3, r7
 8008b62:	4921      	ldr	r1, [pc, #132]	@ (8008be8 <Sensor_Initialize+0x100>)
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fa fef5 	bl	8003954 <HAL_DMAEx_List_BuildNode>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <Sensor_Initialize+0x8c>
	      Error_Handler();
 8008b70:	f7f8 f812 	bl	8000b98 <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8008b74:	4a1c      	ldr	r2, [pc, #112]	@ (8008be8 <Sensor_Initialize+0x100>)
 8008b76:	2100      	movs	r1, #0
 8008b78:	4820      	ldr	r0, [pc, #128]	@ (8008bfc <Sensor_Initialize+0x114>)
 8008b7a:	f7fa ff17 	bl	80039ac <HAL_DMAEx_List_InsertNode>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <Sensor_Initialize+0xa0>
	        Error_Handler();
 8008b84:	f7f8 f808 	bl	8000b98 <Error_Handler>
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8008b88:	481c      	ldr	r0, [pc, #112]	@ (8008bfc <Sensor_Initialize+0x114>)
 8008b8a:	f7fa ffd8 	bl	8003b3e <HAL_DMAEx_List_SetCircularMode>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <Sensor_Initialize+0xb0>
	        Error_Handler();
 8008b94:	f7f8 f800 	bl	8000b98 <Error_Handler>


	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel0) != HAL_OK)
 8008b98:	4819      	ldr	r0, [pc, #100]	@ (8008c00 <Sensor_Initialize+0x118>)
 8008b9a:	f7fa fe47 	bl	800382c <HAL_DMAEx_List_Start_IT>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <Sensor_Initialize+0xc0>
	  {
		Error_Handler();
 8008ba4:	f7f7 fff8 	bl	8000b98 <Error_Handler>
	  }

	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel1) != HAL_OK)
 8008ba8:	4816      	ldr	r0, [pc, #88]	@ (8008c04 <Sensor_Initialize+0x11c>)
 8008baa:	f7fa fe3f 	bl	800382c <HAL_DMAEx_List_Start_IT>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <Sensor_Initialize+0xd0>
	  {
	  	Error_Handler();
 8008bb4:	f7f7 fff0 	bl	8000b98 <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_1) != HAL_OK)
 8008bb8:	2100      	movs	r1, #0
 8008bba:	4813      	ldr	r0, [pc, #76]	@ (8008c08 <Sensor_Initialize+0x120>)
 8008bbc:	f7fc f8cc 	bl	8004d58 <HAL_LPTIM_IC_Start>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <Sensor_Initialize+0xe2>
	  {
	      Error_Handler();
 8008bc6:	f7f7 ffe7 	bl	8000b98 <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_2) != HAL_OK)
 8008bca:	2101      	movs	r1, #1
 8008bcc:	480e      	ldr	r0, [pc, #56]	@ (8008c08 <Sensor_Initialize+0x120>)
 8008bce:	f7fc f8c3 	bl	8004d58 <HAL_LPTIM_IC_Start>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <Sensor_Initialize+0xf4>
	  {
	      Error_Handler();
 8008bd8:	f7f7 ffde 	bl	8000b98 <Error_Handler>
	  }

}
 8008bdc:	bf00      	nop
 8008bde:	37d8      	adds	r7, #216	@ 0xd8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	200001f4 	.word	0x200001f4
 8008be8:	20000140 	.word	0x20000140
 8008bec:	200004bc 	.word	0x200004bc
 8008bf0:	42020018 	.word	0x42020018
 8008bf4:	200004e4 	.word	0x200004e4
 8008bf8:	20000218 	.word	0x20000218
 8008bfc:	20000164 	.word	0x20000164
 8008c00:	20000230 	.word	0x20000230
 8008c04:	2000017c 	.word	0x2000017c
 8008c08:	200002a8 	.word	0x200002a8

08008c0c <memset>:
 8008c0c:	4402      	add	r2, r0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d100      	bne.n	8008c16 <memset+0xa>
 8008c14:	4770      	bx	lr
 8008c16:	f803 1b01 	strb.w	r1, [r3], #1
 8008c1a:	e7f9      	b.n	8008c10 <memset+0x4>

08008c1c <__libc_init_array>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c54 <__libc_init_array+0x38>)
 8008c20:	2600      	movs	r6, #0
 8008c22:	4c0d      	ldr	r4, [pc, #52]	@ (8008c58 <__libc_init_array+0x3c>)
 8008c24:	1b64      	subs	r4, r4, r5
 8008c26:	10a4      	asrs	r4, r4, #2
 8008c28:	42a6      	cmp	r6, r4
 8008c2a:	d109      	bne.n	8008c40 <__libc_init_array+0x24>
 8008c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c5c <__libc_init_array+0x40>)
 8008c2e:	2600      	movs	r6, #0
 8008c30:	4c0b      	ldr	r4, [pc, #44]	@ (8008c60 <__libc_init_array+0x44>)
 8008c32:	f000 f817 	bl	8008c64 <_init>
 8008c36:	1b64      	subs	r4, r4, r5
 8008c38:	10a4      	asrs	r4, r4, #2
 8008c3a:	42a6      	cmp	r6, r4
 8008c3c:	d105      	bne.n	8008c4a <__libc_init_array+0x2e>
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c44:	3601      	adds	r6, #1
 8008c46:	4798      	blx	r3
 8008c48:	e7ee      	b.n	8008c28 <__libc_init_array+0xc>
 8008c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c4e:	3601      	adds	r6, #1
 8008c50:	4798      	blx	r3
 8008c52:	e7f2      	b.n	8008c3a <__libc_init_array+0x1e>
 8008c54:	08008d4c 	.word	0x08008d4c
 8008c58:	08008d4c 	.word	0x08008d4c
 8008c5c:	08008d4c 	.word	0x08008d4c
 8008c60:	08008d50 	.word	0x08008d50

08008c64 <_init>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr

08008c70 <_fini>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr
