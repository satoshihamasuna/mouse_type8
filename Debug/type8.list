
type8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3a0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800c5d8  0800c5d8  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c6d8  0800c6d8  0000d6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800c6e0  0800c6e0  0000d6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c6e8  0800c6e8  0000d6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  0800c6ec  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007b4  2000000c  0800c6f5  0000e00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007c0  0800c6f5  0000e7c0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029448  00000000  00000000  0000e03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b36  00000000  00000000  00037487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000170d  00000000  00000000  0003dd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000344b1  00000000  00000000  0003f485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029818  00000000  00000000  00073936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a145  00000000  00000000  0009d14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7293  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e7c  00000000  00000000  001e72d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001ef154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c5c0 	.word	0x0800c5c0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800c5c0 	.word	0x0800c5c0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2220      	movs	r2, #32
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f00b ffb1 	bl	800c568 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <MX_ADC1_Init+0xd8>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060c:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000612:	4b2d      	ldr	r3, [pc, #180]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b2a      	ldr	r3, [pc, #168]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 800062c:	2204      	movs	r2, #4
 800062e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000632:	2200      	movs	r2, #0
 8000634:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000636:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000640:	2201      	movs	r2, #1
 8000642:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 800064e:	2200      	movs	r2, #0
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000662:	2200      	movs	r2, #0
 8000664:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000668:	2200      	movs	r2, #0
 800066a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 800066e:	2200      	movs	r2, #0
 8000670:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000674:	2200      	movs	r2, #0
 8000676:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 8000682:	f001 fe4f 	bl	8002324 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800068c:	f000 fc50 	bl	8000f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_ADC1_Init+0xdc>)
 8000692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000694:	2306      	movs	r3, #6
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xd4>)
 80006b0:	f002 f902 	bl	80028b8 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80006ba:	f000 fc39 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000028 	.word	0x20000028
 80006cc:	42028000 	.word	0x42028000
 80006d0:	2a000400 	.word	0x2a000400

080006d4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2220      	movs	r2, #32
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f00b ff41 	bl	800c568 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 80006e8:	4a2f      	ldr	r2, [pc, #188]	@ (80007a8 <MX_ADC4_Init+0xd4>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000706:	2204      	movs	r2, #4
 8000708:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000712:	2200      	movs	r2, #0
 8000714:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 1;
 800071e:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000720:	2201      	movs	r2, #1
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 800072e:	2200      	movs	r2, #0
 8000730:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000734:	2200      	movs	r2, #0
 8000736:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000742:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000746:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 800074a:	2200      	movs	r2, #0
 800074c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000750:	2200      	movs	r2, #0
 8000752:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000756:	2200      	movs	r2, #0
 8000758:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000762:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 8000764:	f001 fdde 	bl	8002324 <HAL_ADC_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC4_Init+0x9e>
  {
    Error_Handler();
 800076e:	f000 fbdf 	bl	8000f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_ADC4_Init+0xd8>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077e:	2304      	movs	r3, #4
 8000780:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <MX_ADC4_Init+0xd0>)
 800078c:	f002 f894 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 8000796:	f000 fbcb 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000b4 	.word	0x200000b4
 80007a8:	46021000 	.word	0x46021000
 80007ac:	24000200 	.word	0x24000200

080007b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0bc      	sub	sp, #240	@ 0xf0
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	22b8      	movs	r2, #184	@ 0xb8
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00b fec9 	bl	800c568 <memset>
  if(adcHandle->Instance==ADC1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a56      	ldr	r2, [pc, #344]	@ (8000934 <HAL_ADC_MspInit+0x184>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d15f      	bne.n	80008a0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80007e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80007ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f006 fe77 	bl	80074ec <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000804:	f000 fb94 	bl	8000f30 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000808:	4b4b      	ldr	r3, [pc, #300]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 800080a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080e:	4a4a      	ldr	r2, [pc, #296]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 8000810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000814:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000818:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 800081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800081e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b44      	ldr	r3, [pc, #272]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 8000828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082c:	4a42      	ldr	r2, [pc, #264]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000836:	4b40      	ldr	r3, [pc, #256]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b3c      	ldr	r3, [pc, #240]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 8000846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084a:	4a3b      	ldr	r2, [pc, #236]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000854:	4b38      	ldr	r3, [pc, #224]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000862:	23e0      	movs	r3, #224	@ 0xe0
 8000864:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000868:	2303      	movs	r3, #3
 800086a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000878:	4619      	mov	r1, r3
 800087a:	4830      	ldr	r0, [pc, #192]	@ (800093c <HAL_ADC_MspInit+0x18c>)
 800087c:	f004 fe54 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000880:	2303      	movs	r3, #3
 8000882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000886:	2303      	movs	r3, #3
 8000888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000896:	4619      	mov	r1, r3
 8000898:	4829      	ldr	r0, [pc, #164]	@ (8000940 <HAL_ADC_MspInit+0x190>)
 800089a:	f004 fe45 	bl	8005528 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 800089e:	e045      	b.n	800092c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC4)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a27      	ldr	r2, [pc, #156]	@ (8000944 <HAL_ADC_MspInit+0x194>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d140      	bne.n	800092c <HAL_ADC_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80008aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80008b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fe12 	bl	80074ec <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_ADC_MspInit+0x122>
      Error_Handler();
 80008ce:	f000 fb2f 	bl	8000f30 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 80008d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008d8:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 80008e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 80008f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_ADC_MspInit+0x188>)
 8000902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800090e:	2310      	movs	r3, #16
 8000910:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000914:	2303      	movs	r3, #3
 8000916:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <HAL_ADC_MspInit+0x18c>)
 8000928:	f004 fdfe 	bl	8005528 <HAL_GPIO_Init>
}
 800092c:	bf00      	nop
 800092e:	37f0      	adds	r7, #240	@ 0xf0
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	42028000 	.word	0x42028000
 8000938:	46020c00 	.word	0x46020c00
 800093c:	42020000 	.word	0x42020000
 8000940:	42020400 	.word	0x42020400
 8000944:	46021000 	.word	0x46021000

08000948 <MX_GPDMA1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	@ 0x70
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  DMA_NodeConfTypeDef NodeConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	226c      	movs	r2, #108	@ 0x6c
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f00b fe07 	bl	800c568 <memset>

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800095a:	4b7b      	ldr	r3, [pc, #492]	@ (8000b48 <MX_GPDMA1_Init+0x200>)
 800095c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000960:	4a79      	ldr	r2, [pc, #484]	@ (8000b48 <MX_GPDMA1_Init+0x200>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800096a:	4b77      	ldr	r3, [pc, #476]	@ (8000b48 <MX_GPDMA1_Init+0x200>)
 800096c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	201d      	movs	r0, #29
 800097e:	f002 fee3 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000982:	201d      	movs	r0, #29
 8000984:	f002 fefa 	bl	800377c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	201e      	movs	r0, #30
 800098e:	f002 fedb 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000992:	201e      	movs	r0, #30
 8000994:	f002 fef2 	bl	800377c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	201f      	movs	r0, #31
 800099e:	f002 fed3 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80009a2:	201f      	movs	r0, #31
 80009a4:	f002 feea 	bl	800377c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2020      	movs	r0, #32
 80009ae:	f002 fecb 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80009b2:	2020      	movs	r0, #32
 80009b4:	f002 fee2 	bl	800377c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80009b8:	2321      	movs	r3, #33	@ 0x21
 80009ba:	607b      	str	r3, [r7, #4]
  NodeConfig.Init.Request = DMA_REQUEST_SW;
 80009bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009c0:	60bb      	str	r3, [r7, #8]
  NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  NodeConfig.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80009c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ca:	613b      	str	r3, [r7, #16]
  NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80009cc:	2308      	movs	r3, #8
 80009ce:	617b      	str	r3, [r7, #20]
  NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80009d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009dc:	623b      	str	r3, [r7, #32]
  NodeConfig.Init.SrcBurstLength = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  NodeConfig.Init.DestBurstLength = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	@ 0x30
  NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	@ 0x34
  NodeConfig.Init.Mode = DMA_NORMAL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_SINGLE_BURST_TRANSFER;
 80009f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80009f6:	647b      	str	r3, [r7, #68]	@ 0x44
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_FALLING;
 80009f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_LPTIM1_CH2;
 80009fe:	230c      	movs	r3, #12
 8000a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000a06:	2300      	movs	r3, #0
 8000a08:	643b      	str	r3, [r7, #64]	@ 0x40
  NodeConfig.SrcAddress = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	667b      	str	r3, [r7, #100]	@ 0x64
  NodeConfig.DstAddress = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66bb      	str	r3, [r7, #104]	@ 0x68
  NodeConfig.DataSize = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	494c      	ldr	r1, [pc, #304]	@ (8000b4c <MX_GPDMA1_Init+0x204>)
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fea2 	bl	8004764 <HAL_DMAEx_List_BuildNode>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_GPDMA1_Init+0xe2>
  {
    Error_Handler();
 8000a26:	f000 fa83 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8000a2a:	4a48      	ldr	r2, [pc, #288]	@ (8000b4c <MX_GPDMA1_Init+0x204>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4848      	ldr	r0, [pc, #288]	@ (8000b50 <MX_GPDMA1_Init+0x208>)
 8000a30:	f003 fec4 	bl	80047bc <HAL_DMAEx_List_InsertNode>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_GPDMA1_Init+0xf6>
  {
    Error_Handler();
 8000a3a:	f000 fa79 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8000a3e:	4844      	ldr	r0, [pc, #272]	@ (8000b50 <MX_GPDMA1_Init+0x208>)
 8000a40:	f003 ff85 	bl	800494e <HAL_DMAEx_List_SetCircularMode>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_GPDMA1_Init+0x106>
  {
    Error_Handler();
 8000a4a:	f000 fa71 	bl	8000f30 <Error_Handler>
  }
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000a4e:	4b41      	ldr	r3, [pc, #260]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a50:	4a41      	ldr	r2, [pc, #260]	@ (8000b58 <MX_GPDMA1_Init+0x210>)
 8000a52:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000a54:	4b3f      	ldr	r3, [pc, #252]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000a62:	4b3c      	ldr	r3, [pc, #240]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000a6e:	4b39      	ldr	r3, [pc, #228]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a70:	2281      	movs	r2, #129	@ 0x81
 8000a72:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8000a74:	4837      	ldr	r0, [pc, #220]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a76:	f003 fcb5 	bl	80043e4 <HAL_DMAEx_List_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_GPDMA1_Init+0x13c>
  {
    Error_Handler();
 8000a80:	f000 fa56 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8000a84:	4932      	ldr	r1, [pc, #200]	@ (8000b50 <MX_GPDMA1_Init+0x208>)
 8000a86:	4833      	ldr	r0, [pc, #204]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a88:	f003 ffc2 	bl	8004a10 <HAL_DMAEx_List_LinkQ>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_GPDMA1_Init+0x14e>
  {
    Error_Handler();
 8000a92:	f000 fa4d 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a96:	2110      	movs	r1, #16
 8000a98:	482e      	ldr	r0, [pc, #184]	@ (8000b54 <MX_GPDMA1_Init+0x20c>)
 8000a9a:	f003 f9e7 	bl	8003e6c <HAL_DMA_ConfigChannelAttributes>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_GPDMA1_Init+0x160>
  {
    Error_Handler();
 8000aa4:	f000 fa44 	bl	8000f30 <Error_Handler>
  }
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8000aa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	492a      	ldr	r1, [pc, #168]	@ (8000b5c <MX_GPDMA1_Init+0x214>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 fe56 	bl	8004764 <HAL_DMAEx_List_BuildNode>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_GPDMA1_Init+0x17a>
  {
    Error_Handler();
 8000abe:	f000 fa37 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8000ac2:	4a26      	ldr	r2, [pc, #152]	@ (8000b5c <MX_GPDMA1_Init+0x214>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4826      	ldr	r0, [pc, #152]	@ (8000b60 <MX_GPDMA1_Init+0x218>)
 8000ac8:	f003 fe78 	bl	80047bc <HAL_DMAEx_List_InsertNode>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_GPDMA1_Init+0x18e>
  {
    Error_Handler();
 8000ad2:	f000 fa2d 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8000ad6:	4822      	ldr	r0, [pc, #136]	@ (8000b60 <MX_GPDMA1_Init+0x218>)
 8000ad8:	f003 ff39 	bl	800494e <HAL_DMAEx_List_SetCircularMode>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_GPDMA1_Init+0x19e>
  {
    Error_Handler();
 8000ae2:	f000 fa25 	bl	8000f30 <Error_Handler>
  }
  handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b68 <MX_GPDMA1_Init+0x220>)
 8000aea:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000aee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000af2:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000b00:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000b08:	2281      	movs	r2, #129	@ 0x81
 8000b0a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000b0c:	4815      	ldr	r0, [pc, #84]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000b0e:	f003 fc69 	bl	80043e4 <HAL_DMAEx_List_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_GPDMA1_Init+0x1d4>
  {
    Error_Handler();
 8000b18:	f000 fa0a 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8000b1c:	4910      	ldr	r1, [pc, #64]	@ (8000b60 <MX_GPDMA1_Init+0x218>)
 8000b1e:	4811      	ldr	r0, [pc, #68]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000b20:	f003 ff76 	bl	8004a10 <HAL_DMAEx_List_LinkQ>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_GPDMA1_Init+0x1e6>
  {
    Error_Handler();
 8000b2a:	f000 fa01 	bl	8000f30 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b2e:	2110      	movs	r1, #16
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <MX_GPDMA1_Init+0x21c>)
 8000b32:	f003 f99b 	bl	8003e6c <HAL_DMA_ConfigChannelAttributes>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_GPDMA1_Init+0x1f8>
  {
    Error_Handler();
 8000b3c:	f000 f9f8 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3770      	adds	r7, #112	@ 0x70
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	46020c00 	.word	0x46020c00
 8000b4c:	20000140 	.word	0x20000140
 8000b50:	20000164 	.word	0x20000164
 8000b54:	2000017c 	.word	0x2000017c
 8000b58:	400200d0 	.word	0x400200d0
 8000b5c:	200001f4 	.word	0x200001f4
 8000b60:	20000218 	.word	0x20000218
 8000b64:	20000230 	.word	0x20000230
 8000b68:	40020050 	.word	0x40020050

08000b6c <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b4f      	ldr	r3, [pc, #316]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b88:	4a4d      	ldr	r2, [pc, #308]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b92:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba0:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba6:	4a46      	ldr	r2, [pc, #280]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bb0:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b40      	ldr	r3, [pc, #256]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bce:	4b3c      	ldr	r3, [pc, #240]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be2:	4a37      	ldr	r2, [pc, #220]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bec:	4b34      	ldr	r3, [pc, #208]	@ (8000cc0 <MX_GPIO_Init+0x154>)
 8000bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED6_Pin|LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000c00:	4830      	ldr	r0, [pc, #192]	@ (8000cc4 <MX_GPIO_Init+0x158>)
 8000c02:	f004 fe69 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2103      	movs	r1, #3
 8000c0a:	482f      	ldr	r0, [pc, #188]	@ (8000cc8 <MX_GPIO_Init+0x15c>)
 8000c0c:	f004 fe64 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000c10:	2200      	movs	r2, #0
 8000c12:	f240 110f 	movw	r1, #271	@ 0x10f
 8000c16:	482d      	ldr	r0, [pc, #180]	@ (8000ccc <MX_GPIO_Init+0x160>)
 8000c18:	f004 fe5e 	bl	80058d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c22:	482b      	ldr	r0, [pc, #172]	@ (8000cd0 <MX_GPIO_Init+0x164>)
 8000c24:	f004 fe58 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED6_Pin LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED5_Pin|LED4_Pin;
 8000c28:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4820      	ldr	r0, [pc, #128]	@ (8000cc4 <MX_GPIO_Init+0x158>)
 8000c42:	f004 fc71 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000c46:	2303      	movs	r3, #3
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481a      	ldr	r0, [pc, #104]	@ (8000cc8 <MX_GPIO_Init+0x15c>)
 8000c5e:	f004 fc63 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR2_Pin IR3_Pin IR4_Pin
                           PA8 */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000c62:	f240 130f 	movw	r3, #271	@ 0x10f
 8000c66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <MX_GPIO_Init+0x160>)
 8000c7c:	f004 fc54 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_GPIO_Init+0x164>)
 8000c9a:	f004 fc45 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_GPIO_Init+0x15c>)
 8000cb2:	f004 fc39 	bl	8005528 <HAL_GPIO_Init>

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	46020c00 	.word	0x46020c00
 8000cc4:	42020800 	.word	0x42020800
 8000cc8:	42021c00 	.word	0x42021c00
 8000ccc:	42020000 	.word	0x42020000
 8000cd0:	42020400 	.word	0x42020400

08000cd4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f004 fe15 	bl	8005908 <HAL_ICACHE_ConfigAssociativityMode>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ce4:	f000 f924 	bl	8000f30 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ce8:	f004 fe2e 	bl	8005948 <HAL_ICACHE_Enable>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000cf2:	f000 f91d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LPTIM_OC_ConfigTypeDef sConfig1 = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d0c:	4a23      	ldr	r2, [pc, #140]	@ (8000d9c <MX_LPTIM1_Init+0xa0>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d10:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d1c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d24:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 100;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d28:	2264      	movs	r2, #100	@ 0x64
 8000d2a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000d4a:	4813      	ldr	r0, [pc, #76]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d4c:	f004 fe0c 	bl	8005968 <HAL_LPTIM_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_LPTIM1_Init+0x5e>
  {
    Error_Handler();
 8000d56:	f000 f8eb 	bl	8000f30 <Error_Handler>
  }
  sConfig1.Pulse = 50;
 8000d5a:	2332      	movs	r3, #50	@ 0x32
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfig1.OCPolarity = LPTIM_OCPOLARITY_LOW;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_1) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d6a:	f004 ff5f 	bl	8005c2c <HAL_LPTIM_OC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_LPTIM1_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f000 f8dc 	bl	8000f30 <Error_Handler>
  }
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_2) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	@ (8000d98 <MX_LPTIM1_Init+0x9c>)
 8000d80:	f004 ff54 	bl	8005c2c <HAL_LPTIM_OC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_LPTIM1_Init+0x92>
  {
    Error_Handler();
 8000d8a:	f000 f8d1 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200002a8 	.word	0x200002a8
 8000d9c:	46004400 	.word	0x46004400

08000da0 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0b2      	sub	sp, #200	@ 0xc8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	22b8      	movs	r2, #184	@ 0xb8
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f00b fbd9 	bl	800c568 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <HAL_LPTIM_MspInit+0x70>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d122      	bne.n	8000e06 <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_HSI;
 8000dcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 fb87 	bl	80074ec <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8000de4:	f000 f8a4 	bl	8000f30 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_LPTIM_MspInit+0x74>)
 8000dea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dee:	4a09      	ldr	r2, [pc, #36]	@ (8000e14 <HAL_LPTIM_MspInit+0x74>)
 8000df0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000df4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_LPTIM_MspInit+0x74>)
 8000dfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	37c8      	adds	r7, #200	@ 0xc8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	46004400 	.word	0x46004400
 8000e14:	46020c00 	.word	0x46020c00

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f000 febe 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f81c 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f7ff fea2 	bl	8000b6c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000e28:	f7ff fd8e 	bl	8000948 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8000e2c:	f7ff fbe2 	bl	80005f4 <MX_ADC1_Init>
  MX_ADC4_Init();
 8000e30:	f7ff fc50 	bl	80006d4 <MX_ADC4_Init>
  MX_ICACHE_Init();
 8000e34:	f7ff ff4e 	bl	8000cd4 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000e38:	f7ff ff60 	bl	8000cfc <MX_LPTIM1_Init>
  MX_SPI2_Init();
 8000e3c:	f000 f87e 	bl	8000f3c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e40:	f000 fa12 	bl	8001268 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e44:	f000 fa64 	bl	8001310 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e48:	f000 fab8 	bl	80013bc <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e4c:	f000 fb4e 	bl	80014ec <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000e50:	f000 fd38 	bl	80018c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Sensor_Initialize();
 8000e54:	f00b faf6 	bl	800c444 <Sensor_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <main+0x40>

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b09e      	sub	sp, #120	@ 0x78
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	2260      	movs	r2, #96	@ 0x60
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00b fb7c 	bl	800c568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000e80:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e84:	f004 ffea 	bl	8005e5c <HAL_PWREx_ControlVoltageScaling>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000e8e:	f000 f84f 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000e92:	2312      	movs	r3, #18
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 f859 	bl	8005f94 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ee8:	f000 f822 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	231f      	movs	r3, #31
 8000eee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	2101      	movs	r1, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 ff1f 	bl	8006d4c <HAL_RCC_ClockConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f14:	f000 f80c 	bl	8000f30 <Error_Handler>
  }

  /** Enable the force of HSI in stop mode
  */
  __HAL_RCC_HSISTOP_ENABLE();
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a03      	ldr	r2, [pc, #12]	@ (8000f2c <SystemClock_Config+0xd0>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	3778      	adds	r7, #120	@ 0x78
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	46020c00 	.word	0x46020c00

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <Error_Handler+0x8>

08000f3c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f4c:	4b31      	ldr	r3, [pc, #196]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f4e:	4a32      	ldr	r2, [pc, #200]	@ (8001018 <MX_SPI2_Init+0xdc>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f54:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f60:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f62:	2207      	movs	r2, #7
 8000f64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f66:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6c:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f72:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f80:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fd8:	480e      	ldr	r0, [pc, #56]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000fda:	f008 fdfb 	bl	8009bd4 <HAL_SPI_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000fe4:	f7ff ffa4 	bl	8000f30 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_SPI2_Init+0xd8>)
 8000ffc:	f009 f9d1 	bl	800a3a2 <HAL_SPIEx_SetConfigAutonomousMode>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8001006:	f7ff ff93 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200002f8 	.word	0x200002f8
 8001018:	40003800 	.word	0x40003800

0800101c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0b8      	sub	sp, #224	@ 0xe0
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22b8      	movs	r2, #184	@ 0xb8
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00b fa93 	bl	800c568 <memset>
  if(spiHandle->Instance==SPI2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a2b      	ldr	r2, [pc, #172]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d14f      	bne.n	80010ec <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800104c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001058:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800105c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fa41 	bl	80074ec <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001070:	f7ff ff5e 	bl	8000f30 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001074:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <HAL_SPI_MspInit+0xdc>)
 8001076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800107a:	4a1f      	ldr	r2, [pc, #124]	@ (80010f8 <HAL_SPI_MspInit+0xdc>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001084:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <HAL_SPI_MspInit+0xdc>)
 8001086:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_SPI_MspInit+0xdc>)
 8001094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_SPI_MspInit+0xdc>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_SPI_MspInit+0xdc>)
 80010a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80010b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ca:	2305      	movs	r3, #5
 80010cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010d4:	4619      	mov	r1, r3
 80010d6:	4809      	ldr	r0, [pc, #36]	@ (80010fc <HAL_SPI_MspInit+0xe0>)
 80010d8:	f004 fa26 	bl	8005528 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	203c      	movs	r0, #60	@ 0x3c
 80010e2:	f002 fb31 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010e6:	203c      	movs	r0, #60	@ 0x3c
 80010e8:	f002 fb48 	bl	800377c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010ec:	bf00      	nop
 80010ee:	37e0      	adds	r7, #224	@ 0xe0
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40003800 	.word	0x40003800
 80010f8:	46020c00 	.word	0x46020c00
 80010fc:	42020400 	.word	0x42020400

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_MspInit+0x30>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800110c:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <HAL_MspInit+0x30>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_MspInit+0x30>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001124:	f004 ff26 	bl	8005f74 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	46020c00 	.word	0x46020c00

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 fdad 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <GPDMA1_Channel0_IRQHandler+0x10>)
 800119a:	f002 fd06 	bl	8003baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000230 	.word	0x20000230

080011a8 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <GPDMA1_Channel1_IRQHandler+0x10>)
 80011ae:	f002 fcfc 	bl	8003baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000017c 	.word	0x2000017c

080011bc <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <GPDMA1_Channel2_IRQHandler+0x10>)
 80011c2:	f002 fcf2 	bl	8003baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200005c4 	.word	0x200005c4

080011d0 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <GPDMA1_Channel3_IRQHandler+0x10>)
 80011d6:	f002 fce8 	bl	8003baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000054c 	.word	0x2000054c

080011e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <SPI2_IRQHandler+0x10>)
 80011ea:	f008 fe09 	bl	8009e00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002f8 	.word	0x200002f8

080011f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <SystemInit+0x68>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <SystemInit+0x68>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <SystemInit+0x6c>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <SystemInit+0x6c>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <SystemInit+0x6c>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <SystemInit+0x6c>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <SystemInit+0x6c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <SystemInit+0x6c>)
 800122a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800122e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001232:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <SystemInit+0x6c>)
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <SystemInit+0x6c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <SystemInit+0x6c>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001244:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <SystemInit+0x6c>)
 8001248:	2200      	movs	r2, #0
 800124a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SystemInit+0x68>)
 800124e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001252:	609a      	str	r2, [r3, #8]
  #endif
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	46020c00 	.word	0x46020c00

08001268 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2224      	movs	r2, #36	@ 0x24
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f00b f976 	bl	800c568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_TIM2_Init+0xa4>)
 8001288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <MX_TIM2_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <MX_TIM2_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_TIM2_Init+0xa4>)
 800129c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_TIM2_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_TIM2_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c6:	2301      	movs	r3, #1
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM2_Init+0xa4>)
 80012da:	f009 f95b 	bl	800a594 <HAL_TIM_Encoder_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012e4:	f7ff fe24 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM2_Init+0xa4>)
 80012f6:	f00a f97b 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001300:	f7ff fe16 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3730      	adds	r7, #48	@ 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000388 	.word	0x20000388

08001310 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	@ 0x30
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2224      	movs	r2, #36	@ 0x24
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f00b f922 	bl	800c568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 8001330:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <MX_TIM3_Init+0xa8>)
 8001332:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001340:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 8001342:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001346:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001354:	2301      	movs	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800135c:	2301      	movs	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800136c:	2301      	movs	r3, #1
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 8001380:	f009 f908 	bl	800a594 <HAL_TIM_Encoder_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800138a:	f7ff fdd1 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <MX_TIM3_Init+0xa4>)
 800139c:	f00a f928 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013a6:	f7ff fdc3 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	@ 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200003d4 	.word	0x200003d4
 80013b8:	40000400 	.word	0x40000400

080013bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	@ 0x38
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <MX_TIM4_Init+0x128>)
 80013f0:	4a3d      	ldr	r2, [pc, #244]	@ (80014e8 <MX_TIM4_Init+0x12c>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013f4:	4b3b      	ldr	r3, [pc, #236]	@ (80014e4 <MX_TIM4_Init+0x128>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <MX_TIM4_Init+0x128>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4294967295;
 8001400:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <MX_TIM4_Init+0x128>)
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <MX_TIM4_Init+0x128>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <MX_TIM4_Init+0x128>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001414:	4833      	ldr	r0, [pc, #204]	@ (80014e4 <MX_TIM4_Init+0x128>)
 8001416:	f009 f805 	bl	800a424 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001420:	f7ff fd86 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142e:	4619      	mov	r1, r3
 8001430:	482c      	ldr	r0, [pc, #176]	@ (80014e4 <MX_TIM4_Init+0x128>)
 8001432:	f009 fa69 	bl	800a908 <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800143c:	f7ff fd78 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001440:	4828      	ldr	r0, [pc, #160]	@ (80014e4 <MX_TIM4_Init+0x128>)
 8001442:	f009 f846 	bl	800a4d2 <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800144c:	f7ff fd70 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4821      	ldr	r0, [pc, #132]	@ (80014e4 <MX_TIM4_Init+0x128>)
 8001460:	f00a f8c6 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800146a:	f7ff fd61 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <MX_TIM4_Init+0x128>)
 8001486:	f009 f92b 	bl	800a6e0 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001490:	f7ff fd4e 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2204      	movs	r2, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4812      	ldr	r0, [pc, #72]	@ (80014e4 <MX_TIM4_Init+0x128>)
 800149c:	f009 f920 	bl	800a6e0 <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80014a6:	f7ff fd43 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	2208      	movs	r2, #8
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <MX_TIM4_Init+0x128>)
 80014b2:	f009 f915 	bl	800a6e0 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80014bc:	f7ff fd38 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	220c      	movs	r2, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <MX_TIM4_Init+0x128>)
 80014c8:	f009 f90a 	bl	800a6e0 <HAL_TIM_PWM_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80014d2:	f7ff fd2d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <MX_TIM4_Init+0x128>)
 80014d8:	f000 f992 	bl	8001800 <HAL_TIM_MspPostInit>

}
 80014dc:	bf00      	nop
 80014de:	3738      	adds	r7, #56	@ 0x38
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000420 	.word	0x20000420
 80014e8:	40000800 	.word	0x40000800

080014ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b09c      	sub	sp, #112	@ 0x70
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2234      	movs	r2, #52	@ 0x34
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f00b f81e 	bl	800c568 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800152c:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <MX_TIM8_Init+0x158>)
 800152e:	4a46      	ldr	r2, [pc, #280]	@ (8001648 <MX_TIM8_Init+0x15c>)
 8001530:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001532:	4b44      	ldr	r3, [pc, #272]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b42      	ldr	r3, [pc, #264]	@ (8001644 <MX_TIM8_Init+0x158>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001544:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800154c:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <MX_TIM8_Init+0x158>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b3c      	ldr	r3, [pc, #240]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001558:	483a      	ldr	r0, [pc, #232]	@ (8001644 <MX_TIM8_Init+0x158>)
 800155a:	f008 ff63 	bl	800a424 <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001564:	f7ff fce4 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001572:	4619      	mov	r1, r3
 8001574:	4833      	ldr	r0, [pc, #204]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001576:	f009 f9c7 	bl	800a908 <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001580:	f7ff fcd6 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001584:	482f      	ldr	r0, [pc, #188]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001586:	f008 ffa4 	bl	800a4d2 <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001590:	f7ff fcce 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015a4:	4619      	mov	r1, r3
 80015a6:	4827      	ldr	r0, [pc, #156]	@ (8001644 <MX_TIM8_Init+0x158>)
 80015a8:	f00a f822 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015b2:	f7ff fcbd 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b6:	2360      	movs	r3, #96	@ 0x60
 80015b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015d6:	220c      	movs	r2, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	481a      	ldr	r0, [pc, #104]	@ (8001644 <MX_TIM8_Init+0x158>)
 80015dc:	f009 f880 	bl	800a6e0 <HAL_TIM_PWM_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80015e6:	f7ff fca3 	bl	8000f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001602:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001628:	f00a f8a4 	bl	800b774 <HAL_TIMEx_ConfigBreakDeadTime>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001632:	f7ff fc7d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001636:	4803      	ldr	r0, [pc, #12]	@ (8001644 <MX_TIM8_Init+0x158>)
 8001638:	f000 f8e2 	bl	8001800 <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3770      	adds	r7, #112	@ 0x70
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000046c 	.word	0x2000046c
 8001648:	40013400 	.word	0x40013400

0800164c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	@ 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800166c:	d14e      	bne.n	800170c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	4b43      	ldr	r3, [pc, #268]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001670:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001674:	4a41      	ldr	r2, [pc, #260]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800167e:	4b3f      	ldr	r3, [pc, #252]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 800168e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001692:	4a3a      	ldr	r2, [pc, #232]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800169c:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 800169e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b34      	ldr	r3, [pc, #208]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 80016ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b0:	4a32      	ldr	r2, [pc, #200]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ba:	4b30      	ldr	r3, [pc, #192]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 80016bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016da:	2301      	movs	r3, #1
 80016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4826      	ldr	r0, [pc, #152]	@ (8001780 <HAL_TIM_Encoder_MspInit+0x134>)
 80016e6:	f003 ff1f 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ea:	2308      	movs	r3, #8
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016fa:	2301      	movs	r3, #1
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	481f      	ldr	r0, [pc, #124]	@ (8001784 <HAL_TIM_Encoder_MspInit+0x138>)
 8001706:	f003 ff0f 	bl	8005528 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800170a:	e032      	b.n	8001772 <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12d      	bne.n	8001772 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001718:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800171c:	4a17      	ldr	r2, [pc, #92]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001728:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800173a:	4a10      	ldr	r2, [pc, #64]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_TIM_Encoder_MspInit+0x130>)
 8001746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001752:	2330      	movs	r3, #48	@ 0x30
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001762:	2302      	movs	r3, #2
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <HAL_TIM_Encoder_MspInit+0x138>)
 800176e:	f003 fedb 	bl	8005528 <HAL_GPIO_Init>
}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	@ 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	46020c00 	.word	0x46020c00
 8001780:	42020000 	.word	0x42020000
 8001784:	42020400 	.word	0x42020400
 8001788:	40000400 	.word	0x40000400

0800178c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a16      	ldr	r2, [pc, #88]	@ (80017f4 <HAL_TIM_Base_MspInit+0x68>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10f      	bne.n	80017be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017a4:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80017bc:	e013      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <HAL_TIM_Base_MspInit+0x70>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d10e      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017d4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40000800 	.word	0x40000800
 80017f8:	46020c00 	.word	0x46020c00
 80017fc:	40013400 	.word	0x40013400

08001800 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_TIM_MspPostInit+0xb4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d120      	bne.n	8001864 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <HAL_TIM_MspPostInit+0xb8>)
 8001824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001828:	4a23      	ldr	r2, [pc, #140]	@ (80018b8 <HAL_TIM_MspPostInit+0xb8>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_TIM_MspPostInit+0xb8>)
 8001834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001840:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001852:	2302      	movs	r3, #2
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4817      	ldr	r0, [pc, #92]	@ (80018bc <HAL_TIM_MspPostInit+0xbc>)
 800185e:	f003 fe63 	bl	8005528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001862:	e023      	b.n	80018ac <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM8)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <HAL_TIM_MspPostInit+0xc0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d11e      	bne.n	80018ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_TIM_MspPostInit+0xb8>)
 8001870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001874:	4a10      	ldr	r2, [pc, #64]	@ (80018b8 <HAL_TIM_MspPostInit+0xb8>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_TIM_MspPostInit+0xb8>)
 8001880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188c:	2304      	movs	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800189c:	2303      	movs	r3, #3
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <HAL_TIM_MspPostInit+0xbc>)
 80018a8:	f003 fe3e 	bl	8005528 <HAL_GPIO_Init>
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40000800 	.word	0x40000800
 80018b8:	46020c00 	.word	0x46020c00
 80018bc:	42020400 	.word	0x42020400
 80018c0:	40013400 	.word	0x40013400

080018c4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018ca:	4a23      	ldr	r2, [pc, #140]	@ (8001958 <MX_USART1_UART_Init+0x94>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ce:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190c:	4811      	ldr	r0, [pc, #68]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 800190e:	f009 ffcb 	bl	800b8a8 <HAL_UART_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001918:	f7ff fb0a 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191c:	2100      	movs	r1, #0
 800191e:	480d      	ldr	r0, [pc, #52]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 8001920:	f00a fc02 	bl	800c128 <HAL_UARTEx_SetTxFifoThreshold>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800192a:	f7ff fb01 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192e:	2100      	movs	r1, #0
 8001930:	4808      	ldr	r0, [pc, #32]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 8001932:	f00a fc37 	bl	800c1a4 <HAL_UARTEx_SetRxFifoThreshold>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800193c:	f7ff faf8 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	@ (8001954 <MX_USART1_UART_Init+0x90>)
 8001942:	f00a fbb8 	bl	800c0b6 <HAL_UARTEx_DisableFifoMode>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800194c:	f7ff faf0 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200004b8 	.word	0x200004b8
 8001958:	40013800 	.word	0x40013800

0800195c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0b8      	sub	sp, #224	@ 0xe0
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	22b8      	movs	r2, #184	@ 0xb8
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f00a fdf3 	bl	800c568 <memset>
  if(uartHandle->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a69      	ldr	r2, [pc, #420]	@ (8001b2c <HAL_UART_MspInit+0x1d0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	f040 80cb 	bne.w	8001b24 <HAL_UART_MspInit+0x1c8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800198e:	f04f 0201 	mov.w	r2, #1
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800199a:	2300      	movs	r3, #0
 800199c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4618      	mov	r0, r3
 80019a4:	f005 fda2 	bl	80074ec <HAL_RCCEx_PeriphCLKConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019ae:	f7ff fabf 	bl	8000f30 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <HAL_UART_MspInit+0x1d4>)
 80019b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001b30 <HAL_UART_MspInit+0x1d4>)
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019be:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80019c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b30 <HAL_UART_MspInit+0x1d4>)
 80019c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_UART_MspInit+0x1d4>)
 80019d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019d6:	4a56      	ldr	r2, [pc, #344]	@ (8001b30 <HAL_UART_MspInit+0x1d4>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_UART_MspInit+0x1d4>)
 80019e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a12:	4619      	mov	r1, r3
 8001a14:	4847      	ldr	r0, [pc, #284]	@ (8001b34 <HAL_UART_MspInit+0x1d8>)
 8001a16:	f003 fd87 	bl	8005528 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001a1a:	4b47      	ldr	r3, [pc, #284]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a1c:	4a47      	ldr	r2, [pc, #284]	@ (8001b3c <HAL_UART_MspInit+0x1e0>)
 8001a1e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8001a20:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a22:	2219      	movs	r2, #25
 8001a24:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001a26:	4b44      	ldr	r3, [pc, #272]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2c:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a32:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001a34:	4b40      	ldr	r3, [pc, #256]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a36:	2208      	movs	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001a40:	4b3d      	ldr	r3, [pc, #244]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001a46:	4b3c      	ldr	r3, [pc, #240]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001a52:	4b39      	ldr	r3, [pc, #228]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001a58:	4b37      	ldr	r3, [pc, #220]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001a5e:	4b36      	ldr	r3, [pc, #216]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a64:	4b34      	ldr	r3, [pc, #208]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001a6a:	4b33      	ldr	r3, [pc, #204]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001a70:	4831      	ldr	r0, [pc, #196]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a72:	f001 ff45 	bl	8003900 <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8001a7c:	f7ff fa58 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel3);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a2d      	ldr	r2, [pc, #180]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a84:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a86:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	482a      	ldr	r0, [pc, #168]	@ (8001b38 <HAL_UART_MspInit+0x1dc>)
 8001a90:	f002 f9ec 	bl	8003e6c <HAL_DMA_ConfigChannelAttributes>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001a9a:	f7ff fa49 	bl	8000f30 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001aa0:	4a28      	ldr	r2, [pc, #160]	@ (8001b44 <HAL_UART_MspInit+0x1e8>)
 8001aa2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001aa6:	2218      	movs	r2, #24
 8001aa8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab0:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001abc:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001abe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ac2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001af6:	f001 ff03 	bl	8003900 <HAL_DMA_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001b00:	f7ff fa16 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b12:	2110      	movs	r1, #16
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <HAL_UART_MspInit+0x1e4>)
 8001b16:	f002 f9a9 	bl	8003e6c <HAL_DMA_ConfigChannelAttributes>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_MspInit+0x1c8>
    {
      Error_Handler();
 8001b20:	f7ff fa06 	bl	8000f30 <Error_Handler>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b24:	bf00      	nop
 8001b26:	37e0      	adds	r7, #224	@ 0xe0
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	46020c00 	.word	0x46020c00
 8001b34:	42020000 	.word	0x42020000
 8001b38:	2000054c 	.word	0x2000054c
 8001b3c:	400201d0 	.word	0x400201d0
 8001b40:	200005c4 	.word	0x200005c4
 8001b44:	40020150 	.word	0x40020150

08001b48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b4c:	f7ff fb54 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	@ (8001b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <LoopForever+0xe>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	@ (8001b94 <LoopForever+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b76:	f00a fcff 	bl	800c578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7a:	f7ff f94d 	bl	8000e18 <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   r0, =_estack
 8001b80:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000009 	.word	0x20000009
  ldr r2, =_sidata
 8001b8c:	0800c6ec 	.word	0x0800c6ec
  ldr r2, =_sbss
 8001b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b94:	200007c0 	.word	0x200007c0

08001b98 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_Init+0x50>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a11      	ldr	r2, [pc, #68]	@ (8001bec <HAL_Init+0x50>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f001 fdc0 	bl	8003732 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bb2:	f005 fabd 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_Init+0x54>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <HAL_Init+0x58>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_Init+0x5c>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001bcc:	2004      	movs	r0, #4
 8001bce:	f001 fe05 	bl	80037dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f812 	bl	8001bfc <HAL_InitTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e002      	b.n	8001be8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001be2:	f7ff fa8d 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	46020c00 	.word	0x46020c00
 8001bf4:	0800c5d8 	.word	0x0800c5d8
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c08:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <HAL_InitTick+0xdc>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e05c      	b.n	8001cce <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c14:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <HAL_InitTick+0xe0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d10c      	bne.n	8001c3a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <HAL_InitTick+0xe4>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <HAL_InitTick+0xdc>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e037      	b.n	8001caa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c3a:	f001 fe27 	bl	800388c <HAL_SYSTICK_GetCLKSourceConfig>
 8001c3e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d023      	beq.n	8001c8e <HAL_InitTick+0x92>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d82d      	bhi.n	8001ca8 <HAL_InitTick+0xac>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_InitTick+0x5e>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d00d      	beq.n	8001c74 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001c58:	e026      	b.n	8001ca8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001c5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <HAL_InitTick+0xe4>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <HAL_InitTick+0xdc>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	60fb      	str	r3, [r7, #12]
        break;
 8001c72:	e01a      	b.n	8001caa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <HAL_InitTick+0xdc>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c82:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	60fb      	str	r3, [r7, #12]
        break;
 8001c8c:	e00d      	b.n	8001caa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_InitTick+0xdc>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	60fb      	str	r3, [r7, #12]
        break;
 8001ca6:	e000      	b.n	8001caa <HAL_InitTick+0xae>
        break;
 8001ca8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f001 fd74 	bl	8003798 <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e009      	b.n	8001cce <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc2:	f001 fd41 	bl	8003748 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001cc6:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_InitTick+0xe8>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	e000e010 	.word	0xe000e010
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	2000063c 	.word	0x2000063c

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	2000063c 	.word	0x2000063c

08001d28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <HAL_GetREVID+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	b29b      	uxth	r3, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e0044000 	.word	0xe0044000

08001d44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	601a      	str	r2, [r3, #0]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LL_ADC_SetResolution+0x3c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d104      	bne.n	8001dcc <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f023 020c 	bic.w	r2, r3, #12
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	46021000 	.word	0x46021000

08001dec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3360      	adds	r3, #96	@ 0x60
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3360      	adds	r3, #96	@ 0x60
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0edb      	lsrs	r3, r3, #27
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d807      	bhi.n	8001e68 <LL_ADC_GetOffsetChannel+0x3a>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	069a      	lsls	r2, r3, #26
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	e008      	b.n	8001e7a <LL_ADC_GetOffsetChannel+0x4c>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	069a      	lsls	r2, r3, #26
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b087      	sub	sp, #28
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3360      	adds	r3, #96	@ 0x60
 8001e96:	461a      	mov	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3360      	adds	r3, #96	@ 0x60
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3360      	adds	r3, #96	@ 0x60
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d002      	beq.n	8001f5a <LL_ADC_SetGainCompensation+0x32>
 8001f54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001f58:	e000      	b.n	8001f5c <LL_ADC_SetGainCompensation+0x34>
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b085      	sub	sp, #20
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2107      	movs	r1, #7
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	@ 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d020      	beq.n	8002002 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3330      	adds	r3, #48	@ 0x30
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	4413      	add	r3, r2
 8001fd2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	211f      	movs	r1, #31
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 011f 	and.w	r1, r3, #31
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002000:	e02b      	b.n	800205a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	210f      	movs	r1, #15
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	401a      	ands	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	e010      	b.n	800204c <LL_ADC_REG_SetSequencerRanks+0xa0>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	613b      	str	r3, [r7, #16]
  return result;
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e003      	b.n	800204c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	f001 011f 	and.w	r1, r1, #31
 8002052:	408b      	lsls	r3, r1
 8002054:	431a      	orrs	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	46021000 	.word	0x46021000

0800206c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2201      	movs	r2, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	e015      	b.n	80020bc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	60fb      	str	r3, [r7, #12]
  return result;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e003      	b.n	80020b2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2201      	movs	r2, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002104:	b480      	push	{r7}
 8002106:	b08b      	sub	sp, #44	@ 0x2c
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a2d      	ldr	r2, [pc, #180]	@ (80021c8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d042      	beq.n	800219e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d104      	bne.n	800212c <LL_ADC_SetChannelSamplingTime+0x28>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	e011      	b.n	8002150 <LL_ADC_SetChannelSamplingTime+0x4c>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	617b      	str	r3, [r7, #20]
  return result;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002142:	2320      	movs	r3, #32
 8002144:	e003      	b.n	800214e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	0e5b      	lsrs	r3, r3, #25
 8002154:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3314      	adds	r3, #20
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	0e5b      	lsrs	r3, r3, #25
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	4413      	add	r3, r2
 800217c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2107      	movs	r1, #7
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	401a      	ands	r2, r3
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	431a      	orrs	r2, r3
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800219c:	e00e      	b.n	80021bc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	43db      	mvns	r3, r3
 80021a8:	401a      	ands	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	0219      	lsls	r1, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	400b      	ands	r3, r1
 80021b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	615a      	str	r2, [r3, #20]
}
 80021bc:	bf00      	nop
 80021be:	372c      	adds	r7, #44	@ 0x2c
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	46021000 	.word	0x46021000

080021cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021e4:	43db      	mvns	r3, r3
 80021e6:	401a      	ands	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0318 	and.w	r3, r3, #24
 80021ee:	4908      	ldr	r1, [pc, #32]	@ (8002210 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021f0:	40d9      	lsrs	r1, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	400b      	ands	r3, r1
 80021f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021fa:	431a      	orrs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	000fffff 	.word	0x000fffff

08002214 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002224:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6093      	str	r3, [r2, #8]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800224c:	d101      	bne.n	8002252 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002274:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800229c:	d101      	bne.n	80022a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <LL_ADC_IsEnabled+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_ADC_IsEnabled+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d101      	bne.n	80022ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b08      	cmp	r3, #8
 800230e:	d101      	bne.n	8002314 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e2b3      	b.n	80028ac <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a8b      	ldr	r2, [pc, #556]	@ (8002580 <HAL_ADC_Init+0x25c>)
 8002352:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7fe fa27 	bl	80007b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5f 	bl	8002238 <LL_ADC_IsDeepPowerDownEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff45 	bl	8002214 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff7a 	bl	8002288 <LL_ADC_IsInternalRegulatorEnabled>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d115      	bne.n	80023c6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff5e 	bl	8002260 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a4:	4b77      	ldr	r3, [pc, #476]	@ (8002584 <HAL_ADC_Init+0x260>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	4a77      	ldr	r2, [pc, #476]	@ (8002588 <HAL_ADC_Init+0x264>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023b8:	e002      	b.n	80023c0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3b01      	subs	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f9      	bne.n	80023ba <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff5c 	bl	8002288 <LL_ADC_IsInternalRegulatorEnabled>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10e      	bne.n	80023f4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff6c 	bl	80022d6 <LL_ADC_REG_IsConversionOngoing>
 80023fe:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 8244 	bne.w	8002896 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 8240 	bne.w	8002896 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800241a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800241e:	f043 0202 	orr.w	r2, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff40 	bl	80022b0 <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d140      	bne.n	80024b8 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a51      	ldr	r2, [pc, #324]	@ (8002580 <HAL_ADC_Init+0x25c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d028      	beq.n	8002492 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a51      	ldr	r2, [pc, #324]	@ (800258c <HAL_ADC_Init+0x268>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d109      	bne.n	800245e <HAL_ADC_Init+0x13a>
 800244a:	4850      	ldr	r0, [pc, #320]	@ (800258c <HAL_ADC_Init+0x268>)
 800244c:	f7ff ff30 	bl	80022b0 <LL_ADC_IsEnabled>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf0c      	ite	eq
 8002456:	2301      	moveq	r3, #1
 8002458:	2300      	movne	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	e008      	b.n	8002470 <HAL_ADC_Init+0x14c>
 800245e:	4848      	ldr	r0, [pc, #288]	@ (8002580 <HAL_ADC_Init+0x25c>)
 8002460:	f7ff ff26 	bl	80022b0 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d021      	beq.n	80024b8 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a44      	ldr	r2, [pc, #272]	@ (800258c <HAL_ADC_Init+0x268>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x15e>
 800247e:	4a44      	ldr	r2, [pc, #272]	@ (8002590 <HAL_ADC_Init+0x26c>)
 8002480:	e000      	b.n	8002484 <HAL_ADC_Init+0x160>
 8002482:	4a44      	ldr	r2, [pc, #272]	@ (8002594 <HAL_ADC_Init+0x270>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	4610      	mov	r0, r2
 800248c:	f7ff fc5a 	bl	8001d44 <LL_ADC_SetCommonClock>
 8002490:	e012      	b.n	80024b8 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f7ff fc85 	bl	8001dac <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <HAL_ADC_Init+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80024b2:	4938      	ldr	r1, [pc, #224]	@ (8002594 <HAL_ADC_Init+0x270>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a30      	ldr	r2, [pc, #192]	@ (8002580 <HAL_ADC_Init+0x25c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d010      	beq.n	80024e4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024ce:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80024d4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80024dc:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80024de:	4313      	orrs	r3, r2
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	e030      	b.n	8002546 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7f1b      	ldrb	r3, [r3, #28]
 80024e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024f0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d002      	beq.n	8002502 <HAL_ADC_Init+0x1de>
 80024fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002500:	e000      	b.n	8002504 <HAL_ADC_Init+0x1e0>
 8002502:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002504:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800250a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	da04      	bge.n	800251e <HAL_ADC_Init+0x1fa>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800251c:	e001      	b.n	8002522 <HAL_ADC_Init+0x1fe>
 800251e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002522:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4918      	ldr	r1, [pc, #96]	@ (800258c <HAL_ADC_Init+0x268>)
 800252a:	428b      	cmp	r3, r1
 800252c:	d103      	bne.n	8002536 <HAL_ADC_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002534:	e003      	b.n	800253e <HAL_ADC_Init+0x21a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800253c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800253e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	4313      	orrs	r3, r2
 8002544:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d12f      	bne.n	80025b0 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <HAL_ADC_Init+0x25c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	3b01      	subs	r3, #1
 8002560:	045b      	lsls	r3, r3, #17
 8002562:	6a3a      	ldr	r2, [r7, #32]
 8002564:	4313      	orrs	r3, r2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	e022      	b.n	80025b0 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	e018      	b.n	80025b0 <HAL_ADC_Init+0x28c>
 800257e:	bf00      	nop
 8002580:	46021000 	.word	0x46021000
 8002584:	20000000 	.word	0x20000000
 8002588:	053e2d63 	.word	0x053e2d63
 800258c:	42028000 	.word	0x42028000
 8002590:	42028308 	.word	0x42028308
 8002594:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a92      	ldr	r2, [pc, #584]	@ (8002800 <HAL_ADC_Init+0x4dc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d018      	beq.n	80025ec <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ce:	4313      	orrs	r3, r2
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4b89      	ldr	r3, [pc, #548]	@ (8002804 <HAL_ADC_Init+0x4e0>)
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	6a39      	ldr	r1, [r7, #32]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	60d3      	str	r3, [r2, #12]
 80025ea:	e031      	b.n	8002650 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d009      	beq.n	8002608 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	4313      	orrs	r3, r2
 8002602:	6a3a      	ldr	r2, [r7, #32]
 8002604:	4313      	orrs	r3, r2
 8002606:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	4b7e      	ldr	r3, [pc, #504]	@ (8002808 <HAL_ADC_Init+0x4e4>)
 8002610:	4013      	ands	r3, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6a39      	ldr	r1, [r7, #32]
 8002618:	430b      	orrs	r3, r1
 800261a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6a      	ldr	r2, [pc, #424]	@ (8002800 <HAL_ADC_Init+0x4dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	f000 8093 	beq.w	8002782 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fe38 	bl	80022d6 <LL_ADC_REG_IsConversionOngoing>
 8002666:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe45 	bl	80022fc <LL_ADC_INJ_IsConversionOngoing>
 8002672:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d161      	bne.n	800273e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d15e      	bne.n	800273e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7f1b      	ldrb	r3, [r3, #28]
 8002684:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4960      	ldr	r1, [pc, #384]	@ (800280c <HAL_ADC_Init+0x4e8>)
 800268c:	428b      	cmp	r3, r1
 800268e:	d102      	bne.n	8002696 <HAL_ADC_Init+0x372>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	e002      	b.n	800269c <HAL_ADC_Init+0x378>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800269c:	4313      	orrs	r3, r2
 800269e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	6a39      	ldr	r1, [r7, #32]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f7ff fc2c 	bl	8001f28 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d11e      	bne.n	8002718 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026de:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002810 <HAL_ADC_Init+0x4ec>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80026ee:	0411      	lsls	r1, r2, #16
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026f4:	4311      	orrs	r1, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002706:	0892      	lsrs	r2, r2, #2
 8002708:	430a      	orrs	r2, r1
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	e007      	b.n	8002728 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10c      	bne.n	8002760 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f023 010f 	bic.w	r1, r3, #15
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	631a      	str	r2, [r3, #48]	@ 0x30
 800275e:	e007      	b.n	8002770 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020f 	bic.w	r2, r2, #15
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002774:	f023 0303 	bic.w	r3, r3, #3
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002780:	e092      	b.n	80028a8 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002788:	2b01      	cmp	r3, #1
 800278a:	d111      	bne.n	80027b0 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002794:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800279a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80027a0:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <HAL_ADC_Init+0x4f0>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	69f9      	ldr	r1, [r7, #28]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027cc:	461a      	mov	r2, r3
 80027ce:	2100      	movs	r1, #0
 80027d0:	f7ff fbcd 	bl	8001f6e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027dc:	461a      	mov	r2, r3
 80027de:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80027e2:	f7ff fbc4 	bl	8001f6e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d114      	bne.n	8002818 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f062 020f 	orn	r2, r2, #15
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80027fe:	e024      	b.n	800284a <HAL_ADC_Init+0x526>
 8002800:	46021000 	.word	0x46021000
 8002804:	fff0c013 	.word	0xfff0c013
 8002808:	ffde800d 	.word	0xffde800d
 800280c:	42028000 	.word	0x42028000
 8002810:	fc00f81e 	.word	0xfc00f81e
 8002814:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002820:	d113      	bne.n	800284a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	f003 031c 	and.w	r3, r3, #28
 8002834:	f06f 020f 	mvn.w	r2, #15
 8002838:	fa02 f103 	lsl.w	r1, r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <HAL_ADC_Init+0x590>)
 8002852:	4013      	ands	r3, r2
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	429a      	cmp	r2, r3
 8002858:	d10b      	bne.n	8002872 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002864:	f023 0303 	bic.w	r3, r3, #3
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002870:	e01a      	b.n	80028a8 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002876:	f023 0312 	bic.w	r3, r3, #18
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002894:	e008      	b.n	80028a8 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80028a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	833ffff3 	.word	0x833ffff3

080028b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b0bc      	sub	sp, #240	@ 0xf0
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4aa8      	ldr	r2, [pc, #672]	@ (8002b74 <HAL_ADC_ConfigChannel+0x2bc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d103      	bne.n	80028de <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x36>
 80028e8:	2302      	movs	r3, #2
 80028ea:	f000 be6d 	b.w	80035c8 <HAL_ADC_ConfigChannel+0xd10>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fceb 	bl	80022d6 <LL_ADC_REG_IsConversionOngoing>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 864d 	bne.w	80035a2 <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a99      	ldr	r2, [pc, #612]	@ (8002b74 <HAL_ADC_ConfigChannel+0x2bc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	f000 83ea 	beq.w	80030e8 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7a>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2201      	movs	r2, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	e01d      	b.n	800296e <HAL_ADC_ConfigChannel+0xb6>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 8002946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800294a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 800294e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e004      	b.n	8002964 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800295a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2201      	movs	r2, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	69d1      	ldr	r1, [r2, #28]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	f7ff fb0f 	bl	8001fac <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fc9f 	bl	80022d6 <LL_ADC_REG_IsConversionOngoing>
 8002998:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fcab 	bl	80022fc <LL_ADC_INJ_IsConversionOngoing>
 80029a6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 81ed 	bne.w	8002d8e <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 81e8 	bne.w	8002d8e <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f7ff fb9a 	bl	8002104 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d046      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a02:	f7ff f9f3 	bl	8001dec <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6919      	ldr	r1, [r3, #16]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f7ff fa37 	bl	8001e86 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	7e9b      	ldrb	r3, [r3, #26]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d11e      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x17e>
 8002a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a34:	e000      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x180>
 8002a36:	2300      	movs	r3, #0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f7ff fa5a 	bl	8001ef2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x19c>
 8002a4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x19e>
 8002a54:	2300      	movs	r3, #0
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff fa30 	bl	8001ebc <LL_ADC_SetOffsetSignedSaturation>
 8002a5c:	e197      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2200      	movs	r2, #0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7ff fa42 	bl	8001ef2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2200      	movs	r2, #0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7ff fa1f 	bl	8001ebc <LL_ADC_SetOffsetSignedSaturation>
 8002a7e:	e186      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f9d1 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1f4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f9c6 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	e01e      	b.n	8002aea <HAL_ADC_ConfigChannel+0x232>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f9bb 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002aca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ace:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8002ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e004      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x24a>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	e018      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x27c>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002b2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d107      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2300      	movs	r3, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	f7ff f952 	bl	8001dec <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f96d 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x2c0>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f962 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	e020      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x2fe>
 8002b74:	46021000 	.word	0x46021000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f955 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e004      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002baa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x316>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	e018      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x348>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e004      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f7ff f8ec 	bl	8001dec <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2102      	movs	r1, #2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f907 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x388>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f8fc 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	f003 021f 	and.w	r2, r3, #31
 8002c3e:	e01e      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x3c6>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f8f1 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002c6e:	2320      	movs	r3, #32
 8002c70:	e004      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x3de>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	e018      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x410>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e004      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	f7ff f888 	bl	8001dec <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f8a3 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x450>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2103      	movs	r1, #3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f898 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 021f 	and.w	r2, r3, #31
 8002d06:	e01a      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x486>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2103      	movs	r1, #3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f88d 	bl	8001e2e <LL_ADC_GetOffsetChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e004      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002d32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x49e>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0e9b      	lsrs	r3, r3, #26
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	e011      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x4c2>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d107      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2300      	movs	r3, #0
 8002d88:	2103      	movs	r1, #3
 8002d8a:	f7ff f82f 	bl	8001dec <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fa8c 	bl	80022b0 <LL_ADC_IsEnabled>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 840e 	bne.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f7ff fa0d 	bl	80021cc <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dba:	f040 80d6 	bne.w	8002f6a <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x52a>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	0e9b      	lsrs	r3, r3, #26
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2b09      	cmp	r3, #9
 8002dd8:	bf94      	ite	ls
 8002dda:	2301      	movls	r3, #1
 8002ddc:	2300      	movhi	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e019      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x55e>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002df0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002dfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d04d      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x5fe>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d107      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x57e>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	069b      	lsls	r3, r3, #26
 8002e30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e34:	e015      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x5aa>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x5ca>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0e9b      	lsrs	r3, r3, #26
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	e017      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x5fa>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e92:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	e04e      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x69c>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x61a>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	3301      	adds	r3, #1
 8002eca:	069b      	lsls	r3, r3, #26
 8002ecc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ed0:	e015      	b.n	8002efe <HAL_ADC_ConfigChannel+0x646>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002eea:	2320      	movs	r3, #32
 8002eec:	e003      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	069b      	lsls	r3, r3, #26
 8002efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x666>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0e9b      	lsrs	r3, r3, #26
 8002f10:	3301      	adds	r3, #1
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	e017      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x696>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e003      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	461a      	mov	r2, r3
 8002f62:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002f66:	f7ff f8cd 	bl	8002104 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f280 8324 	bge.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a99      	ldr	r2, [pc, #612]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x6ca>
 8002f7e:	4b99      	ldr	r3, [pc, #612]	@ (80031e4 <HAL_ADC_ConfigChannel+0x92c>)
 8002f80:	e000      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x6cc>
 8002f82:	4b99      	ldr	r3, [pc, #612]	@ (80031e8 <HAL_ADC_ConfigChannel+0x930>)
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe ff03 	bl	8001d90 <LL_ADC_GetCommonPathInternalCh>
 8002f8a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a93      	ldr	r2, [pc, #588]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d109      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x6f4>
 8002f98:	4891      	ldr	r0, [pc, #580]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 8002f9a:	f7ff f989 	bl	80022b0 <LL_ADC_IsEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e008      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x706>
 8002fac:	488f      	ldr	r0, [pc, #572]	@ (80031ec <HAL_ADC_ConfigChannel+0x934>)
 8002fae:	f7ff f97f 	bl	80022b0 <LL_ADC_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8088 	beq.w	80030d4 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a89      	ldr	r2, [pc, #548]	@ (80031f0 <HAL_ADC_ConfigChannel+0x938>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d132      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d12c      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a80      	ldr	r2, [pc, #512]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d005      	beq.n	8002ff0 <HAL_ADC_ConfigChannel+0x738>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a80      	ldr	r2, [pc, #512]	@ (80031ec <HAL_ADC_ConfigChannel+0x934>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f040 82e3 	bne.w	80035b6 <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a7a      	ldr	r2, [pc, #488]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x746>
 8002ffa:	4a7a      	ldr	r2, [pc, #488]	@ (80031e4 <HAL_ADC_ConfigChannel+0x92c>)
 8002ffc:	e000      	b.n	8003000 <HAL_ADC_ConfigChannel+0x748>
 8002ffe:	4a7a      	ldr	r2, [pc, #488]	@ (80031e8 <HAL_ADC_ConfigChannel+0x930>)
 8003000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003004:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fe fead 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003010:	4b78      	ldr	r3, [pc, #480]	@ (80031f4 <HAL_ADC_ConfigChannel+0x93c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	4a78      	ldr	r2, [pc, #480]	@ (80031f8 <HAL_ADC_ConfigChannel+0x940>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003022:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003024:	e002      	b.n	800302c <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3b01      	subs	r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f9      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003032:	e2c0      	b.n	80035b6 <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a70      	ldr	r2, [pc, #448]	@ (80031fc <HAL_ADC_ConfigChannel+0x944>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d121      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003042:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11b      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a64      	ldr	r2, [pc, #400]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d005      	beq.n	8003060 <HAL_ADC_ConfigChannel+0x7a8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a64      	ldr	r2, [pc, #400]	@ (80031ec <HAL_ADC_ConfigChannel+0x934>)
 800305a:	4293      	cmp	r3, r2
 800305c:	f040 82ad 	bne.w	80035ba <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5e      	ldr	r2, [pc, #376]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x7b6>
 800306a:	4a5e      	ldr	r2, [pc, #376]	@ (80031e4 <HAL_ADC_ConfigChannel+0x92c>)
 800306c:	e000      	b.n	8003070 <HAL_ADC_ConfigChannel+0x7b8>
 800306e:	4a5e      	ldr	r2, [pc, #376]	@ (80031e8 <HAL_ADC_ConfigChannel+0x930>)
 8003070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003074:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7fe fe75 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003080:	e29b      	b.n	80035ba <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5e      	ldr	r2, [pc, #376]	@ (8003200 <HAL_ADC_ConfigChannel+0x948>)
 8003088:	4293      	cmp	r3, r2
 800308a:	f040 8297 	bne.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 8290 	bne.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a4f      	ldr	r2, [pc, #316]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d005      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x7fa>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a50      	ldr	r2, [pc, #320]	@ (80031ec <HAL_ADC_ConfigChannel+0x934>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f040 8285 	bne.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a4a      	ldr	r2, [pc, #296]	@ (80031e0 <HAL_ADC_ConfigChannel+0x928>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x808>
 80030bc:	4a49      	ldr	r2, [pc, #292]	@ (80031e4 <HAL_ADC_ConfigChannel+0x92c>)
 80030be:	e000      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x80a>
 80030c0:	4a49      	ldr	r2, [pc, #292]	@ (80031e8 <HAL_ADC_ConfigChannel+0x930>)
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f7fe fe4c 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 80030d2:	e273      	b.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80030e6:	e269      	b.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f000 8191 	beq.w	800341c <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003102:	d004      	beq.n	800310e <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003108:	4a3e      	ldr	r2, [pc, #248]	@ (8003204 <HAL_ADC_ConfigChannel+0x94c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d107      	bne.n	800311e <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe ffa8 	bl	800206c <LL_ADC_REG_SetSequencerChAdd>
 800311c:	e0b0      	b.n	8003280 <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	210f      	movs	r1, #15
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	401a      	ands	r2, r3
 8003136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800313a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <HAL_ADC_ConfigChannel+0x896>
 8003142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003146:	0e9b      	lsrs	r3, r3, #26
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	e011      	b.n	8003172 <HAL_ADC_ConfigChannel+0x8ba>
 800314e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e003      	b.n	8003172 <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	6849      	ldr	r1, [r1, #4]
 8003176:	f001 011f 	and.w	r1, r1, #31
 800317a:	408b      	lsls	r3, r1
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	429a      	cmp	r2, r3
 8003192:	d875      	bhi.n	8003280 <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003194:	f7fe fdc8 	bl	8001d28 <HAL_GetREVID>
 8003198:	4603      	mov	r3, r0
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800319e:	d866      	bhi.n	800326e <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 80031a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80031a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x90a>
 80031ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2b13      	cmp	r3, #19
 80031b8:	bf8c      	ite	hi
 80031ba:	2301      	movhi	r3, #1
 80031bc:	2300      	movls	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e02b      	b.n	800321a <HAL_ADC_ConfigChannel+0x962>
 80031c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80031c6:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	61bb      	str	r3, [r7, #24]
  return result;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e018      	b.n	8003210 <HAL_ADC_ConfigChannel+0x958>
 80031de:	bf00      	nop
 80031e0:	42028000 	.word	0x42028000
 80031e4:	42028308 	.word	0x42028308
 80031e8:	46021308 	.word	0x46021308
 80031ec:	46021000 	.word	0x46021000
 80031f0:	ce080000 	.word	0xce080000
 80031f4:	20000000 	.word	0x20000000
 80031f8:	053e2d63 	.word	0x053e2d63
 80031fc:	ca040000 	.word	0xca040000
 8003200:	80000001 	.word	0x80000001
 8003204:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b13      	cmp	r3, #19
 8003212:	bf8c      	ite	hi
 8003214:	2301      	movhi	r3, #1
 8003216:	2300      	movls	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d027      	beq.n	800326e <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800321e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003222:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_ADC_ConfigChannel+0x986>
 800322a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800322e:	0e9b      	lsrs	r3, r3, #26
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	3b09      	subs	r3, #9
 8003236:	2201      	movs	r2, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	e015      	b.n	800326a <HAL_ADC_ConfigChannel+0x9b2>
 800323e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003242:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	60fb      	str	r3, [r7, #12]
  return result;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3b09      	subs	r3, #9
 8003264:	2201      	movs	r2, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800327a:	4619      	mov	r1, r3
 800327c:	f7fe fe96 	bl	8001fac <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	461a      	mov	r2, r3
 800328a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800328e:	f7fe ff39 	bl	8002104 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f280 8190 	bge.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a97      	ldr	r2, [pc, #604]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x9f2>
 80032a6:	4b97      	ldr	r3, [pc, #604]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 80032a8:	e000      	b.n	80032ac <HAL_ADC_ConfigChannel+0x9f4>
 80032aa:	4b97      	ldr	r3, [pc, #604]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe fd6f 	bl	8001d90 <LL_ADC_GetCommonPathInternalCh>
 80032b2:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a94      	ldr	r2, [pc, #592]	@ (800350c <HAL_ADC_ConfigChannel+0xc54>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d126      	bne.n	800330e <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d120      	bne.n	800330e <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0xa22>
 80032d6:	4a8b      	ldr	r2, [pc, #556]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 80032d8:	e000      	b.n	80032dc <HAL_ADC_ConfigChannel+0xa24>
 80032da:	4a8b      	ldr	r2, [pc, #556]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 80032dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f7fe fd3f 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032ec:	4b88      	ldr	r3, [pc, #544]	@ (8003510 <HAL_ADC_ConfigChannel+0xc58>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	4a88      	ldr	r2, [pc, #544]	@ (8003514 <HAL_ADC_ConfigChannel+0xc5c>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80032fe:	e002      	b.n	8003306 <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	3b01      	subs	r3, #1
 8003304:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f9      	bne.n	8003300 <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800330c:	e067      	b.n	80033de <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a81      	ldr	r2, [pc, #516]	@ (8003518 <HAL_ADC_ConfigChannel+0xc60>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d116      	bne.n	8003346 <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003320:	2b00      	cmp	r3, #0
 8003322:	d110      	bne.n	8003346 <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a75      	ldr	r2, [pc, #468]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0xa7a>
 800332e:	4a75      	ldr	r2, [pc, #468]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 8003330:	e000      	b.n	8003334 <HAL_ADC_ConfigChannel+0xa7c>
 8003332:	4a75      	ldr	r2, [pc, #468]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 8003334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f7fe fd13 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 8003344:	e04b      	b.n	80033de <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a74      	ldr	r2, [pc, #464]	@ (800351c <HAL_ADC_ConfigChannel+0xc64>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d116      	bne.n	800337e <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d110      	bne.n	800337e <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a67      	ldr	r2, [pc, #412]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_ADC_ConfigChannel+0xab2>
 8003366:	4a67      	ldr	r2, [pc, #412]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 8003368:	e000      	b.n	800336c <HAL_ADC_ConfigChannel+0xab4>
 800336a:	4a67      	ldr	r2, [pc, #412]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 800336c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003370:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f7fe fcf7 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 800337c:	e02f      	b.n	80033de <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a67      	ldr	r2, [pc, #412]	@ (8003520 <HAL_ADC_ConfigChannel+0xc68>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d12a      	bne.n	80033de <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800338c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d124      	bne.n	80033de <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a62      	ldr	r2, [pc, #392]	@ (8003524 <HAL_ADC_ConfigChannel+0xc6c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d11f      	bne.n	80033de <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a57      	ldr	r2, [pc, #348]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0xaf4>
 80033a8:	4a56      	ldr	r2, [pc, #344]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 80033aa:	e000      	b.n	80033ae <HAL_ADC_ConfigChannel+0xaf6>
 80033ac:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 80033ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f7fe fcd6 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80033be:	f7fe fcb3 	bl	8001d28 <HAL_GetREVID>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c8:	d809      	bhi.n	80033de <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80033de:	f7fe fca3 	bl	8001d28 <HAL_GetREVID>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e8:	f040 80e8 	bne.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003528 <HAL_ADC_ConfigChannel+0xc70>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f040 80e2 	bne.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003400:	2b00      	cmp	r3, #0
 8003402:	f040 80db 	bne.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800341a:	e0cf      	b.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003424:	d004      	beq.n	8003430 <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800342a:	4a40      	ldr	r2, [pc, #256]	@ (800352c <HAL_ADC_ConfigChannel+0xc74>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d106      	bne.n	800343e <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fe4a 	bl	80020d2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f280 80ba 	bge.w	80035bc <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0xb9e>
 8003452:	4b2c      	ldr	r3, [pc, #176]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 8003454:	e000      	b.n	8003458 <HAL_ADC_ConfigChannel+0xba0>
 8003456:	4b2c      	ldr	r3, [pc, #176]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fc99 	bl	8001d90 <LL_ADC_GetCommonPathInternalCh>
 800345e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a32      	ldr	r2, [pc, #200]	@ (8003530 <HAL_ADC_ConfigChannel+0xc78>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d110      	bne.n	800348e <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0xbc2>
 8003476:	4a23      	ldr	r2, [pc, #140]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 8003478:	e000      	b.n	800347c <HAL_ADC_ConfigChannel+0xbc4>
 800347a:	4a23      	ldr	r2, [pc, #140]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003480:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fe fc6f 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 800348c:	e06d      	b.n	800356a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a28      	ldr	r2, [pc, #160]	@ (8003534 <HAL_ADC_ConfigChannel+0xc7c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d110      	bne.n	80034ba <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0xbee>
 80034a2:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 80034a4:	e000      	b.n	80034a8 <HAL_ADC_ConfigChannel+0xbf0>
 80034a6:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7fe fc59 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 80034b8:	e057      	b.n	800356a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a17      	ldr	r2, [pc, #92]	@ (800351c <HAL_ADC_ConfigChannel+0xc64>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d110      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0xc1a>
 80034ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 80034d0:	e000      	b.n	80034d4 <HAL_ADC_ConfigChannel+0xc1c>
 80034d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <HAL_ADC_ConfigChannel+0xc50>)
 80034d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f7fe fc43 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 80034e4:	e041      	b.n	800356a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003520 <HAL_ADC_ConfigChannel+0xc68>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d13c      	bne.n	800356a <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a02      	ldr	r2, [pc, #8]	@ (8003500 <HAL_ADC_ConfigChannel+0xc48>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11e      	bne.n	8003538 <HAL_ADC_ConfigChannel+0xc80>
 80034fa:	4a02      	ldr	r2, [pc, #8]	@ (8003504 <HAL_ADC_ConfigChannel+0xc4c>)
 80034fc:	e01d      	b.n	800353a <HAL_ADC_ConfigChannel+0xc82>
 80034fe:	bf00      	nop
 8003500:	42028000 	.word	0x42028000
 8003504:	42028308 	.word	0x42028308
 8003508:	46021308 	.word	0x46021308
 800350c:	b6002000 	.word	0xb6002000
 8003510:	20000000 	.word	0x20000000
 8003514:	053e2d63 	.word	0x053e2d63
 8003518:	ba004000 	.word	0xba004000
 800351c:	80000001 	.word	0x80000001
 8003520:	b2001000 	.word	0xb2001000
 8003524:	46021000 	.word	0x46021000
 8003528:	d7200000 	.word	0xd7200000
 800352c:	80000010 	.word	0x80000010
 8003530:	ce080000 	.word	0xce080000
 8003534:	ca040000 	.word	0xca040000
 8003538:	4a25      	ldr	r2, [pc, #148]	@ (80035d0 <HAL_ADC_ConfigChannel+0xd18>)
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f7fe fc10 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800354a:	f7fe fbed 	bl	8001d28 <HAL_GetREVID>
 800354e:	4603      	mov	r3, r0
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d809      	bhi.n	800356a <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800356a:	f7fe fbdd 	bl	8001d28 <HAL_GetREVID>
 800356e:	4603      	mov	r3, r0
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003574:	d122      	bne.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a16      	ldr	r2, [pc, #88]	@ (80035d4 <HAL_ADC_ConfigChannel+0xd1c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d11d      	bne.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d117      	bne.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80035a0:	e00c      	b.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035a6:	f043 0220 	orr.w	r2, r3, #32
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80035b4:	e002      	b.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ba:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80035c4:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	37f0      	adds	r7, #240	@ 0xf0
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	46021308 	.word	0x46021308
 80035d4:	d7200000 	.word	0xd7200000

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	@ (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	@ (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	@ (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	@ 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	@ 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff4c 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003756:	f7ff ff63 	bl	8003620 <__NVIC_GetPriorityGrouping>
 800375a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	6978      	ldr	r0, [r7, #20]
 8003762:	f7ff ffb3 	bl	80036cc <NVIC_EncodePriority>
 8003766:	4602      	mov	r2, r0
 8003768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff82 	bl	8003678 <__NVIC_SetPriority>
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff56 	bl	800363c <__NVIC_EnableIRQ>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a8:	d301      	bcc.n	80037ae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00d      	b.n	80037ca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80037ae:	4a0a      	ldr	r2, [pc, #40]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a05      	ldr	r2, [pc, #20]	@ (80037d8 <HAL_SYSTICK_Config+0x40>)
 80037c2:	f043 0303 	orr.w	r3, r3, #3
 80037c6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e010 	.word	0xe000e010

080037dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d844      	bhi.n	8003874 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003813 	.word	0x08003813
 80037f4:	08003831 	.word	0x08003831
 80037f8:	08003853 	.word	0x08003853
 80037fc:	08003875 	.word	0x08003875
 8003800:	08003805 	.word	0x08003805
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003804:	4b1f      	ldr	r3, [pc, #124]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6013      	str	r3, [r2, #0]
      break;
 8003810:	e031      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003812:	4b1c      	ldr	r3, [pc, #112]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800381e:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003826:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800382a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800382e:	e022      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003830:	4b14      	ldr	r3, [pc, #80]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a13      	ldr	r2, [pc, #76]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800383c:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003842:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003846:	4a10      	ldr	r2, [pc, #64]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003848:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800384c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003850:	e011      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a0b      	ldr	r2, [pc, #44]	@ (8003884 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003864:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003868:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800386a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800386e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003872:	e000      	b.n	8003876 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003874:	bf00      	nop
  }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010
 8003888:	46020c00 	.word	0x46020c00

0800388c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003892:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800389e:	2304      	movs	r3, #4
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	e021      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80038a4:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80038a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038aa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80038ae:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038b6:	d011      	beq.n	80038dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038be:	d810      	bhi.n	80038e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038cc:	d003      	beq.n	80038d6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80038ce:	e008      	b.n	80038e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
        break;
 80038d4:	e008      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80038d6:	2301      	movs	r3, #1
 80038d8:	607b      	str	r3, [r7, #4]
        break;
 80038da:	e005      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80038dc:	2302      	movs	r3, #2
 80038de:	607b      	str	r3, [r7, #4]
        break;
 80038e0:	e002      	b.n	80038e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
        break;
 80038e6:	bf00      	nop
    }
  }
  return systick_source;
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010
 80038fc:	46020c00 	.word	0x46020c00

08003900 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7fe fa02 	bl	8001d10 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0db      	b.n	8003ad0 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad8 <HAL_DMA_Init+0x1d8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f000 809f 	beq.w	8003a62 <HAL_DMA_Init+0x162>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6c      	ldr	r2, [pc, #432]	@ (8003adc <HAL_DMA_Init+0x1dc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	f000 8099 	beq.w	8003a62 <HAL_DMA_Init+0x162>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6a      	ldr	r2, [pc, #424]	@ (8003ae0 <HAL_DMA_Init+0x1e0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	f000 8093 	beq.w	8003a62 <HAL_DMA_Init+0x162>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a68      	ldr	r2, [pc, #416]	@ (8003ae4 <HAL_DMA_Init+0x1e4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	f000 808d 	beq.w	8003a62 <HAL_DMA_Init+0x162>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a66      	ldr	r2, [pc, #408]	@ (8003ae8 <HAL_DMA_Init+0x1e8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	f000 8087 	beq.w	8003a62 <HAL_DMA_Init+0x162>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a64      	ldr	r2, [pc, #400]	@ (8003aec <HAL_DMA_Init+0x1ec>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f000 8081 	beq.w	8003a62 <HAL_DMA_Init+0x162>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a62      	ldr	r2, [pc, #392]	@ (8003af0 <HAL_DMA_Init+0x1f0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d07b      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a61      	ldr	r2, [pc, #388]	@ (8003af4 <HAL_DMA_Init+0x1f4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d076      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5f      	ldr	r2, [pc, #380]	@ (8003af8 <HAL_DMA_Init+0x1f8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d071      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a5e      	ldr	r2, [pc, #376]	@ (8003afc <HAL_DMA_Init+0x1fc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d06c      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5c      	ldr	r2, [pc, #368]	@ (8003b00 <HAL_DMA_Init+0x200>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d067      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5b      	ldr	r2, [pc, #364]	@ (8003b04 <HAL_DMA_Init+0x204>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d062      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a59      	ldr	r2, [pc, #356]	@ (8003b08 <HAL_DMA_Init+0x208>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d05d      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a58      	ldr	r2, [pc, #352]	@ (8003b0c <HAL_DMA_Init+0x20c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d058      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a56      	ldr	r2, [pc, #344]	@ (8003b10 <HAL_DMA_Init+0x210>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d053      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a55      	ldr	r2, [pc, #340]	@ (8003b14 <HAL_DMA_Init+0x214>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d04e      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a53      	ldr	r2, [pc, #332]	@ (8003b18 <HAL_DMA_Init+0x218>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d049      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_DMA_Init+0x21c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d044      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a50      	ldr	r2, [pc, #320]	@ (8003b20 <HAL_DMA_Init+0x220>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d03f      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4f      	ldr	r2, [pc, #316]	@ (8003b24 <HAL_DMA_Init+0x224>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03a      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003b28 <HAL_DMA_Init+0x228>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d035      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4c      	ldr	r2, [pc, #304]	@ (8003b2c <HAL_DMA_Init+0x22c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d030      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	@ (8003b30 <HAL_DMA_Init+0x230>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02b      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a49      	ldr	r2, [pc, #292]	@ (8003b34 <HAL_DMA_Init+0x234>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d026      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a47      	ldr	r2, [pc, #284]	@ (8003b38 <HAL_DMA_Init+0x238>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d021      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a46      	ldr	r2, [pc, #280]	@ (8003b3c <HAL_DMA_Init+0x23c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01c      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a44      	ldr	r2, [pc, #272]	@ (8003b40 <HAL_DMA_Init+0x240>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d017      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a43      	ldr	r2, [pc, #268]	@ (8003b44 <HAL_DMA_Init+0x244>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d012      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a41      	ldr	r2, [pc, #260]	@ (8003b48 <HAL_DMA_Init+0x248>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	@ (8003b4c <HAL_DMA_Init+0x24c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d008      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3e      	ldr	r2, [pc, #248]	@ (8003b50 <HAL_DMA_Init+0x250>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <HAL_DMA_Init+0x162>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003b54 <HAL_DMA_Init+0x254>)
 8003a60:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0206 	orr.w	r2, r2, #6
 8003a80:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003a82:	e00f      	b.n	8003aa4 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003a84:	f7fe f944 	bl	8001d10 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d908      	bls.n	8003aa4 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2210      	movs	r2, #16
 8003a96:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e015      	b.n	8003ad0 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e8      	bne.n	8003a84 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa16 	bl	8003ee4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40020050 	.word	0x40020050
 8003adc:	50020050 	.word	0x50020050
 8003ae0:	400200d0 	.word	0x400200d0
 8003ae4:	500200d0 	.word	0x500200d0
 8003ae8:	40020150 	.word	0x40020150
 8003aec:	50020150 	.word	0x50020150
 8003af0:	400201d0 	.word	0x400201d0
 8003af4:	500201d0 	.word	0x500201d0
 8003af8:	40020250 	.word	0x40020250
 8003afc:	50020250 	.word	0x50020250
 8003b00:	400202d0 	.word	0x400202d0
 8003b04:	500202d0 	.word	0x500202d0
 8003b08:	40020350 	.word	0x40020350
 8003b0c:	50020350 	.word	0x50020350
 8003b10:	400203d0 	.word	0x400203d0
 8003b14:	500203d0 	.word	0x500203d0
 8003b18:	40020450 	.word	0x40020450
 8003b1c:	50020450 	.word	0x50020450
 8003b20:	400204d0 	.word	0x400204d0
 8003b24:	500204d0 	.word	0x500204d0
 8003b28:	40020550 	.word	0x40020550
 8003b2c:	50020550 	.word	0x50020550
 8003b30:	400205d0 	.word	0x400205d0
 8003b34:	500205d0 	.word	0x500205d0
 8003b38:	40020650 	.word	0x40020650
 8003b3c:	50020650 	.word	0x50020650
 8003b40:	400206d0 	.word	0x400206d0
 8003b44:	500206d0 	.word	0x500206d0
 8003b48:	40020750 	.word	0x40020750
 8003b4c:	50020750 	.word	0x50020750
 8003b50:	400207d0 	.word	0x400207d0
 8003b54:	500207d0 	.word	0x500207d0

08003b58 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e019      	b.n	8003b9e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d004      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e00e      	b.n	8003b9e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003bba:	f023 030f 	bic.w	r3, r3, #15
 8003bbe:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	3b50      	subs	r3, #80	@ 0x50
 8003bca:	09db      	lsrs	r3, r3, #7
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 813b 	beq.w	8003e60 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d011      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c0e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d011      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c40:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	f043 0202 	orr.w	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d011      	beq.n	8003c80 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c72:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	f043 0204 	orr.w	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d011      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ca4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003caa:	f043 0208 	orr.w	r2, r3, #8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d04c      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d045      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d12e      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d28:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0202 	orr.w	r2, r2, #2
 8003d38:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d52:	2201      	movs	r2, #1
 8003d54:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d07a      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
        }

        return;
 8003d76:	e075      	b.n	8003e64 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2205      	movs	r2, #5
 8003d7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d039      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d032      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d111      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd8:	2201      	movs	r2, #1
 8003dda:	731a      	strb	r2, [r3, #12]
 8003ddc:	e008      	b.n	8003df0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003df8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d025      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0202 	orr.w	r2, r2, #2
 8003e28:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e42:	2201      	movs	r2, #1
 8003e44:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
 8003e5e:	e002      	b.n	8003e66 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003e60:	bf00      	nop
 8003e62:	e000      	b.n	8003e66 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003e64:	bf00      	nop
    }
  }
}
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e02b      	b.n	8003ed8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003e88:	f023 030f 	bic.w	r3, r3, #15
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	3b50      	subs	r3, #80	@ 0x50
 8003e98:	09db      	lsrs	r3, r3, #7
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f003 0311 	and.w	r3, r3, #17
 8003eb6:	2b11      	cmp	r3, #17
 8003eb8:	d106      	bne.n	8003ec8 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e006      	b.n	8003ed6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a53      	ldr	r2, [pc, #332]	@ (8004070 <DMA_Init+0x18c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	f000 80a0 	beq.w	800406a <DMA_Init+0x186>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a51      	ldr	r2, [pc, #324]	@ (8004074 <DMA_Init+0x190>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	f000 809a 	beq.w	800406a <DMA_Init+0x186>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8004078 <DMA_Init+0x194>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	f000 8094 	beq.w	800406a <DMA_Init+0x186>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a4d      	ldr	r2, [pc, #308]	@ (800407c <DMA_Init+0x198>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	f000 808e 	beq.w	800406a <DMA_Init+0x186>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4b      	ldr	r2, [pc, #300]	@ (8004080 <DMA_Init+0x19c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	f000 8088 	beq.w	800406a <DMA_Init+0x186>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a49      	ldr	r2, [pc, #292]	@ (8004084 <DMA_Init+0x1a0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	f000 8082 	beq.w	800406a <DMA_Init+0x186>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a47      	ldr	r2, [pc, #284]	@ (8004088 <DMA_Init+0x1a4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d07c      	beq.n	800406a <DMA_Init+0x186>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a45      	ldr	r2, [pc, #276]	@ (800408c <DMA_Init+0x1a8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d077      	beq.n	800406a <DMA_Init+0x186>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a44      	ldr	r2, [pc, #272]	@ (8004090 <DMA_Init+0x1ac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d072      	beq.n	800406a <DMA_Init+0x186>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a42      	ldr	r2, [pc, #264]	@ (8004094 <DMA_Init+0x1b0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d06d      	beq.n	800406a <DMA_Init+0x186>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a41      	ldr	r2, [pc, #260]	@ (8004098 <DMA_Init+0x1b4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d068      	beq.n	800406a <DMA_Init+0x186>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800409c <DMA_Init+0x1b8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d063      	beq.n	800406a <DMA_Init+0x186>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80040a0 <DMA_Init+0x1bc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d05e      	beq.n	800406a <DMA_Init+0x186>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80040a4 <DMA_Init+0x1c0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d059      	beq.n	800406a <DMA_Init+0x186>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	@ (80040a8 <DMA_Init+0x1c4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d054      	beq.n	800406a <DMA_Init+0x186>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <DMA_Init+0x1c8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04f      	beq.n	800406a <DMA_Init+0x186>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a38      	ldr	r2, [pc, #224]	@ (80040b0 <DMA_Init+0x1cc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d04a      	beq.n	800406a <DMA_Init+0x186>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	@ (80040b4 <DMA_Init+0x1d0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d045      	beq.n	800406a <DMA_Init+0x186>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a35      	ldr	r2, [pc, #212]	@ (80040b8 <DMA_Init+0x1d4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d040      	beq.n	800406a <DMA_Init+0x186>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a33      	ldr	r2, [pc, #204]	@ (80040bc <DMA_Init+0x1d8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d03b      	beq.n	800406a <DMA_Init+0x186>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	@ (80040c0 <DMA_Init+0x1dc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d036      	beq.n	800406a <DMA_Init+0x186>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <DMA_Init+0x1e0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <DMA_Init+0x186>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2f      	ldr	r2, [pc, #188]	@ (80040c8 <DMA_Init+0x1e4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d02c      	beq.n	800406a <DMA_Init+0x186>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <DMA_Init+0x1e8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d027      	beq.n	800406a <DMA_Init+0x186>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	@ (80040d0 <DMA_Init+0x1ec>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <DMA_Init+0x186>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2a      	ldr	r2, [pc, #168]	@ (80040d4 <DMA_Init+0x1f0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <DMA_Init+0x186>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a29      	ldr	r2, [pc, #164]	@ (80040d8 <DMA_Init+0x1f4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <DMA_Init+0x186>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a27      	ldr	r2, [pc, #156]	@ (80040dc <DMA_Init+0x1f8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <DMA_Init+0x186>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a26      	ldr	r2, [pc, #152]	@ (80040e0 <DMA_Init+0x1fc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <DMA_Init+0x186>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a24      	ldr	r2, [pc, #144]	@ (80040e4 <DMA_Init+0x200>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <DMA_Init+0x186>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a23      	ldr	r2, [pc, #140]	@ (80040e8 <DMA_Init+0x204>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <DMA_Init+0x186>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a21      	ldr	r2, [pc, #132]	@ (80040ec <DMA_Init+0x208>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d142      	bne.n	80040f0 <DMA_Init+0x20c>
 800406a:	2301      	movs	r3, #1
 800406c:	e041      	b.n	80040f2 <DMA_Init+0x20e>
 800406e:	bf00      	nop
 8004070:	40020050 	.word	0x40020050
 8004074:	50020050 	.word	0x50020050
 8004078:	400200d0 	.word	0x400200d0
 800407c:	500200d0 	.word	0x500200d0
 8004080:	40020150 	.word	0x40020150
 8004084:	50020150 	.word	0x50020150
 8004088:	400201d0 	.word	0x400201d0
 800408c:	500201d0 	.word	0x500201d0
 8004090:	40020250 	.word	0x40020250
 8004094:	50020250 	.word	0x50020250
 8004098:	400202d0 	.word	0x400202d0
 800409c:	500202d0 	.word	0x500202d0
 80040a0:	40020350 	.word	0x40020350
 80040a4:	50020350 	.word	0x50020350
 80040a8:	400203d0 	.word	0x400203d0
 80040ac:	500203d0 	.word	0x500203d0
 80040b0:	40020450 	.word	0x40020450
 80040b4:	50020450 	.word	0x50020450
 80040b8:	400204d0 	.word	0x400204d0
 80040bc:	500204d0 	.word	0x500204d0
 80040c0:	40020550 	.word	0x40020550
 80040c4:	50020550 	.word	0x50020550
 80040c8:	400205d0 	.word	0x400205d0
 80040cc:	500205d0 	.word	0x500205d0
 80040d0:	40020650 	.word	0x40020650
 80040d4:	50020650 	.word	0x50020650
 80040d8:	400206d0 	.word	0x400206d0
 80040dc:	500206d0 	.word	0x500206d0
 80040e0:	40020750 	.word	0x40020750
 80040e4:	50020750 	.word	0x50020750
 80040e8:	400207d0 	.word	0x400207d0
 80040ec:	500207d0 	.word	0x500207d0
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d012      	beq.n	800411c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	051b      	lsls	r3, r3, #20
 8004102:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004106:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	3b01      	subs	r3, #1
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004114:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	430a      	orrs	r2, r1
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414e:	f040 80b0 	bne.w	80042b2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a82      	ldr	r2, [pc, #520]	@ (8004360 <DMA_Init+0x47c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	f000 80a0 	beq.w	800429e <DMA_Init+0x3ba>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a80      	ldr	r2, [pc, #512]	@ (8004364 <DMA_Init+0x480>)
 8004164:	4293      	cmp	r3, r2
 8004166:	f000 809a 	beq.w	800429e <DMA_Init+0x3ba>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7e      	ldr	r2, [pc, #504]	@ (8004368 <DMA_Init+0x484>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f000 8094 	beq.w	800429e <DMA_Init+0x3ba>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7c      	ldr	r2, [pc, #496]	@ (800436c <DMA_Init+0x488>)
 800417c:	4293      	cmp	r3, r2
 800417e:	f000 808e 	beq.w	800429e <DMA_Init+0x3ba>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7a      	ldr	r2, [pc, #488]	@ (8004370 <DMA_Init+0x48c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	f000 8088 	beq.w	800429e <DMA_Init+0x3ba>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a78      	ldr	r2, [pc, #480]	@ (8004374 <DMA_Init+0x490>)
 8004194:	4293      	cmp	r3, r2
 8004196:	f000 8082 	beq.w	800429e <DMA_Init+0x3ba>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a76      	ldr	r2, [pc, #472]	@ (8004378 <DMA_Init+0x494>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d07c      	beq.n	800429e <DMA_Init+0x3ba>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a74      	ldr	r2, [pc, #464]	@ (800437c <DMA_Init+0x498>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d077      	beq.n	800429e <DMA_Init+0x3ba>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a73      	ldr	r2, [pc, #460]	@ (8004380 <DMA_Init+0x49c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d072      	beq.n	800429e <DMA_Init+0x3ba>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a71      	ldr	r2, [pc, #452]	@ (8004384 <DMA_Init+0x4a0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d06d      	beq.n	800429e <DMA_Init+0x3ba>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a70      	ldr	r2, [pc, #448]	@ (8004388 <DMA_Init+0x4a4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d068      	beq.n	800429e <DMA_Init+0x3ba>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6e      	ldr	r2, [pc, #440]	@ (800438c <DMA_Init+0x4a8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d063      	beq.n	800429e <DMA_Init+0x3ba>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6d      	ldr	r2, [pc, #436]	@ (8004390 <DMA_Init+0x4ac>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d05e      	beq.n	800429e <DMA_Init+0x3ba>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004394 <DMA_Init+0x4b0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d059      	beq.n	800429e <DMA_Init+0x3ba>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004398 <DMA_Init+0x4b4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d054      	beq.n	800429e <DMA_Init+0x3ba>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a68      	ldr	r2, [pc, #416]	@ (800439c <DMA_Init+0x4b8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d04f      	beq.n	800429e <DMA_Init+0x3ba>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a67      	ldr	r2, [pc, #412]	@ (80043a0 <DMA_Init+0x4bc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <DMA_Init+0x3ba>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	@ (80043a4 <DMA_Init+0x4c0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <DMA_Init+0x3ba>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a64      	ldr	r2, [pc, #400]	@ (80043a8 <DMA_Init+0x4c4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <DMA_Init+0x3ba>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a62      	ldr	r2, [pc, #392]	@ (80043ac <DMA_Init+0x4c8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <DMA_Init+0x3ba>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a61      	ldr	r2, [pc, #388]	@ (80043b0 <DMA_Init+0x4cc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <DMA_Init+0x3ba>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a5f      	ldr	r2, [pc, #380]	@ (80043b4 <DMA_Init+0x4d0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <DMA_Init+0x3ba>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5e      	ldr	r2, [pc, #376]	@ (80043b8 <DMA_Init+0x4d4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <DMA_Init+0x3ba>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a5c      	ldr	r2, [pc, #368]	@ (80043bc <DMA_Init+0x4d8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <DMA_Init+0x3ba>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5b      	ldr	r2, [pc, #364]	@ (80043c0 <DMA_Init+0x4dc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <DMA_Init+0x3ba>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a59      	ldr	r2, [pc, #356]	@ (80043c4 <DMA_Init+0x4e0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <DMA_Init+0x3ba>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a58      	ldr	r2, [pc, #352]	@ (80043c8 <DMA_Init+0x4e4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <DMA_Init+0x3ba>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a56      	ldr	r2, [pc, #344]	@ (80043cc <DMA_Init+0x4e8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <DMA_Init+0x3ba>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a55      	ldr	r2, [pc, #340]	@ (80043d0 <DMA_Init+0x4ec>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <DMA_Init+0x3ba>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a53      	ldr	r2, [pc, #332]	@ (80043d4 <DMA_Init+0x4f0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <DMA_Init+0x3ba>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a52      	ldr	r2, [pc, #328]	@ (80043d8 <DMA_Init+0x4f4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <DMA_Init+0x3ba>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a50      	ldr	r2, [pc, #320]	@ (80043dc <DMA_Init+0x4f8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <DMA_Init+0x3be>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <DMA_Init+0x3c0>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e008      	b.n	80042c4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ba:	d103      	bne.n	80042c4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042c2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ca:	4b45      	ldr	r3, [pc, #276]	@ (80043e0 <DMA_Init+0x4fc>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2200      	movs	r2, #0
 80042de:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a36      	ldr	r2, [pc, #216]	@ (80043c0 <DMA_Init+0x4dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d022      	beq.n	8004330 <DMA_Init+0x44c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a35      	ldr	r2, [pc, #212]	@ (80043c4 <DMA_Init+0x4e0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d01d      	beq.n	8004330 <DMA_Init+0x44c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a33      	ldr	r2, [pc, #204]	@ (80043c8 <DMA_Init+0x4e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d018      	beq.n	8004330 <DMA_Init+0x44c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a32      	ldr	r2, [pc, #200]	@ (80043cc <DMA_Init+0x4e8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d013      	beq.n	8004330 <DMA_Init+0x44c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a30      	ldr	r2, [pc, #192]	@ (80043d0 <DMA_Init+0x4ec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <DMA_Init+0x44c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2f      	ldr	r2, [pc, #188]	@ (80043d4 <DMA_Init+0x4f0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d009      	beq.n	8004330 <DMA_Init+0x44c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2d      	ldr	r2, [pc, #180]	@ (80043d8 <DMA_Init+0x4f4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <DMA_Init+0x44c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2c      	ldr	r2, [pc, #176]	@ (80043dc <DMA_Init+0x4f8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <DMA_Init+0x450>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <DMA_Init+0x452>
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40020050 	.word	0x40020050
 8004364:	50020050 	.word	0x50020050
 8004368:	400200d0 	.word	0x400200d0
 800436c:	500200d0 	.word	0x500200d0
 8004370:	40020150 	.word	0x40020150
 8004374:	50020150 	.word	0x50020150
 8004378:	400201d0 	.word	0x400201d0
 800437c:	500201d0 	.word	0x500201d0
 8004380:	40020250 	.word	0x40020250
 8004384:	50020250 	.word	0x50020250
 8004388:	400202d0 	.word	0x400202d0
 800438c:	500202d0 	.word	0x500202d0
 8004390:	40020350 	.word	0x40020350
 8004394:	50020350 	.word	0x50020350
 8004398:	400203d0 	.word	0x400203d0
 800439c:	500203d0 	.word	0x500203d0
 80043a0:	40020450 	.word	0x40020450
 80043a4:	50020450 	.word	0x50020450
 80043a8:	400204d0 	.word	0x400204d0
 80043ac:	500204d0 	.word	0x500204d0
 80043b0:	40020550 	.word	0x40020550
 80043b4:	50020550 	.word	0x50020550
 80043b8:	400205d0 	.word	0x400205d0
 80043bc:	500205d0 	.word	0x500205d0
 80043c0:	40020650 	.word	0x40020650
 80043c4:	50020650 	.word	0x50020650
 80043c8:	400206d0 	.word	0x400206d0
 80043cc:	500206d0 	.word	0x500206d0
 80043d0:	40020750 	.word	0x40020750
 80043d4:	50020750 	.word	0x50020750
 80043d8:	400207d0 	.word	0x400207d0
 80043dc:	500207d0 	.word	0x500207d0
 80043e0:	3cc03180 	.word	0x3cc03180

080043e4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80043ec:	f7fd fc90 	bl	8001d10 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0db      	b.n	80045b4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6e      	ldr	r2, [pc, #440]	@ (80045bc <HAL_DMAEx_List_Init+0x1d8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	f000 809f 	beq.w	8004546 <HAL_DMAEx_List_Init+0x162>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6c      	ldr	r2, [pc, #432]	@ (80045c0 <HAL_DMAEx_List_Init+0x1dc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f000 8099 	beq.w	8004546 <HAL_DMAEx_List_Init+0x162>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6a      	ldr	r2, [pc, #424]	@ (80045c4 <HAL_DMAEx_List_Init+0x1e0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	f000 8093 	beq.w	8004546 <HAL_DMAEx_List_Init+0x162>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a68      	ldr	r2, [pc, #416]	@ (80045c8 <HAL_DMAEx_List_Init+0x1e4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	f000 808d 	beq.w	8004546 <HAL_DMAEx_List_Init+0x162>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a66      	ldr	r2, [pc, #408]	@ (80045cc <HAL_DMAEx_List_Init+0x1e8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	f000 8087 	beq.w	8004546 <HAL_DMAEx_List_Init+0x162>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a64      	ldr	r2, [pc, #400]	@ (80045d0 <HAL_DMAEx_List_Init+0x1ec>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f000 8081 	beq.w	8004546 <HAL_DMAEx_List_Init+0x162>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a62      	ldr	r2, [pc, #392]	@ (80045d4 <HAL_DMAEx_List_Init+0x1f0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d07b      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a61      	ldr	r2, [pc, #388]	@ (80045d8 <HAL_DMAEx_List_Init+0x1f4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d076      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a5f      	ldr	r2, [pc, #380]	@ (80045dc <HAL_DMAEx_List_Init+0x1f8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d071      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5e      	ldr	r2, [pc, #376]	@ (80045e0 <HAL_DMAEx_List_Init+0x1fc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d06c      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5c      	ldr	r2, [pc, #368]	@ (80045e4 <HAL_DMAEx_List_Init+0x200>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d067      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5b      	ldr	r2, [pc, #364]	@ (80045e8 <HAL_DMAEx_List_Init+0x204>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d062      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a59      	ldr	r2, [pc, #356]	@ (80045ec <HAL_DMAEx_List_Init+0x208>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d05d      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a58      	ldr	r2, [pc, #352]	@ (80045f0 <HAL_DMAEx_List_Init+0x20c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d058      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a56      	ldr	r2, [pc, #344]	@ (80045f4 <HAL_DMAEx_List_Init+0x210>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d053      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a55      	ldr	r2, [pc, #340]	@ (80045f8 <HAL_DMAEx_List_Init+0x214>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d04e      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a53      	ldr	r2, [pc, #332]	@ (80045fc <HAL_DMAEx_List_Init+0x218>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d049      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a52      	ldr	r2, [pc, #328]	@ (8004600 <HAL_DMAEx_List_Init+0x21c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d044      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a50      	ldr	r2, [pc, #320]	@ (8004604 <HAL_DMAEx_List_Init+0x220>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d03f      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a4f      	ldr	r2, [pc, #316]	@ (8004608 <HAL_DMAEx_List_Init+0x224>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d03a      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a4d      	ldr	r2, [pc, #308]	@ (800460c <HAL_DMAEx_List_Init+0x228>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d035      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a4c      	ldr	r2, [pc, #304]	@ (8004610 <HAL_DMAEx_List_Init+0x22c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d030      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004614 <HAL_DMAEx_List_Init+0x230>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d02b      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a49      	ldr	r2, [pc, #292]	@ (8004618 <HAL_DMAEx_List_Init+0x234>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d026      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a47      	ldr	r2, [pc, #284]	@ (800461c <HAL_DMAEx_List_Init+0x238>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d021      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a46      	ldr	r2, [pc, #280]	@ (8004620 <HAL_DMAEx_List_Init+0x23c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d01c      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a44      	ldr	r2, [pc, #272]	@ (8004624 <HAL_DMAEx_List_Init+0x240>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d017      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a43      	ldr	r2, [pc, #268]	@ (8004628 <HAL_DMAEx_List_Init+0x244>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d012      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a41      	ldr	r2, [pc, #260]	@ (800462c <HAL_DMAEx_List_Init+0x248>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00d      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a40      	ldr	r2, [pc, #256]	@ (8004630 <HAL_DMAEx_List_Init+0x24c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d008      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3e      	ldr	r2, [pc, #248]	@ (8004634 <HAL_DMAEx_List_Init+0x250>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <HAL_DMAEx_List_Init+0x162>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a3d      	ldr	r2, [pc, #244]	@ (8004638 <HAL_DMAEx_List_Init+0x254>)
 8004544:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0206 	orr.w	r2, r2, #6
 8004564:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004566:	e00f      	b.n	8004588 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004568:	f7fd fbd2 	bl	8001d10 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b05      	cmp	r3, #5
 8004574:	d908      	bls.n	8004588 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2210      	movs	r2, #16
 800457a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2203      	movs	r2, #3
 8004580:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e015      	b.n	80045b4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e8      	bne.n	8004568 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fad0 	bl	8004b3c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40020050 	.word	0x40020050
 80045c0:	50020050 	.word	0x50020050
 80045c4:	400200d0 	.word	0x400200d0
 80045c8:	500200d0 	.word	0x500200d0
 80045cc:	40020150 	.word	0x40020150
 80045d0:	50020150 	.word	0x50020150
 80045d4:	400201d0 	.word	0x400201d0
 80045d8:	500201d0 	.word	0x500201d0
 80045dc:	40020250 	.word	0x40020250
 80045e0:	50020250 	.word	0x50020250
 80045e4:	400202d0 	.word	0x400202d0
 80045e8:	500202d0 	.word	0x500202d0
 80045ec:	40020350 	.word	0x40020350
 80045f0:	50020350 	.word	0x50020350
 80045f4:	400203d0 	.word	0x400203d0
 80045f8:	500203d0 	.word	0x500203d0
 80045fc:	40020450 	.word	0x40020450
 8004600:	50020450 	.word	0x50020450
 8004604:	400204d0 	.word	0x400204d0
 8004608:	500204d0 	.word	0x500204d0
 800460c:	40020550 	.word	0x40020550
 8004610:	50020550 	.word	0x50020550
 8004614:	400205d0 	.word	0x400205d0
 8004618:	500205d0 	.word	0x500205d0
 800461c:	40020650 	.word	0x40020650
 8004620:	50020650 	.word	0x50020650
 8004624:	400206d0 	.word	0x400206d0
 8004628:	500206d0 	.word	0x500206d0
 800462c:	40020750 	.word	0x40020750
 8004630:	50020750 	.word	0x50020750
 8004634:	400207d0 	.word	0x400207d0
 8004638:	500207d0 	.word	0x500207d0

0800463c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_DMAEx_List_Start_IT+0x16>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e082      	b.n	800475c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800465c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004668:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d005      	beq.n	800467c <HAL_DMAEx_List_Start_IT+0x40>
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d16a      	bne.n	800474c <HAL_DMAEx_List_Start_IT+0x110>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d067      	beq.n	800474c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d157      	bne.n	8004738 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_DMAEx_List_Start_IT+0x5a>
 8004692:	2302      	movs	r3, #2
 8004694:	e062      	b.n	800475c <HAL_DMAEx_List_Start_IT+0x120>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046aa:	2202      	movs	r2, #2
 80046ac:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b8:	2200      	movs	r2, #0
 80046ba:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80046ca:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046fa:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f107 010c 	add.w	r1, r7, #12
 8004706:	2200      	movs	r2, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fe3d 	bl	8005388 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	0c0b      	lsrs	r3, r1, #16
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800472c:	4013      	ands	r3, r2
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	430b      	orrs	r3, r1
 8004736:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e007      	b.n	800475c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2240      	movs	r2, #64	@ 0x40
 8004750:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_DMAEx_List_BuildNode+0x16>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e004      	b.n	8004788 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb33 	bl	8004dec <DMA_List_BuildNode>

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e004      	b.n	80047b4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fc75 	bl	800509c <DMA_List_GetNodeConfig>

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	@ 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_DMAEx_List_InsertNode+0x18>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0b6      	b.n	8004946 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d104      	bne.n	80047ea <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2204      	movs	r2, #4
 80047e4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0ad      	b.n	8004946 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fd5c 	bl	80052b0 <DMA_List_CheckNodesBaseAddresses>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2205      	movs	r2, #5
 8004802:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e09e      	b.n	8004946 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd7d 	bl	8005310 <DMA_List_CheckNodesTypes>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2204      	movs	r2, #4
 8004820:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e08f      	b.n	8004946 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2202      	movs	r2, #2
 800482a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8004832:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800483a:	4619      	mov	r1, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fda3 	bl	8005388 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11a      	bne.n	8004880 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	e06c      	b.n	8004938 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800486a:	4013      	ands	r3, r2
 800486c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800486e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004870:	4319      	orrs	r1, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2202      	movs	r2, #2
 800487c:	609a      	str	r2, [r3, #8]
 800487e:	e05b      	b.n	8004938 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004890:	4013      	ands	r3, r2
 8004892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004896:	4319      	orrs	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e043      	b.n	800492e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80048aa:	f107 0314 	add.w	r3, r7, #20
 80048ae:	461a      	mov	r2, r3
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fd98 	bl	80053e8 <DMA_List_FindNode>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d132      	bne.n	8004924 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d11a      	bne.n	80048fe <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	461a      	mov	r2, r3
 80048d6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80048da:	4013      	ands	r3, r2
 80048dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e0:	4319      	orrs	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80048ee:	4013      	ands	r3, r2
 80048f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f4:	4319      	orrs	r1, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80048fc:	e017      	b.n	800492e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80048fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004914:	4013      	ands	r3, r2
 8004916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491a:	4319      	orrs	r1, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004922:	e004      	b.n	800492e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2206      	movs	r2, #6
 8004928:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e00b      	b.n	8004946 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3730      	adds	r7, #48	@ 0x30
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b08a      	sub	sp, #40	@ 0x28
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e052      	b.n	8004a06 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e049      	b.n	8004a06 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d101      	bne.n	800498a <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e03d      	b.n	8004a06 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2204      	movs	r2, #4
 800498e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e038      	b.n	8004a06 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d104      	bne.n	80049a6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2204      	movs	r2, #4
 80049a0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e02f      	b.n	8004a06 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f107 0220 	add.w	r2, r7, #32
 80049ba:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fce2 	bl	8005388 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80049c8:	f107 030c 	add.w	r3, r7, #12
 80049cc:	461a      	mov	r2, r3
 80049ce:	2100      	movs	r1, #0
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fd09 	bl	80053e8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80049e0:	4013      	ands	r3, r2
 80049e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4610      	mov	r0, r2
 80049e8:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80049ea:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80049ec:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3728      	adds	r7, #40	@ 0x28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_DMAEx_List_LinkQ+0x16>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e072      	b.n	8004b10 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004a30:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d002      	beq.n	8004a44 <HAL_DMAEx_List_LinkQ+0x34>
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d108      	bne.n	8004a56 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2240      	movs	r2, #64	@ 0x40
 8004a48:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e05c      	b.n	8004b10 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	7b1b      	ldrb	r3, [r3, #12]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d104      	bne.n	8004a6a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2201      	movs	r2, #1
 8004a64:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e052      	b.n	8004b10 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b1c <HAL_DMAEx_List_LinkQ+0x10c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d022      	beq.n	8004aba <HAL_DMAEx_List_LinkQ+0xaa>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <HAL_DMAEx_List_LinkQ+0x110>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01d      	beq.n	8004aba <HAL_DMAEx_List_LinkQ+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <HAL_DMAEx_List_LinkQ+0x114>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <HAL_DMAEx_List_LinkQ+0xaa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <HAL_DMAEx_List_LinkQ+0x118>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_DMAEx_List_LinkQ+0xaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <HAL_DMAEx_List_LinkQ+0x11c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_DMAEx_List_LinkQ+0xaa>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a23      	ldr	r2, [pc, #140]	@ (8004b30 <HAL_DMAEx_List_LinkQ+0x120>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_DMAEx_List_LinkQ+0xaa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a22      	ldr	r2, [pc, #136]	@ (8004b34 <HAL_DMAEx_List_LinkQ+0x124>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_DMAEx_List_LinkQ+0xaa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	@ (8004b38 <HAL_DMAEx_List_LinkQ+0x128>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_DMAEx_List_LinkQ+0xae>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <HAL_DMAEx_List_LinkQ+0xb0>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10b      	bne.n	8004adc <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e019      	b.n	8004b10 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae0:	2b81      	cmp	r3, #129	@ 0x81
 8004ae2:	d108      	bne.n	8004af6 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10d      	bne.n	8004b08 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2204      	movs	r2, #4
 8004af0:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e00c      	b.n	8004b10 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2204      	movs	r2, #4
 8004b02:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e003      	b.n	8004b10 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40020650 	.word	0x40020650
 8004b20:	50020650 	.word	0x50020650
 8004b24:	400206d0 	.word	0x400206d0
 8004b28:	500206d0 	.word	0x500206d0
 8004b2c:	40020750 	.word	0x40020750
 8004b30:	50020750 	.word	0x50020750
 8004b34:	400207d0 	.word	0x400207d0
 8004b38:	500207d0 	.word	0x500207d0

08004b3c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a85      	ldr	r2, [pc, #532]	@ (8004d6c <DMA_List_Init+0x230>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f000 80a0 	beq.w	8004c9c <DMA_List_Init+0x160>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a83      	ldr	r2, [pc, #524]	@ (8004d70 <DMA_List_Init+0x234>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f000 809a 	beq.w	8004c9c <DMA_List_Init+0x160>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a81      	ldr	r2, [pc, #516]	@ (8004d74 <DMA_List_Init+0x238>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f000 8094 	beq.w	8004c9c <DMA_List_Init+0x160>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a7f      	ldr	r2, [pc, #508]	@ (8004d78 <DMA_List_Init+0x23c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f000 808e 	beq.w	8004c9c <DMA_List_Init+0x160>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a7d      	ldr	r2, [pc, #500]	@ (8004d7c <DMA_List_Init+0x240>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f000 8088 	beq.w	8004c9c <DMA_List_Init+0x160>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7b      	ldr	r2, [pc, #492]	@ (8004d80 <DMA_List_Init+0x244>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	f000 8082 	beq.w	8004c9c <DMA_List_Init+0x160>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a79      	ldr	r2, [pc, #484]	@ (8004d84 <DMA_List_Init+0x248>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d07c      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a78      	ldr	r2, [pc, #480]	@ (8004d88 <DMA_List_Init+0x24c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d077      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a76      	ldr	r2, [pc, #472]	@ (8004d8c <DMA_List_Init+0x250>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d072      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a75      	ldr	r2, [pc, #468]	@ (8004d90 <DMA_List_Init+0x254>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d06d      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a73      	ldr	r2, [pc, #460]	@ (8004d94 <DMA_List_Init+0x258>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d068      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a72      	ldr	r2, [pc, #456]	@ (8004d98 <DMA_List_Init+0x25c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d063      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a70      	ldr	r2, [pc, #448]	@ (8004d9c <DMA_List_Init+0x260>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d05e      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6f      	ldr	r2, [pc, #444]	@ (8004da0 <DMA_List_Init+0x264>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d059      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a6d      	ldr	r2, [pc, #436]	@ (8004da4 <DMA_List_Init+0x268>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d054      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8004da8 <DMA_List_Init+0x26c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d04f      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a6a      	ldr	r2, [pc, #424]	@ (8004dac <DMA_List_Init+0x270>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d04a      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a69      	ldr	r2, [pc, #420]	@ (8004db0 <DMA_List_Init+0x274>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d045      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a67      	ldr	r2, [pc, #412]	@ (8004db4 <DMA_List_Init+0x278>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d040      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a66      	ldr	r2, [pc, #408]	@ (8004db8 <DMA_List_Init+0x27c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d03b      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a64      	ldr	r2, [pc, #400]	@ (8004dbc <DMA_List_Init+0x280>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d036      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a63      	ldr	r2, [pc, #396]	@ (8004dc0 <DMA_List_Init+0x284>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d031      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a61      	ldr	r2, [pc, #388]	@ (8004dc4 <DMA_List_Init+0x288>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02c      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a60      	ldr	r2, [pc, #384]	@ (8004dc8 <DMA_List_Init+0x28c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d027      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5e      	ldr	r2, [pc, #376]	@ (8004dcc <DMA_List_Init+0x290>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d022      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a5d      	ldr	r2, [pc, #372]	@ (8004dd0 <DMA_List_Init+0x294>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d01d      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a5b      	ldr	r2, [pc, #364]	@ (8004dd4 <DMA_List_Init+0x298>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d018      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a5a      	ldr	r2, [pc, #360]	@ (8004dd8 <DMA_List_Init+0x29c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a58      	ldr	r2, [pc, #352]	@ (8004ddc <DMA_List_Init+0x2a0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00e      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a57      	ldr	r2, [pc, #348]	@ (8004de0 <DMA_List_Init+0x2a4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a55      	ldr	r2, [pc, #340]	@ (8004de4 <DMA_List_Init+0x2a8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <DMA_List_Init+0x160>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a54      	ldr	r2, [pc, #336]	@ (8004de8 <DMA_List_Init+0x2ac>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <DMA_List_Init+0x164>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <DMA_List_Init+0x166>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a36      	ldr	r2, [pc, #216]	@ (8004dcc <DMA_List_Init+0x290>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <DMA_List_Init+0x202>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a34      	ldr	r2, [pc, #208]	@ (8004dd0 <DMA_List_Init+0x294>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01d      	beq.n	8004d3e <DMA_List_Init+0x202>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a33      	ldr	r2, [pc, #204]	@ (8004dd4 <DMA_List_Init+0x298>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <DMA_List_Init+0x202>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a31      	ldr	r2, [pc, #196]	@ (8004dd8 <DMA_List_Init+0x29c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <DMA_List_Init+0x202>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a30      	ldr	r2, [pc, #192]	@ (8004ddc <DMA_List_Init+0x2a0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <DMA_List_Init+0x202>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2e      	ldr	r2, [pc, #184]	@ (8004de0 <DMA_List_Init+0x2a4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <DMA_List_Init+0x202>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004de4 <DMA_List_Init+0x2a8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <DMA_List_Init+0x202>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2b      	ldr	r2, [pc, #172]	@ (8004de8 <DMA_List_Init+0x2ac>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d101      	bne.n	8004d42 <DMA_List_Init+0x206>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <DMA_List_Init+0x208>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2200      	movs	r2, #0
 8004d56:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40020050 	.word	0x40020050
 8004d70:	50020050 	.word	0x50020050
 8004d74:	400200d0 	.word	0x400200d0
 8004d78:	500200d0 	.word	0x500200d0
 8004d7c:	40020150 	.word	0x40020150
 8004d80:	50020150 	.word	0x50020150
 8004d84:	400201d0 	.word	0x400201d0
 8004d88:	500201d0 	.word	0x500201d0
 8004d8c:	40020250 	.word	0x40020250
 8004d90:	50020250 	.word	0x50020250
 8004d94:	400202d0 	.word	0x400202d0
 8004d98:	500202d0 	.word	0x500202d0
 8004d9c:	40020350 	.word	0x40020350
 8004da0:	50020350 	.word	0x50020350
 8004da4:	400203d0 	.word	0x400203d0
 8004da8:	500203d0 	.word	0x500203d0
 8004dac:	40020450 	.word	0x40020450
 8004db0:	50020450 	.word	0x50020450
 8004db4:	400204d0 	.word	0x400204d0
 8004db8:	500204d0 	.word	0x500204d0
 8004dbc:	40020550 	.word	0x40020550
 8004dc0:	50020550 	.word	0x50020550
 8004dc4:	400205d0 	.word	0x400205d0
 8004dc8:	500205d0 	.word	0x500205d0
 8004dcc:	40020650 	.word	0x40020650
 8004dd0:	50020650 	.word	0x50020650
 8004dd4:	400206d0 	.word	0x400206d0
 8004dd8:	500206d0 	.word	0x500206d0
 8004ddc:	40020750 	.word	0x40020750
 8004de0:	50020750 	.word	0x50020750
 8004de4:	400207d0 	.word	0x400207d0
 8004de8:	500207d0 	.word	0x500207d0

08004dec <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004dfe:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8004e04:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004e0a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004e10:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	051b      	lsls	r3, r3, #20
 8004e38:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004e3c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	3b01      	subs	r3, #1
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004e4a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	f240 237f 	movw	r3, #639	@ 0x27f
 8004e5e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004e60:	431a      	orrs	r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6e:	d10c      	bne.n	8004e8a <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d011      	beq.n	8004ea0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	e00a      	b.n	8004ea0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e92:	d105      	bne.n	8004ea0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00f      	beq.n	8004ec8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004ec0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d04e      	beq.n	8004f7c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	0419      	lsls	r1, r3, #16
 8004eea:	4b6a      	ldr	r3, [pc, #424]	@ (8005094 <DMA_List_BuildNode+0x2a8>)
 8004eec:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da06      	bge.n	8004f0a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	e005      	b.n	8004f16 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da06      	bge.n	8004f2c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	e005      	b.n	8004f38 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da06      	bge.n	8004f4e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	e005      	b.n	8004f5a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	da06      	bge.n	8004f70 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	609a      	str	r2, [r3, #8]
 8004f6e:	e005      	b.n	8004f7c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d05d      	beq.n	8005054 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da09      	bge.n	8004fb4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa4:	425b      	negs	r3, r3
 8004fa6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	615a      	str	r2, [r3, #20]
 8004fb2:	e005      	b.n	8004fc0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da0d      	bge.n	8004fe4 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fcc:	425b      	negs	r3, r3
 8004fce:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	0419      	lsls	r1, r3, #16
 8004fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8005098 <DMA_List_BuildNode+0x2ac>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	615a      	str	r2, [r3, #20]
 8004fe2:	e009      	b.n	8004ff8 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	0419      	lsls	r1, r3, #16
 8004fee:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <DMA_List_BuildNode+0x2ac>)
 8004ff0:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da08      	bge.n	8005012 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005004:	425b      	negs	r3, r3
 8005006:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	b29a      	uxth	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	619a      	str	r2, [r3, #24]
 8005010:	e004      	b.n	800501c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005016:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005020:	2b00      	cmp	r3, #0
 8005022:	da0b      	bge.n	800503c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	425b      	negs	r3, r3
 800502a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005034:	431a      	orrs	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	619a      	str	r2, [r3, #24]
 800503a:	e007      	b.n	800504c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005046:	431a      	orrs	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	61da      	str	r2, [r3, #28]
 8005052:	e002      	b.n	800505a <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d006      	beq.n	800507c <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800507a:	e005      	b.n	8005088 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	621a      	str	r2, [r3, #32]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	07ff0000 	.word	0x07ff0000
 8005098:	1fff0000 	.word	0x1fff0000

0800509c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0208 	and.w	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0203 	and.w	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050ea:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80050f4:	0d1b      	lsrs	r3, r3, #20
 80050f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050fa:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b66      	ldr	r3, [pc, #408]	@ (80052ac <DMA_List_GetNodeConfig+0x210>)
 8005112:	4013      	ands	r3, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005136:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e013      	b.n	800516a <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	e002      	b.n	800516a <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051c8:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80051ce:	e002      	b.n	80051d6 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d04a      	beq.n	8005288 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051fc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80051fe:	89fa      	ldrh	r2, [r7, #14]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	b29b      	uxth	r3, r3
 800520c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005210:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8005212:	89fa      	ldrh	r2, [r7, #14]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005228:	425a      	negs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	425a      	negs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800524a:	89fa      	ldrh	r2, [r7, #14]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8005258:	89fa      	ldrh	r2, [r7, #14]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	425a      	negs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	da11      	bge.n	80052a0 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005280:	425a      	negs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8005286:	e00b      	b.n	80052a0 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	0c002000 	.word	0x0c002000

080052b0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e00a      	b.n	80052f2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e004      	b.n	80052f2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d001      	beq.n	8005302 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e00e      	b.n	800534e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e006      	b.n	800534e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8005360:	2302      	movs	r3, #2
 8005362:	e00b      	b.n	800537c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	429a      	cmp	r2, r3
 8005374:	d001      	beq.n	800537a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8005376:	2303      	movs	r3, #3
 8005378:	e000      	b.n	800537c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a0d      	ldr	r2, [pc, #52]	@ (80053e0 <DMA_List_GetCLLRNodeInfo+0x58>)
 80053aa:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00f      	beq.n	80053d2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2207      	movs	r2, #7
 80053b6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80053b8:	e00b      	b.n	80053d2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a08      	ldr	r2, [pc, #32]	@ (80053e4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80053c4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2205      	movs	r2, #5
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	fe010000 	.word	0xfe010000
 80053e4:	f8010000 	.word	0xf8010000

080053e8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	@ 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d142      	bne.n	8005492 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800540c:	e01d      	b.n	800544a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	e00f      	b.n	8005444 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4413      	add	r3, r2
 8005434:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800543c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	429a      	cmp	r2, r3
 8005452:	d3dc      	bcc.n	800540e <DMA_List_FindNode+0x26>
 8005454:	e029      	b.n	80054aa <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d107      	bne.n	800546c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e00f      	b.n	800548c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4413      	add	r3, r2
 800547c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005484:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	429a      	cmp	r2, r3
 800549a:	d206      	bcs.n	80054aa <DMA_List_FindNode+0xc2>
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80054a2:	4013      	ands	r3, r2
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d1d5      	bne.n	8005456 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80054b6:	4013      	ands	r3, r2
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80054be:	2301      	movs	r3, #1
 80054c0:	e02b      	b.n	800551a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	041b      	lsls	r3, r3, #16
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0c1b      	lsrs	r3, r3, #16
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	461a      	mov	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00f      	beq.n	8005518 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	461a      	mov	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005504:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8005508:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3724      	adds	r7, #36	@ 0x24
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800553a:	e1ba      	b.n	80058b2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2101      	movs	r1, #1
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	fa01 f303 	lsl.w	r3, r1, r3
 8005548:	4013      	ands	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 81aa 	beq.w	80058ac <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a55      	ldr	r2, [pc, #340]	@ (80056b0 <HAL_GPIO_Init+0x188>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d15d      	bne.n	800561c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005566:	2201      	movs	r2, #1
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	4013      	ands	r3, r2
 8005574:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0201 	and.w	r2, r3, #1
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	4313      	orrs	r3, r2
 8005588:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005590:	4a48      	ldr	r2, [pc, #288]	@ (80056b4 <HAL_GPIO_Init+0x18c>)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005598:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800559a:	4a46      	ldr	r2, [pc, #280]	@ (80056b4 <HAL_GPIO_Init+0x18c>)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	08da      	lsrs	r2, r3, #3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	3208      	adds	r2, #8
 80055ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	220f      	movs	r2, #15
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	43db      	mvns	r3, r3
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	4013      	ands	r3, r2
 80055c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	220b      	movs	r2, #11
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	4313      	orrs	r3, r2
 80055dc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	08da      	lsrs	r2, r3, #3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	3208      	adds	r2, #8
 80055e6:	69f9      	ldr	r1, [r7, #28]
 80055e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	2203      	movs	r2, #3
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	4013      	ands	r3, r2
 8005602:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	2202      	movs	r2, #2
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	4313      	orrs	r3, r2
 8005612:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e067      	b.n	80056ec <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d003      	beq.n	800562c <HAL_GPIO_Init+0x104>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b12      	cmp	r3, #18
 800562a:	d145      	bne.n	80056b8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	08da      	lsrs	r2, r3, #3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3208      	adds	r2, #8
 8005634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005638:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	220f      	movs	r2, #15
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	4013      	ands	r3, r2
 800564e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	4313      	orrs	r3, r2
 8005668:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	08da      	lsrs	r2, r3, #3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3208      	adds	r2, #8
 8005672:	69f9      	ldr	r1, [r7, #28]
 8005674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	2203      	movs	r2, #3
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	4013      	ands	r3, r2
 800568e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 0203 	and.w	r2, r3, #3
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e01e      	b.n	80056ec <HAL_GPIO_Init+0x1c4>
 80056ae:	bf00      	nop
 80056b0:	46020000 	.word	0x46020000
 80056b4:	0800c630 	.word	0x0800c630
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2203      	movs	r2, #3
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 0203 	and.w	r2, r3, #3
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d00b      	beq.n	800570c <HAL_GPIO_Init+0x1e4>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d007      	beq.n	800570c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005700:	2b11      	cmp	r3, #17
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b12      	cmp	r3, #18
 800570a:	d130      	bne.n	800576e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	2203      	movs	r2, #3
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	4013      	ands	r3, r2
 8005722:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	4313      	orrs	r3, r2
 8005734:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005742:	2201      	movs	r2, #1
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	4013      	ands	r3, r2
 8005750:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 0201 	and.w	r2, r3, #1
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	4313      	orrs	r3, r2
 8005766:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d017      	beq.n	80057a6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	4013      	ands	r3, r2
 800578c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	4313      	orrs	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d07c      	beq.n	80058ac <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80057b2:	4a47      	ldr	r2, [pc, #284]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	089b      	lsrs	r3, r3, #2
 80057b8:	3318      	adds	r3, #24
 80057ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	220f      	movs	r2, #15
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0a9a      	lsrs	r2, r3, #10
 80057da:	4b3e      	ldr	r3, [pc, #248]	@ (80058d4 <HAL_GPIO_Init+0x3ac>)
 80057dc:	4013      	ands	r3, r2
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	f002 0203 	and.w	r2, r2, #3
 80057e4:	00d2      	lsls	r2, r2, #3
 80057e6:	4093      	lsls	r3, r2
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80057ee:	4938      	ldr	r1, [pc, #224]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	089b      	lsrs	r3, r3, #2
 80057f4:	3318      	adds	r3, #24
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80057fc:	4b34      	ldr	r3, [pc, #208]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	43db      	mvns	r3, r3
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	4013      	ands	r3, r2
 800580a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005820:	4a2b      	ldr	r2, [pc, #172]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005826:	4b2a      	ldr	r3, [pc, #168]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	43db      	mvns	r3, r3
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	4013      	ands	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800584a:	4a21      	ldr	r2, [pc, #132]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005850:	4b1f      	ldr	r3, [pc, #124]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 8005852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005856:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	43db      	mvns	r3, r3
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	4013      	ands	r3, r2
 8005860:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005876:	4a16      	ldr	r2, [pc, #88]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800587e:	4b14      	ldr	r3, [pc, #80]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 8005880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005884:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	43db      	mvns	r3, r3
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	4013      	ands	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80058a4:	4a0a      	ldr	r2, [pc, #40]	@ (80058d0 <HAL_GPIO_Init+0x3a8>)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3301      	adds	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f ae3d 	bne.w	800553c <HAL_GPIO_Init+0x14>
  }
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	3724      	adds	r7, #36	@ 0x24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	46022000 	.word	0x46022000
 80058d4:	002f7f7f 	.word	0x002f7f7f

080058d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
 80058e4:	4613      	mov	r3, r2
 80058e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058e8:	787b      	ldrb	r3, [r7, #1]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80058f4:	e002      	b.n	80058fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005914:	4b0b      	ldr	r3, [pc, #44]	@ (8005944 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	e007      	b.n	8005936 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005926:	4b07      	ldr	r3, [pc, #28]	@ (8005944 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 0204 	bic.w	r2, r3, #4
 800592e:	4905      	ldr	r1, [pc, #20]	@ (8005944 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4313      	orrs	r3, r2
 8005934:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40030400 	.word	0x40030400

08005948 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800594c:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <HAL_ICACHE_Enable+0x1c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a04      	ldr	r2, [pc, #16]	@ (8005964 <HAL_ICACHE_Enable+0x1c>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40030400 	.word	0x40030400

08005968 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0e7      	b.n	8005b4a <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fb fa03 	bl	8000da0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059ba:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80059c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f962 	bl	8005c94 <LPTIM_WaitForFlag>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d101      	bne.n	80059da <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e0b7      	b.n	8005b4a <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2210      	movs	r2, #16
 80059e0:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6a12      	ldr	r2, [r2, #32]
 80059ea:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80059ec:	2110      	movs	r1, #16
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f950 	bl	8005c94 <LPTIM_WaitForFlag>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d101      	bne.n	80059fe <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0a5      	b.n	8005b4a <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10e      	bne.n	8005a2a <HAL_LPTIM_Init+0xc2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <HAL_LPTIM_Init+0xc2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d004      	beq.n	8005a44 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a42:	d103      	bne.n	8005a4c <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 031e 	bic.w	r3, r3, #30
 8005a4a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d005      	beq.n	8005a64 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4b3b      	ldr	r3, [pc, #236]	@ (8005b54 <HAL_LPTIM_Init+0x1ec>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a74:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8005a7a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8005a80:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d107      	bne.n	8005aa0 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d004      	beq.n	8005ab2 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ab0:	d107      	bne.n	8005ac2 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005aba:	4313      	orrs	r3, r2
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00a      	beq.n	8005ae4 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ad6:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005adc:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <HAL_LPTIM_Init+0x1f0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_LPTIM_Init+0x198>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <HAL_LPTIM_Init+0x1f4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d108      	bne.n	8005b12 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b10:	e00e      	b.n	8005b30 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a12      	ldr	r2, [pc, #72]	@ (8005b60 <HAL_LPTIM_Init+0x1f8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_LPTIM_Init+0x1be>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a10      	ldr	r2, [pc, #64]	@ (8005b64 <HAL_LPTIM_Init+0x1fc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d104      	bne.n	8005b30 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	ff39f1fe 	.word	0xff39f1fe
 8005b58:	46004400 	.word	0x46004400
 8005b5c:	40009400 	.word	0x40009400
 8005b60:	46004800 	.word	0x46004800
 8005b64:	46004c00 	.word	0x46004c00

08005b68 <HAL_LPTIM_IC_Start>:
  *            @arg LPTIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_IC_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INPUT_CAPTURE_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_LPTIM_IC_Start+0x24>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e008      	b.n	8005b9e <HAL_LPTIM_IC_Start+0x36>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_LPTIM_IC_Start+0x3e>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e03c      	b.n	8005c20 <HAL_LPTIM_IC_Start+0xb8>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <HAL_LPTIM_IC_Start+0x56>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8005bbc:	e003      	b.n	8005bc6 <HAL_LPTIM_IC_Start+0x5e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0204 	orr.w	r2, r2, #4
 8005be4:	611a      	str	r2, [r3, #16]

  /* Enable capture */
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_LPTIM_IC_Start+0x8c>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d009      	beq.n	8005c06 <HAL_LPTIM_IC_Start+0x9e>
 8005bf2:	e010      	b.n	8005c16 <HAL_LPTIM_IC_Start+0xae>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0202 	orr.w	r2, r2, #2
 8005c02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c04:	e007      	b.n	8005c16 <HAL_LPTIM_IC_Start+0xae>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_LPTIM_OC_ConfigChannel+0x22>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d00b      	beq.n	8005c64 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 8005c4c:	e018      	b.n	8005c80 <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f84f 	bl	8005cf4 <LPTIM_OC1_SetConfig>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00c      	beq.n	8005c7a <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	e012      	b.n	8005c8a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f8aa 	bl	8005dc0 <LPTIM_OC2_SetConfig>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	e007      	b.n	8005c8a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 8005c7e:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005ca2:	4b12      	ldr	r3, [pc, #72]	@ (8005cec <LPTIM_WaitForFlag+0x58>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a12      	ldr	r2, [pc, #72]	@ (8005cf0 <LPTIM_WaitForFlag+0x5c>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	0b9b      	lsrs	r3, r3, #14
 8005cae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d002      	beq.n	8005cde <LPTIM_WaitForFlag+0x4a>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ec      	bne.n	8005cb8 <LPTIM_WaitForFlag+0x24>

  return result;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	d1b71759 	.word	0xd1b71759

08005cf4 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 030d 	bic.w	r3, r3, #13
 8005d0c:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2a      	ldr	r2, [pc, #168]	@ (8005dbc <LPTIM_OC1_SetConfig+0xc8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d112      	bne.n	8005d3e <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d26:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	055b      	lsls	r3, r3, #21
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	e005      	b.n	8005d4a <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2208      	movs	r2, #8
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 8005d6c:	2108      	movs	r1, #8
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff ff90 	bl	8005c94 <LPTIM_WaitForFlag>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d101      	bne.n	8005d7e <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e01a      	b.n	8005db4 <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10e      	bne.n	8005daa <LPTIM_OC1_SetConfig+0xb6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <LPTIM_OC1_SetConfig+0xb6>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	46004c00 	.word	0x46004c00

08005dc0 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8005dd8:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	049b      	lsls	r3, r3, #18
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005dfe:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 8005e0a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff ff40 	bl	8005c94 <LPTIM_WaitForFlag>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e01a      	b.n	8005e54 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10e      	bne.n	8005e4a <LPTIM_OC2_SetConfig+0x8a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d107      	bne.n	8005e4a <LPTIM_OC2_SetConfig+0x8a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005e64:	4b39      	ldr	r3, [pc, #228]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e6c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d10b      	bne.n	8005e8e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7c:	d905      	bls.n	8005e8a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005e7e:	4b33      	ldr	r3, [pc, #204]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	4a32      	ldr	r2, [pc, #200]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e88:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e057      	b.n	8005f3e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e94:	d90a      	bls.n	8005eac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005e96:	4b2d      	ldr	r3, [pc, #180]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ea8:	60d3      	str	r3, [r2, #12]
 8005eaa:	e007      	b.n	8005ebc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005eac:	4b27      	ldr	r3, [pc, #156]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005eb4:	4925      	ldr	r1, [pc, #148]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005ebc:	4b24      	ldr	r3, [pc, #144]	@ (8005f50 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a24      	ldr	r2, [pc, #144]	@ (8005f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	2232      	movs	r2, #50	@ 0x32
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	4a21      	ldr	r2, [pc, #132]	@ (8005f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	099b      	lsrs	r3, r3, #6
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005eda:	e002      	b.n	8005ee2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1f3      	bne.n	8005edc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01b      	beq.n	8005f32 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005efa:	4b15      	ldr	r3, [pc, #84]	@ (8005f50 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a15      	ldr	r2, [pc, #84]	@ (8005f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	099b      	lsrs	r3, r3, #6
 8005f06:	2232      	movs	r2, #50	@ 0x32
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
 8005f0c:	4a11      	ldr	r2, [pc, #68]	@ (8005f54 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	099b      	lsrs	r3, r3, #6
 8005f14:	3301      	adds	r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005f18:	e002      	b.n	8005f20 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005f20:	4b0a      	ldr	r3, [pc, #40]	@ (8005f4c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f3      	bne.n	8005f1a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e000      	b.n	8005f3e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	46020800 	.word	0x46020800
 8005f50:	20000000 	.word	0x20000000
 8005f54:	10624dd3 	.word	0x10624dd3

08005f58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005f5c:	4b04      	ldr	r3, [pc, #16]	@ (8005f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	46020800 	.word	0x46020800

08005f74 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <HAL_PWREx_EnableVddA+0x1c>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	4a04      	ldr	r2, [pc, #16]	@ (8005f90 <HAL_PWREx_EnableVddA+0x1c>)
 8005f7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f82:	6113      	str	r3, [r2, #16]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	46020800 	.word	0x46020800

08005f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08e      	sub	sp, #56	@ 0x38
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f000 bec8 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fae:	4b99      	ldr	r3, [pc, #612]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb8:	4b96      	ldr	r3, [pc, #600]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 816c 	beq.w	80062a8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x52>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	f040 80de 	bne.w	800619a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	f040 80da 	bne.w	800619a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f000 bea5 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ff8:	4b86      	ldr	r3, [pc, #536]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <HAL_RCC_OscConfig+0x7a>
 8006004:	4b83      	ldr	r3, [pc, #524]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800600c:	e005      	b.n	800601a <HAL_RCC_OscConfig+0x86>
 800600e:	4b81      	ldr	r3, [pc, #516]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006014:	041b      	lsls	r3, r3, #16
 8006016:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800601a:	4293      	cmp	r3, r2
 800601c:	d255      	bcs.n	80060ca <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	4618      	mov	r0, r3
 800602a:	f001 f9d9 	bl	80073e0 <RCC_SetFlashLatencyFromMSIRange>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f000 be82 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800603a:	4b76      	ldr	r3, [pc, #472]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	4a75      	ldr	r2, [pc, #468]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006040:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006044:	6093      	str	r3, [r2, #8]
 8006046:	4b73      	ldr	r3, [pc, #460]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006052:	4970      	ldr	r1, [pc, #448]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006054:	4313      	orrs	r3, r2
 8006056:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006060:	d309      	bcc.n	8006076 <HAL_RCC_OscConfig+0xe2>
 8006062:	4b6c      	ldr	r3, [pc, #432]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f023 021f 	bic.w	r2, r3, #31
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	4969      	ldr	r1, [pc, #420]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006070:	4313      	orrs	r3, r2
 8006072:	60cb      	str	r3, [r1, #12]
 8006074:	e07e      	b.n	8006174 <HAL_RCC_OscConfig+0x1e0>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	da0a      	bge.n	8006094 <HAL_RCC_OscConfig+0x100>
 800607e:	4b65      	ldr	r3, [pc, #404]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	015b      	lsls	r3, r3, #5
 800608c:	4961      	ldr	r1, [pc, #388]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 800608e:	4313      	orrs	r3, r2
 8006090:	60cb      	str	r3, [r1, #12]
 8006092:	e06f      	b.n	8006174 <HAL_RCC_OscConfig+0x1e0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609c:	d30a      	bcc.n	80060b4 <HAL_RCC_OscConfig+0x120>
 800609e:	4b5d      	ldr	r3, [pc, #372]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	4959      	ldr	r1, [pc, #356]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60cb      	str	r3, [r1, #12]
 80060b2:	e05f      	b.n	8006174 <HAL_RCC_OscConfig+0x1e0>
 80060b4:	4b57      	ldr	r3, [pc, #348]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	03db      	lsls	r3, r3, #15
 80060c2:	4954      	ldr	r1, [pc, #336]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60cb      	str	r3, [r1, #12]
 80060c8:	e054      	b.n	8006174 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80060ca:	4b52      	ldr	r3, [pc, #328]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	4a51      	ldr	r2, [pc, #324]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060d4:	6093      	str	r3, [r2, #8]
 80060d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	494c      	ldr	r1, [pc, #304]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80060f0:	d309      	bcc.n	8006106 <HAL_RCC_OscConfig+0x172>
 80060f2:	4b48      	ldr	r3, [pc, #288]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f023 021f 	bic.w	r2, r3, #31
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	4945      	ldr	r1, [pc, #276]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006100:	4313      	orrs	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]
 8006104:	e028      	b.n	8006158 <HAL_RCC_OscConfig+0x1c4>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	da0a      	bge.n	8006124 <HAL_RCC_OscConfig+0x190>
 800610e:	4b41      	ldr	r3, [pc, #260]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	015b      	lsls	r3, r3, #5
 800611c:	493d      	ldr	r1, [pc, #244]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 800611e:	4313      	orrs	r3, r2
 8006120:	60cb      	str	r3, [r1, #12]
 8006122:	e019      	b.n	8006158 <HAL_RCC_OscConfig+0x1c4>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612c:	d30a      	bcc.n	8006144 <HAL_RCC_OscConfig+0x1b0>
 800612e:	4b39      	ldr	r3, [pc, #228]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	029b      	lsls	r3, r3, #10
 800613c:	4935      	ldr	r1, [pc, #212]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 800613e:	4313      	orrs	r3, r2
 8006140:	60cb      	str	r3, [r1, #12]
 8006142:	e009      	b.n	8006158 <HAL_RCC_OscConfig+0x1c4>
 8006144:	4b33      	ldr	r3, [pc, #204]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	03db      	lsls	r3, r3, #15
 8006152:	4930      	ldr	r1, [pc, #192]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006154:	4313      	orrs	r3, r2
 8006156:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	4618      	mov	r0, r3
 8006164:	f001 f93c 	bl	80073e0 <RCC_SetFlashLatencyFromMSIRange>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f000 bde5 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006174:	f001 f8de 	bl	8007334 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006178:	4b27      	ldr	r3, [pc, #156]	@ (8006218 <HAL_RCC_OscConfig+0x284>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f7fb fd3d 	bl	8001bfc <HAL_InitTick>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 808a 	beq.w	80062a6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006196:	f000 bdd2 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d066      	beq.n	8006270 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80061a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80061ae:	f7fb fdaf 	bl	8001d10 <HAL_GetTick>
 80061b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80061b4:	e009      	b.n	80061ca <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061b6:	f7fb fdab 	bl	8001d10 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d902      	bls.n	80061ca <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	f000 bdba 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80061ca:	4b12      	ldr	r3, [pc, #72]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0ef      	beq.n	80061b6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80061d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	4a0e      	ldr	r2, [pc, #56]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80061dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061e0:	6093      	str	r3, [r2, #8]
 80061e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	4909      	ldr	r1, [pc, #36]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80061fc:	d30e      	bcc.n	800621c <HAL_RCC_OscConfig+0x288>
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 021f 	bic.w	r2, r3, #31
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	4902      	ldr	r1, [pc, #8]	@ (8006214 <HAL_RCC_OscConfig+0x280>)
 800620c:	4313      	orrs	r3, r2
 800620e:	60cb      	str	r3, [r1, #12]
 8006210:	e04a      	b.n	80062a8 <HAL_RCC_OscConfig+0x314>
 8006212:	bf00      	nop
 8006214:	46020c00 	.word	0x46020c00
 8006218:	20000004 	.word	0x20000004
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	da0a      	bge.n	800623a <HAL_RCC_OscConfig+0x2a6>
 8006224:	4b98      	ldr	r3, [pc, #608]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	015b      	lsls	r3, r3, #5
 8006232:	4995      	ldr	r1, [pc, #596]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006234:	4313      	orrs	r3, r2
 8006236:	60cb      	str	r3, [r1, #12]
 8006238:	e036      	b.n	80062a8 <HAL_RCC_OscConfig+0x314>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d30a      	bcc.n	800625a <HAL_RCC_OscConfig+0x2c6>
 8006244:	4b90      	ldr	r3, [pc, #576]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	029b      	lsls	r3, r3, #10
 8006252:	498d      	ldr	r1, [pc, #564]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006254:	4313      	orrs	r3, r2
 8006256:	60cb      	str	r3, [r1, #12]
 8006258:	e026      	b.n	80062a8 <HAL_RCC_OscConfig+0x314>
 800625a:	4b8b      	ldr	r3, [pc, #556]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	03db      	lsls	r3, r3, #15
 8006268:	4987      	ldr	r1, [pc, #540]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	60cb      	str	r3, [r1, #12]
 800626e:	e01b      	b.n	80062a8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006270:	4b85      	ldr	r3, [pc, #532]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a84      	ldr	r2, [pc, #528]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800627c:	f7fb fd48 	bl	8001d10 <HAL_GetTick>
 8006280:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006282:	e009      	b.n	8006298 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006284:	f7fb fd44 	bl	8001d10 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d902      	bls.n	8006298 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	f000 bd53 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006298:	4b7b      	ldr	r3, [pc, #492]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1ef      	bne.n	8006284 <HAL_RCC_OscConfig+0x2f0>
 80062a4:	e000      	b.n	80062a8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80062a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 808b 	beq.w	80063cc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_OscConfig+0x334>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	2b0c      	cmp	r3, #12
 80062c0:	d109      	bne.n	80062d6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d106      	bne.n	80062d6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d17d      	bne.n	80063cc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f000 bd34 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062de:	d106      	bne.n	80062ee <HAL_RCC_OscConfig+0x35a>
 80062e0:	4b69      	ldr	r3, [pc, #420]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a68      	ldr	r2, [pc, #416]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 80062e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e041      	b.n	8006372 <HAL_RCC_OscConfig+0x3de>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062f6:	d112      	bne.n	800631e <HAL_RCC_OscConfig+0x38a>
 80062f8:	4b63      	ldr	r3, [pc, #396]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a62      	ldr	r2, [pc, #392]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 80062fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4b60      	ldr	r3, [pc, #384]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a5f      	ldr	r2, [pc, #380]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800630a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	4b5d      	ldr	r3, [pc, #372]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a5c      	ldr	r2, [pc, #368]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e029      	b.n	8006372 <HAL_RCC_OscConfig+0x3de>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006326:	d112      	bne.n	800634e <HAL_RCC_OscConfig+0x3ba>
 8006328:	4b57      	ldr	r3, [pc, #348]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a56      	ldr	r2, [pc, #344]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800632e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	4b54      	ldr	r3, [pc, #336]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a53      	ldr	r2, [pc, #332]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800633a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4b51      	ldr	r3, [pc, #324]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a50      	ldr	r2, [pc, #320]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e011      	b.n	8006372 <HAL_RCC_OscConfig+0x3de>
 800634e:	4b4e      	ldr	r3, [pc, #312]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a4d      	ldr	r2, [pc, #308]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4b4b      	ldr	r3, [pc, #300]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a4a      	ldr	r2, [pc, #296]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4b48      	ldr	r3, [pc, #288]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a47      	ldr	r2, [pc, #284]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800636c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006370:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d014      	beq.n	80063a4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800637a:	f7fb fcc9 	bl	8001d10 <HAL_GetTick>
 800637e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006380:	e009      	b.n	8006396 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006382:	f7fb fcc5 	bl	8001d10 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b64      	cmp	r3, #100	@ 0x64
 800638e:	d902      	bls.n	8006396 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	f000 bcd4 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006396:	4b3c      	ldr	r3, [pc, #240]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0ef      	beq.n	8006382 <HAL_RCC_OscConfig+0x3ee>
 80063a2:	e013      	b.n	80063cc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80063a4:	f7fb fcb4 	bl	8001d10 <HAL_GetTick>
 80063a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063aa:	e009      	b.n	80063c0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063ac:	f7fb fcb0 	bl	8001d10 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b64      	cmp	r3, #100	@ 0x64
 80063b8:	d902      	bls.n	80063c0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	f000 bcbf 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063c0:	4b31      	ldr	r3, [pc, #196]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1ef      	bne.n	80063ac <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d05f      	beq.n	8006498 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d005      	beq.n	80063ea <HAL_RCC_OscConfig+0x456>
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	2b0c      	cmp	r3, #12
 80063e2:	d114      	bne.n	800640e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d111      	bne.n	800640e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f000 bca3 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80063f8:	4b23      	ldr	r3, [pc, #140]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	4920      	ldr	r1, [pc, #128]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006408:	4313      	orrs	r3, r2
 800640a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800640c:	e044      	b.n	8006498 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d024      	beq.n	8006460 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006416:	4b1c      	ldr	r3, [pc, #112]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1b      	ldr	r2, [pc, #108]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800641c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006420:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006422:	f7fb fc75 	bl	8001d10 <HAL_GetTick>
 8006426:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006428:	e009      	b.n	800643e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800642a:	f7fb fc71 	bl	8001d10 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d902      	bls.n	800643e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	f000 bc80 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800643e:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0ef      	beq.n	800642a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b0f      	ldr	r3, [pc, #60]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	490b      	ldr	r1, [pc, #44]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 800645a:	4313      	orrs	r3, r2
 800645c:	610b      	str	r3, [r1, #16]
 800645e:	e01b      	b.n	8006498 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006460:	4b09      	ldr	r3, [pc, #36]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a08      	ldr	r2, [pc, #32]	@ (8006488 <HAL_RCC_OscConfig+0x4f4>)
 8006466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800646a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800646c:	f7fb fc50 	bl	8001d10 <HAL_GetTick>
 8006470:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006474:	f7fb fc4c 	bl	8001d10 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d904      	bls.n	800648c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	f000 bc5b 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
 8006488:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800648c:	4baf      	ldr	r3, [pc, #700]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ed      	bne.n	8006474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80c8 	beq.w	8006636 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ac:	4ba7      	ldr	r3, [pc, #668]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80064ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d111      	bne.n	80064de <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ba:	4ba4      	ldr	r3, [pc, #656]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80064bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064c0:	4aa2      	ldr	r2, [pc, #648]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80064ca:	4ba0      	ldr	r3, [pc, #640]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80064cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064de:	4b9c      	ldr	r3, [pc, #624]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d119      	bne.n	800651e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064ea:	4b99      	ldr	r3, [pc, #612]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	4a98      	ldr	r2, [pc, #608]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f6:	f7fb fc0b 	bl	8001d10 <HAL_GetTick>
 80064fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064fc:	e009      	b.n	8006512 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064fe:	f7fb fc07 	bl	8001d10 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d902      	bls.n	8006512 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	f000 bc16 	b.w	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006512:	4b8f      	ldr	r3, [pc, #572]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0ef      	beq.n	80064fe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d05f      	beq.n	80065e6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006526:	4b89      	ldr	r3, [pc, #548]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800652c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006538:	429a      	cmp	r2, r3
 800653a:	d037      	beq.n	80065ac <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d006      	beq.n	8006554 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e3f4      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01b      	beq.n	8006596 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800655e:	4b7b      	ldr	r3, [pc, #492]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006564:	4a79      	ldr	r2, [pc, #484]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006566:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800656a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800656e:	f7fb fbcf 	bl	8001d10 <HAL_GetTick>
 8006572:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006576:	f7fb fbcb 	bl	8001d10 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b05      	cmp	r3, #5
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e3da      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006588:	4b70      	ldr	r3, [pc, #448]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800658a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800658e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1ef      	bne.n	8006576 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006596:	4b6d      	ldr	r3, [pc, #436]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800659c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	4969      	ldr	r1, [pc, #420]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80065ac:	4b67      	ldr	r3, [pc, #412]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80065ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b2:	4a66      	ldr	r2, [pc, #408]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80065b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80065bc:	f7fb fba8 	bl	8001d10 <HAL_GetTick>
 80065c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c4:	f7fb fba4 	bl	8001d10 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e3b3      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80065d6:	4b5d      	ldr	r3, [pc, #372]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80065d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0ef      	beq.n	80065c4 <HAL_RCC_OscConfig+0x630>
 80065e4:	e01b      	b.n	800661e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80065e6:	4b59      	ldr	r3, [pc, #356]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80065e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ec:	4a57      	ldr	r2, [pc, #348]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80065ee:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80065f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80065f6:	f7fb fb8b 	bl	8001d10 <HAL_GetTick>
 80065fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065fe:	f7fb fb87 	bl	8001d10 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b05      	cmp	r3, #5
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e396      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006610:	4b4e      	ldr	r3, [pc, #312]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006616:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1ef      	bne.n	80065fe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800661e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006622:	2b01      	cmp	r3, #1
 8006624:	d107      	bne.n	8006636 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006626:	4b49      	ldr	r3, [pc, #292]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800662c:	4a47      	ldr	r2, [pc, #284]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800662e:	f023 0304 	bic.w	r3, r3, #4
 8006632:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8111 	beq.w	8006866 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006644:	2300      	movs	r3, #0
 8006646:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800664a:	4b40      	ldr	r3, [pc, #256]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800664c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d111      	bne.n	800667c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006658:	4b3c      	ldr	r3, [pc, #240]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800665a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800665e:	4a3b      	ldr	r2, [pc, #236]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006660:	f043 0304 	orr.w	r3, r3, #4
 8006664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006668:	4b38      	ldr	r3, [pc, #224]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800666a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800667c:	4b34      	ldr	r3, [pc, #208]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d118      	bne.n	80066ba <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006688:	4b31      	ldr	r3, [pc, #196]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	4a30      	ldr	r2, [pc, #192]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006694:	f7fb fb3c 	bl	8001d10 <HAL_GetTick>
 8006698:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669c:	f7fb fb38 	bl	8001d10 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e347      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066ae:	4b28      	ldr	r3, [pc, #160]	@ (8006750 <HAL_RCC_OscConfig+0x7bc>)
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01f      	beq.n	8006706 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d010      	beq.n	80066f4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066d2:	4b1e      	ldr	r3, [pc, #120]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80066d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d8:	4a1c      	ldr	r2, [pc, #112]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80066da:	f043 0304 	orr.w	r3, r3, #4
 80066de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066e2:	4b1a      	ldr	r3, [pc, #104]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80066e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e8:	4a18      	ldr	r2, [pc, #96]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066f2:	e018      	b.n	8006726 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066f4:	4b15      	ldr	r3, [pc, #84]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80066f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066fa:	4a14      	ldr	r2, [pc, #80]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006704:	e00f      	b.n	8006726 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006706:	4b11      	ldr	r3, [pc, #68]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800670c:	4a0f      	ldr	r2, [pc, #60]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 8006718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800671c:	4a0b      	ldr	r2, [pc, #44]	@ (800674c <HAL_RCC_OscConfig+0x7b8>)
 800671e:	f023 0304 	bic.w	r3, r3, #4
 8006722:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d057      	beq.n	80067de <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800672e:	f7fb faef 	bl	8001d10 <HAL_GetTick>
 8006732:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006734:	e00e      	b.n	8006754 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7fb faeb 	bl	8001d10 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006744:	4293      	cmp	r3, r2
 8006746:	d905      	bls.n	8006754 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e2f8      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
 800674c:	46020c00 	.word	0x46020c00
 8006750:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006754:	4b9c      	ldr	r3, [pc, #624]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0e9      	beq.n	8006736 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01b      	beq.n	80067a6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800676e:	4b96      	ldr	r3, [pc, #600]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006774:	4a94      	ldr	r2, [pc, #592]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800677e:	e00a      	b.n	8006796 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006780:	f7fb fac6 	bl	8001d10 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e2d3      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006796:	4b8c      	ldr	r3, [pc, #560]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800679c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0ed      	beq.n	8006780 <HAL_RCC_OscConfig+0x7ec>
 80067a4:	e053      	b.n	800684e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80067a6:	4b88      	ldr	r3, [pc, #544]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80067a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ac:	4a86      	ldr	r2, [pc, #536]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80067ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b8:	f7fb faaa 	bl	8001d10 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e2b7      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067ce:	4b7e      	ldr	r3, [pc, #504]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80067d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ed      	bne.n	80067b8 <HAL_RCC_OscConfig+0x824>
 80067dc:	e037      	b.n	800684e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80067de:	f7fb fa97 	bl	8001d10 <HAL_GetTick>
 80067e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e6:	f7fb fa93 	bl	8001d10 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e2a0      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067fc:	4b72      	ldr	r3, [pc, #456]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80067fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1ed      	bne.n	80067e6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800680a:	4b6f      	ldr	r3, [pc, #444]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800680c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01a      	beq.n	800684e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006818:	4b6b      	ldr	r3, [pc, #428]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800681a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800681e:	4a6a      	ldr	r2, [pc, #424]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006824:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006828:	e00a      	b.n	8006840 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682a:	f7fb fa71 	bl	8001d10 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006838:	4293      	cmp	r3, r2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e27e      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006840:	4b61      	ldr	r3, [pc, #388]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1ed      	bne.n	800682a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800684e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006852:	2b01      	cmp	r3, #1
 8006854:	d107      	bne.n	8006866 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006856:	4b5c      	ldr	r3, [pc, #368]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800685c:	4a5a      	ldr	r2, [pc, #360]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800685e:	f023 0304 	bic.w	r3, r3, #4
 8006862:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d036      	beq.n	80068e0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d019      	beq.n	80068ae <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800687a:	4b53      	ldr	r3, [pc, #332]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a52      	ldr	r2, [pc, #328]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006880:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006884:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006886:	f7fb fa43 	bl	8001d10 <HAL_GetTick>
 800688a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800688e:	f7fb fa3f 	bl	8001d10 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e24e      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80068a0:	4b49      	ldr	r3, [pc, #292]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x8fa>
 80068ac:	e018      	b.n	80068e0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80068ae:	4b46      	ldr	r3, [pc, #280]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a45      	ldr	r2, [pc, #276]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80068b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80068ba:	f7fb fa29 	bl	8001d10 <HAL_GetTick>
 80068be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c2:	f7fb fa25 	bl	8001d10 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e234      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068d4:	4b3c      	ldr	r3, [pc, #240]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d036      	beq.n	800695a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d019      	beq.n	8006928 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80068f4:	4b34      	ldr	r3, [pc, #208]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a33      	ldr	r2, [pc, #204]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80068fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006900:	f7fb fa06 	bl	8001d10 <HAL_GetTick>
 8006904:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006908:	f7fb fa02 	bl	8001d10 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e211      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800691a:	4b2b      	ldr	r3, [pc, #172]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f0      	beq.n	8006908 <HAL_RCC_OscConfig+0x974>
 8006926:	e018      	b.n	800695a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006928:	4b27      	ldr	r3, [pc, #156]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a26      	ldr	r2, [pc, #152]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800692e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006932:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006934:	f7fb f9ec 	bl	8001d10 <HAL_GetTick>
 8006938:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800693c:	f7fb f9e8 	bl	8001d10 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e1f7      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800694e:	4b1e      	ldr	r3, [pc, #120]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d07f      	beq.n	8006a66 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696a:	2b00      	cmp	r3, #0
 800696c:	d062      	beq.n	8006a34 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800696e:	4b16      	ldr	r3, [pc, #88]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006978:	6093      	str	r3, [r2, #8]
 800697a:	4b13      	ldr	r3, [pc, #76]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	4910      	ldr	r1, [pc, #64]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006988:	4313      	orrs	r3, r2
 800698a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006994:	d309      	bcc.n	80069aa <HAL_RCC_OscConfig+0xa16>
 8006996:	4b0c      	ldr	r3, [pc, #48]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f023 021f 	bic.w	r2, r3, #31
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	4909      	ldr	r1, [pc, #36]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60cb      	str	r3, [r1, #12]
 80069a8:	e02a      	b.n	8006a00 <HAL_RCC_OscConfig+0xa6c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da0c      	bge.n	80069cc <HAL_RCC_OscConfig+0xa38>
 80069b2:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	015b      	lsls	r3, r3, #5
 80069c0:	4901      	ldr	r1, [pc, #4]	@ (80069c8 <HAL_RCC_OscConfig+0xa34>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60cb      	str	r3, [r1, #12]
 80069c6:	e01b      	b.n	8006a00 <HAL_RCC_OscConfig+0xa6c>
 80069c8:	46020c00 	.word	0x46020c00
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d4:	d30a      	bcc.n	80069ec <HAL_RCC_OscConfig+0xa58>
 80069d6:	4ba1      	ldr	r3, [pc, #644]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	499d      	ldr	r1, [pc, #628]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60cb      	str	r3, [r1, #12]
 80069ea:	e009      	b.n	8006a00 <HAL_RCC_OscConfig+0xa6c>
 80069ec:	4b9b      	ldr	r3, [pc, #620]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	03db      	lsls	r3, r3, #15
 80069fa:	4998      	ldr	r1, [pc, #608]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006a00:	4b96      	ldr	r3, [pc, #600]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a95      	ldr	r2, [pc, #596]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a06:	f043 0310 	orr.w	r3, r3, #16
 8006a0a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a0c:	f7fb f980 	bl	8001d10 <HAL_GetTick>
 8006a10:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006a14:	f7fb f97c 	bl	8001d10 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e18b      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006a26:	4b8d      	ldr	r3, [pc, #564]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0xa80>
 8006a32:	e018      	b.n	8006a66 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006a34:	4b89      	ldr	r3, [pc, #548]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a88      	ldr	r2, [pc, #544]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a3a:	f023 0310 	bic.w	r3, r3, #16
 8006a3e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a40:	f7fb f966 	bl	8001d10 <HAL_GetTick>
 8006a44:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006a48:	f7fb f962 	bl	8001d10 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e171      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006a5a:	4b80      	ldr	r3, [pc, #512]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8166 	beq.w	8006d3c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a76:	4b79      	ldr	r3, [pc, #484]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	2b0c      	cmp	r3, #12
 8006a80:	f000 80f2 	beq.w	8006c68 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	f040 80c5 	bne.w	8006c18 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006a8e:	4b73      	ldr	r3, [pc, #460]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a72      	ldr	r2, [pc, #456]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006a94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a98:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a9a:	f7fb f939 	bl	8001d10 <HAL_GetTick>
 8006a9e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fb f935 	bl	8001d10 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e144      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006ab4:	4b69      	ldr	r3, [pc, #420]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f0      	bne.n	8006aa2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac0:	4b66      	ldr	r3, [pc, #408]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d111      	bne.n	8006af2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	4b63      	ldr	r3, [pc, #396]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad4:	4a61      	ldr	r2, [pc, #388]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006ad6:	f043 0304 	orr.w	r3, r3, #4
 8006ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ade:	4b5f      	ldr	r3, [pc, #380]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006af2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c60 <HAL_RCC_OscConfig+0xccc>)
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006afa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006afe:	d102      	bne.n	8006b06 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006b06:	4b56      	ldr	r3, [pc, #344]	@ (8006c60 <HAL_RCC_OscConfig+0xccc>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4a55      	ldr	r2, [pc, #340]	@ (8006c60 <HAL_RCC_OscConfig+0xccc>)
 8006b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b10:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006b12:	4b52      	ldr	r3, [pc, #328]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b1a:	f023 0303 	bic.w	r3, r3, #3
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b26:	3a01      	subs	r2, #1
 8006b28:	0212      	lsls	r2, r2, #8
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006b30:	430a      	orrs	r2, r1
 8006b32:	494a      	ldr	r1, [pc, #296]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b38:	4b48      	ldr	r3, [pc, #288]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b3c:	4b49      	ldr	r3, [pc, #292]	@ (8006c64 <HAL_RCC_OscConfig+0xcd0>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b44:	3a01      	subs	r2, #1
 8006b46:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b4e:	3a01      	subs	r2, #1
 8006b50:	0252      	lsls	r2, r2, #9
 8006b52:	b292      	uxth	r2, r2
 8006b54:	4311      	orrs	r1, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b5a:	3a01      	subs	r2, #1
 8006b5c:	0412      	lsls	r2, r2, #16
 8006b5e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006b62:	4311      	orrs	r1, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006b68:	3a01      	subs	r2, #1
 8006b6a:	0612      	lsls	r2, r2, #24
 8006b6c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006b70:	430a      	orrs	r2, r1
 8006b72:	493a      	ldr	r1, [pc, #232]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006b78:	4b38      	ldr	r3, [pc, #224]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	4a37      	ldr	r2, [pc, #220]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b7e:	f023 0310 	bic.w	r3, r3, #16
 8006b82:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b88:	4a34      	ldr	r2, [pc, #208]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006b8e:	4b33      	ldr	r3, [pc, #204]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	4a32      	ldr	r2, [pc, #200]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b94:	f043 0310 	orr.w	r3, r3, #16
 8006b98:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006b9a:	4b30      	ldr	r3, [pc, #192]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	f023 020c 	bic.w	r2, r3, #12
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba6:	492d      	ldr	r1, [pc, #180]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006bac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c60 <HAL_RCC_OscConfig+0xccc>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a29      	ldr	r2, [pc, #164]	@ (8006c60 <HAL_RCC_OscConfig+0xccc>)
 8006bba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bbe:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006bc0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006bc8:	4b24      	ldr	r3, [pc, #144]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bce:	4a23      	ldr	r2, [pc, #140]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006bd0:	f023 0304 	bic.w	r3, r3, #4
 8006bd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006bd8:	4b20      	ldr	r3, [pc, #128]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006be2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006be4:	f7fb f894 	bl	8001d10 <HAL_GetTick>
 8006be8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bec:	f7fb f890 	bl	8001d10 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e09f      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006bfe:	4b17      	ldr	r3, [pc, #92]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c0a:	4b14      	ldr	r3, [pc, #80]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	4a13      	ldr	r2, [pc, #76]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c14:	6293      	str	r3, [r2, #40]	@ 0x28
 8006c16:	e091      	b.n	8006d3c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006c18:	4b10      	ldr	r3, [pc, #64]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006c24:	f7fb f874 	bl	8001d10 <HAL_GetTick>
 8006c28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fb f870 	bl	8001d10 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e07f      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c3e:	4b07      	ldr	r3, [pc, #28]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006c4a:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	4a03      	ldr	r2, [pc, #12]	@ (8006c5c <HAL_RCC_OscConfig+0xcc8>)
 8006c50:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006c54:	f023 0303 	bic.w	r3, r3, #3
 8006c58:	6293      	str	r3, [r2, #40]	@ 0x28
 8006c5a:	e06f      	b.n	8006d3c <HAL_RCC_OscConfig+0xda8>
 8006c5c:	46020c00 	.word	0x46020c00
 8006c60:	46020800 	.word	0x46020800
 8006c64:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006c68:	4b37      	ldr	r3, [pc, #220]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c6e:	4b36      	ldr	r3, [pc, #216]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c72:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d039      	beq.n	8006cf0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f003 0203 	and.w	r2, r3, #3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d132      	bne.n	8006cf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	0a1b      	lsrs	r3, r3, #8
 8006c8e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d129      	bne.n	8006cf0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d122      	bne.n	8006cf0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d11a      	bne.n	8006cf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	0a5b      	lsrs	r3, r3, #9
 8006cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d111      	bne.n	8006cf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	0c1b      	lsrs	r3, r3, #16
 8006cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d108      	bne.n	8006cf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	0e1b      	lsrs	r3, r3, #24
 8006ce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e024      	b.n	8006d3e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006cf4:	4b14      	ldr	r3, [pc, #80]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	08db      	lsrs	r3, r3, #3
 8006cfa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d01a      	beq.n	8006d3c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006d06:	4b10      	ldr	r3, [pc, #64]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006d0c:	f023 0310 	bic.w	r3, r3, #16
 8006d10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d12:	f7fa fffd 	bl	8001d10 <HAL_GetTick>
 8006d16:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006d18:	bf00      	nop
 8006d1a:	f7fa fff9 	bl	8001d10 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d0f9      	beq.n	8006d1a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d2a:	4a07      	ldr	r2, [pc, #28]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006d30:	4b05      	ldr	r3, [pc, #20]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	4a04      	ldr	r2, [pc, #16]	@ (8006d48 <HAL_RCC_OscConfig+0xdb4>)
 8006d36:	f043 0310 	orr.w	r3, r3, #16
 8006d3a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3738      	adds	r7, #56	@ 0x38
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	46020c00 	.word	0x46020c00

08006d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e1d9      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d60:	4b9b      	ldr	r3, [pc, #620]	@ (8006fd0 <HAL_RCC_ClockConfig+0x284>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d910      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6e:	4b98      	ldr	r3, [pc, #608]	@ (8006fd0 <HAL_RCC_ClockConfig+0x284>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 020f 	bic.w	r2, r3, #15
 8006d76:	4996      	ldr	r1, [pc, #600]	@ (8006fd0 <HAL_RCC_ClockConfig+0x284>)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7e:	4b94      	ldr	r3, [pc, #592]	@ (8006fd0 <HAL_RCC_ClockConfig+0x284>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e1c1      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	4b8c      	ldr	r3, [pc, #560]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d908      	bls.n	8006dbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006dac:	4b89      	ldr	r3, [pc, #548]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	4986      	ldr	r1, [pc, #536]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d012      	beq.n	8006df0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691a      	ldr	r2, [r3, #16]
 8006dce:	4b81      	ldr	r3, [pc, #516]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d909      	bls.n	8006df0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006ddc:	4b7d      	ldr	r3, [pc, #500]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	497a      	ldr	r1, [pc, #488]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d010      	beq.n	8006e1e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	4b74      	ldr	r3, [pc, #464]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d908      	bls.n	8006e1e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006e0c:	4b71      	ldr	r3, [pc, #452]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	496e      	ldr	r1, [pc, #440]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d010      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	4b69      	ldr	r3, [pc, #420]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d908      	bls.n	8006e4c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006e3a:	4b66      	ldr	r3, [pc, #408]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f023 020f 	bic.w	r2, r3, #15
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	4963      	ldr	r1, [pc, #396]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80d2 	beq.w	8006ffe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d143      	bne.n	8006eee <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e66:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d110      	bne.n	8006e96 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006e74:	4b57      	ldr	r3, [pc, #348]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e7a:	4a56      	ldr	r2, [pc, #344]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e7c:	f043 0304 	orr.w	r3, r3, #4
 8006e80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006e84:	4b53      	ldr	r3, [pc, #332]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	60bb      	str	r3, [r7, #8]
 8006e90:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006e96:	f7fa ff3b 	bl	8001d10 <HAL_GetTick>
 8006e9a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8006fd8 <HAL_RCC_ClockConfig+0x28c>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00f      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006eaa:	f7fa ff31 	bl	8001d10 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e12b      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006ebc:	4b46      	ldr	r3, [pc, #280]	@ (8006fd8 <HAL_RCC_ClockConfig+0x28c>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d107      	bne.n	8006ede <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006ece:	4b41      	ldr	r3, [pc, #260]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ed4:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006ed6:	f023 0304 	bic.w	r3, r3, #4
 8006eda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006ede:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d121      	bne.n	8006f2e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e112      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d107      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ef6:	4b37      	ldr	r3, [pc, #220]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d115      	bne.n	8006f2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e106      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d107      	bne.n	8006f1e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006f0e:	4b31      	ldr	r3, [pc, #196]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d109      	bne.n	8006f2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e0fa      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e0f2      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006f2e:	4b29      	ldr	r3, [pc, #164]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f023 0203 	bic.w	r2, r3, #3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	4926      	ldr	r1, [pc, #152]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006f40:	f7fa fee6 	bl	8001d10 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d112      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f4e:	e00a      	b.n	8006f66 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f50:	f7fa fede 	bl	8001d10 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e0d6      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f66:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 030c 	and.w	r3, r3, #12
 8006f6e:	2b0c      	cmp	r3, #12
 8006f70:	d1ee      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x204>
 8006f72:	e044      	b.n	8006ffe <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d112      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f7e:	f7fa fec7 	bl	8001d10 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e0bf      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f94:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f003 030c 	and.w	r3, r3, #12
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_RCC_ClockConfig+0x232>
 8006fa0:	e02d      	b.n	8006ffe <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d123      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fac:	f7fa feb0 	bl	8001d10 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e0a8      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fc2:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <HAL_RCC_ClockConfig+0x288>)
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1ee      	bne.n	8006fac <HAL_RCC_ClockConfig+0x260>
 8006fce:	e016      	b.n	8006ffe <HAL_RCC_ClockConfig+0x2b2>
 8006fd0:	40022000 	.word	0x40022000
 8006fd4:	46020c00 	.word	0x46020c00
 8006fd8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fdc:	f7fa fe98 	bl	8001d10 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e090      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d1ee      	bne.n	8006fdc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d010      	beq.n	800702c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	4b43      	ldr	r3, [pc, #268]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	429a      	cmp	r2, r3
 8007018:	d208      	bcs.n	800702c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800701a:	4b40      	ldr	r3, [pc, #256]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 020f 	bic.w	r2, r3, #15
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	493d      	ldr	r1, [pc, #244]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 8007028:	4313      	orrs	r3, r2
 800702a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800702c:	4b3c      	ldr	r3, [pc, #240]	@ (8007120 <HAL_RCC_ClockConfig+0x3d4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d210      	bcs.n	800705c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703a:	4b39      	ldr	r3, [pc, #228]	@ (8007120 <HAL_RCC_ClockConfig+0x3d4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 020f 	bic.w	r2, r3, #15
 8007042:	4937      	ldr	r1, [pc, #220]	@ (8007120 <HAL_RCC_ClockConfig+0x3d4>)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	4313      	orrs	r3, r2
 8007048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704a:	4b35      	ldr	r3, [pc, #212]	@ (8007120 <HAL_RCC_ClockConfig+0x3d4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d001      	beq.n	800705c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e05b      	b.n	8007114 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	4b2b      	ldr	r3, [pc, #172]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007074:	429a      	cmp	r2, r3
 8007076:	d208      	bcs.n	800708a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007078:	4b28      	ldr	r3, [pc, #160]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4925      	ldr	r1, [pc, #148]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 8007086:	4313      	orrs	r3, r2
 8007088:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d012      	beq.n	80070bc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	4b20      	ldr	r3, [pc, #128]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d209      	bcs.n	80070bc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80070a8:	4b1c      	ldr	r3, [pc, #112]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	4919      	ldr	r1, [pc, #100]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d010      	beq.n	80070ea <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	695a      	ldr	r2, [r3, #20]
 80070cc:	4b13      	ldr	r3, [pc, #76]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 80070ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d208      	bcs.n	80070ea <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80070d8:	4b10      	ldr	r3, [pc, #64]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	490d      	ldr	r1, [pc, #52]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80070ea:	f000 f821 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <HAL_RCC_ClockConfig+0x3d0>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	490a      	ldr	r1, [pc, #40]	@ (8007124 <HAL_RCC_ClockConfig+0x3d8>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	4a09      	ldr	r2, [pc, #36]	@ (8007128 <HAL_RCC_ClockConfig+0x3dc>)
 8007102:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007104:	4b09      	ldr	r3, [pc, #36]	@ (800712c <HAL_RCC_ClockConfig+0x3e0>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f7fa fd77 	bl	8001bfc <HAL_InitTick>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	46020c00 	.word	0x46020c00
 8007120:	40022000 	.word	0x40022000
 8007124:	0800c5d8 	.word	0x0800c5d8
 8007128:	20000000 	.word	0x20000000
 800712c:	20000004 	.word	0x20000004

08007130 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007130:	b480      	push	{r7}
 8007132:	b08b      	sub	sp, #44	@ 0x2c
 8007134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800713e:	4b78      	ldr	r3, [pc, #480]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007148:	4b75      	ldr	r3, [pc, #468]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCC_GetSysClockFreq+0x34>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b0c      	cmp	r3, #12
 800715c:	d121      	bne.n	80071a2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d11e      	bne.n	80071a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007164:	4b6e      	ldr	r3, [pc, #440]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007170:	4b6b      	ldr	r3, [pc, #428]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007176:	0b1b      	lsrs	r3, r3, #12
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	627b      	str	r3, [r7, #36]	@ 0x24
 800717e:	e005      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007180:	4b67      	ldr	r3, [pc, #412]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	0f1b      	lsrs	r3, r3, #28
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800718c:	4a65      	ldr	r2, [pc, #404]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d110      	bne.n	80071be <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80071a0:	e00d      	b.n	80071be <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071a2:	4b5f      	ldr	r3, [pc, #380]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	f003 030c 	and.w	r3, r3, #12
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d102      	bne.n	80071b4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071ae:	4b5e      	ldr	r3, [pc, #376]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	e004      	b.n	80071be <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d101      	bne.n	80071be <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80071bc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b0c      	cmp	r3, #12
 80071c2:	f040 80a5 	bne.w	8007310 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80071c6:	4b56      	ldr	r3, [pc, #344]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80071d0:	4b53      	ldr	r3, [pc, #332]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	3301      	adds	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80071de:	4b50      	ldr	r3, [pc, #320]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e2:	091b      	lsrs	r3, r3, #4
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80071ea:	4b4d      	ldr	r3, [pc, #308]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d003      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0xe4>
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d022      	beq.n	8007258 <HAL_RCC_GetSysClockFreq+0x128>
 8007212:	e043      	b.n	800729c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800732c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b3e      	ldr	r3, [pc, #248]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007236:	ed97 6a01 	vldr	s12, [r7, #4]
 800723a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007330 <HAL_RCC_GetSysClockFreq+0x200>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007256:	e046      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800732c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726a:	4b2d      	ldr	r3, [pc, #180]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800726c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800727a:	ed97 6a01 	vldr	s12, [r7, #4]
 800727e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007330 <HAL_RCC_GetSysClockFreq+0x200>
 8007282:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007286:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800728a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729a:	e024      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80072c4:	ed97 6a01 	vldr	s12, [r7, #4]
 80072c8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007330 <HAL_RCC_GetSysClockFreq+0x200>
 80072cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80072d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80072e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ea:	0e1b      	lsrs	r3, r3, #24
 80072ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f0:	3301      	adds	r3, #1
 80072f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730a:	ee17 3a90 	vmov	r3, s15
 800730e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007310:	6a3b      	ldr	r3, [r7, #32]
}
 8007312:	4618      	mov	r0, r3
 8007314:	372c      	adds	r7, #44	@ 0x2c
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	46020c00 	.word	0x46020c00
 8007324:	0800c5f0 	.word	0x0800c5f0
 8007328:	00f42400 	.word	0x00f42400
 800732c:	4b742400 	.word	0x4b742400
 8007330:	46000000 	.word	0x46000000

08007334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007338:	f7ff fefa 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b07      	ldr	r3, [pc, #28]	@ (800735c <HAL_RCC_GetHCLKFreq+0x28>)
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	4906      	ldr	r1, [pc, #24]	@ (8007360 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007348:	5ccb      	ldrb	r3, [r1, r3]
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	4a05      	ldr	r2, [pc, #20]	@ (8007364 <HAL_RCC_GetHCLKFreq+0x30>)
 8007350:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007352:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <HAL_RCC_GetHCLKFreq+0x30>)
 8007354:	681b      	ldr	r3, [r3, #0]
}
 8007356:	4618      	mov	r0, r3
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	46020c00 	.word	0x46020c00
 8007360:	0800c5d8 	.word	0x0800c5d8
 8007364:	20000000 	.word	0x20000000

08007368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800736c:	f7ff ffe2 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 8007370:	4602      	mov	r2, r0
 8007372:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4903      	ldr	r1, [pc, #12]	@ (800738c <HAL_RCC_GetPCLK1Freq+0x24>)
 800737e:	5ccb      	ldrb	r3, [r1, r3]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	46020c00 	.word	0x46020c00
 800738c:	0800c5e8 	.word	0x0800c5e8

08007390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007394:	f7ff ffce 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 8007398:	4602      	mov	r2, r0
 800739a:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	4903      	ldr	r1, [pc, #12]	@ (80073b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073a6:	5ccb      	ldrb	r3, [r1, r3]
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	46020c00 	.word	0x46020c00
 80073b4:	0800c5e8 	.word	0x0800c5e8

080073b8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80073bc:	f7ff ffba 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b05      	ldr	r3, [pc, #20]	@ (80073d8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80073c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4903      	ldr	r1, [pc, #12]	@ (80073dc <HAL_RCC_GetPCLK3Freq+0x24>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	46020c00 	.word	0x46020c00
 80073dc:	0800c5e8 	.word	0x0800c5e8

080073e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073e8:	4b3e      	ldr	r3, [pc, #248]	@ (80074e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80073ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073f6:	f7fe fdaf 	bl	8005f58 <HAL_PWREx_GetVoltageRange>
 80073fa:	6178      	str	r0, [r7, #20]
 80073fc:	e019      	b.n	8007432 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073fe:	4b39      	ldr	r3, [pc, #228]	@ (80074e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007404:	4a37      	ldr	r2, [pc, #220]	@ (80074e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007406:	f043 0304 	orr.w	r3, r3, #4
 800740a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800740e:	4b35      	ldr	r3, [pc, #212]	@ (80074e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800741c:	f7fe fd9c 	bl	8005f58 <HAL_PWREx_GetVoltageRange>
 8007420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007422:	4b30      	ldr	r3, [pc, #192]	@ (80074e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007428:	4a2e      	ldr	r2, [pc, #184]	@ (80074e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800742a:	f023 0304 	bic.w	r3, r3, #4
 800742e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007438:	d003      	beq.n	8007442 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007440:	d109      	bne.n	8007456 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007448:	d202      	bcs.n	8007450 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800744a:	2301      	movs	r3, #1
 800744c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800744e:	e033      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007450:	2300      	movs	r3, #0
 8007452:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007454:	e030      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800745c:	d208      	bcs.n	8007470 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007464:	d102      	bne.n	800746c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007466:	2303      	movs	r3, #3
 8007468:	613b      	str	r3, [r7, #16]
 800746a:	e025      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e035      	b.n	80074dc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007476:	d90f      	bls.n	8007498 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007484:	d902      	bls.n	800748c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	e015      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800748c:	2301      	movs	r3, #1
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	e012      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	e00f      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800749e:	d109      	bne.n	80074b4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a6:	d102      	bne.n	80074ae <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80074a8:	2301      	movs	r3, #1
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	e004      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80074ae:	2302      	movs	r3, #2
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	e001      	b.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80074b4:	2301      	movs	r3, #1
 80074b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074b8:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f023 020f 	bic.w	r2, r3, #15
 80074c0:	4909      	ldr	r1, [pc, #36]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80074c8:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d001      	beq.n	80074da <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	46020c00 	.word	0x46020c00
 80074e8:	40022000 	.word	0x40022000

080074ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80074ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074f0:	b0b4      	sub	sp, #208	@ 0xd0
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074fe:	2300      	movs	r3, #0
 8007500:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f002 0401 	and.w	r4, r2, #1
 8007510:	2500      	movs	r5, #0
 8007512:	ea54 0305 	orrs.w	r3, r4, r5
 8007516:	d00b      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007518:	4bc4      	ldr	r3, [pc, #784]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800751a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800751e:	f023 0103 	bic.w	r1, r3, #3
 8007522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007528:	4ac0      	ldr	r2, [pc, #768]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800752a:	430b      	orrs	r3, r1
 800752c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f002 0804 	and.w	r8, r2, #4
 800753c:	f04f 0900 	mov.w	r9, #0
 8007540:	ea58 0309 	orrs.w	r3, r8, r9
 8007544:	d00b      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007546:	4bb9      	ldr	r3, [pc, #740]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800754c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007550:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007556:	4ab5      	ldr	r2, [pc, #724]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007558:	430b      	orrs	r3, r1
 800755a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800755e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f002 0a08 	and.w	sl, r2, #8
 800756a:	f04f 0b00 	mov.w	fp, #0
 800756e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007572:	d00b      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007574:	4bad      	ldr	r3, [pc, #692]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800757a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800757e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007584:	4aa9      	ldr	r2, [pc, #676]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007586:	430b      	orrs	r3, r1
 8007588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800758c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f002 0310 	and.w	r3, r2, #16
 8007598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800759c:	2300      	movs	r3, #0
 800759e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4313      	orrs	r3, r2
 80075aa:	d00b      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80075ac:	4b9f      	ldr	r3, [pc, #636]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80075ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075bc:	4a9b      	ldr	r2, [pc, #620]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80075be:	430b      	orrs	r3, r1
 80075c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f002 0320 	and.w	r3, r2, #32
 80075d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075de:	460b      	mov	r3, r1
 80075e0:	4313      	orrs	r3, r2
 80075e2:	d00b      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80075e4:	4b91      	ldr	r3, [pc, #580]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80075e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075ea:	f023 0107 	bic.w	r1, r3, #7
 80075ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f4:	4a8d      	ldr	r2, [pc, #564]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80075f6:	430b      	orrs	r3, r1
 80075f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007608:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800760c:	2300      	movs	r3, #0
 800760e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007612:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007616:	460b      	mov	r3, r1
 8007618:	4313      	orrs	r3, r2
 800761a:	d00b      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800761c:	4b83      	ldr	r3, [pc, #524]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800761e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007622:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800762a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800762c:	4a7f      	ldr	r2, [pc, #508]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800762e:	430b      	orrs	r3, r1
 8007630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007634:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007644:	2300      	movs	r3, #0
 8007646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800764a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800764e:	460b      	mov	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	d00b      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007654:	4b75      	ldr	r3, [pc, #468]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800765a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800765e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007664:	4a71      	ldr	r2, [pc, #452]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007666:	430b      	orrs	r3, r1
 8007668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800766c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007678:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800767c:	2300      	movs	r3, #0
 800767e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007682:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007686:	460b      	mov	r3, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	d00b      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800768c:	4b67      	ldr	r3, [pc, #412]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800768e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800769a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800769c:	4a63      	ldr	r2, [pc, #396]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800769e:	430b      	orrs	r3, r1
 80076a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80076b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80076be:	460b      	mov	r3, r1
 80076c0:	4313      	orrs	r3, r2
 80076c2:	d00b      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80076c4:	4b59      	ldr	r3, [pc, #356]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80076c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076ca:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80076ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80076d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d4:	4a55      	ldr	r2, [pc, #340]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80076d6:	430b      	orrs	r3, r1
 80076d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80076e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076ec:	2300      	movs	r3, #0
 80076ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80076f6:	460b      	mov	r3, r1
 80076f8:	4313      	orrs	r3, r2
 80076fa:	d00b      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80076fc:	4b4b      	ldr	r3, [pc, #300]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80076fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007702:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800770a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800770c:	4a47      	ldr	r2, [pc, #284]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800770e:	430b      	orrs	r3, r1
 8007710:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007722:	2300      	movs	r3, #0
 8007724:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007726:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d00b      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007730:	4b3e      	ldr	r3, [pc, #248]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007736:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800773a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800773e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007740:	4a3a      	ldr	r2, [pc, #232]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007742:	430b      	orrs	r3, r1
 8007744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007754:	673b      	str	r3, [r7, #112]	@ 0x70
 8007756:	2300      	movs	r3, #0
 8007758:	677b      	str	r3, [r7, #116]	@ 0x74
 800775a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800775e:	460b      	mov	r3, r1
 8007760:	4313      	orrs	r3, r2
 8007762:	d00b      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007764:	4b31      	ldr	r3, [pc, #196]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800776a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800776e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007774:	4a2d      	ldr	r2, [pc, #180]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007776:	430b      	orrs	r3, r1
 8007778:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800777c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800778a:	2300      	movs	r3, #0
 800778c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800778e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d04f      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800779c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077a0:	2b80      	cmp	r3, #128	@ 0x80
 80077a2:	d02d      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80077a4:	2b80      	cmp	r3, #128	@ 0x80
 80077a6:	d827      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80077a8:	2b60      	cmp	r3, #96	@ 0x60
 80077aa:	d02b      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80077ac:	2b60      	cmp	r3, #96	@ 0x60
 80077ae:	d823      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80077b0:	2b40      	cmp	r3, #64	@ 0x40
 80077b2:	d006      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80077b4:	2b40      	cmp	r3, #64	@ 0x40
 80077b6:	d81f      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d011      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80077c0:	e01a      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077c2:	4b1a      	ldr	r3, [pc, #104]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	4a19      	ldr	r2, [pc, #100]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80077c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077cc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077ce:	e01a      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80077d4:	3308      	adds	r3, #8
 80077d6:	4618      	mov	r0, r3
 80077d8:	f002 f8cc 	bl	8009974 <RCCEx_PLL2_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077e2:	e010      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80077e8:	332c      	adds	r3, #44	@ 0x2c
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 f95a 	bl	8009aa4 <RCCEx_PLL3_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077f6:	e006      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80077fe:	e002      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8007800:	bf00      	nop
 8007802:	e000      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8007804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007806:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800780a:	2b00      	cmp	r3, #0
 800780c:	d110      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800780e:	4b07      	ldr	r3, [pc, #28]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007810:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007814:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007818:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800781c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007820:	4a02      	ldr	r2, [pc, #8]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007822:	430b      	orrs	r3, r1
 8007824:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800782a:	bf00      	nop
 800782c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007834:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007838:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007844:	663b      	str	r3, [r7, #96]	@ 0x60
 8007846:	2300      	movs	r3, #0
 8007848:	667b      	str	r3, [r7, #100]	@ 0x64
 800784a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800784e:	460b      	mov	r3, r1
 8007850:	4313      	orrs	r3, r2
 8007852:	d046      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800785c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007860:	d028      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007862:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007866:	d821      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800786c:	d022      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800786e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007872:	d81b      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007874:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007878:	d01c      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800787a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800787e:	d815      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007884:	d008      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800788a:	d80f      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d011      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007894:	d00e      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007896:	e009      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800789c:	3308      	adds	r3, #8
 800789e:	4618      	mov	r0, r3
 80078a0:	f002 f868 	bl	8009974 <RCCEx_PLL2_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80078aa:	e004      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80078b2:	e000      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 80078b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10d      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80078be:	4bb6      	ldr	r3, [pc, #728]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80078c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80078c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078d0:	4ab1      	ldr	r2, [pc, #708]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80078d2:	430b      	orrs	r3, r1
 80078d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80078d8:	e003      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078da:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80078de:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80078e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80078ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078f0:	2300      	movs	r3, #0
 80078f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80078f8:	460b      	mov	r3, r1
 80078fa:	4313      	orrs	r3, r2
 80078fc:	d03e      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80078fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007906:	2b04      	cmp	r3, #4
 8007908:	d81d      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	0800794f 	.word	0x0800794f
 8007914:	08007925 	.word	0x08007925
 8007918:	08007933 	.word	0x08007933
 800791c:	0800794f 	.word	0x0800794f
 8007920:	0800794f 	.word	0x0800794f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007924:	4b9c      	ldr	r3, [pc, #624]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007928:	4a9b      	ldr	r2, [pc, #620]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800792a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800792e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007930:	e00e      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007936:	332c      	adds	r3, #44	@ 0x2c
 8007938:	4618      	mov	r0, r3
 800793a:	f002 f8b3 	bl	8009aa4 <RCCEx_PLL3_Config>
 800793e:	4603      	mov	r3, r0
 8007940:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8007944:	e004      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 800794c:	e000      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 800794e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007950:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10d      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007958:	4b8f      	ldr	r3, [pc, #572]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800795a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800795e:	f023 0107 	bic.w	r1, r3, #7
 8007962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796a:	4a8b      	ldr	r2, [pc, #556]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800796c:	430b      	orrs	r3, r1
 800796e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007972:	e003      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007974:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007978:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800797c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007988:	653b      	str	r3, [r7, #80]	@ 0x50
 800798a:	2300      	movs	r3, #0
 800798c:	657b      	str	r3, [r7, #84]	@ 0x54
 800798e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007992:	460b      	mov	r3, r1
 8007994:	4313      	orrs	r3, r2
 8007996:	d04a      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800799c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079a4:	d028      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80079a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079aa:	d821      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80079ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079b0:	d024      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80079b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079b6:	d81b      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80079b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079bc:	d00e      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80079be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079c2:	d815      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01b      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80079c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079cc:	d110      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079ce:	4b72      	ldr	r3, [pc, #456]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80079d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d2:	4a71      	ldr	r2, [pc, #452]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80079d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80079da:	e012      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80079e0:	332c      	adds	r3, #44	@ 0x2c
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 f85e 	bl	8009aa4 <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80079ee:	e008      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80079f6:	e004      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 80079f8:	bf00      	nop
 80079fa:	e002      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 80079fc:	bf00      	nop
 80079fe:	e000      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8007a00:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a02:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10d      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007a0a:	4b63      	ldr	r3, [pc, #396]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a24:	e003      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a26:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007a2a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007a44:	460b      	mov	r3, r1
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f000 80ba 	beq.w	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a52:	4b51      	ldr	r3, [pc, #324]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d113      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a60:	4b4d      	ldr	r3, [pc, #308]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a66:	4a4c      	ldr	r2, [pc, #304]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007a70:	4b49      	ldr	r3, [pc, #292]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
      pwrclkchanged = SET;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007a88:	4b44      	ldr	r3, [pc, #272]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	4a43      	ldr	r2, [pc, #268]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a94:	f7fa f93c 	bl	8001d10 <HAL_GetTick>
 8007a98:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007a9c:	e00b      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a9e:	f7fa f937 	bl	8001d10 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d903      	bls.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8007ab4:	e005      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ab6:	4b39      	ldr	r3, [pc, #228]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ed      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8007ac2:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d16a      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007aca:	4b33      	ldr	r3, [pc, #204]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d023      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8007ae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ae4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8007ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d01b      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007af0:	4b29      	ldr	r3, [pc, #164]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007afa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007afe:	4b26      	ldr	r3, [pc, #152]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b04:	4a24      	ldr	r2, [pc, #144]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b0e:	4b22      	ldr	r3, [pc, #136]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b14:	4a20      	ldr	r2, [pc, #128]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d019      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b34:	f7fa f8ec 	bl	8001d10 <HAL_GetTick>
 8007b38:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b3c:	e00d      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b3e:	f7fa f8e7 	bl	8001d10 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007b48:	1ad2      	subs	r2, r2, r3
 8007b4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d903      	bls.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
            break;
 8007b58:	e006      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ea      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 8007b68:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10d      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007b70:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b82:	4a05      	ldr	r2, [pc, #20]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8007b84:	430b      	orrs	r3, r1
 8007b86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007b8a:	e00d      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b8c:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007b90:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
 8007b94:	e008      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007b96:	bf00      	nop
 8007b98:	46020c00 	.word	0x46020c00
 8007b9c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007ba4:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ba8:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bb0:	4bc0      	ldr	r3, [pc, #768]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bb6:	4abf      	ldr	r2, [pc, #764]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007bb8:	f023 0304 	bic.w	r3, r3, #4
 8007bbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007bc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bce:	2300      	movs	r3, #0
 8007bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bd2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	d042      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007bdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007be4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007be8:	d022      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8007bea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007bee:	d81b      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8007bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bf4:	d011      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8007bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bfa:	d815      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d019      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c04:	d110      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 feb1 	bl	8009974 <RCCEx_PLL2_Config>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8007c18:	e00d      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c1a:	4ba6      	ldr	r3, [pc, #664]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	4aa5      	ldr	r2, [pc, #660]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c24:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007c26:	e006      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8007c2e:	e002      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8007c30:	bf00      	nop
 8007c32:	e000      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8007c34:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c36:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10d      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007c3e:	4b9d      	ldr	r3, [pc, #628]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c44:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007c48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c50:	4a98      	ldr	r2, [pc, #608]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007c52:	430b      	orrs	r3, r1
 8007c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007c58:	e003      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007c5e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c70:	2300      	movs	r3, #0
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	d02d      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007c7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8a:	d00b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8007c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c90:	d804      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8007c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c9a:	d007      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8007ca2:	e004      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8007ca4:	bf00      	nop
 8007ca6:	e002      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8007ca8:	bf00      	nop
 8007caa:	e000      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8007cac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007cae:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10d      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007cb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cbc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007cd0:	e003      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd2:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007cd6:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007cda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ce8:	2300      	movs	r3, #0
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	d019      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d02:	d105      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d04:	4b6b      	ldr	r3, [pc, #428]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	4a6a      	ldr	r2, [pc, #424]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d0e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007d10:	4b68      	ldr	r3, [pc, #416]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d16:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d22:	4a64      	ldr	r2, [pc, #400]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d24:	430b      	orrs	r3, r1
 8007d26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007d2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007d36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d38:	2300      	movs	r3, #0
 8007d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007d40:	460b      	mov	r3, r1
 8007d42:	4313      	orrs	r3, r2
 8007d44:	d00c      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007d46:	4b5b      	ldr	r3, [pc, #364]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d58:	4956      	ldr	r1, [pc, #344]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007d60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007d6c:	623b      	str	r3, [r7, #32]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d76:	460b      	mov	r3, r1
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	d00c      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d8e:	4949      	ldr	r1, [pc, #292]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007d96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	2300      	movs	r3, #0
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007dac:	460b      	mov	r3, r1
 8007dae:	4313      	orrs	r3, r2
 8007db0:	d00c      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007db2:	4b40      	ldr	r3, [pc, #256]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007db8:	f023 0218 	bic.w	r2, r3, #24
 8007dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007dc4:	493b      	ldr	r1, [pc, #236]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d032      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007de8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007df4:	d105      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df6:	4b2f      	ldr	r3, [pc, #188]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e00:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007e02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e0e:	d108      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e14:	3308      	adds	r3, #8
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fdac 	bl	8009974 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    }
    if (ret == HAL_OK)
 8007e22:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007e2a:	4b22      	ldr	r3, [pc, #136]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007e2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e3c:	491d      	ldr	r1, [pc, #116]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e46:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007e4a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007e5a:	60bb      	str	r3, [r7, #8]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e64:	460b      	mov	r3, r1
 8007e66:	4313      	orrs	r3, r2
 8007e68:	d03d      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e76:	d00e      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8007e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e7c:	d815      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01a      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e86:	d110      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e88:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8c:	4a09      	ldr	r2, [pc, #36]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8007e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e92:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007e94:	e011      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fd69 	bl	8009974 <RCCEx_PLL2_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007ea8:	e007      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8007eb0:	e003      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8007eb2:	bf00      	nop
 8007eb4:	46020c00 	.word	0x46020c00
        break;
 8007eb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007eba:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8007ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ec8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ecc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed4:	4915      	ldr	r1, [pc, #84]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8007ee2:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d00c      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007f02:	4b0a      	ldr	r3, [pc, #40]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8007f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f08:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007f0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f14:	4905      	ldr	r1, [pc, #20]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007f1c:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	37d0      	adds	r7, #208	@ 0xd0
 8007f24:	46bd      	mov	sp, r7
 8007f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f2a:	bf00      	nop
 8007f2c:	46020c00 	.word	0x46020c00

08007f30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b089      	sub	sp, #36	@ 0x24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007f38:	4ba6      	ldr	r3, [pc, #664]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f40:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007f42:	4ba4      	ldr	r3, [pc, #656]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007f4c:	4ba1      	ldr	r3, [pc, #644]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	0a1b      	lsrs	r3, r3, #8
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	3301      	adds	r3, #1
 8007f58:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007f5a:	4b9e      	ldr	r3, [pc, #632]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5e:	091b      	lsrs	r3, r3, #4
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f66:	4b9b      	ldr	r3, [pc, #620]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6a:	08db      	lsrs	r3, r3, #3
 8007f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	fb02 f303 	mul.w	r3, r2, r3
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d062      	beq.n	800804e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	f200 8081 	bhi.w	8008092 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d024      	beq.n	8007fe0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d17a      	bne.n	8008092 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80081d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fae:	4b89      	ldr	r3, [pc, #548]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fc2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80081dc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fde:	e08f      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007fe0:	4b7c      	ldr	r3, [pc, #496]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007fec:	4b79      	ldr	r3, [pc, #484]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	0f1b      	lsrs	r3, r3, #28
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	e006      	b.n	8008006 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007ff8:	4b76      	ldr	r3, [pc, #472]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ffe:	041b      	lsls	r3, r3, #16
 8008000:	0f1b      	lsrs	r3, r3, #28
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	4a76      	ldr	r2, [pc, #472]	@ (80081e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800c:	ee07 3a90 	vmov	s15, r3
 8008010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008030:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80081dc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008040:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008048:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800804c:	e058      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008058:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800805c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008060:	4b5c      	ldr	r3, [pc, #368]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008070:	ed97 6a02 	vldr	s12, [r7, #8]
 8008074:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80081dc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008078:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800807c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008084:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008090:	e036      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008092:	4b50      	ldr	r3, [pc, #320]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800809e:	4b4d      	ldr	r3, [pc, #308]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	0f1b      	lsrs	r3, r3, #28
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	e006      	b.n	80080b8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80080aa:	4b4a      	ldr	r3, [pc, #296]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	0f1b      	lsrs	r3, r3, #28
 80080b4:	f003 030f 	and.w	r3, r3, #15
 80080b8:	4a49      	ldr	r2, [pc, #292]	@ (80081e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80080ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080de:	ed97 6a02 	vldr	s12, [r7, #8]
 80080e2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80081dc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80080e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80080f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080fe:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008100:	4b34      	ldr	r3, [pc, #208]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d017      	beq.n	800813c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800810c:	4b31      	ldr	r3, [pc, #196]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800810e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008110:	0a5b      	lsrs	r3, r3, #9
 8008112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800811e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008122:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008126:	edd7 6a07 	vldr	s13, [r7, #28]
 800812a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008132:	ee17 2a90 	vmov	r2, s15
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	e002      	b.n	8008142 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008142:	4b24      	ldr	r3, [pc, #144]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d017      	beq.n	800817e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800814e:	4b21      	ldr	r3, [pc, #132]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008152:	0c1b      	lsrs	r3, r3, #16
 8008154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008164:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008168:	edd7 6a07 	vldr	s13, [r7, #28]
 800816c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008174:	ee17 2a90 	vmov	r2, s15
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	605a      	str	r2, [r3, #4]
 800817c:	e002      	b.n	8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008184:	4b13      	ldr	r3, [pc, #76]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d017      	beq.n	80081c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008190:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008194:	0e1b      	lsrs	r3, r3, #24
 8008196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80081a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80081aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b6:	ee17 2a90 	vmov	r2, s15
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80081be:	e002      	b.n	80081c6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	609a      	str	r2, [r3, #8]
}
 80081c6:	bf00      	nop
 80081c8:	3724      	adds	r7, #36	@ 0x24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	46020c00 	.word	0x46020c00
 80081d8:	4b742400 	.word	0x4b742400
 80081dc:	46000000 	.word	0x46000000
 80081e0:	0800c5f0 	.word	0x0800c5f0

080081e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b089      	sub	sp, #36	@ 0x24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80081ec:	4ba6      	ldr	r3, [pc, #664]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80081f6:	4ba4      	ldr	r3, [pc, #656]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008200:	4ba1      	ldr	r3, [pc, #644]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	3301      	adds	r3, #1
 800820c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800820e:	4b9e      	ldr	r3, [pc, #632]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800821a:	4b9b      	ldr	r3, [pc, #620]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	08db      	lsrs	r3, r3, #3
 8008220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	fb02 f303 	mul.w	r3, r2, r3
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b03      	cmp	r3, #3
 800823a:	d062      	beq.n	8008302 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2b03      	cmp	r3, #3
 8008240:	f200 8081 	bhi.w	8008346 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d024      	beq.n	8008294 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d17a      	bne.n	8008346 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800848c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008262:	4b89      	ldr	r3, [pc, #548]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008272:	ed97 6a02 	vldr	s12, [r7, #8]
 8008276:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008490 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800827a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800827e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008286:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800828a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008292:	e08f      	b.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008294:	4b7c      	ldr	r3, [pc, #496]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80082a0:	4b79      	ldr	r3, [pc, #484]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	0f1b      	lsrs	r3, r3, #28
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	e006      	b.n	80082ba <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80082ac:	4b76      	ldr	r3, [pc, #472]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	0f1b      	lsrs	r3, r3, #28
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	4a76      	ldr	r2, [pc, #472]	@ (8008494 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80082bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80082e4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008490 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80082e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80082f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008300:	e058      	b.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800848c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008314:	4b5c      	ldr	r3, [pc, #368]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831c:	ee07 3a90 	vmov	s15, r3
 8008320:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008324:	ed97 6a02 	vldr	s12, [r7, #8]
 8008328:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008490 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800832c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008330:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008338:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800833c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008344:	e036      	b.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008346:	4b50      	ldr	r3, [pc, #320]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008352:	4b4d      	ldr	r3, [pc, #308]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	0f1b      	lsrs	r3, r3, #28
 8008358:	f003 030f 	and.w	r3, r3, #15
 800835c:	e006      	b.n	800836c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800835e:	4b4a      	ldr	r3, [pc, #296]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	0f1b      	lsrs	r3, r3, #28
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	4a49      	ldr	r2, [pc, #292]	@ (8008494 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800836e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a02 	vldr	s12, [r7, #8]
 8008396:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008490 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80083b4:	4b34      	ldr	r3, [pc, #208]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d017      	beq.n	80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083c0:	4b31      	ldr	r3, [pc, #196]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c4:	0a5b      	lsrs	r3, r3, #9
 80083c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80083d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083da:	edd7 6a07 	vldr	s13, [r7, #28]
 80083de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e6:	ee17 2a90 	vmov	r2, s15
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e002      	b.n	80083f6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80083f6:	4b24      	ldr	r3, [pc, #144]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d017      	beq.n	8008432 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008402:	4b21      	ldr	r3, [pc, #132]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008406:	0c1b      	lsrs	r3, r3, #16
 8008408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008418:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800841c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008428:	ee17 2a90 	vmov	r2, s15
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]
 8008430:	e002      	b.n	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008438:	4b13      	ldr	r3, [pc, #76]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800843a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d017      	beq.n	8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008444:	4b10      	ldr	r3, [pc, #64]	@ (8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008448:	0e1b      	lsrs	r3, r3, #24
 800844a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800845a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800845e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800846a:	ee17 2a90 	vmov	r2, s15
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008472:	e002      	b.n	800847a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	609a      	str	r2, [r3, #8]
}
 800847a:	bf00      	nop
 800847c:	3724      	adds	r7, #36	@ 0x24
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	46020c00 	.word	0x46020c00
 800848c:	4b742400 	.word	0x4b742400
 8008490:	46000000 	.word	0x46000000
 8008494:	0800c5f0 	.word	0x0800c5f0

08008498 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008498:	b480      	push	{r7}
 800849a:	b089      	sub	sp, #36	@ 0x24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80084a0:	4ba6      	ldr	r3, [pc, #664]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80084aa:	4ba4      	ldr	r3, [pc, #656]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80084b4:	4ba1      	ldr	r3, [pc, #644]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	3301      	adds	r3, #1
 80084c0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80084c2:	4b9e      	ldr	r3, [pc, #632]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c6:	091b      	lsrs	r3, r3, #4
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80084ce:	4b9b      	ldr	r3, [pc, #620]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d2:	08db      	lsrs	r3, r3, #3
 80084d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	fb02 f303 	mul.w	r3, r2, r3
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d062      	beq.n	80085b6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	f200 8081 	bhi.w	80085fa <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d024      	beq.n	8008548 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b02      	cmp	r3, #2
 8008502:	d17a      	bne.n	80085fa <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008740 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008516:	4b89      	ldr	r3, [pc, #548]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800851a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008526:	ed97 6a02 	vldr	s12, [r7, #8]
 800852a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800852e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008532:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800853a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800853e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008542:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008546:	e08f      	b.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008548:	4b7c      	ldr	r3, [pc, #496]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008554:	4b79      	ldr	r3, [pc, #484]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	0f1b      	lsrs	r3, r3, #28
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	e006      	b.n	800856e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008560:	4b76      	ldr	r3, [pc, #472]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008566:	041b      	lsls	r3, r3, #16
 8008568:	0f1b      	lsrs	r3, r3, #28
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	4a76      	ldr	r2, [pc, #472]	@ (8008748 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008594:	ed97 6a02 	vldr	s12, [r7, #8]
 8008598:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800859c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80085ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085b4:	e058      	b.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008740 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80085c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c8:	4b5c      	ldr	r3, [pc, #368]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80085d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80085dc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80085e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80085e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80085e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80085f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f8:	e036      	b.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80085fa:	4b50      	ldr	r3, [pc, #320]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008606:	4b4d      	ldr	r3, [pc, #308]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	0f1b      	lsrs	r3, r3, #28
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	e006      	b.n	8008620 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008612:	4b4a      	ldr	r3, [pc, #296]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008618:	041b      	lsls	r3, r3, #16
 800861a:	0f1b      	lsrs	r3, r3, #28
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	4a49      	ldr	r2, [pc, #292]	@ (8008748 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008646:	ed97 6a02 	vldr	s12, [r7, #8]
 800864a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800864e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800865a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800865e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008666:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008668:	4b34      	ldr	r3, [pc, #208]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800866a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d017      	beq.n	80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008674:	4b31      	ldr	r3, [pc, #196]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008678:	0a5b      	lsrs	r3, r3, #9
 800867a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800868a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800868e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800869a:	ee17 2a90 	vmov	r2, s15
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	e002      	b.n	80086aa <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80086aa:	4b24      	ldr	r3, [pc, #144]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d017      	beq.n	80086e6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80086b6:	4b21      	ldr	r3, [pc, #132]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80086c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086cc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80086d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086dc:	ee17 2a90 	vmov	r2, s15
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	605a      	str	r2, [r3, #4]
 80086e4:	e002      	b.n	80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80086ec:	4b13      	ldr	r3, [pc, #76]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d017      	beq.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80086f8:	4b10      	ldr	r3, [pc, #64]	@ (800873c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fc:	0e1b      	lsrs	r3, r3, #24
 80086fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800870a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800870e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008712:	edd7 6a07 	vldr	s13, [r7, #28]
 8008716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800871a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800871e:	ee17 2a90 	vmov	r2, s15
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008726:	e002      	b.n	800872e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	609a      	str	r2, [r3, #8]
}
 800872e:	bf00      	nop
 8008730:	3724      	adds	r7, #36	@ 0x24
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	46020c00 	.word	0x46020c00
 8008740:	4b742400 	.word	0x4b742400
 8008744:	46000000 	.word	0x46000000
 8008748:	0800c5f0 	.word	0x0800c5f0

0800874c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08e      	sub	sp, #56	@ 0x38
 8008750:	af00      	add	r7, sp, #0
 8008752:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800875e:	430b      	orrs	r3, r1
 8008760:	d145      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008762:	4bac      	ldr	r3, [pc, #688]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800876c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800876e:	4ba9      	ldr	r3, [pc, #676]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b02      	cmp	r3, #2
 800877a:	d108      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008782:	d104      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008788:	637b      	str	r3, [r7, #52]	@ 0x34
 800878a:	f001 b8e3 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800878e:	4ba1      	ldr	r3, [pc, #644]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800879c:	d114      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087a4:	d110      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087a6:	4b9b      	ldr	r3, [pc, #620]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80087a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b4:	d103      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80087b6:	23fa      	movs	r3, #250	@ 0xfa
 80087b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087ba:	f001 b8cb 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 80087be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80087c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087c4:	f001 b8c6 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80087c8:	4b92      	ldr	r3, [pc, #584]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087d4:	d107      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087dc:	d103      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80087de:	4b8e      	ldr	r3, [pc, #568]	@ (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e2:	f001 b8b7 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ea:	f001 b8b3 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80087f6:	430b      	orrs	r3, r1
 80087f8:	d151      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80087fa:	4b86      	ldr	r3, [pc, #536]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80087fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008800:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008804:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	2b80      	cmp	r3, #128	@ 0x80
 800880a:	d035      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	2b80      	cmp	r3, #128	@ 0x80
 8008810:	d841      	bhi.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	2b60      	cmp	r3, #96	@ 0x60
 8008816:	d02a      	beq.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	2b60      	cmp	r3, #96	@ 0x60
 800881c:	d83b      	bhi.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	2b40      	cmp	r3, #64	@ 0x40
 8008822:	d009      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	2b40      	cmp	r3, #64	@ 0x40
 8008828:	d835      	bhi.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00c      	beq.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	2b20      	cmp	r3, #32
 8008834:	d012      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008836:	e02e      	b.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff fb77 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008846:	f001 b885 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800884a:	f107 0318 	add.w	r3, r7, #24
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff fcc8 	bl	80081e4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008858:	f001 b87c 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800885c:	f107 030c 	add.w	r3, r7, #12
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fe19 	bl	8008498 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800886a:	f001 b873 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800886e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008872:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008874:	f001 b86e 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008878:	4b66      	ldr	r3, [pc, #408]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008884:	d103      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008886:	4b65      	ldr	r3, [pc, #404]	@ (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800888a:	f001 b863 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008892:	f001 b85f 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :
      {
        frequency = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800889a:	f001 b85b 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800889e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80088a6:	430b      	orrs	r3, r1
 80088a8:	d165      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80088aa:	4b5a      	ldr	r3, [pc, #360]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80088ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088b0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80088b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80088bc:	d034      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80088c4:	d853      	bhi.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088cc:	d00b      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088d4:	d84b      	bhi.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d016      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088e2:	d009      	beq.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80088e4:	e043      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fb20 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80088f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088f4:	f001 b82e 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f8:	f107 0318 	add.w	r3, r7, #24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff fc71 	bl	80081e4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008906:	f001 b825 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800890a:	4b42      	ldr	r3, [pc, #264]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008916:	d103      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        {
          frequency = HSI48_VALUE;
 8008918:	4b41      	ldr	r3, [pc, #260]	@ (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800891c:	f001 b81a 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008924:	f001 b816 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008928:	4b3a      	ldr	r3, [pc, #232]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b20      	cmp	r3, #32
 8008932:	d118      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008934:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 8008940:	4b34      	ldr	r3, [pc, #208]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	0e1b      	lsrs	r3, r3, #24
 8008946:	f003 030f 	and.w	r3, r3, #15
 800894a:	e006      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800894c:	4b31      	ldr	r3, [pc, #196]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800894e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	0e1b      	lsrs	r3, r3, #24
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	4a32      	ldr	r2, [pc, #200]	@ (8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800895c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008960:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008962:	f000 bff7 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800896a:	f000 bff3 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :

        frequency = 0U;
 800896e:	2300      	movs	r3, #0
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008972:	f000 bfef 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897a:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800897e:	430b      	orrs	r3, r1
 8008980:	f040 808a 	bne.w	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008984:	4b23      	ldr	r3, [pc, #140]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008986:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800898a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800898e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	2b00      	cmp	r3, #0
 8008994:	d16f      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008996:	4b1f      	ldr	r3, [pc, #124]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800899c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80089a0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089a8:	d03e      	beq.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089b0:	d85d      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b8:	d00b      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089c0:	d855      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d016      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089ce:	d009      	beq.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 80089d0:	e04d      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff faaa 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80089e0:	f000 bfb8 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e4:	f107 0318 	add.w	r3, r7, #24
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fbfb 	bl	80081e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80089f2:	f000 bfaf 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80089f6:	4b07      	ldr	r3, [pc, #28]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a02:	d103      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          {
            frequency = HSI48_VALUE;
 8008a04:	4b06      	ldr	r3, [pc, #24]	@ (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008a08:	f000 bfa4 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a10:	f000 bfa0 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008a14:	46020c00 	.word	0x46020c00
 8008a18:	0007a120 	.word	0x0007a120
 8008a1c:	00f42400 	.word	0x00f42400
 8008a20:	02dc6c00 	.word	0x02dc6c00
 8008a24:	0800c5f0 	.word	0x0800c5f0
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a28:	4bab      	ldr	r3, [pc, #684]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d118      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a34:	4ba8      	ldr	r3, [pc, #672]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8008a40:	4ba5      	ldr	r3, [pc, #660]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	0e1b      	lsrs	r3, r3, #24
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	e006      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008a4c:	4ba2      	ldr	r3, [pc, #648]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a52:	041b      	lsls	r3, r3, #16
 8008a54:	0e1b      	lsrs	r3, r3, #24
 8008a56:	f003 030f 	and.w	r3, r3, #15
 8008a5a:	4aa0      	ldr	r2, [pc, #640]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008a62:	f000 bf77 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a6a:	f000 bf73 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        default :
        {
          frequency = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a72:	f000 bf6f 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a7c:	d108      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7ff fa54 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8c:	f000 bf62 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else
    {
      frequency = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a94:	f000 bf5e 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9c:	1e51      	subs	r1, r2, #1
 8008a9e:	430b      	orrs	r3, r1
 8008aa0:	d136      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d104      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008ab4:	f7fe fc6c 	bl	8007390 <HAL_RCC_GetPCLK2Freq>
 8008ab8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008aba:	f000 bf4b 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d104      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x382>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ac4:	f7fe fb34 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8008ac8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008aca:	f000 bf43 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008ace:	4b82      	ldr	r3, [pc, #520]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ada:	d106      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d103      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
    {
      frequency = HSI_VALUE;
 8008ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ae6:	f000 bf35 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008aea:	4b7b      	ldr	r3, [pc, #492]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d107      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d104      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
    {
      frequency = LSE_VALUE;
 8008afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b04:	f000 bf26 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b0c:	f000 bf22 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b14:	1f11      	subs	r1, r2, #4
 8008b16:	430b      	orrs	r3, r1
 8008b18:	d136      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008b24:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d104      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b2c:	f7fe fc1c 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 8008b30:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b32:	f000 bf0f 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	2b10      	cmp	r3, #16
 8008b3a:	d104      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b3c:	f7fe faf8 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8008b40:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b42:	f000 bf07 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008b46:	4b64      	ldr	r3, [pc, #400]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b52:	d106      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d103      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      frequency = HSI_VALUE;
 8008b5a:	4b61      	ldr	r3, [pc, #388]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5e:	f000 bef9 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008b62:	4b5d      	ldr	r3, [pc, #372]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d107      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 8008b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b72:	2b30      	cmp	r3, #48	@ 0x30
 8008b74:	d104      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
    {
      frequency = LSE_VALUE;
 8008b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7c:	f000 beea 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b84:	f000 bee6 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8c:	f1a2 0108 	sub.w	r1, r2, #8
 8008b90:	430b      	orrs	r3, r1
 8008b92:	d136      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b94:	4b50      	ldr	r3, [pc, #320]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ba6:	f7fe fbdf 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 8008baa:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bac:	f000 bed2 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	2b40      	cmp	r3, #64	@ 0x40
 8008bb4:	d104      	bne.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008bb6:	f7fe fabb 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8008bba:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bbc:	f000 beca 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008bc0:	4b45      	ldr	r3, [pc, #276]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bcc:	d106      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	2b80      	cmp	r3, #128	@ 0x80
 8008bd2:	d103      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = HSI_VALUE;
 8008bd4:	4b42      	ldr	r3, [pc, #264]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd8:	f000 bebc 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d107      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bec:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bee:	d104      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
    {
      frequency = LSE_VALUE;
 8008bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf6:	f000 bead 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfe:	f000 bea9 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c06:	f1a2 0110 	sub.w	r1, r2, #16
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	d139      	bne.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008c0e:	4b32      	ldr	r3, [pc, #200]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c20:	f7fe fba2 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 8008c24:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c26:	f000 be95 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c30:	d104      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c32:	f7fe fa7d 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8008c36:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c38:	f000 be8c 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008c3c:	4b26      	ldr	r3, [pc, #152]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c48:	d107      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c50:	d103      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HSI_VALUE;
 8008c52:	4b23      	ldr	r3, [pc, #140]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c56:	f000 be7d 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d108      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c6e:	d104      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = LSE_VALUE;
 8008c70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c76:	f000 be6d 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7e:	f000 be69 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c86:	f1a2 0120 	sub.w	r1, r2, #32
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	d15f      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c8e:	4b12      	ldr	r3, [pc, #72]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d104      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008ca0:	f7fe fb8a 	bl	80073b8 <HAL_RCC_GetPCLK3Freq>
 8008ca4:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ca6:	f000 be55 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d104      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008cb0:	f7fe fa3e 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8008cb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8008cb6:	f000 be4d 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008cba:	4b07      	ldr	r3, [pc, #28]	@ (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cc6:	d10d      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d10a      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HSI_VALUE;
 8008cce:	4b04      	ldr	r3, [pc, #16]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd2:	f000 be3f 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008cd6:	bf00      	nop
 8008cd8:	46020c00 	.word	0x46020c00
 8008cdc:	0800c5f0 	.word	0x0800c5f0
 8008ce0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008ce4:	4baf      	ldr	r3, [pc, #700]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d107      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d104      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = LSE_VALUE;
 8008cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cfe:	f000 be29 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008d02:	4ba8      	ldr	r3, [pc, #672]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d11b      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d118      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d14:	4ba3      	ldr	r3, [pc, #652]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 8008d20:	4ba0      	ldr	r3, [pc, #640]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	0e1b      	lsrs	r3, r3, #24
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	e006      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008d2c:	4b9d      	ldr	r3, [pc, #628]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d32:	041b      	lsls	r3, r3, #16
 8008d34:	0e1b      	lsrs	r3, r3, #24
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	4a9b      	ldr	r2, [pc, #620]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d42:	f000 be07 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4a:	f000 be03 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d52:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008d56:	430b      	orrs	r3, r1
 8008d58:	d16c      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008d5a:	4b92      	ldr	r3, [pc, #584]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d60:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008d64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d6c:	d104      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d6e:	f7fe f9df 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8008d72:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d74:	f000 bdee 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d7e:	d108      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d80:	f107 0318 	add.w	r3, r7, #24
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff fa2d 	bl	80081e4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8e:	f000 bde1 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d104      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008d98:	f7fe facc 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 8008d9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d9e:	f000 bdd9 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008da8:	d122      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008daa:	4b7e      	ldr	r3, [pc, #504]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d118      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008db6:	4b7b      	ldr	r3, [pc, #492]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d005      	beq.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008dc2:	4b78      	ldr	r3, [pc, #480]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	0e1b      	lsrs	r3, r3, #24
 8008dc8:	f003 030f 	and.w	r3, r3, #15
 8008dcc:	e006      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8008dce:	4b75      	ldr	r3, [pc, #468]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	0e1b      	lsrs	r3, r3, #24
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	4a72      	ldr	r2, [pc, #456]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de4:	f000 bdb6 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dec:	f000 bdb2 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008df0:	4b6c      	ldr	r3, [pc, #432]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dfc:	d107      	bne.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e04:	d103      	bne.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
    {
      frequency = HSE_VALUE;
 8008e06:	4b69      	ldr	r3, [pc, #420]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8008e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e0a:	f000 bda3 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008e0e:	4b65      	ldr	r3, [pc, #404]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e22:	d103      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
    {
      frequency = HSI_VALUE;
 8008e24:	4b61      	ldr	r3, [pc, #388]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8008e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e28:	f000 bd94 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e30:	f000 bd90 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e38:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	d158      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008e40:	4b58      	ldr	r3, [pc, #352]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d84b      	bhi.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8008e52:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e91 	.word	0x08008e91
 8008e5c:	08008e6d 	.word	0x08008e6d
 8008e60:	08008e7f 	.word	0x08008e7f
 8008e64:	08008e9b 	.word	0x08008e9b
 8008e68:	08008ea5 	.word	0x08008ea5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff f85d 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e7a:	f000 bd6b 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7e:	f107 030c 	add.w	r3, r7, #12
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fb08 	bl	8008498 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e8c:	f000 bd62 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008e90:	f7fe fa50 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 8008e94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008e96:	f000 bd5d 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008e9a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ea0:	f000 bd58 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d118      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d005      	beq.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 8008ebc:	4b39      	ldr	r3, [pc, #228]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	0e1b      	lsrs	r3, r3, #24
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	e006      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008ec8:	4b36      	ldr	r3, [pc, #216]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	0e1b      	lsrs	r3, r3, #24
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	4a34      	ldr	r2, [pc, #208]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ede:	f000 bd39 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ee6:	f000 bd35 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eee:	f000 bd31 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008efa:	430b      	orrs	r3, r1
 8008efc:	d16d      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008efe:	4b29      	ldr	r3, [pc, #164]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f04:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008f08:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f10:	d036      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f18:	d85b      	bhi.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f20:	d029      	beq.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f28:	d853      	bhi.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f30:	d013      	beq.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f38:	d84b      	bhi.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d015      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f46:	d144      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe ffef 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f56:	f000 bcfd 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f5a:	f107 030c 	add.w	r3, r7, #12
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff fa9a 	bl	8008498 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f68:	f000 bcf4 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008f6c:	f7fe f9e2 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 8008f70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f72:	f000 bcef 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f76:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f7c:	f000 bcea 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008f80:	4b08      	ldr	r3, [pc, #32]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d11e      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f8c:	4b05      	ldr	r3, [pc, #20]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008f98:	4b02      	ldr	r3, [pc, #8]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	0e1b      	lsrs	r3, r3, #24
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	e00c      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8008fa4:	46020c00 	.word	0x46020c00
 8008fa8:	0800c5f0 	.word	0x0800c5f0
 8008fac:	00f42400 	.word	0x00f42400
 8008fb0:	4b9d      	ldr	r3, [pc, #628]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8008fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fb6:	041b      	lsls	r3, r3, #16
 8008fb8:	0e1b      	lsrs	r3, r3, #24
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	4a9b      	ldr	r2, [pc, #620]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8008fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008fc6:	f000 bcc5 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fce:	f000 bcc1 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fd6:	f000 bcbd 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fde:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008fe2:	430b      	orrs	r3, r1
 8008fe4:	d14c      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008fe6:	4b90      	ldr	r3, [pc, #576]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8008fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ff0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d104      	bne.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ff8:	f7fe f9b6 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 8008ffc:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ffe:	f000 bca9 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009008:	d104      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800900a:	f7fe f891 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 800900e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009010:	f000 bca0 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009014:	4b84      	ldr	r3, [pc, #528]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800901c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009020:	d107      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009028:	d103      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
    {
      frequency = HSI_VALUE;
 800902a:	4b81      	ldr	r3, [pc, #516]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
 800902e:	f000 bc91 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009032:	4b7d      	ldr	r3, [pc, #500]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b20      	cmp	r3, #32
 800903c:	d11c      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 800903e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009044:	d118      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009046:	4b78      	ldr	r3, [pc, #480]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x912>
 8009052:	4b75      	ldr	r3, [pc, #468]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	0e1b      	lsrs	r3, r3, #24
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	e006      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800905e:	4b72      	ldr	r3, [pc, #456]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009064:	041b      	lsls	r3, r3, #16
 8009066:	0e1b      	lsrs	r3, r3, #24
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	4a6f      	ldr	r2, [pc, #444]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 800906e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
 8009074:	f000 bc6e 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	637b      	str	r3, [r7, #52]	@ 0x34
 800907c:	f000 bc6a 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009084:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009088:	430b      	orrs	r3, r1
 800908a:	d14c      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800908c:	4b66      	ldr	r3, [pc, #408]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800908e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009092:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009096:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909a:	2b00      	cmp	r3, #0
 800909c:	d104      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800909e:	f7fe f963 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 80090a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80090a4:	f000 bc56 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80090a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090ae:	d104      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090b0:	f7fe f83e 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 80090b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80090b6:	f000 bc4d 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80090ba:	4b5b      	ldr	r3, [pc, #364]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090c6:	d107      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ce:	d103      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
    {
      frequency = HSI_VALUE;
 80090d0:	4b57      	ldr	r3, [pc, #348]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d4:	f000 bc3e 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80090d8:	4b53      	ldr	r3, [pc, #332]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	d11c      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090ea:	d118      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090ec:	4b4e      	ldr	r3, [pc, #312]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80090f8:	4b4b      	ldr	r3, [pc, #300]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	0e1b      	lsrs	r3, r3, #24
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	e006      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8009104:	4b48      	ldr	r3, [pc, #288]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800910a:	041b      	lsls	r3, r3, #16
 800910c:	0e1b      	lsrs	r3, r3, #24
 800910e:	f003 030f 	and.w	r3, r3, #15
 8009112:	4a46      	ldr	r2, [pc, #280]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8009114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009118:	637b      	str	r3, [r7, #52]	@ 0x34
 800911a:	f000 bc1b 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	637b      	str	r3, [r7, #52]	@ 0x34
 8009122:	f000 bc17 	b.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800912a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800912e:	430b      	orrs	r3, r1
 8009130:	d151      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009132:	4b3d      	ldr	r3, [pc, #244]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009138:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800913c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	2bc0      	cmp	r3, #192	@ 0xc0
 8009142:	d024      	beq.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	2bc0      	cmp	r3, #192	@ 0xc0
 8009148:	d842      	bhi.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2b80      	cmp	r3, #128	@ 0x80
 800914e:	d00d      	beq.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	2b80      	cmp	r3, #128	@ 0x80
 8009154:	d83c      	bhi.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	2b40      	cmp	r3, #64	@ 0x40
 8009160:	d011      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8009162:	e035      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009164:	f7fe f928 	bl	80073b8 <HAL_RCC_GetPCLK3Freq>
 8009168:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800916a:	e3f3      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800916c:	4b2e      	ldr	r3, [pc, #184]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009178:	d102      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
        {
          frequency = HSI_VALUE;
 800917a:	4b2d      	ldr	r3, [pc, #180]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800917e:	e3e9      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009184:	e3e6      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009186:	f7fd ffd3 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 800918a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800918c:	e3e2      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800918e:	4b26      	ldr	r3, [pc, #152]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b20      	cmp	r3, #32
 8009198:	d117      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800919a:	4b23      	ldr	r3, [pc, #140]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 80091a6:	4b20      	ldr	r3, [pc, #128]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	0e1b      	lsrs	r3, r3, #24
 80091ac:	f003 030f 	and.w	r3, r3, #15
 80091b0:	e006      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80091b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80091b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091b8:	041b      	lsls	r3, r3, #16
 80091ba:	0e1b      	lsrs	r3, r3, #24
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	4a1a      	ldr	r2, [pc, #104]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80091c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091c8:	e3c4      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ce:	e3c1      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      default:
      {
        frequency = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091d4:	e3be      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80091d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091da:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80091de:	430b      	orrs	r3, r1
 80091e0:	d14d      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80091e2:	4b11      	ldr	r3, [pc, #68]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80091e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80091ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80091f4:	f7fe f8b8 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 80091f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80091fa:	e3ab      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009202:	d103      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009204:	f7fd ff94 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8009208:	6378      	str	r0, [r7, #52]	@ 0x34
 800920a:	e3a3      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800920c:	4b06      	ldr	r3, [pc, #24]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009218:	d10c      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009220:	d108      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 8009222:	4b03      	ldr	r3, [pc, #12]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
 8009226:	e395      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009228:	46020c00 	.word	0x46020c00
 800922c:	0800c5f0 	.word	0x0800c5f0
 8009230:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009234:	4ba4      	ldr	r3, [pc, #656]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0320 	and.w	r3, r3, #32
 800923c:	2b20      	cmp	r3, #32
 800923e:	d11b      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009246:	d117      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009248:	4b9f      	ldr	r3, [pc, #636]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8009254:	4b9c      	ldr	r3, [pc, #624]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	0e1b      	lsrs	r3, r3, #24
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	e006      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8009260:	4b99      	ldr	r3, [pc, #612]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	0e1b      	lsrs	r3, r3, #24
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	4a97      	ldr	r2, [pc, #604]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8009270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009274:	637b      	str	r3, [r7, #52]	@ 0x34
 8009276:	e36d      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
 800927c:	e36a      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800927e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009282:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009286:	430b      	orrs	r3, r1
 8009288:	d164      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800928a:	4b8f      	ldr	r3, [pc, #572]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800928c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009294:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	2b00      	cmp	r3, #0
 800929a:	d120      	bne.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800929c:	4b8a      	ldr	r3, [pc, #552]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d117      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092a8:	4b87      	ldr	r3, [pc, #540]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 80092b4:	4b84      	ldr	r3, [pc, #528]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	0e1b      	lsrs	r3, r3, #24
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	e006      	b.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 80092c0:	4b81      	ldr	r3, [pc, #516]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80092c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092c6:	041b      	lsls	r3, r3, #16
 80092c8:	0e1b      	lsrs	r3, r3, #24
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	4a7f      	ldr	r2, [pc, #508]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 80092d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d6:	e33d      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	637b      	str	r3, [r7, #52]	@ 0x34
 80092dc:	e33a      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80092de:	4b7a      	ldr	r3, [pc, #488]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80092e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092ec:	d112      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092f4:	d10e      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092f6:	4b74      	ldr	r3, [pc, #464]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80092f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009304:	d102      	bne.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      {
        frequency = LSI_VALUE / 128U;
 8009306:	23fa      	movs	r3, #250	@ 0xfa
 8009308:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800930a:	e323      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800930c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009310:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009312:	e31f      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009314:	4b6c      	ldr	r3, [pc, #432]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800931c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009320:	d106      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009328:	d102      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
    {
      frequency = HSI_VALUE;
 800932a:	4b69      	ldr	r3, [pc, #420]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
 800932e:	e311      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009330:	4b65      	ldr	r3, [pc, #404]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b02      	cmp	r3, #2
 800933c:	d107      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009344:	d103      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
    {
      frequency = LSE_VALUE;
 8009346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
 800934c:	e302      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
 8009352:	e2ff      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009358:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800935c:	430b      	orrs	r3, r1
 800935e:	d164      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009360:	4b59      	ldr	r3, [pc, #356]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009366:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800936a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	2b00      	cmp	r3, #0
 8009370:	d120      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009372:	4b55      	ldr	r3, [pc, #340]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0320 	and.w	r3, r3, #32
 800937a:	2b20      	cmp	r3, #32
 800937c:	d117      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800937e:	4b52      	ldr	r3, [pc, #328]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 800938a:	4b4f      	ldr	r3, [pc, #316]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	0e1b      	lsrs	r3, r3, #24
 8009390:	f003 030f 	and.w	r3, r3, #15
 8009394:	e006      	b.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 8009396:	4b4c      	ldr	r3, [pc, #304]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800939c:	041b      	lsls	r3, r3, #16
 800939e:	0e1b      	lsrs	r3, r3, #24
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	4a49      	ldr	r2, [pc, #292]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 80093a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ac:	e2d2      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b2:	e2cf      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80093b4:	4b44      	ldr	r3, [pc, #272]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80093b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093c2:	d112      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ca:	d10e      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093cc:	4b3e      	ldr	r3, [pc, #248]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80093ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093da:	d102      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
      {
        frequency = LSI_VALUE / 128U;
 80093dc:	23fa      	movs	r3, #250	@ 0xfa
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093e0:	e2b8      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 80093e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093e8:	e2b4      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80093ea:	4b37      	ldr	r3, [pc, #220]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093f6:	d106      	bne.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80093f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093fe:	d102      	bne.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = HSI_VALUE;
 8009400:	4b33      	ldr	r3, [pc, #204]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009402:	637b      	str	r3, [r7, #52]	@ 0x34
 8009404:	e2a6      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009406:	4b30      	ldr	r3, [pc, #192]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b02      	cmp	r3, #2
 8009412:	d107      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800941a:	d103      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
    {
      frequency = LSE_VALUE;
 800941c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
 8009422:	e297      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	637b      	str	r3, [r7, #52]	@ 0x34
 8009428:	e294      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800942a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800942e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009432:	430b      	orrs	r3, r1
 8009434:	d14e      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009436:	4b24      	ldr	r3, [pc, #144]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800943c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009440:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	2b00      	cmp	r3, #0
 8009446:	d103      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009448:	f7fd ff8e 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 800944c:	6378      	str	r0, [r7, #52]	@ 0x34
 800944e:	e281      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009450:	4b1d      	ldr	r3, [pc, #116]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800945a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800945e:	d112      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009466:	d10e      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009468:	4b17      	ldr	r3, [pc, #92]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800946a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800946e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009476:	d102      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
      {
        frequency = LSI_VALUE / 128U;
 8009478:	23fa      	movs	r3, #250	@ 0xfa
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800947c:	e26a      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800947e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009484:	e266      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009486:	4b10      	ldr	r3, [pc, #64]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800948e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009492:	d106      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800949a:	d102      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = HSI_VALUE;
 800949c:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800949e:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a0:	e258      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80094a2:	4b09      	ldr	r3, [pc, #36]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80094a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d107      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80094b6:	d103      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
    {
      frequency = LSE_VALUE;
 80094b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094be:	e249      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c4:	e246      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80094c6:	bf00      	nop
 80094c8:	46020c00 	.word	0x46020c00
 80094cc:	0800c5f0 	.word	0x0800c5f0
 80094d0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80094d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80094dc:	430b      	orrs	r3, r1
 80094de:	d12d      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80094e0:	4ba9      	ldr	r3, [pc, #676]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094e6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80094ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80094ec:	4ba6      	ldr	r3, [pc, #664]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094f8:	d105      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
    {
      frequency = HSE_VALUE;
 8009500:	4ba2      	ldr	r3, [pc, #648]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009502:	637b      	str	r3, [r7, #52]	@ 0x34
 8009504:	e226      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800950c:	d107      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800950e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fd0c 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
 800951c:	e21a      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009524:	d107      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009526:	f107 0318 	add.w	r3, r7, #24
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fe5a 	bl	80081e4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
 8009534:	e20e      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	637b      	str	r3, [r7, #52]	@ 0x34
 800953a:	e20b      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800953c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009540:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009544:	430b      	orrs	r3, r1
 8009546:	d156      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009548:	4b8f      	ldr	r3, [pc, #572]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800954a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800954e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009552:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009556:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800955a:	d028      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009562:	d845      	bhi.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800956a:	d013      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 800956c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009572:	d83d      	bhi.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009580:	d004      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
 8009582:	e035      	b.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009584:	f7fd ff04 	bl	8007390 <HAL_RCC_GetPCLK2Freq>
 8009588:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800958a:	e1e3      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800958c:	f7fd fdd0 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8009590:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009592:	e1df      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009594:	4b7c      	ldr	r3, [pc, #496]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800959c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a0:	d102      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI_VALUE;
 80095a2:	4b7a      	ldr	r3, [pc, #488]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80095a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095a6:	e1d5      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095ac:	e1d2      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80095ae:	4b76      	ldr	r3, [pc, #472]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d117      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095ba:	4b73      	ldr	r3, [pc, #460]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80095c6:	4b70      	ldr	r3, [pc, #448]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	0e1b      	lsrs	r3, r3, #24
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	e006      	b.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80095d2:	4b6d      	ldr	r3, [pc, #436]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095d8:	041b      	lsls	r3, r3, #16
 80095da:	0e1b      	lsrs	r3, r3, #24
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	4a6b      	ldr	r2, [pc, #428]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80095e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095e8:	e1b4      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095ee:	e1b1      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095f4:	e1ae      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80095f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095fa:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80095fe:	430b      	orrs	r3, r1
 8009600:	d156      	bne.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009602:	4b61      	ldr	r3, [pc, #388]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800960c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009614:	d028      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800961c:	d845      	bhi.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009624:	d013      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800962c:	d83d      	bhi.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800963a:	d004      	beq.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 800963c:	e035      	b.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800963e:	f7fd fe93 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 8009642:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009644:	e186      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009646:	f7fd fd73 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 800964a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800964c:	e182      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800964e:	4b4e      	ldr	r3, [pc, #312]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800965a:	d102      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
        {
          frequency = HSI_VALUE;
 800965c:	4b4b      	ldr	r3, [pc, #300]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800965e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009660:	e178      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009666:	e175      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009668:	4b47      	ldr	r3, [pc, #284]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b20      	cmp	r3, #32
 8009672:	d117      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009674:	4b44      	ldr	r3, [pc, #272]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d005      	beq.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
 8009680:	4b41      	ldr	r3, [pc, #260]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	0e1b      	lsrs	r3, r3, #24
 8009686:	f003 030f 	and.w	r3, r3, #15
 800968a:	e006      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 800968c:	4b3e      	ldr	r3, [pc, #248]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800968e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	0e1b      	lsrs	r3, r3, #24
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	4a3d      	ldr	r2, [pc, #244]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800969c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096a2:	e157      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096a8:	e154      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ae:	e151      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80096b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80096b8:	430b      	orrs	r3, r1
 80096ba:	d17d      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80096bc:	4b32      	ldr	r3, [pc, #200]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80096be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096c2:	f003 0318 	and.w	r3, r3, #24
 80096c6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	2b18      	cmp	r3, #24
 80096cc:	d871      	bhi.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
 80096ce:	a201      	add	r2, pc, #4	@ (adr r2, 80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	08009739 	.word	0x08009739
 80096d8:	080097b3 	.word	0x080097b3
 80096dc:	080097b3 	.word	0x080097b3
 80096e0:	080097b3 	.word	0x080097b3
 80096e4:	080097b3 	.word	0x080097b3
 80096e8:	080097b3 	.word	0x080097b3
 80096ec:	080097b3 	.word	0x080097b3
 80096f0:	080097b3 	.word	0x080097b3
 80096f4:	08009741 	.word	0x08009741
 80096f8:	080097b3 	.word	0x080097b3
 80096fc:	080097b3 	.word	0x080097b3
 8009700:	080097b3 	.word	0x080097b3
 8009704:	080097b3 	.word	0x080097b3
 8009708:	080097b3 	.word	0x080097b3
 800970c:	080097b3 	.word	0x080097b3
 8009710:	080097b3 	.word	0x080097b3
 8009714:	08009749 	.word	0x08009749
 8009718:	080097b3 	.word	0x080097b3
 800971c:	080097b3 	.word	0x080097b3
 8009720:	080097b3 	.word	0x080097b3
 8009724:	080097b3 	.word	0x080097b3
 8009728:	080097b3 	.word	0x080097b3
 800972c:	080097b3 	.word	0x080097b3
 8009730:	080097b3 	.word	0x080097b3
 8009734:	08009763 	.word	0x08009763
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009738:	f7fd fe3e 	bl	80073b8 <HAL_RCC_GetPCLK3Freq>
 800973c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800973e:	e109      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009740:	f7fd fcf6 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8009744:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009746:	e105      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009748:	4b0f      	ldr	r3, [pc, #60]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009754:	d102      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = HSI_VALUE;
 8009756:	4b0d      	ldr	r3, [pc, #52]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800975a:	e0fb      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009760:	e0f8      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009762:	4b09      	ldr	r3, [pc, #36]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b20      	cmp	r3, #32
 800976c:	d11e      	bne.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800976e:	4b06      	ldr	r3, [pc, #24]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00c      	beq.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800977a:	4b03      	ldr	r3, [pc, #12]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	0e1b      	lsrs	r3, r3, #24
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	e00d      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 8009786:	bf00      	nop
 8009788:	46020c00 	.word	0x46020c00
 800978c:	00f42400 	.word	0x00f42400
 8009790:	0800c5f0 	.word	0x0800c5f0
 8009794:	4b72      	ldr	r3, [pc, #456]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8009796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800979a:	041b      	lsls	r3, r3, #16
 800979c:	0e1b      	lsrs	r3, r3, #24
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	4a70      	ldr	r2, [pc, #448]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 80097a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80097aa:	e0d3      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097b0:	e0d0      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097b6:	e0cd      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80097b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097bc:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80097c0:	430b      	orrs	r3, r1
 80097c2:	d155      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80097c4:	4b66      	ldr	r3, [pc, #408]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80097c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80097ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097d6:	d013      	beq.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097de:	d844      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 80097e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097e6:	d013      	beq.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80097e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097ee:	d83c      	bhi.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d014      	beq.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80097f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097fc:	d014      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 80097fe:	e034      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009800:	f107 0318 	add.w	r3, r7, #24
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fced 	bl	80081e4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800980e:	e0a1      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fb8b 	bl	8007f30 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800981a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800981e:	e099      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009820:	f7fd fc86 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8009824:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009826:	e095      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009828:	4b4d      	ldr	r3, [pc, #308]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0320 	and.w	r3, r3, #32
 8009830:	2b20      	cmp	r3, #32
 8009832:	d117      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x1118>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009834:	4b4a      	ldr	r3, [pc, #296]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 8009840:	4b47      	ldr	r3, [pc, #284]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	0e1b      	lsrs	r3, r3, #24
 8009846:	f003 030f 	and.w	r3, r3, #15
 800984a:	e006      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
 800984c:	4b44      	ldr	r3, [pc, #272]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800984e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009852:	041b      	lsls	r3, r3, #16
 8009854:	0e1b      	lsrs	r3, r3, #24
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	4a42      	ldr	r2, [pc, #264]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 800985c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009862:	e077      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009868:	e074      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800986e:	e071      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009874:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009878:	430b      	orrs	r3, r1
 800987a:	d131      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1194>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800987c:	4b38      	ldr	r3, [pc, #224]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800987e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009886:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009888:	4b35      	ldr	r3, [pc, #212]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800988a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b02      	cmp	r3, #2
 8009894:	d106      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
    {
      frequency = LSE_VALUE;
 800989c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a2:	e057      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80098a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80098a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b2:	d112      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098ba:	d10e      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098bc:	4b28      	ldr	r3, [pc, #160]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80098be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098ca:	d102      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
      {
        frequency = LSI_VALUE / 128U;
 80098cc:	23fa      	movs	r3, #250	@ 0xfa
 80098ce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098d0:	e040      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 80098d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098d8:	e03c      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098de:	e039      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80098e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80098e8:	430b      	orrs	r3, r1
 80098ea:	d131      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80098ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80098ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80098f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80098f8:	4b19      	ldr	r3, [pc, #100]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009904:	d105      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
    {
      frequency = HSI48_VALUE;
 800990c:	4b16      	ldr	r3, [pc, #88]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009910:	e020      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009912:	4b13      	ldr	r3, [pc, #76]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800991a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800991e:	d106      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009926:	d102      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009928:	4b10      	ldr	r3, [pc, #64]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 800992a:	637b      	str	r3, [r7, #52]	@ 0x34
 800992c:	e012      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800992e:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800993a:	d106      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009942:	d102      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
    {
      frequency = HSI_VALUE;
 8009944:	4b0a      	ldr	r3, [pc, #40]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009946:	637b      	str	r3, [r7, #52]	@ 0x34
 8009948:	e004      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
 800994e:	e001      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009956:	4618      	mov	r0, r3
 8009958:	3738      	adds	r7, #56	@ 0x38
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	46020c00 	.word	0x46020c00
 8009964:	0800c5f0 	.word	0x0800c5f0
 8009968:	02dc6c00 	.word	0x02dc6c00
 800996c:	016e3600 	.word	0x016e3600
 8009970:	00f42400 	.word	0x00f42400

08009974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800997c:	4b47      	ldr	r3, [pc, #284]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a46      	ldr	r2, [pc, #280]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009982:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009986:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009988:	f7f8 f9c2 	bl	8001d10 <HAL_GetTick>
 800998c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800998e:	e008      	b.n	80099a2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009990:	f7f8 f9be 	bl	8001d10 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d901      	bls.n	80099a2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e077      	b.n	8009a92 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099a2:	4b3e      	ldr	r3, [pc, #248]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1f0      	bne.n	8009990 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80099ae:	4b3b      	ldr	r3, [pc, #236]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 80099b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6811      	ldr	r1, [r2, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	6852      	ldr	r2, [r2, #4]
 80099c2:	3a01      	subs	r2, #1
 80099c4:	0212      	lsls	r2, r2, #8
 80099c6:	430a      	orrs	r2, r1
 80099c8:	4934      	ldr	r1, [pc, #208]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80099ce:	4b33      	ldr	r3, [pc, #204]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 80099d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099d2:	4b33      	ldr	r3, [pc, #204]	@ (8009aa0 <RCCEx_PLL2_Config+0x12c>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6892      	ldr	r2, [r2, #8]
 80099da:	3a01      	subs	r2, #1
 80099dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	68d2      	ldr	r2, [r2, #12]
 80099e4:	3a01      	subs	r2, #1
 80099e6:	0252      	lsls	r2, r2, #9
 80099e8:	b292      	uxth	r2, r2
 80099ea:	4311      	orrs	r1, r2
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6912      	ldr	r2, [r2, #16]
 80099f0:	3a01      	subs	r2, #1
 80099f2:	0412      	lsls	r2, r2, #16
 80099f4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80099f8:	4311      	orrs	r1, r2
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6952      	ldr	r2, [r2, #20]
 80099fe:	3a01      	subs	r2, #1
 8009a00:	0612      	lsls	r2, r2, #24
 8009a02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009a06:	430a      	orrs	r2, r1
 8009a08:	4924      	ldr	r1, [pc, #144]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009a0e:	4b23      	ldr	r3, [pc, #140]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a12:	f023 020c 	bic.w	r2, r3, #12
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	4920      	ldr	r1, [pc, #128]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009a20:	4b1e      	ldr	r3, [pc, #120]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	491c      	ldr	r1, [pc, #112]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a32:	4a1a      	ldr	r2, [pc, #104]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a34:	f023 0310 	bic.w	r3, r3, #16
 8009a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a3a:	4b18      	ldr	r3, [pc, #96]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a42:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	69d2      	ldr	r2, [r2, #28]
 8009a4a:	00d2      	lsls	r2, r2, #3
 8009a4c:	4913      	ldr	r1, [pc, #76]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009a52:	4b12      	ldr	r3, [pc, #72]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a56:	4a11      	ldr	r2, [pc, #68]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a58:	f043 0310 	orr.w	r3, r3, #16
 8009a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a0e      	ldr	r2, [pc, #56]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a6a:	f7f8 f951 	bl	8001d10 <HAL_GetTick>
 8009a6e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a70:	e008      	b.n	8009a84 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a72:	f7f8 f94d 	bl	8001d10 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d901      	bls.n	8009a84 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e006      	b.n	8009a92 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a84:	4b05      	ldr	r3, [pc, #20]	@ (8009a9c <RCCEx_PLL2_Config+0x128>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d0f0      	beq.n	8009a72 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009a90:	2300      	movs	r3, #0

}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	46020c00 	.word	0x46020c00
 8009aa0:	80800000 	.word	0x80800000

08009aa4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009aac:	4b47      	ldr	r3, [pc, #284]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a46      	ldr	r2, [pc, #280]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ab6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ab8:	f7f8 f92a 	bl	8001d10 <HAL_GetTick>
 8009abc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009abe:	e008      	b.n	8009ad2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ac0:	f7f8 f926 	bl	8001d10 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d901      	bls.n	8009ad2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e077      	b.n	8009bc2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1f0      	bne.n	8009ac0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009ade:	4b3b      	ldr	r3, [pc, #236]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ae6:	f023 0303 	bic.w	r3, r3, #3
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6811      	ldr	r1, [r2, #0]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	6852      	ldr	r2, [r2, #4]
 8009af2:	3a01      	subs	r2, #1
 8009af4:	0212      	lsls	r2, r2, #8
 8009af6:	430a      	orrs	r2, r1
 8009af8:	4934      	ldr	r1, [pc, #208]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	630b      	str	r3, [r1, #48]	@ 0x30
 8009afe:	4b33      	ldr	r3, [pc, #204]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b02:	4b33      	ldr	r3, [pc, #204]	@ (8009bd0 <RCCEx_PLL3_Config+0x12c>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	6892      	ldr	r2, [r2, #8]
 8009b0a:	3a01      	subs	r2, #1
 8009b0c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	68d2      	ldr	r2, [r2, #12]
 8009b14:	3a01      	subs	r2, #1
 8009b16:	0252      	lsls	r2, r2, #9
 8009b18:	b292      	uxth	r2, r2
 8009b1a:	4311      	orrs	r1, r2
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	6912      	ldr	r2, [r2, #16]
 8009b20:	3a01      	subs	r2, #1
 8009b22:	0412      	lsls	r2, r2, #16
 8009b24:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009b28:	4311      	orrs	r1, r2
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	6952      	ldr	r2, [r2, #20]
 8009b2e:	3a01      	subs	r2, #1
 8009b30:	0612      	lsls	r2, r2, #24
 8009b32:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009b36:	430a      	orrs	r2, r1
 8009b38:	4924      	ldr	r1, [pc, #144]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009b3e:	4b23      	ldr	r3, [pc, #140]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b42:	f023 020c 	bic.w	r2, r3, #12
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	4920      	ldr	r1, [pc, #128]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b50:	4b1e      	ldr	r3, [pc, #120]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	491c      	ldr	r1, [pc, #112]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b62:	4a1a      	ldr	r2, [pc, #104]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b64:	f023 0310 	bic.w	r3, r3, #16
 8009b68:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b6a:	4b18      	ldr	r3, [pc, #96]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	69d2      	ldr	r2, [r2, #28]
 8009b7a:	00d2      	lsls	r2, r2, #3
 8009b7c:	4913      	ldr	r1, [pc, #76]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009b82:	4b12      	ldr	r3, [pc, #72]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b86:	4a11      	ldr	r2, [pc, #68]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b88:	f043 0310 	orr.w	r3, r3, #16
 8009b8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a0e      	ldr	r2, [pc, #56]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b98:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b9a:	f7f8 f8b9 	bl	8001d10 <HAL_GetTick>
 8009b9e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ba0:	e008      	b.n	8009bb4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ba2:	f7f8 f8b5 	bl	8001d10 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d901      	bls.n	8009bb4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e006      	b.n	8009bc2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bb4:	4b05      	ldr	r3, [pc, #20]	@ (8009bcc <RCCEx_PLL3_Config+0x128>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0f0      	beq.n	8009ba2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	46020c00 	.word	0x46020c00
 8009bd0:	80800000 	.word	0x80800000

08009bd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e0fb      	b.n	8009dde <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a7f      	ldr	r2, [pc, #508]	@ (8009de8 <HAL_SPI_Init+0x214>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d004      	beq.n	8009bfa <HAL_SPI_Init+0x26>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a7d      	ldr	r2, [pc, #500]	@ (8009dec <HAL_SPI_Init+0x218>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	e000      	b.n	8009bfc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009bfa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a78      	ldr	r2, [pc, #480]	@ (8009de8 <HAL_SPI_Init+0x214>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d004      	beq.n	8009c16 <HAL_SPI_Init+0x42>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a76      	ldr	r2, [pc, #472]	@ (8009dec <HAL_SPI_Init+0x218>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d105      	bne.n	8009c22 <HAL_SPI_Init+0x4e>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	2b0f      	cmp	r3, #15
 8009c1c:	d901      	bls.n	8009c22 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e0dd      	b.n	8009dde <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fba2 	bl	800a36c <SPI_GetPacketSize>
 8009c28:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8009de8 <HAL_SPI_Init+0x214>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d004      	beq.n	8009c3e <HAL_SPI_Init+0x6a>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a6c      	ldr	r2, [pc, #432]	@ (8009dec <HAL_SPI_Init+0x218>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d102      	bne.n	8009c44 <HAL_SPI_Init+0x70>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d816      	bhi.n	8009c72 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c48:	4a69      	ldr	r2, [pc, #420]	@ (8009df0 <HAL_SPI_Init+0x21c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00e      	beq.n	8009c6c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a68      	ldr	r2, [pc, #416]	@ (8009df4 <HAL_SPI_Init+0x220>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d009      	beq.n	8009c6c <HAL_SPI_Init+0x98>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a66      	ldr	r2, [pc, #408]	@ (8009df8 <HAL_SPI_Init+0x224>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d004      	beq.n	8009c6c <HAL_SPI_Init+0x98>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a65      	ldr	r2, [pc, #404]	@ (8009dfc <HAL_SPI_Init+0x228>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d104      	bne.n	8009c76 <HAL_SPI_Init+0xa2>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b10      	cmp	r3, #16
 8009c70:	d901      	bls.n	8009c76 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e0b3      	b.n	8009dde <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f7 f9c6 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f022 0201 	bic.w	r2, r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009cb2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009cbc:	d119      	bne.n	8009cf2 <HAL_SPI_Init+0x11e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009cc6:	d103      	bne.n	8009cd0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d008      	beq.n	8009ce2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10c      	bne.n	8009cf2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ce0:	d107      	bne.n	8009cf2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cf0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00f      	beq.n	8009d1e <HAL_SPI_Init+0x14a>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	2b06      	cmp	r3, #6
 8009d04:	d90b      	bls.n	8009d1e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	e007      	b.n	8009d2e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	69da      	ldr	r2, [r3, #28]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d36:	431a      	orrs	r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d40:	ea42 0103 	orr.w	r1, r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68da      	ldr	r2, [r3, #12]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	431a      	orrs	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d94:	431a      	orrs	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d9a:	ea42 0103 	orr.w	r1, r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	46002000 	.word	0x46002000
 8009dec:	56002000 	.word	0x56002000
 8009df0:	40013000 	.word	0x40013000
 8009df4:	50013000 	.word	0x50013000
 8009df8:	40003800 	.word	0x40003800
 8009dfc:	50003800 	.word	0x50003800

08009e00 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08a      	sub	sp, #40	@ 0x28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009e18:	6a3a      	ldr	r2, [r7, #32]
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009e32:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3330      	adds	r3, #48	@ 0x30
 8009e3a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d010      	beq.n	8009e68 <HAL_SPI_IRQHandler+0x68>
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	f003 0308 	and.w	r3, r3, #8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699a      	ldr	r2, [r3, #24]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e5e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f9bf 	bl	800a1e4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009e66:	e19a      	b.n	800a19e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d113      	bne.n	8009e9a <HAL_SPI_IRQHandler+0x9a>
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	f003 0320 	and.w	r3, r3, #32
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10e      	bne.n	8009e9a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
    handled = 1UL;
 8009e96:	2301      	movs	r3, #1
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10f      	bne.n	8009ec4 <HAL_SPI_IRQHandler+0xc4>
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d105      	bne.n	8009ec4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	4798      	blx	r3
    handled = 1UL;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10f      	bne.n	8009eee <HAL_SPI_IRQHandler+0xee>
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00a      	beq.n	8009eee <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d105      	bne.n	8009eee <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
    handled = 1UL;
 8009eea:	2301      	movs	r3, #1
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f040 814f 	bne.w	800a194 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	f003 0308 	and.w	r3, r3, #8
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 808b 	beq.w	800a018 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	699a      	ldr	r2, [r3, #24]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0208 	orr.w	r2, r2, #8
 8009f10:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	699a      	ldr	r2, [r3, #24]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0210 	orr.w	r2, r2, #16
 8009f20:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f30:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0208 	bic.w	r2, r2, #8
 8009f40:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d13d      	bne.n	8009fcc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009f50:	e036      	b.n	8009fc0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	2b0f      	cmp	r3, #15
 8009f58:	d90b      	bls.n	8009f72 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009f64:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009f70:	e01d      	b.n	8009fae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b07      	cmp	r3, #7
 8009f78:	d90b      	bls.n	8009f92 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	8812      	ldrh	r2, [r2, #0]
 8009f82:	b292      	uxth	r2, r2
 8009f84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f8a:	1c9a      	adds	r2, r3, #2
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009f90:	e00d      	b.n	8009fae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f9e:	7812      	ldrb	r2, [r2, #0]
 8009fa0:	b2d2      	uxtb	r2, r2
 8009fa2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1c2      	bne.n	8009f52 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f92d 	bl	800a22c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f8f3 	bl	800a1d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009fea:	e0d8      	b.n	800a19e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009fec:	7cfb      	ldrb	r3, [r7, #19]
 8009fee:	2b05      	cmp	r3, #5
 8009ff0:	d103      	bne.n	8009ffa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f002 f992 	bl	800c31c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009ff8:	e0ce      	b.n	800a198 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009ffa:	7cfb      	ldrb	r3, [r7, #19]
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d103      	bne.n	800a008 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f8db 	bl	800a1bc <HAL_SPI_RxCpltCallback>
    return;
 800a006:	e0c7      	b.n	800a198 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a008:	7cfb      	ldrb	r3, [r7, #19]
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	f040 80c4 	bne.w	800a198 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f8c9 	bl	800a1a8 <HAL_SPI_TxCpltCallback>
    return;
 800a016:	e0bf      	b.n	800a198 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 80bd 	beq.w	800a19e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00f      	beq.n	800a04e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a034:	f043 0204 	orr.w	r2, r3, #4
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699a      	ldr	r2, [r3, #24]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a04c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00f      	beq.n	800a078 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a05e:	f043 0201 	orr.w	r2, r3, #1
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a076:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00f      	beq.n	800a0a2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a088:	f043 0208 	orr.w	r2, r3, #8
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	699a      	ldr	r2, [r3, #24]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0a0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	f003 0320 	and.w	r3, r3, #32
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00f      	beq.n	800a0cc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699a      	ldr	r2, [r3, #24]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0220 	orr.w	r2, r2, #32
 800a0ca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d062      	beq.n	800a19c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0201 	bic.w	r2, r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800a0f4:	f023 0303 	bic.w	r3, r3, #3
 800a0f8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a100:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a104:	d13e      	bne.n	800a184 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a114:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d015      	beq.n	800a14c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a126:	4a1f      	ldr	r2, [pc, #124]	@ (800a1a4 <HAL_SPI_IRQHandler+0x3a4>)
 800a128:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a130:	4618      	mov	r0, r3
 800a132:	f7f9 fd11 	bl	8003b58 <HAL_DMA_Abort_IT>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a142:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a152:	2b00      	cmp	r3, #0
 800a154:	d022      	beq.n	800a19c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a15c:	4a11      	ldr	r2, [pc, #68]	@ (800a1a4 <HAL_SPI_IRQHandler+0x3a4>)
 800a15e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a166:	4618      	mov	r0, r3
 800a168:	f7f9 fcf6 	bl	8003b58 <HAL_DMA_Abort_IT>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d014      	beq.n	800a19c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a178:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a182:	e00b      	b.n	800a19c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f81f 	bl	800a1d0 <HAL_SPI_ErrorCallback>
    return;
 800a192:	e003      	b.n	800a19c <HAL_SPI_IRQHandler+0x39c>
    return;
 800a194:	bf00      	nop
 800a196:	e002      	b.n	800a19e <HAL_SPI_IRQHandler+0x39e>
    return;
 800a198:	bf00      	nop
 800a19a:	e000      	b.n	800a19e <HAL_SPI_IRQHandler+0x39e>
    return;
 800a19c:	bf00      	nop
  }
}
 800a19e:	3728      	adds	r7, #40	@ 0x28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	0800a1f9 	.word	0x0800a1f9

0800a1a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a204:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff ffd6 	bl	800a1d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a224:	bf00      	nop
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	699a      	ldr	r2, [r3, #24]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f042 0208 	orr.w	r2, r2, #8
 800a24a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f042 0210 	orr.w	r2, r2, #16
 800a25a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 0201 	bic.w	r2, r2, #1
 800a26a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	6812      	ldr	r2, [r2, #0]
 800a276:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a27a:	f023 0303 	bic.w	r3, r3, #3
 800a27e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689a      	ldr	r2, [r3, #8]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a28e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d014      	beq.n	800a2c6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00f      	beq.n	800a2c6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	699a      	ldr	r2, [r3, #24]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f042 0220 	orr.w	r2, r2, #32
 800a2c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d014      	beq.n	800a2fc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00f      	beq.n	800a2fc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2e2:	f043 0204 	orr.w	r2, r3, #4
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	699a      	ldr	r2, [r3, #24]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00f      	beq.n	800a326 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a30c:	f043 0201 	orr.w	r2, r3, #1
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a324:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00f      	beq.n	800a350 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a336:	f043 0208 	orr.w	r2, r3, #8
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699a      	ldr	r2, [r3, #24]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a34e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800a360:	bf00      	nop
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a378:	095b      	lsrs	r3, r3, #5
 800a37a:	3301      	adds	r3, #1
 800a37c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	3301      	adds	r3, #1
 800a384:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	3307      	adds	r3, #7
 800a38a:	08db      	lsrs	r3, r3, #3
 800a38c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	fb02 f303 	mul.w	r3, r2, r3
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d12e      	bne.n	800a416 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d101      	bne.n	800a3c6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e028      	b.n	800a418 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f022 0201 	bic.w	r2, r2, #1
 800a3e4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800a3f2:	ea42 0103 	orr.w	r1, r2, r3
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	e000      	b.n	800a418 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
  }
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e049      	b.n	800a4ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7f7 f99e 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2202      	movs	r2, #2
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3304      	adds	r3, #4
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f000 fb52 	bl	800ab0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e049      	b.n	800a578 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d106      	bne.n	800a4fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f841 	bl	800a580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2202      	movs	r2, #2
 800a502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4619      	mov	r1, r3
 800a510:	4610      	mov	r0, r2
 800a512:	f000 fafb 	bl	800ab0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e097      	b.n	800a6d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d106      	bne.n	800a5c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7f7 f845 	bl	800164c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a5d8:	f023 0307 	bic.w	r3, r3, #7
 800a5dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f000 fa8f 	bl	800ab0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a616:	f023 0303 	bic.w	r3, r3, #3
 800a61a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	021b      	lsls	r3, r3, #8
 800a626:	4313      	orrs	r3, r2
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a634:	f023 030c 	bic.w	r3, r3, #12
 800a638:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a640:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	4313      	orrs	r3, r2
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	011a      	lsls	r2, r3, #4
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	031b      	lsls	r3, r3, #12
 800a664:	4313      	orrs	r3, r2
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	4313      	orrs	r3, r2
 800a66a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a672:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a67a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	011b      	lsls	r3, r3, #4
 800a686:	4313      	orrs	r3, r2
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d101      	bne.n	800a6fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e0ff      	b.n	800a8fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b14      	cmp	r3, #20
 800a70a:	f200 80f0 	bhi.w	800a8ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a70e:	a201      	add	r2, pc, #4	@ (adr r2, 800a714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a714:	0800a769 	.word	0x0800a769
 800a718:	0800a8ef 	.word	0x0800a8ef
 800a71c:	0800a8ef 	.word	0x0800a8ef
 800a720:	0800a8ef 	.word	0x0800a8ef
 800a724:	0800a7a9 	.word	0x0800a7a9
 800a728:	0800a8ef 	.word	0x0800a8ef
 800a72c:	0800a8ef 	.word	0x0800a8ef
 800a730:	0800a8ef 	.word	0x0800a8ef
 800a734:	0800a7eb 	.word	0x0800a7eb
 800a738:	0800a8ef 	.word	0x0800a8ef
 800a73c:	0800a8ef 	.word	0x0800a8ef
 800a740:	0800a8ef 	.word	0x0800a8ef
 800a744:	0800a82b 	.word	0x0800a82b
 800a748:	0800a8ef 	.word	0x0800a8ef
 800a74c:	0800a8ef 	.word	0x0800a8ef
 800a750:	0800a8ef 	.word	0x0800a8ef
 800a754:	0800a86d 	.word	0x0800a86d
 800a758:	0800a8ef 	.word	0x0800a8ef
 800a75c:	0800a8ef 	.word	0x0800a8ef
 800a760:	0800a8ef 	.word	0x0800a8ef
 800a764:	0800a8ad 	.word	0x0800a8ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 facc 	bl	800ad0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0208 	orr.w	r2, r2, #8
 800a782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	699a      	ldr	r2, [r3, #24]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0204 	bic.w	r2, r2, #4
 800a792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6999      	ldr	r1, [r3, #24]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	691a      	ldr	r2, [r3, #16]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	619a      	str	r2, [r3, #24]
      break;
 800a7a6:	e0a5      	b.n	800a8f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68b9      	ldr	r1, [r7, #8]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fb6e 	bl	800ae90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699a      	ldr	r2, [r3, #24]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	699a      	ldr	r2, [r3, #24]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6999      	ldr	r1, [r3, #24]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	021a      	lsls	r2, r3, #8
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	430a      	orrs	r2, r1
 800a7e6:	619a      	str	r2, [r3, #24]
      break;
 800a7e8:	e084      	b.n	800a8f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fbfd 	bl	800aff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69da      	ldr	r2, [r3, #28]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f042 0208 	orr.w	r2, r2, #8
 800a804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	69da      	ldr	r2, [r3, #28]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 0204 	bic.w	r2, r2, #4
 800a814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69d9      	ldr	r1, [r3, #28]
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	691a      	ldr	r2, [r3, #16]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	61da      	str	r2, [r3, #28]
      break;
 800a828:	e064      	b.n	800a8f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fc8b 	bl	800b14c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69da      	ldr	r2, [r3, #28]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	69da      	ldr	r2, [r3, #28]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69d9      	ldr	r1, [r3, #28]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	021a      	lsls	r2, r3, #8
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	430a      	orrs	r2, r1
 800a868:	61da      	str	r2, [r3, #28]
      break;
 800a86a:	e043      	b.n	800a8f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	4618      	mov	r0, r3
 800a874:	f000 fd1a 	bl	800b2ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0208 	orr.w	r2, r2, #8
 800a886:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0204 	bic.w	r2, r2, #4
 800a896:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	691a      	ldr	r2, [r3, #16]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a8aa:	e023      	b.n	800a8f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 fd7c 	bl	800b3b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	021a      	lsls	r2, r3, #8
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a8ec:	e002      	b.n	800a8f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop

0800a908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_TIM_ConfigClockSource+0x1c>
 800a920:	2302      	movs	r3, #2
 800a922:	e0e6      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x1ea>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a942:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a94e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a67      	ldr	r2, [pc, #412]	@ (800aafc <HAL_TIM_ConfigClockSource+0x1f4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f000 80b1 	beq.w	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800a964:	4a65      	ldr	r2, [pc, #404]	@ (800aafc <HAL_TIM_ConfigClockSource+0x1f4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f200 80b6 	bhi.w	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a96c:	4a64      	ldr	r2, [pc, #400]	@ (800ab00 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	f000 80a9 	beq.w	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800a974:	4a62      	ldr	r2, [pc, #392]	@ (800ab00 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a976:	4293      	cmp	r3, r2
 800a978:	f200 80ae 	bhi.w	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a97c:	4a61      	ldr	r2, [pc, #388]	@ (800ab04 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f000 80a1 	beq.w	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800a984:	4a5f      	ldr	r2, [pc, #380]	@ (800ab04 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a986:	4293      	cmp	r3, r2
 800a988:	f200 80a6 	bhi.w	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a98c:	4a5e      	ldr	r2, [pc, #376]	@ (800ab08 <HAL_TIM_ConfigClockSource+0x200>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	f000 8099 	beq.w	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800a994:	4a5c      	ldr	r2, [pc, #368]	@ (800ab08 <HAL_TIM_ConfigClockSource+0x200>)
 800a996:	4293      	cmp	r3, r2
 800a998:	f200 809e 	bhi.w	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a99c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9a0:	f000 8091 	beq.w	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800a9a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9a8:	f200 8096 	bhi.w	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9b0:	f000 8089 	beq.w	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800a9b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9b8:	f200 808e 	bhi.w	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9c0:	d03e      	beq.n	800aa40 <HAL_TIM_ConfigClockSource+0x138>
 800a9c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9c6:	f200 8087 	bhi.w	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ce:	f000 8086 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1d6>
 800a9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9d6:	d87f      	bhi.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9d8:	2b70      	cmp	r3, #112	@ 0x70
 800a9da:	d01a      	beq.n	800aa12 <HAL_TIM_ConfigClockSource+0x10a>
 800a9dc:	2b70      	cmp	r3, #112	@ 0x70
 800a9de:	d87b      	bhi.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9e0:	2b60      	cmp	r3, #96	@ 0x60
 800a9e2:	d050      	beq.n	800aa86 <HAL_TIM_ConfigClockSource+0x17e>
 800a9e4:	2b60      	cmp	r3, #96	@ 0x60
 800a9e6:	d877      	bhi.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9e8:	2b50      	cmp	r3, #80	@ 0x50
 800a9ea:	d03c      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x15e>
 800a9ec:	2b50      	cmp	r3, #80	@ 0x50
 800a9ee:	d873      	bhi.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9f0:	2b40      	cmp	r3, #64	@ 0x40
 800a9f2:	d058      	beq.n	800aaa6 <HAL_TIM_ConfigClockSource+0x19e>
 800a9f4:	2b40      	cmp	r3, #64	@ 0x40
 800a9f6:	d86f      	bhi.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9f8:	2b30      	cmp	r3, #48	@ 0x30
 800a9fa:	d064      	beq.n	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800a9fc:	2b30      	cmp	r3, #48	@ 0x30
 800a9fe:	d86b      	bhi.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa00:	2b20      	cmp	r3, #32
 800aa02:	d060      	beq.n	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d867      	bhi.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d05c      	beq.n	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800aa0c:	2b10      	cmp	r3, #16
 800aa0e:	d05a      	beq.n	800aac6 <HAL_TIM_ConfigClockSource+0x1be>
 800aa10:	e062      	b.n	800aad8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa22:	f000 fdc5 	bl	800b5b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	609a      	str	r2, [r3, #8]
      break;
 800aa3e:	e04f      	b.n	800aae0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa50:	f000 fdae 	bl	800b5b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689a      	ldr	r2, [r3, #8]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa62:	609a      	str	r2, [r3, #8]
      break;
 800aa64:	e03c      	b.n	800aae0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa72:	461a      	mov	r2, r3
 800aa74:	f000 fd20 	bl	800b4b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2150      	movs	r1, #80	@ 0x50
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fd79 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800aa84:	e02c      	b.n	800aae0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa92:	461a      	mov	r2, r3
 800aa94:	f000 fd3f 	bl	800b516 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2160      	movs	r1, #96	@ 0x60
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 fd69 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800aaa4:	e01c      	b.n	800aae0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab2:	461a      	mov	r2, r3
 800aab4:	f000 fd00 	bl	800b4b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2140      	movs	r1, #64	@ 0x40
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 fd59 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800aac4:	e00c      	b.n	800aae0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f000 fd50 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800aad6:	e003      	b.n	800aae0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	73fb      	strb	r3, [r7, #15]
      break;
 800aadc:	e000      	b.n	800aae0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800aade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	00100070 	.word	0x00100070
 800ab00:	00100040 	.word	0x00100040
 800ab04:	00100030 	.word	0x00100030
 800ab08:	00100020 	.word	0x00100020

0800ab0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a6b      	ldr	r2, [pc, #428]	@ (800accc <TIM_Base_SetConfig+0x1c0>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d02b      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a6a      	ldr	r2, [pc, #424]	@ (800acd0 <TIM_Base_SetConfig+0x1c4>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d027      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab32:	d023      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab3a:	d01f      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a65      	ldr	r2, [pc, #404]	@ (800acd4 <TIM_Base_SetConfig+0x1c8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d01b      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a64      	ldr	r2, [pc, #400]	@ (800acd8 <TIM_Base_SetConfig+0x1cc>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d017      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a63      	ldr	r2, [pc, #396]	@ (800acdc <TIM_Base_SetConfig+0x1d0>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d013      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a62      	ldr	r2, [pc, #392]	@ (800ace0 <TIM_Base_SetConfig+0x1d4>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d00f      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a61      	ldr	r2, [pc, #388]	@ (800ace4 <TIM_Base_SetConfig+0x1d8>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d00b      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a60      	ldr	r2, [pc, #384]	@ (800ace8 <TIM_Base_SetConfig+0x1dc>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d007      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a5f      	ldr	r2, [pc, #380]	@ (800acec <TIM_Base_SetConfig+0x1e0>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d003      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a5e      	ldr	r2, [pc, #376]	@ (800acf0 <TIM_Base_SetConfig+0x1e4>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d108      	bne.n	800ab8e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a4e      	ldr	r2, [pc, #312]	@ (800accc <TIM_Base_SetConfig+0x1c0>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d043      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a4d      	ldr	r2, [pc, #308]	@ (800acd0 <TIM_Base_SetConfig+0x1c4>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d03f      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba4:	d03b      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abac:	d037      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a48      	ldr	r2, [pc, #288]	@ (800acd4 <TIM_Base_SetConfig+0x1c8>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d033      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a47      	ldr	r2, [pc, #284]	@ (800acd8 <TIM_Base_SetConfig+0x1cc>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d02f      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a46      	ldr	r2, [pc, #280]	@ (800acdc <TIM_Base_SetConfig+0x1d0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d02b      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a45      	ldr	r2, [pc, #276]	@ (800ace0 <TIM_Base_SetConfig+0x1d4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d027      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a44      	ldr	r2, [pc, #272]	@ (800ace4 <TIM_Base_SetConfig+0x1d8>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d023      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a43      	ldr	r2, [pc, #268]	@ (800ace8 <TIM_Base_SetConfig+0x1dc>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d01f      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a42      	ldr	r2, [pc, #264]	@ (800acec <TIM_Base_SetConfig+0x1e0>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d01b      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a41      	ldr	r2, [pc, #260]	@ (800acf0 <TIM_Base_SetConfig+0x1e4>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d017      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a40      	ldr	r2, [pc, #256]	@ (800acf4 <TIM_Base_SetConfig+0x1e8>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d013      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a3f      	ldr	r2, [pc, #252]	@ (800acf8 <TIM_Base_SetConfig+0x1ec>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00f      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a3e      	ldr	r2, [pc, #248]	@ (800acfc <TIM_Base_SetConfig+0x1f0>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00b      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a3d      	ldr	r2, [pc, #244]	@ (800ad00 <TIM_Base_SetConfig+0x1f4>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d007      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a3c      	ldr	r2, [pc, #240]	@ (800ad04 <TIM_Base_SetConfig+0x1f8>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_Base_SetConfig+0x112>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a3b      	ldr	r2, [pc, #236]	@ (800ad08 <TIM_Base_SetConfig+0x1fc>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d108      	bne.n	800ac30 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689a      	ldr	r2, [r3, #8]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a1e      	ldr	r2, [pc, #120]	@ (800accc <TIM_Base_SetConfig+0x1c0>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d023      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a1d      	ldr	r2, [pc, #116]	@ (800acd0 <TIM_Base_SetConfig+0x1c4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d01f      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a22      	ldr	r2, [pc, #136]	@ (800acec <TIM_Base_SetConfig+0x1e0>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d01b      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a21      	ldr	r2, [pc, #132]	@ (800acf0 <TIM_Base_SetConfig+0x1e4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d017      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a20      	ldr	r2, [pc, #128]	@ (800acf4 <TIM_Base_SetConfig+0x1e8>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d013      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a1f      	ldr	r2, [pc, #124]	@ (800acf8 <TIM_Base_SetConfig+0x1ec>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d00f      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a1e      	ldr	r2, [pc, #120]	@ (800acfc <TIM_Base_SetConfig+0x1f0>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d00b      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a1d      	ldr	r2, [pc, #116]	@ (800ad00 <TIM_Base_SetConfig+0x1f4>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d007      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a1c      	ldr	r2, [pc, #112]	@ (800ad04 <TIM_Base_SetConfig+0x1f8>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d003      	beq.n	800ac9e <TIM_Base_SetConfig+0x192>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a1b      	ldr	r2, [pc, #108]	@ (800ad08 <TIM_Base_SetConfig+0x1fc>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d103      	bne.n	800aca6 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	691a      	ldr	r2, [r3, #16]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f043 0204 	orr.w	r2, r3, #4
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	601a      	str	r2, [r3, #0]
}
 800acbe:	bf00      	nop
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	40012c00 	.word	0x40012c00
 800acd0:	50012c00 	.word	0x50012c00
 800acd4:	40000400 	.word	0x40000400
 800acd8:	50000400 	.word	0x50000400
 800acdc:	40000800 	.word	0x40000800
 800ace0:	50000800 	.word	0x50000800
 800ace4:	40000c00 	.word	0x40000c00
 800ace8:	50000c00 	.word	0x50000c00
 800acec:	40013400 	.word	0x40013400
 800acf0:	50013400 	.word	0x50013400
 800acf4:	40014000 	.word	0x40014000
 800acf8:	50014000 	.word	0x50014000
 800acfc:	40014400 	.word	0x40014400
 800ad00:	50014400 	.word	0x50014400
 800ad04:	40014800 	.word	0x40014800
 800ad08:	50014800 	.word	0x50014800

0800ad0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	f023 0201 	bic.w	r2, r3, #1
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f023 0303 	bic.w	r3, r3, #3
 800ad46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f023 0302 	bic.w	r3, r3, #2
 800ad58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a40      	ldr	r2, [pc, #256]	@ (800ae68 <TIM_OC1_SetConfig+0x15c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d023      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a3f      	ldr	r2, [pc, #252]	@ (800ae6c <TIM_OC1_SetConfig+0x160>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d01f      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a3e      	ldr	r2, [pc, #248]	@ (800ae70 <TIM_OC1_SetConfig+0x164>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d01b      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a3d      	ldr	r2, [pc, #244]	@ (800ae74 <TIM_OC1_SetConfig+0x168>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d017      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a3c      	ldr	r2, [pc, #240]	@ (800ae78 <TIM_OC1_SetConfig+0x16c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d013      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a3b      	ldr	r2, [pc, #236]	@ (800ae7c <TIM_OC1_SetConfig+0x170>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d00f      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a3a      	ldr	r2, [pc, #232]	@ (800ae80 <TIM_OC1_SetConfig+0x174>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d00b      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a39      	ldr	r2, [pc, #228]	@ (800ae84 <TIM_OC1_SetConfig+0x178>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d007      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a38      	ldr	r2, [pc, #224]	@ (800ae88 <TIM_OC1_SetConfig+0x17c>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d003      	beq.n	800adb4 <TIM_OC1_SetConfig+0xa8>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a37      	ldr	r2, [pc, #220]	@ (800ae8c <TIM_OC1_SetConfig+0x180>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d10c      	bne.n	800adce <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f023 0308 	bic.w	r3, r3, #8
 800adba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f023 0304 	bic.w	r3, r3, #4
 800adcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a25      	ldr	r2, [pc, #148]	@ (800ae68 <TIM_OC1_SetConfig+0x15c>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d023      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a24      	ldr	r2, [pc, #144]	@ (800ae6c <TIM_OC1_SetConfig+0x160>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d01f      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a23      	ldr	r2, [pc, #140]	@ (800ae70 <TIM_OC1_SetConfig+0x164>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d01b      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a22      	ldr	r2, [pc, #136]	@ (800ae74 <TIM_OC1_SetConfig+0x168>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d017      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a21      	ldr	r2, [pc, #132]	@ (800ae78 <TIM_OC1_SetConfig+0x16c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d013      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a20      	ldr	r2, [pc, #128]	@ (800ae7c <TIM_OC1_SetConfig+0x170>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00f      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a1f      	ldr	r2, [pc, #124]	@ (800ae80 <TIM_OC1_SetConfig+0x174>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d00b      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a1e      	ldr	r2, [pc, #120]	@ (800ae84 <TIM_OC1_SetConfig+0x178>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d007      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a1d      	ldr	r2, [pc, #116]	@ (800ae88 <TIM_OC1_SetConfig+0x17c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d003      	beq.n	800ae1e <TIM_OC1_SetConfig+0x112>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a1c      	ldr	r2, [pc, #112]	@ (800ae8c <TIM_OC1_SetConfig+0x180>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d111      	bne.n	800ae42 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	693a      	ldr	r2, [r7, #16]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	621a      	str	r2, [r3, #32]
}
 800ae5c:	bf00      	nop
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	40012c00 	.word	0x40012c00
 800ae6c:	50012c00 	.word	0x50012c00
 800ae70:	40013400 	.word	0x40013400
 800ae74:	50013400 	.word	0x50013400
 800ae78:	40014000 	.word	0x40014000
 800ae7c:	50014000 	.word	0x50014000
 800ae80:	40014400 	.word	0x40014400
 800ae84:	50014400 	.word	0x50014400
 800ae88:	40014800 	.word	0x40014800
 800ae8c:	50014800 	.word	0x50014800

0800ae90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	f023 0210 	bic.w	r2, r3, #16
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	021b      	lsls	r3, r3, #8
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f023 0320 	bic.w	r3, r3, #32
 800aede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a36      	ldr	r2, [pc, #216]	@ (800afc8 <TIM_OC2_SetConfig+0x138>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d00b      	beq.n	800af0c <TIM_OC2_SetConfig+0x7c>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a35      	ldr	r2, [pc, #212]	@ (800afcc <TIM_OC2_SetConfig+0x13c>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d007      	beq.n	800af0c <TIM_OC2_SetConfig+0x7c>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a34      	ldr	r2, [pc, #208]	@ (800afd0 <TIM_OC2_SetConfig+0x140>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d003      	beq.n	800af0c <TIM_OC2_SetConfig+0x7c>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a33      	ldr	r2, [pc, #204]	@ (800afd4 <TIM_OC2_SetConfig+0x144>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d10d      	bne.n	800af28 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	011b      	lsls	r3, r3, #4
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a27      	ldr	r2, [pc, #156]	@ (800afc8 <TIM_OC2_SetConfig+0x138>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d023      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a26      	ldr	r2, [pc, #152]	@ (800afcc <TIM_OC2_SetConfig+0x13c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d01f      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a25      	ldr	r2, [pc, #148]	@ (800afd0 <TIM_OC2_SetConfig+0x140>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d01b      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a24      	ldr	r2, [pc, #144]	@ (800afd4 <TIM_OC2_SetConfig+0x144>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d017      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a23      	ldr	r2, [pc, #140]	@ (800afd8 <TIM_OC2_SetConfig+0x148>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d013      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a22      	ldr	r2, [pc, #136]	@ (800afdc <TIM_OC2_SetConfig+0x14c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d00f      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a21      	ldr	r2, [pc, #132]	@ (800afe0 <TIM_OC2_SetConfig+0x150>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d00b      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a20      	ldr	r2, [pc, #128]	@ (800afe4 <TIM_OC2_SetConfig+0x154>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d007      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a1f      	ldr	r2, [pc, #124]	@ (800afe8 <TIM_OC2_SetConfig+0x158>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d003      	beq.n	800af78 <TIM_OC2_SetConfig+0xe8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a1e      	ldr	r2, [pc, #120]	@ (800afec <TIM_OC2_SetConfig+0x15c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d113      	bne.n	800afa0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	4313      	orrs	r3, r2
 800af92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	685a      	ldr	r2, [r3, #4]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	621a      	str	r2, [r3, #32]
}
 800afba:	bf00      	nop
 800afbc:	371c      	adds	r7, #28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	40012c00 	.word	0x40012c00
 800afcc:	50012c00 	.word	0x50012c00
 800afd0:	40013400 	.word	0x40013400
 800afd4:	50013400 	.word	0x50013400
 800afd8:	40014000 	.word	0x40014000
 800afdc:	50014000 	.word	0x50014000
 800afe0:	40014400 	.word	0x40014400
 800afe4:	50014400 	.word	0x50014400
 800afe8:	40014800 	.word	0x40014800
 800afec:	50014800 	.word	0x50014800

0800aff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b01e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 0303 	bic.w	r3, r3, #3
 800b02a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	4313      	orrs	r3, r2
 800b034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b03c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	4313      	orrs	r3, r2
 800b048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a35      	ldr	r2, [pc, #212]	@ (800b124 <TIM_OC3_SetConfig+0x134>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00b      	beq.n	800b06a <TIM_OC3_SetConfig+0x7a>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a34      	ldr	r2, [pc, #208]	@ (800b128 <TIM_OC3_SetConfig+0x138>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d007      	beq.n	800b06a <TIM_OC3_SetConfig+0x7a>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a33      	ldr	r2, [pc, #204]	@ (800b12c <TIM_OC3_SetConfig+0x13c>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d003      	beq.n	800b06a <TIM_OC3_SetConfig+0x7a>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a32      	ldr	r2, [pc, #200]	@ (800b130 <TIM_OC3_SetConfig+0x140>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d10d      	bne.n	800b086 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	021b      	lsls	r3, r3, #8
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a26      	ldr	r2, [pc, #152]	@ (800b124 <TIM_OC3_SetConfig+0x134>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d023      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a25      	ldr	r2, [pc, #148]	@ (800b128 <TIM_OC3_SetConfig+0x138>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d01f      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a24      	ldr	r2, [pc, #144]	@ (800b12c <TIM_OC3_SetConfig+0x13c>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d01b      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a23      	ldr	r2, [pc, #140]	@ (800b130 <TIM_OC3_SetConfig+0x140>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d017      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a22      	ldr	r2, [pc, #136]	@ (800b134 <TIM_OC3_SetConfig+0x144>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d013      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a21      	ldr	r2, [pc, #132]	@ (800b138 <TIM_OC3_SetConfig+0x148>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d00f      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a20      	ldr	r2, [pc, #128]	@ (800b13c <TIM_OC3_SetConfig+0x14c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00b      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a1f      	ldr	r2, [pc, #124]	@ (800b140 <TIM_OC3_SetConfig+0x150>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d007      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a1e      	ldr	r2, [pc, #120]	@ (800b144 <TIM_OC3_SetConfig+0x154>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d003      	beq.n	800b0d6 <TIM_OC3_SetConfig+0xe6>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b148 <TIM_OC3_SetConfig+0x158>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d113      	bne.n	800b0fe <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	011b      	lsls	r3, r3, #4
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	621a      	str	r2, [r3, #32]
}
 800b118:	bf00      	nop
 800b11a:	371c      	adds	r7, #28
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	40012c00 	.word	0x40012c00
 800b128:	50012c00 	.word	0x50012c00
 800b12c:	40013400 	.word	0x40013400
 800b130:	50013400 	.word	0x50013400
 800b134:	40014000 	.word	0x40014000
 800b138:	50014000 	.word	0x50014000
 800b13c:	40014400 	.word	0x40014400
 800b140:	50014400 	.word	0x50014400
 800b144:	40014800 	.word	0x40014800
 800b148:	50014800 	.word	0x50014800

0800b14c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b087      	sub	sp, #28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a1b      	ldr	r3, [r3, #32]
 800b160:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b17a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	021b      	lsls	r3, r3, #8
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	4313      	orrs	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b19a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	031b      	lsls	r3, r3, #12
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a36      	ldr	r2, [pc, #216]	@ (800b284 <TIM_OC4_SetConfig+0x138>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d00b      	beq.n	800b1c8 <TIM_OC4_SetConfig+0x7c>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a35      	ldr	r2, [pc, #212]	@ (800b288 <TIM_OC4_SetConfig+0x13c>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d007      	beq.n	800b1c8 <TIM_OC4_SetConfig+0x7c>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a34      	ldr	r2, [pc, #208]	@ (800b28c <TIM_OC4_SetConfig+0x140>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d003      	beq.n	800b1c8 <TIM_OC4_SetConfig+0x7c>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a33      	ldr	r2, [pc, #204]	@ (800b290 <TIM_OC4_SetConfig+0x144>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d10d      	bne.n	800b1e4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b1ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	031b      	lsls	r3, r3, #12
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b1e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a27      	ldr	r2, [pc, #156]	@ (800b284 <TIM_OC4_SetConfig+0x138>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d023      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a26      	ldr	r2, [pc, #152]	@ (800b288 <TIM_OC4_SetConfig+0x13c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d01f      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a25      	ldr	r2, [pc, #148]	@ (800b28c <TIM_OC4_SetConfig+0x140>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d01b      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a24      	ldr	r2, [pc, #144]	@ (800b290 <TIM_OC4_SetConfig+0x144>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d017      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a23      	ldr	r2, [pc, #140]	@ (800b294 <TIM_OC4_SetConfig+0x148>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d013      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a22      	ldr	r2, [pc, #136]	@ (800b298 <TIM_OC4_SetConfig+0x14c>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00f      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a21      	ldr	r2, [pc, #132]	@ (800b29c <TIM_OC4_SetConfig+0x150>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d00b      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a20      	ldr	r2, [pc, #128]	@ (800b2a0 <TIM_OC4_SetConfig+0x154>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d007      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a1f      	ldr	r2, [pc, #124]	@ (800b2a4 <TIM_OC4_SetConfig+0x158>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d003      	beq.n	800b234 <TIM_OC4_SetConfig+0xe8>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a1e      	ldr	r2, [pc, #120]	@ (800b2a8 <TIM_OC4_SetConfig+0x15c>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d113      	bne.n	800b25c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b23a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b242:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	019b      	lsls	r3, r3, #6
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	019b      	lsls	r3, r3, #6
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	621a      	str	r2, [r3, #32]
}
 800b276:	bf00      	nop
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	40012c00 	.word	0x40012c00
 800b288:	50012c00 	.word	0x50012c00
 800b28c:	40013400 	.word	0x40013400
 800b290:	50013400 	.word	0x50013400
 800b294:	40014000 	.word	0x40014000
 800b298:	50014000 	.word	0x50014000
 800b29c:	40014400 	.word	0x40014400
 800b2a0:	50014400 	.word	0x50014400
 800b2a4:	40014800 	.word	0x40014800
 800b2a8:	50014800 	.word	0x50014800

0800b2ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b2f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	041b      	lsls	r3, r3, #16
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a21      	ldr	r2, [pc, #132]	@ (800b388 <TIM_OC5_SetConfig+0xdc>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d023      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a20      	ldr	r2, [pc, #128]	@ (800b38c <TIM_OC5_SetConfig+0xe0>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d01f      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a1f      	ldr	r2, [pc, #124]	@ (800b390 <TIM_OC5_SetConfig+0xe4>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d01b      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a1e      	ldr	r2, [pc, #120]	@ (800b394 <TIM_OC5_SetConfig+0xe8>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d017      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a1d      	ldr	r2, [pc, #116]	@ (800b398 <TIM_OC5_SetConfig+0xec>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d013      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a1c      	ldr	r2, [pc, #112]	@ (800b39c <TIM_OC5_SetConfig+0xf0>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00f      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a1b      	ldr	r2, [pc, #108]	@ (800b3a0 <TIM_OC5_SetConfig+0xf4>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d00b      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a1a      	ldr	r2, [pc, #104]	@ (800b3a4 <TIM_OC5_SetConfig+0xf8>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d007      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a19      	ldr	r2, [pc, #100]	@ (800b3a8 <TIM_OC5_SetConfig+0xfc>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d003      	beq.n	800b34e <TIM_OC5_SetConfig+0xa2>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a18      	ldr	r2, [pc, #96]	@ (800b3ac <TIM_OC5_SetConfig+0x100>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d109      	bne.n	800b362 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b354:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	021b      	lsls	r3, r3, #8
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	4313      	orrs	r3, r2
 800b360:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	697a      	ldr	r2, [r7, #20]
 800b366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	621a      	str	r2, [r3, #32]
}
 800b37c:	bf00      	nop
 800b37e:	371c      	adds	r7, #28
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	40012c00 	.word	0x40012c00
 800b38c:	50012c00 	.word	0x50012c00
 800b390:	40013400 	.word	0x40013400
 800b394:	50013400 	.word	0x50013400
 800b398:	40014000 	.word	0x40014000
 800b39c:	50014000 	.word	0x50014000
 800b3a0:	40014400 	.word	0x40014400
 800b3a4:	50014400 	.word	0x50014400
 800b3a8:	40014800 	.word	0x40014800
 800b3ac:	50014800 	.word	0x50014800

0800b3b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	051b      	lsls	r3, r3, #20
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	4313      	orrs	r3, r2
 800b402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a22      	ldr	r2, [pc, #136]	@ (800b490 <TIM_OC6_SetConfig+0xe0>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d023      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a21      	ldr	r2, [pc, #132]	@ (800b494 <TIM_OC6_SetConfig+0xe4>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d01f      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a20      	ldr	r2, [pc, #128]	@ (800b498 <TIM_OC6_SetConfig+0xe8>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d01b      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a1f      	ldr	r2, [pc, #124]	@ (800b49c <TIM_OC6_SetConfig+0xec>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d017      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a1e      	ldr	r2, [pc, #120]	@ (800b4a0 <TIM_OC6_SetConfig+0xf0>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d013      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a1d      	ldr	r2, [pc, #116]	@ (800b4a4 <TIM_OC6_SetConfig+0xf4>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00f      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1c      	ldr	r2, [pc, #112]	@ (800b4a8 <TIM_OC6_SetConfig+0xf8>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00b      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a1b      	ldr	r2, [pc, #108]	@ (800b4ac <TIM_OC6_SetConfig+0xfc>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d007      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a1a      	ldr	r2, [pc, #104]	@ (800b4b0 <TIM_OC6_SetConfig+0x100>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_OC6_SetConfig+0xa4>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a19      	ldr	r2, [pc, #100]	@ (800b4b4 <TIM_OC6_SetConfig+0x104>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d109      	bne.n	800b468 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b45a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	029b      	lsls	r3, r3, #10
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	621a      	str	r2, [r3, #32]
}
 800b482:	bf00      	nop
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	40012c00 	.word	0x40012c00
 800b494:	50012c00 	.word	0x50012c00
 800b498:	40013400 	.word	0x40013400
 800b49c:	50013400 	.word	0x50013400
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	50014000 	.word	0x50014000
 800b4a8:	40014400 	.word	0x40014400
 800b4ac:	50014400 	.word	0x50014400
 800b4b0:	40014800 	.word	0x40014800
 800b4b4:	50014800 	.word	0x50014800

0800b4b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	f023 0201 	bic.w	r2, r3, #1
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b4e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f023 030a 	bic.w	r3, r3, #10
 800b4f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	621a      	str	r2, [r3, #32]
}
 800b50a:	bf00      	nop
 800b50c:	371c      	adds	r7, #28
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b516:	b480      	push	{r7}
 800b518:	b087      	sub	sp, #28
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	60f8      	str	r0, [r7, #12]
 800b51e:	60b9      	str	r1, [r7, #8]
 800b520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	f023 0210 	bic.w	r2, r3, #16
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	031b      	lsls	r3, r3, #12
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	4313      	orrs	r3, r2
 800b54a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b552:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	621a      	str	r2, [r3, #32]
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b58c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	f043 0307 	orr.w	r3, r3, #7
 800b59c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	609a      	str	r2, [r3, #8]
}
 800b5a4:	bf00      	nop
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	021a      	lsls	r2, r3, #8
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	609a      	str	r2, [r3, #8]
}
 800b5e4:	bf00      	nop
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b600:	2b01      	cmp	r3, #1
 800b602:	d101      	bne.n	800b608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b604:	2302      	movs	r3, #2
 800b606:	e097      	b.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a45      	ldr	r2, [pc, #276]	@ (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d00e      	beq.n	800b650 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a44      	ldr	r2, [pc, #272]	@ (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d009      	beq.n	800b650 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a42      	ldr	r2, [pc, #264]	@ (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d004      	beq.n	800b650 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a41      	ldr	r2, [pc, #260]	@ (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d108      	bne.n	800b662 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4313      	orrs	r3, r2
 800b660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b66c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4313      	orrs	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a2f      	ldr	r2, [pc, #188]	@ (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d040      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a2e      	ldr	r2, [pc, #184]	@ (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d03b      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b69c:	d036      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b6a6:	d031      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a29      	ldr	r2, [pc, #164]	@ (800b754 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d02c      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a28      	ldr	r2, [pc, #160]	@ (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d027      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a26      	ldr	r2, [pc, #152]	@ (800b75c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d022      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a25      	ldr	r2, [pc, #148]	@ (800b760 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d01d      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a23      	ldr	r2, [pc, #140]	@ (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d018      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a22      	ldr	r2, [pc, #136]	@ (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d013      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a18      	ldr	r2, [pc, #96]	@ (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d00e      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a17      	ldr	r2, [pc, #92]	@ (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d009      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b76c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d004      	beq.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a1a      	ldr	r2, [pc, #104]	@ (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d10c      	bne.n	800b726 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b712:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	40012c00 	.word	0x40012c00
 800b748:	50012c00 	.word	0x50012c00
 800b74c:	40013400 	.word	0x40013400
 800b750:	50013400 	.word	0x50013400
 800b754:	40000400 	.word	0x40000400
 800b758:	50000400 	.word	0x50000400
 800b75c:	40000800 	.word	0x40000800
 800b760:	50000800 	.word	0x50000800
 800b764:	40000c00 	.word	0x40000c00
 800b768:	50000c00 	.word	0x50000c00
 800b76c:	40014000 	.word	0x40014000
 800b770:	50014000 	.word	0x50014000

0800b774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d101      	bne.n	800b790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b78c:	2302      	movs	r3, #2
 800b78e:	e07d      	b.n	800b88c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	041b      	lsls	r3, r3, #16
 800b806:	4313      	orrs	r3, r2
 800b808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a1e      	ldr	r2, [pc, #120]	@ (800b898 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00e      	beq.n	800b840 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a1d      	ldr	r2, [pc, #116]	@ (800b89c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d009      	beq.n	800b840 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a1b      	ldr	r2, [pc, #108]	@ (800b8a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d004      	beq.n	800b840 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a1a      	ldr	r2, [pc, #104]	@ (800b8a4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d11c      	bne.n	800b87a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84a:	051b      	lsls	r3, r3, #20
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b868:	4313      	orrs	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	40012c00 	.word	0x40012c00
 800b89c:	50012c00 	.word	0x50012c00
 800b8a0:	40013400 	.word	0x40013400
 800b8a4:	50013400 	.word	0x50013400

0800b8a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d101      	bne.n	800b8ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e042      	b.n	800b940 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d106      	bne.n	800b8d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7f6 f845 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2224      	movs	r2, #36	@ 0x24
 800b8d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 0201 	bic.w	r2, r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f9c0 	bl	800bc78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f825 	bl	800b948 <UART_SetConfig>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b01      	cmp	r3, #1
 800b902:	d101      	bne.n	800b908 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e01b      	b.n	800b940 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689a      	ldr	r2, [r3, #8]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fa3f 	bl	800bdbc <UART_CheckIdleState>
 800b93e:	4603      	mov	r3, r0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b94c:	b094      	sub	sp, #80	@ 0x50
 800b94e:	af00      	add	r7, sp, #0
 800b950:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	4b9b      	ldr	r3, [pc, #620]	@ (800bbcc <UART_SetConfig+0x284>)
 800b95e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	431a      	orrs	r2, r3
 800b96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	431a      	orrs	r2, r3
 800b970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b972:	69db      	ldr	r3, [r3, #28]
 800b974:	4313      	orrs	r3, r2
 800b976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4994      	ldr	r1, [pc, #592]	@ (800bbd0 <UART_SetConfig+0x288>)
 800b980:	4019      	ands	r1, r3
 800b982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b988:	430b      	orrs	r3, r1
 800b98a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b998:	68d9      	ldr	r1, [r3, #12]
 800b99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	ea40 0301 	orr.w	r3, r0, r1
 800b9a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	4b87      	ldr	r3, [pc, #540]	@ (800bbcc <UART_SetConfig+0x284>)
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d009      	beq.n	800b9c8 <UART_SetConfig+0x80>
 800b9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	4b86      	ldr	r3, [pc, #536]	@ (800bbd4 <UART_SetConfig+0x28c>)
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d004      	beq.n	800b9c8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c0:	6a1a      	ldr	r2, [r3, #32]
 800b9c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b9d2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e6:	f023 000f 	bic.w	r0, r3, #15
 800b9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	ea40 0301 	orr.w	r3, r0, r1
 800b9f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	4b76      	ldr	r3, [pc, #472]	@ (800bbd8 <UART_SetConfig+0x290>)
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d102      	bne.n	800ba08 <UART_SetConfig+0xc0>
 800ba02:	2301      	movs	r3, #1
 800ba04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba06:	e021      	b.n	800ba4c <UART_SetConfig+0x104>
 800ba08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	4b73      	ldr	r3, [pc, #460]	@ (800bbdc <UART_SetConfig+0x294>)
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d102      	bne.n	800ba18 <UART_SetConfig+0xd0>
 800ba12:	2304      	movs	r3, #4
 800ba14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba16:	e019      	b.n	800ba4c <UART_SetConfig+0x104>
 800ba18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	4b70      	ldr	r3, [pc, #448]	@ (800bbe0 <UART_SetConfig+0x298>)
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d102      	bne.n	800ba28 <UART_SetConfig+0xe0>
 800ba22:	2308      	movs	r3, #8
 800ba24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba26:	e011      	b.n	800ba4c <UART_SetConfig+0x104>
 800ba28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	4b6d      	ldr	r3, [pc, #436]	@ (800bbe4 <UART_SetConfig+0x29c>)
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d102      	bne.n	800ba38 <UART_SetConfig+0xf0>
 800ba32:	2310      	movs	r3, #16
 800ba34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba36:	e009      	b.n	800ba4c <UART_SetConfig+0x104>
 800ba38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	4b63      	ldr	r3, [pc, #396]	@ (800bbcc <UART_SetConfig+0x284>)
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d102      	bne.n	800ba48 <UART_SetConfig+0x100>
 800ba42:	2320      	movs	r3, #32
 800ba44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba46:	e001      	b.n	800ba4c <UART_SetConfig+0x104>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	4b5e      	ldr	r3, [pc, #376]	@ (800bbcc <UART_SetConfig+0x284>)
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d004      	beq.n	800ba60 <UART_SetConfig+0x118>
 800ba56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	4b5e      	ldr	r3, [pc, #376]	@ (800bbd4 <UART_SetConfig+0x28c>)
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d172      	bne.n	800bb46 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ba60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba62:	2200      	movs	r2, #0
 800ba64:	623b      	str	r3, [r7, #32]
 800ba66:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ba6c:	f7fc fe6e 	bl	800874c <HAL_RCCEx_GetPeriphCLKFreq>
 800ba70:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 80e7 	beq.w	800bc48 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7e:	4a5a      	ldr	r2, [pc, #360]	@ (800bbe8 <UART_SetConfig+0x2a0>)
 800ba80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba84:	461a      	mov	r2, r3
 800ba86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba8c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	4613      	mov	r3, r2
 800ba94:	005b      	lsls	r3, r3, #1
 800ba96:	4413      	add	r3, r2
 800ba98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d305      	bcc.n	800baaa <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800baa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d903      	bls.n	800bab2 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bab0:	e048      	b.n	800bb44 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bab4:	2200      	movs	r2, #0
 800bab6:	61bb      	str	r3, [r7, #24]
 800bab8:	61fa      	str	r2, [r7, #28]
 800baba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800babe:	4a4a      	ldr	r2, [pc, #296]	@ (800bbe8 <UART_SetConfig+0x2a0>)
 800bac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2200      	movs	r2, #0
 800bac8:	613b      	str	r3, [r7, #16]
 800baca:	617a      	str	r2, [r7, #20]
 800bacc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bad0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bad4:	f7f4 fbd0 	bl	8000278 <__aeabi_uldivmod>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4610      	mov	r0, r2
 800bade:	4619      	mov	r1, r3
 800bae0:	f04f 0200 	mov.w	r2, #0
 800bae4:	f04f 0300 	mov.w	r3, #0
 800bae8:	020b      	lsls	r3, r1, #8
 800baea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800baee:	0202      	lsls	r2, r0, #8
 800baf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800baf2:	6849      	ldr	r1, [r1, #4]
 800baf4:	0849      	lsrs	r1, r1, #1
 800baf6:	2000      	movs	r0, #0
 800baf8:	460c      	mov	r4, r1
 800bafa:	4605      	mov	r5, r0
 800bafc:	eb12 0804 	adds.w	r8, r2, r4
 800bb00:	eb43 0905 	adc.w	r9, r3, r5
 800bb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	60bb      	str	r3, [r7, #8]
 800bb0c:	60fa      	str	r2, [r7, #12]
 800bb0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb12:	4640      	mov	r0, r8
 800bb14:	4649      	mov	r1, r9
 800bb16:	f7f4 fbaf 	bl	8000278 <__aeabi_uldivmod>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4613      	mov	r3, r2
 800bb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb28:	d308      	bcc.n	800bb3c <UART_SetConfig+0x1f4>
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb30:	d204      	bcs.n	800bb3c <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800bb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb38:	60da      	str	r2, [r3, #12]
 800bb3a:	e003      	b.n	800bb44 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bb42:	e081      	b.n	800bc48 <UART_SetConfig+0x300>
 800bb44:	e080      	b.n	800bc48 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb48:	69db      	ldr	r3, [r3, #28]
 800bb4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb4e:	d14d      	bne.n	800bbec <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bb50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb52:	2200      	movs	r2, #0
 800bb54:	603b      	str	r3, [r7, #0]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb5c:	f7fc fdf6 	bl	800874c <HAL_RCCEx_GetPeriphCLKFreq>
 800bb60:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d06f      	beq.n	800bc48 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6c:	4a1e      	ldr	r2, [pc, #120]	@ (800bbe8 <UART_SetConfig+0x2a0>)
 800bb6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb72:	461a      	mov	r2, r3
 800bb74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb76:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb7a:	005a      	lsls	r2, r3, #1
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	085b      	lsrs	r3, r3, #1
 800bb82:	441a      	add	r2, r3
 800bb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb90:	2b0f      	cmp	r3, #15
 800bb92:	d916      	bls.n	800bbc2 <UART_SetConfig+0x27a>
 800bb94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb9a:	d212      	bcs.n	800bbc2 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	f023 030f 	bic.w	r3, r3, #15
 800bba4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba8:	085b      	lsrs	r3, r3, #1
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	f003 0307 	and.w	r3, r3, #7
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bbbe:	60da      	str	r2, [r3, #12]
 800bbc0:	e042      	b.n	800bc48 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bbc8:	e03e      	b.n	800bc48 <UART_SetConfig+0x300>
 800bbca:	bf00      	nop
 800bbcc:	46002400 	.word	0x46002400
 800bbd0:	cfff69f3 	.word	0xcfff69f3
 800bbd4:	56002400 	.word	0x56002400
 800bbd8:	40013800 	.word	0x40013800
 800bbdc:	40004800 	.word	0x40004800
 800bbe0:	40004c00 	.word	0x40004c00
 800bbe4:	40005000 	.word	0x40005000
 800bbe8:	0800c6b0 	.word	0x0800c6b0
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bbec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbee:	2200      	movs	r2, #0
 800bbf0:	469a      	mov	sl, r3
 800bbf2:	4693      	mov	fp, r2
 800bbf4:	4650      	mov	r0, sl
 800bbf6:	4659      	mov	r1, fp
 800bbf8:	f7fc fda8 	bl	800874c <HAL_RCCEx_GetPeriphCLKFreq>
 800bbfc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d021      	beq.n	800bc48 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc08:	4a1a      	ldr	r2, [pc, #104]	@ (800bc74 <UART_SetConfig+0x32c>)
 800bc0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc12:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	085b      	lsrs	r3, r3, #1
 800bc1c:	441a      	add	r2, r3
 800bc1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc2a:	2b0f      	cmp	r3, #15
 800bc2c:	d909      	bls.n	800bc42 <UART_SetConfig+0x2fa>
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc34:	d205      	bcs.n	800bc42 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60da      	str	r2, [r3, #12]
 800bc40:	e002      	b.n	800bc48 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc52:	2201      	movs	r2, #1
 800bc54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc60:	2200      	movs	r2, #0
 800bc62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3750      	adds	r7, #80	@ 0x50
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc72:	bf00      	nop
 800bc74:	0800c6b0 	.word	0x0800c6b0

0800bc78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc84:	f003 0308 	and.w	r3, r3, #8
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00a      	beq.n	800bca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	430a      	orrs	r2, r1
 800bca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00a      	beq.n	800bcc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	430a      	orrs	r2, r1
 800bcc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00a      	beq.n	800bce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcea:	f003 0304 	and.w	r3, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	430a      	orrs	r2, r1
 800bd06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0c:	f003 0310 	and.w	r3, r3, #16
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00a      	beq.n	800bd2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd2e:	f003 0320 	and.w	r3, r3, #32
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d01a      	beq.n	800bd8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	430a      	orrs	r2, r1
 800bd6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd76:	d10a      	bne.n	800bd8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	430a      	orrs	r2, r1
 800bd8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00a      	beq.n	800bdb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	430a      	orrs	r2, r1
 800bdae:	605a      	str	r2, [r3, #4]
  }
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b098      	sub	sp, #96	@ 0x60
 800bdc0:	af02      	add	r7, sp, #8
 800bdc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdcc:	f7f5 ffa0 	bl	8001d10 <HAL_GetTick>
 800bdd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0308 	and.w	r3, r3, #8
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d12f      	bne.n	800be40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bde0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bde4:	9300      	str	r3, [sp, #0]
 800bde6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bde8:	2200      	movs	r2, #0
 800bdea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f88e 	bl	800bf10 <UART_WaitOnFlagUntilTimeout>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d022      	beq.n	800be40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be02:	e853 3f00 	ldrex	r3, [r3]
 800be06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be0e:	653b      	str	r3, [r7, #80]	@ 0x50
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	461a      	mov	r2, r3
 800be16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be18:	647b      	str	r3, [r7, #68]	@ 0x44
 800be1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be20:	e841 2300 	strex	r3, r2, [r1]
 800be24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e6      	bne.n	800bdfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2220      	movs	r2, #32
 800be30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e063      	b.n	800bf08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0304 	and.w	r3, r3, #4
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d149      	bne.n	800bee2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be56:	2200      	movs	r2, #0
 800be58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f857 	bl	800bf10 <UART_WaitOnFlagUntilTimeout>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d03c      	beq.n	800bee2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be70:	e853 3f00 	ldrex	r3, [r3]
 800be74:	623b      	str	r3, [r7, #32]
   return(result);
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be86:	633b      	str	r3, [r7, #48]	@ 0x30
 800be88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be8e:	e841 2300 	strex	r3, r2, [r1]
 800be92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1e6      	bne.n	800be68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	60fb      	str	r3, [r7, #12]
   return(result);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3308      	adds	r3, #8
 800beb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800beba:	61fa      	str	r2, [r7, #28]
 800bebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebe:	69b9      	ldr	r1, [r7, #24]
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	e841 2300 	strex	r3, r2, [r1]
 800bec6:	617b      	str	r3, [r7, #20]
   return(result);
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1e5      	bne.n	800be9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bede:	2303      	movs	r3, #3
 800bee0:	e012      	b.n	800bf08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2220      	movs	r2, #32
 800bee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2220      	movs	r2, #32
 800beee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3758      	adds	r7, #88	@ 0x58
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf20:	e04f      	b.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf28:	d04b      	beq.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf2a:	f7f5 fef1 	bl	8001d10 <HAL_GetTick>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d302      	bcc.n	800bf40 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d101      	bne.n	800bf44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf40:	2303      	movs	r3, #3
 800bf42:	e04e      	b.n	800bfe2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0304 	and.w	r3, r3, #4
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d037      	beq.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2b80      	cmp	r3, #128	@ 0x80
 800bf56:	d034      	beq.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b40      	cmp	r3, #64	@ 0x40
 800bf5c:	d031      	beq.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	69db      	ldr	r3, [r3, #28]
 800bf64:	f003 0308 	and.w	r3, r3, #8
 800bf68:	2b08      	cmp	r3, #8
 800bf6a:	d110      	bne.n	800bf8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2208      	movs	r2, #8
 800bf72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f000 f838 	bl	800bfea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e029      	b.n	800bfe2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	69db      	ldr	r3, [r3, #28]
 800bf94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf9c:	d111      	bne.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 f81e 	bl	800bfea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e00f      	b.n	800bfe2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	69da      	ldr	r2, [r3, #28]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	4013      	ands	r3, r2
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	bf0c      	ite	eq
 800bfd2:	2301      	moveq	r3, #1
 800bfd4:	2300      	movne	r3, #0
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	461a      	mov	r2, r3
 800bfda:	79fb      	ldrb	r3, [r7, #7]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d0a0      	beq.n	800bf22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfea:	b480      	push	{r7}
 800bfec:	b095      	sub	sp, #84	@ 0x54
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bffa:	e853 3f00 	ldrex	r3, [r3]
 800bffe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	461a      	mov	r2, r3
 800c00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c010:	643b      	str	r3, [r7, #64]	@ 0x40
 800c012:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c016:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c018:	e841 2300 	strex	r3, r2, [r1]
 800c01c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1e6      	bne.n	800bff2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3308      	adds	r3, #8
 800c02a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	61fb      	str	r3, [r7, #28]
   return(result);
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c03a:	f023 0301 	bic.w	r3, r3, #1
 800c03e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3308      	adds	r3, #8
 800c046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c04a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e3      	bne.n	800c024 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c060:	2b01      	cmp	r3, #1
 800c062:	d118      	bne.n	800c096 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	e853 3f00 	ldrex	r3, [r3]
 800c070:	60bb      	str	r3, [r7, #8]
   return(result);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f023 0310 	bic.w	r3, r3, #16
 800c078:	647b      	str	r3, [r7, #68]	@ 0x44
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	461a      	mov	r2, r3
 800c080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c082:	61bb      	str	r3, [r7, #24]
 800c084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c086:	6979      	ldr	r1, [r7, #20]
 800c088:	69ba      	ldr	r2, [r7, #24]
 800c08a:	e841 2300 	strex	r3, r2, [r1]
 800c08e:	613b      	str	r3, [r7, #16]
   return(result);
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1e6      	bne.n	800c064 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2220      	movs	r2, #32
 800c09a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c0aa:	bf00      	nop
 800c0ac:	3754      	adds	r7, #84	@ 0x54
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d101      	bne.n	800c0cc <HAL_UARTEx_DisableFifoMode+0x16>
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	e027      	b.n	800c11c <HAL_UARTEx_DisableFifoMode+0x66>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2224      	movs	r2, #36	@ 0x24
 800c0d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 0201 	bic.w	r2, r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c0fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d101      	bne.n	800c140 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c13c:	2302      	movs	r3, #2
 800c13e:	e02d      	b.n	800c19c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2224      	movs	r2, #36	@ 0x24
 800c14c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f022 0201 	bic.w	r2, r2, #1
 800c166:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	430a      	orrs	r2, r1
 800c17a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f84f 	bl	800c220 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2220      	movs	r2, #32
 800c18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d101      	bne.n	800c1bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	e02d      	b.n	800c218 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2224      	movs	r2, #36	@ 0x24
 800c1c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f022 0201 	bic.w	r2, r2, #1
 800c1e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	430a      	orrs	r2, r1
 800c1f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f811 	bl	800c220 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2220      	movs	r2, #32
 800c20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d108      	bne.n	800c242 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c240:	e031      	b.n	800c2a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c242:	2308      	movs	r3, #8
 800c244:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c246:	2308      	movs	r3, #8
 800c248:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	0e5b      	lsrs	r3, r3, #25
 800c252:	b2db      	uxtb	r3, r3
 800c254:	f003 0307 	and.w	r3, r3, #7
 800c258:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	0f5b      	lsrs	r3, r3, #29
 800c262:	b2db      	uxtb	r3, r3
 800c264:	f003 0307 	and.w	r3, r3, #7
 800c268:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	7b3a      	ldrb	r2, [r7, #12]
 800c26e:	4911      	ldr	r1, [pc, #68]	@ (800c2b4 <UARTEx_SetNbDataToProcess+0x94>)
 800c270:	5c8a      	ldrb	r2, [r1, r2]
 800c272:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c276:	7b3a      	ldrb	r2, [r7, #12]
 800c278:	490f      	ldr	r1, [pc, #60]	@ (800c2b8 <UARTEx_SetNbDataToProcess+0x98>)
 800c27a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c27c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c280:	b29a      	uxth	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	7b7a      	ldrb	r2, [r7, #13]
 800c28c:	4909      	ldr	r1, [pc, #36]	@ (800c2b4 <UARTEx_SetNbDataToProcess+0x94>)
 800c28e:	5c8a      	ldrb	r2, [r1, r2]
 800c290:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c294:	7b7a      	ldrb	r2, [r7, #13]
 800c296:	4908      	ldr	r1, [pc, #32]	@ (800c2b8 <UARTEx_SetNbDataToProcess+0x98>)
 800c298:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c29a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c2a6:	bf00      	nop
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	0800c6c8 	.word	0x0800c6c8
 800c2b8:	0800c6d0 	.word	0x0800c6d0

0800c2bc <_ZN10ring_queueILj128EVhEC1Ev>:
		int16_t tail;
		int16_t head;
		int16_t length;
		const uint16_t cap = SIZE;
	public:
		ring_queue()
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
		{
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2280      	movs	r2, #128	@ 0x80
 800c2c8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
			tail = -1;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2d2:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
			head = 0;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
			length = 0;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
		}
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <_Z41__static_initialization_and_destruction_0v>:
extern "C" GETCHAR_PROTOTYPE
{
	//return Communicate_TerminalRecv();
	return Communicate_RxPopData();

}
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
ring_queue<TRX_BUFFER_SIZE,volatile uint8_t> tx_buffer;
 800c2f8:	4803      	ldr	r0, [pc, #12]	@ (800c308 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800c2fa:	f7ff ffdf 	bl	800c2bc <_ZN10ring_queueILj128EVhEC1Ev>
ring_queue<TRX_BUFFER_SIZE,volatile uint8_t> rx_buffer;
 800c2fe:	4803      	ldr	r0, [pc, #12]	@ (800c30c <_Z41__static_initialization_and_destruction_0v+0x18>)
 800c300:	f7ff ffdc 	bl	800c2bc <_ZN10ring_queueILj128EVhEC1Ev>
}
 800c304:	bf00      	nop
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20000640 	.word	0x20000640
 800c30c:	200006c8 	.word	0x200006c8

0800c310 <_GLOBAL__sub_I_tx_buffer>:
 800c310:	b580      	push	{r7, lr}
 800c312:	af00      	add	r7, sp, #0
 800c314:	f7ff ffee 	bl	800c2f4 <_Z41__static_initialization_and_destruction_0v>
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <HAL_SPI_TxRxCpltCallback>:
	//HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
	HAL_SPI_DMAStop(&hspi2);
}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi){
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	    //HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);

		gyro_data[x_axis] = (((int16_t)imu_value[2]<<8 ) | ( (int16_t)imu_value[1]&0x00ff ) );
 800c324:	4b26      	ldr	r3, [pc, #152]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c326:	789b      	ldrb	r3, [r3, #2]
 800c328:	b21b      	sxth	r3, r3
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	b21a      	sxth	r2, r3
 800c32e:	4b24      	ldr	r3, [pc, #144]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c330:	785b      	ldrb	r3, [r3, #1]
 800c332:	b21b      	sxth	r3, r3
 800c334:	4313      	orrs	r3, r2
 800c336:	b21a      	sxth	r2, r3
 800c338:	4b22      	ldr	r3, [pc, #136]	@ (800c3c4 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800c33a:	801a      	strh	r2, [r3, #0]
		gyro_data[y_axis] = (((int16_t)imu_value[4]<<8 ) | ( (int16_t)imu_value[3]&0x00ff ) );
 800c33c:	4b20      	ldr	r3, [pc, #128]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c33e:	791b      	ldrb	r3, [r3, #4]
 800c340:	b21b      	sxth	r3, r3
 800c342:	021b      	lsls	r3, r3, #8
 800c344:	b21a      	sxth	r2, r3
 800c346:	4b1e      	ldr	r3, [pc, #120]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c348:	78db      	ldrb	r3, [r3, #3]
 800c34a:	b21b      	sxth	r3, r3
 800c34c:	4313      	orrs	r3, r2
 800c34e:	b21a      	sxth	r2, r3
 800c350:	4b1c      	ldr	r3, [pc, #112]	@ (800c3c4 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800c352:	805a      	strh	r2, [r3, #2]
		gyro_data[z_axis] = (((int16_t)imu_value[6]<<8 ) | ( (int16_t)imu_value[5]&0x00ff ) );
 800c354:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c356:	799b      	ldrb	r3, [r3, #6]
 800c358:	b21b      	sxth	r3, r3
 800c35a:	021b      	lsls	r3, r3, #8
 800c35c:	b21a      	sxth	r2, r3
 800c35e:	4b18      	ldr	r3, [pc, #96]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c360:	795b      	ldrb	r3, [r3, #5]
 800c362:	b21b      	sxth	r3, r3
 800c364:	4313      	orrs	r3, r2
 800c366:	b21a      	sxth	r2, r3
 800c368:	4b16      	ldr	r3, [pc, #88]	@ (800c3c4 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800c36a:	809a      	strh	r2, [r3, #4]
		accel_data[x_axis] = (((int16_t)imu_value[8]<<8 ) | ( (int16_t)imu_value[7]&0x00ff ) );
 800c36c:	4b14      	ldr	r3, [pc, #80]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c36e:	7a1b      	ldrb	r3, [r3, #8]
 800c370:	b21b      	sxth	r3, r3
 800c372:	021b      	lsls	r3, r3, #8
 800c374:	b21a      	sxth	r2, r3
 800c376:	4b12      	ldr	r3, [pc, #72]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c378:	79db      	ldrb	r3, [r3, #7]
 800c37a:	b21b      	sxth	r3, r3
 800c37c:	4313      	orrs	r3, r2
 800c37e:	b21a      	sxth	r2, r3
 800c380:	4b11      	ldr	r3, [pc, #68]	@ (800c3c8 <HAL_SPI_TxRxCpltCallback+0xac>)
 800c382:	801a      	strh	r2, [r3, #0]
		accel_data[y_axis] = (((int16_t)imu_value[10]<<8 ) | ( (int16_t)imu_value[9]&0x00ff ) );
 800c384:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c386:	7a9b      	ldrb	r3, [r3, #10]
 800c388:	b21b      	sxth	r3, r3
 800c38a:	021b      	lsls	r3, r3, #8
 800c38c:	b21a      	sxth	r2, r3
 800c38e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c390:	7a5b      	ldrb	r3, [r3, #9]
 800c392:	b21b      	sxth	r3, r3
 800c394:	4313      	orrs	r3, r2
 800c396:	b21a      	sxth	r2, r3
 800c398:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c8 <HAL_SPI_TxRxCpltCallback+0xac>)
 800c39a:	805a      	strh	r2, [r3, #2]
		accel_data[z_axis] = (((int16_t)imu_value[12]<<8 ) | ( (int16_t)imu_value[11]&0x00ff ) );
 800c39c:	4b08      	ldr	r3, [pc, #32]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c39e:	7b1b      	ldrb	r3, [r3, #12]
 800c3a0:	b21b      	sxth	r3, r3
 800c3a2:	021b      	lsls	r3, r3, #8
 800c3a4:	b21a      	sxth	r2, r3
 800c3a6:	4b06      	ldr	r3, [pc, #24]	@ (800c3c0 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800c3a8:	7adb      	ldrb	r3, [r3, #11]
 800c3aa:	b21b      	sxth	r3, r3
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	b21a      	sxth	r2, r3
 800c3b0:	4b05      	ldr	r3, [pc, #20]	@ (800c3c8 <HAL_SPI_TxRxCpltCallback+0xac>)
 800c3b2:	809a      	strh	r2, [r3, #4]

		//IMU_read_DMA_Start();
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	20000750 	.word	0x20000750
 800c3c4:	20000768 	.word	0x20000768
 800c3c8:	20000760 	.word	0x20000760

0800c3cc <Sensor_TurnOffLED>:
										 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

//static uint16_t		adc_value[NUM_ADC];		// AD変換値

void Sensor_TurnOffLED()
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	71fb      	strb	r3, [r7, #7]
 800c3d6:	e012      	b.n	800c3fe <Sensor_TurnOffLED+0x32>
		led_on_pattern[i] = 0x00000000;
 800c3d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3dc:	4a0d      	ldr	r2, [pc, #52]	@ (800c414 <Sensor_TurnOffLED+0x48>)
 800c3de:	2100      	movs	r1, #0
 800c3e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		led_off_pattern[i] = (uint32_t)SENSOR_ALL_PATTERN << 16;
 800c3e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3e8:	4a0b      	ldr	r2, [pc, #44]	@ (800c418 <Sensor_TurnOffLED+0x4c>)
 800c3ea:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 800c3ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 800c3f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	71fb      	strb	r3, [r7, #7]
 800c3fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c402:	2b09      	cmp	r3, #9
 800c404:	dde8      	ble.n	800c3d8 <Sensor_TurnOffLED+0xc>
	}
}
 800c406:	bf00      	nop
 800c408:	bf00      	nop
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr
 800c414:	20000770 	.word	0x20000770
 800c418:	20000798 	.word	0x20000798

0800c41c <Sensor_TurnOnLED>:

void Sensor_TurnOnLED()
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
	Sensor_TurnOffLED();
 800c420:	f7ff ffd4 	bl	800c3cc <Sensor_TurnOffLED>
	led_on_pattern[LED_SL_ON] = IR1_Pin;
 800c424:	4b06      	ldr	r3, [pc, #24]	@ (800c440 <Sensor_TurnOnLED+0x24>)
 800c426:	2201      	movs	r2, #1
 800c428:	619a      	str	r2, [r3, #24]
	led_on_pattern[LED_SR_ON] = IR2_Pin;
 800c42a:	4b05      	ldr	r3, [pc, #20]	@ (800c440 <Sensor_TurnOnLED+0x24>)
 800c42c:	2202      	movs	r2, #2
 800c42e:	611a      	str	r2, [r3, #16]
	led_on_pattern[LED_FL_ON] = IR3_Pin;
 800c430:	4b03      	ldr	r3, [pc, #12]	@ (800c440 <Sensor_TurnOnLED+0x24>)
 800c432:	2204      	movs	r2, #4
 800c434:	609a      	str	r2, [r3, #8]
	led_on_pattern[LED_FR_ON] = IR4_Pin;
 800c436:	4b02      	ldr	r3, [pc, #8]	@ (800c440 <Sensor_TurnOnLED+0x24>)
 800c438:	2208      	movs	r2, #8
 800c43a:	601a      	str	r2, [r3, #0]
}
 800c43c:	bf00      	nop
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	20000770 	.word	0x20000770

0800c444 <Sensor_Initialize>:

void Sensor_Initialize()
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b0b6      	sub	sp, #216	@ 0xd8
 800c448:	af00      	add	r7, sp, #0

	  Sensor_TurnOnLED();
 800c44a:	f7ff ffe7 	bl	800c41c <Sensor_TurnOnLED>
	  DMA_NodeConfTypeDef nodeConf1,nodeConf2;
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf1, &Node_GPDMA1_Channel0);
 800c44e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800c452:	493b      	ldr	r1, [pc, #236]	@ (800c540 <Sensor_Initialize+0xfc>)
 800c454:	4618      	mov	r0, r3
 800c456:	f7f8 f99b 	bl	8004790 <HAL_DMAEx_List_GetNodeConfig>
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf2, &Node_GPDMA1_Channel1);
 800c45a:	463b      	mov	r3, r7
 800c45c:	4939      	ldr	r1, [pc, #228]	@ (800c544 <Sensor_Initialize+0x100>)
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f8 f996 	bl	8004790 <HAL_DMAEx_List_GetNodeConfig>
	  // 書き換えたい部分だけ変更
	  nodeConf1.SrcAddress = (uint32_t)led_on_pattern;
 800c464:	4b38      	ldr	r3, [pc, #224]	@ (800c548 <Sensor_Initialize+0x104>)
 800c466:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  nodeConf1.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 800c46a:	4b38      	ldr	r3, [pc, #224]	@ (800c54c <Sensor_Initialize+0x108>)
 800c46c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	  nodeConf1.DataSize   = 4*NUM_ADC;
 800c470:	2328      	movs	r3, #40	@ 0x28
 800c472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	  nodeConf2.SrcAddress = (uint32_t)led_off_pattern;
 800c476:	4b36      	ldr	r3, [pc, #216]	@ (800c550 <Sensor_Initialize+0x10c>)
 800c478:	663b      	str	r3, [r7, #96]	@ 0x60
	  nodeConf2.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 800c47a:	4b34      	ldr	r3, [pc, #208]	@ (800c54c <Sensor_Initialize+0x108>)
 800c47c:	667b      	str	r3, [r7, #100]	@ 0x64
	  nodeConf2.DataSize   = 4*NUM_ADC;
 800c47e:	2328      	movs	r3, #40	@ 0x28
 800c480:	66bb      	str	r3, [r7, #104]	@ 0x68

	  // ノードを再構築（再設定）
	  if (HAL_DMAEx_List_BuildNode(&nodeConf1, &Node_GPDMA1_Channel0) != HAL_OK)
 800c482:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800c486:	492e      	ldr	r1, [pc, #184]	@ (800c540 <Sensor_Initialize+0xfc>)
 800c488:	4618      	mov	r0, r3
 800c48a:	f7f8 f96b 	bl	8004764 <HAL_DMAEx_List_BuildNode>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <Sensor_Initialize+0x54>
	      Error_Handler();
 800c494:	f7f4 fd4c 	bl	8000f30 <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800c498:	4a29      	ldr	r2, [pc, #164]	@ (800c540 <Sensor_Initialize+0xfc>)
 800c49a:	2100      	movs	r1, #0
 800c49c:	482d      	ldr	r0, [pc, #180]	@ (800c554 <Sensor_Initialize+0x110>)
 800c49e:	f7f8 f98d 	bl	80047bc <HAL_DMAEx_List_InsertNode>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <Sensor_Initialize+0x68>
	      Error_Handler();
 800c4a8:	f7f4 fd42 	bl	8000f30 <Error_Handler>
	  //Circularモードに
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800c4ac:	4829      	ldr	r0, [pc, #164]	@ (800c554 <Sensor_Initialize+0x110>)
 800c4ae:	f7f8 fa4e 	bl	800494e <HAL_DMAEx_List_SetCircularMode>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <Sensor_Initialize+0x78>
	      Error_Handler();
 800c4b8:	f7f4 fd3a 	bl	8000f30 <Error_Handler>


	  if (HAL_DMAEx_List_BuildNode(&nodeConf2, &Node_GPDMA1_Channel1) != HAL_OK)
 800c4bc:	463b      	mov	r3, r7
 800c4be:	4921      	ldr	r1, [pc, #132]	@ (800c544 <Sensor_Initialize+0x100>)
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7f8 f94f 	bl	8004764 <HAL_DMAEx_List_BuildNode>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d001      	beq.n	800c4d0 <Sensor_Initialize+0x8c>
	      Error_Handler();
 800c4cc:	f7f4 fd30 	bl	8000f30 <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800c4d0:	4a1c      	ldr	r2, [pc, #112]	@ (800c544 <Sensor_Initialize+0x100>)
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	4820      	ldr	r0, [pc, #128]	@ (800c558 <Sensor_Initialize+0x114>)
 800c4d6:	f7f8 f971 	bl	80047bc <HAL_DMAEx_List_InsertNode>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <Sensor_Initialize+0xa0>
	        Error_Handler();
 800c4e0:	f7f4 fd26 	bl	8000f30 <Error_Handler>
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800c4e4:	481c      	ldr	r0, [pc, #112]	@ (800c558 <Sensor_Initialize+0x114>)
 800c4e6:	f7f8 fa32 	bl	800494e <HAL_DMAEx_List_SetCircularMode>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <Sensor_Initialize+0xb0>
	        Error_Handler();
 800c4f0:	f7f4 fd1e 	bl	8000f30 <Error_Handler>


	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel0) != HAL_OK)
 800c4f4:	4819      	ldr	r0, [pc, #100]	@ (800c55c <Sensor_Initialize+0x118>)
 800c4f6:	f7f8 f8a1 	bl	800463c <HAL_DMAEx_List_Start_IT>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <Sensor_Initialize+0xc0>
	  {
		Error_Handler();
 800c500:	f7f4 fd16 	bl	8000f30 <Error_Handler>
	  }

	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel1) != HAL_OK)
 800c504:	4816      	ldr	r0, [pc, #88]	@ (800c560 <Sensor_Initialize+0x11c>)
 800c506:	f7f8 f899 	bl	800463c <HAL_DMAEx_List_Start_IT>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <Sensor_Initialize+0xd0>
	  {
	  	Error_Handler();
 800c510:	f7f4 fd0e 	bl	8000f30 <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_1) != HAL_OK)
 800c514:	2100      	movs	r1, #0
 800c516:	4813      	ldr	r0, [pc, #76]	@ (800c564 <Sensor_Initialize+0x120>)
 800c518:	f7f9 fb26 	bl	8005b68 <HAL_LPTIM_IC_Start>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d001      	beq.n	800c526 <Sensor_Initialize+0xe2>
	  {
	      Error_Handler();
 800c522:	f7f4 fd05 	bl	8000f30 <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_2) != HAL_OK)
 800c526:	2101      	movs	r1, #1
 800c528:	480e      	ldr	r0, [pc, #56]	@ (800c564 <Sensor_Initialize+0x120>)
 800c52a:	f7f9 fb1d 	bl	8005b68 <HAL_LPTIM_IC_Start>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <Sensor_Initialize+0xf4>
	  {
	      Error_Handler();
 800c534:	f7f4 fcfc 	bl	8000f30 <Error_Handler>
	  }

}
 800c538:	bf00      	nop
 800c53a:	37d8      	adds	r7, #216	@ 0xd8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	200001f4 	.word	0x200001f4
 800c544:	20000140 	.word	0x20000140
 800c548:	20000770 	.word	0x20000770
 800c54c:	42020018 	.word	0x42020018
 800c550:	20000798 	.word	0x20000798
 800c554:	20000218 	.word	0x20000218
 800c558:	20000164 	.word	0x20000164
 800c55c:	20000230 	.word	0x20000230
 800c560:	2000017c 	.word	0x2000017c
 800c564:	200002a8 	.word	0x200002a8

0800c568 <memset>:
 800c568:	4402      	add	r2, r0
 800c56a:	4603      	mov	r3, r0
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d100      	bne.n	800c572 <memset+0xa>
 800c570:	4770      	bx	lr
 800c572:	f803 1b01 	strb.w	r1, [r3], #1
 800c576:	e7f9      	b.n	800c56c <memset+0x4>

0800c578 <__libc_init_array>:
 800c578:	b570      	push	{r4, r5, r6, lr}
 800c57a:	4d0d      	ldr	r5, [pc, #52]	@ (800c5b0 <__libc_init_array+0x38>)
 800c57c:	2600      	movs	r6, #0
 800c57e:	4c0d      	ldr	r4, [pc, #52]	@ (800c5b4 <__libc_init_array+0x3c>)
 800c580:	1b64      	subs	r4, r4, r5
 800c582:	10a4      	asrs	r4, r4, #2
 800c584:	42a6      	cmp	r6, r4
 800c586:	d109      	bne.n	800c59c <__libc_init_array+0x24>
 800c588:	4d0b      	ldr	r5, [pc, #44]	@ (800c5b8 <__libc_init_array+0x40>)
 800c58a:	2600      	movs	r6, #0
 800c58c:	4c0b      	ldr	r4, [pc, #44]	@ (800c5bc <__libc_init_array+0x44>)
 800c58e:	f000 f817 	bl	800c5c0 <_init>
 800c592:	1b64      	subs	r4, r4, r5
 800c594:	10a4      	asrs	r4, r4, #2
 800c596:	42a6      	cmp	r6, r4
 800c598:	d105      	bne.n	800c5a6 <__libc_init_array+0x2e>
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a0:	3601      	adds	r6, #1
 800c5a2:	4798      	blx	r3
 800c5a4:	e7ee      	b.n	800c584 <__libc_init_array+0xc>
 800c5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5aa:	3601      	adds	r6, #1
 800c5ac:	4798      	blx	r3
 800c5ae:	e7f2      	b.n	800c596 <__libc_init_array+0x1e>
 800c5b0:	0800c6e0 	.word	0x0800c6e0
 800c5b4:	0800c6e0 	.word	0x0800c6e0
 800c5b8:	0800c6e0 	.word	0x0800c6e0
 800c5bc:	0800c6e8 	.word	0x0800c6e8

0800c5c0 <_init>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_fini>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr
