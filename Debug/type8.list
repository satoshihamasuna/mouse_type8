
type8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015754  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000571  08015990  08015990  00016990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015f04  08015f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08015f0c  08015f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015f14  08015f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d4  20000000  08015f18  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b0c  200001d4  080160ec  000171d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002ce0  080160ec  00017ce0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000171d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f627  00000000  00000000  0001720a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005925  00000000  00000000  00046831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002180  00000000  00000000  0004c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019d9  00000000  00000000  0004e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036ab3  00000000  00000000  0004fcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f176  00000000  00000000  00086764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cfb9  00000000  00000000  000b58da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00202893  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a378  00000000  00000000  002028d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  0020cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	08015974 	.word	0x08015974

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	08015974 	.word	0x08015974

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <MX_ADC1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel4;
DMA_HandleTypeDef handle_GPDMA1_Channel4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f011 f919 	bl	80122bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108a:	4b6f      	ldr	r3, [pc, #444]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 800108c:	4a6f      	ldr	r2, [pc, #444]	@ (800124c <MX_ADC1_Init+0x1d4>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001090:	4b6d      	ldr	r3, [pc, #436]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001096:	4b6c      	ldr	r3, [pc, #432]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800109c:	4b6a      	ldr	r3, [pc, #424]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a2:	4b69      	ldr	r3, [pc, #420]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010a8:	4b67      	ldr	r3, [pc, #412]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ae:	4b66      	ldr	r3, [pc, #408]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b4:	4b64      	ldr	r3, [pc, #400]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ba:	4b63      	ldr	r3, [pc, #396]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 10;
 80010c2:	4b61      	ldr	r3, [pc, #388]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010c4:	220a      	movs	r2, #10
 80010c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80010c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.NbrOfDiscConversion = 1;
 80010d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM1_CH1;
 80010d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010d8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80010dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80010de:	4b5a      	ldr	r3, [pc, #360]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010e6:	4b58      	ldr	r3, [pc, #352]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010ee:	4b56      	ldr	r3, [pc, #344]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f4:	4b54      	ldr	r3, [pc, #336]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010fa:	4b53      	ldr	r3, [pc, #332]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001100:	4b51      	ldr	r3, [pc, #324]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001102:	2203      	movs	r2, #3
 8001104:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001106:	4b50      	ldr	r3, [pc, #320]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110e:	484e      	ldr	r0, [pc, #312]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001110:	f002 faec 	bl	80036ec <HAL_ADC_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800111a:	f000 fe6f 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800111e:	4b4c      	ldr	r3, [pc, #304]	@ (8001250 <MX_ADC1_Init+0x1d8>)
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001122:	2306      	movs	r3, #6
 8001124:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800112e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001130:	2304      	movs	r3, #4
 8001132:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4842      	ldr	r0, [pc, #264]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 800113e:	f003 f921 	bl	8004384 <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001148:	f000 fe58 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800114c:	230c      	movs	r3, #12
 800114e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	483c      	ldr	r0, [pc, #240]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001156:	f003 f915 	bl	8004384 <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001160:	f000 fe4c 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001164:	4b3b      	ldr	r3, [pc, #236]	@ (8001254 <MX_ADC1_Init+0x1dc>)
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001168:	2312      	movs	r3, #18
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4835      	ldr	r0, [pc, #212]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001172:	f003 f907 	bl	8004384 <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800117c:	f000 fe3e 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001180:	2318      	movs	r3, #24
 8001182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	482f      	ldr	r0, [pc, #188]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 800118a:	f003 f8fb 	bl	8004384 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001194:	f000 fe32 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001198:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <MX_ADC1_Init+0x1e0>)
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800119c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4828      	ldr	r0, [pc, #160]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80011a8:	f003 f8ec 	bl	8004384 <HAL_ADC_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 80011b2:	f000 fe23 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80011b6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80011ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4821      	ldr	r0, [pc, #132]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80011c2:	f003 f8df 	bl	8004384 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80011cc:	f000 fe16 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_ADC1_Init+0x1e4>)
 80011d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80011d4:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80011d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	481a      	ldr	r0, [pc, #104]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80011e0:	f003 f8d0 	bl	8004384 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80011ea:	f000 fe07 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80011ee:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 80011fa:	f003 f8c3 	bl	8004384 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8001204:	f000 fdfa 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_ADC1_Init+0x1e8>)
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800120c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001218:	f003 f8b4 	bl	8004384 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001222:	f000 fdeb 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_ADC1_Init+0x1d0>)
 8001232:	f003 f8a7 	bl	8004384 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 800123c:	f000 fdde 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001f0 	.word	0x200001f0
 800124c:	42028000 	.word	0x42028000
 8001250:	2a000400 	.word	0x2a000400
 8001254:	2e000800 	.word	0x2e000800
 8001258:	32001000 	.word	0x32001000
 800125c:	3e008000 	.word	0x3e008000
 8001260:	42010000 	.word	0x42010000

08001264 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2220      	movs	r2, #32
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f011 f823 	bl	80122bc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <MX_ADC4_Init+0xd0>)
 8001278:	4a2f      	ldr	r2, [pc, #188]	@ (8001338 <MX_ADC4_Init+0xd4>)
 800127a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800127c:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <MX_ADC4_Init+0xd0>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001282:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <MX_ADC4_Init+0xd0>)
 8001284:	2204      	movs	r2, #4
 8001286:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <MX_ADC4_Init+0xd0>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 800128e:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <MX_ADC4_Init+0xd0>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <MX_ADC4_Init+0xd0>)
 8001296:	2204      	movs	r2, #4
 8001298:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <MX_ADC4_Init+0xd0>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 1;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012d2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012d6:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80012f2:	4810      	ldr	r0, [pc, #64]	@ (8001334 <MX_ADC4_Init+0xd0>)
 80012f4:	f002 f9fa 	bl	80036ec <HAL_ADC_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC4_Init+0x9e>
  {
    Error_Handler();
 80012fe:	f000 fd7d 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_ADC4_Init+0xd8>)
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130e:	2304      	movs	r3, #4
 8001310:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_ADC4_Init+0xd0>)
 800131c:	f003 f832 	bl	8004384 <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 8001326:	f000 fd69 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000027c 	.word	0x2000027c
 8001338:	46021000 	.word	0x46021000
 800133c:	24000200 	.word	0x24000200

08001340 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0d6      	sub	sp, #344	@ 0x158
 8001344:	af00      	add	r7, sp, #0
 8001346:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800134a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800134e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 8001360:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001364:	226c      	movs	r2, #108	@ 0x6c
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f010 ffa7 	bl	80122bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001372:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001376:	4618      	mov	r0, r3
 8001378:	23b8      	movs	r3, #184	@ 0xb8
 800137a:	461a      	mov	r2, r3
 800137c:	2100      	movs	r1, #0
 800137e:	f010 ff9d 	bl	80122bc <memset>
  if(adcHandle->Instance==ADC1)
 8001382:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001386:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4abe      	ldr	r2, [pc, #760]	@ (8001688 <HAL_ADC_MspInit+0x348>)
 8001390:	4293      	cmp	r3, r2
 8001392:	f040 8111 	bne.w	80015b8 <HAL_ADC_MspInit+0x278>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001396:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800139a:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 800139e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80013aa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80013b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4618      	mov	r0, r3
 80013c0:	f008 f834 	bl	800942c <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_ADC_MspInit+0x8e>
    {
      Error_Handler();
 80013ca:	f000 fd17 	bl	8001dfc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013ce:	4baf      	ldr	r3, [pc, #700]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 80013d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d4:	4aad      	ldr	r2, [pc, #692]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013de:	4bab      	ldr	r3, [pc, #684]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 80013e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80013e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013f6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013fa:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4ba3      	ldr	r3, [pc, #652]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 80013fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001402:	4aa2      	ldr	r2, [pc, #648]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800140c:	4b9f      	ldr	r3, [pc, #636]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 800140e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001412:	f003 0201 	and.w	r2, r3, #1
 8001416:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800141a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001424:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001428:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b98      	ldr	r3, [pc, #608]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 800142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001430:	4a96      	ldr	r2, [pc, #600]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800143a:	4b94      	ldr	r3, [pc, #592]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 800143c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001440:	f003 0202 	and.w	r2, r3, #2
 8001444:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001448:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001452:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001456:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001458:	23e0      	movs	r3, #224	@ 0xe0
 800145a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800146e:	4619      	mov	r1, r3
 8001470:	4887      	ldr	r0, [pc, #540]	@ (8001690 <HAL_ADC_MspInit+0x350>)
 8001472:	f005 fff9 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001476:	2303      	movs	r3, #3
 8001478:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800148c:	4619      	mov	r1, r3
 800148e:	4881      	ldr	r0, [pc, #516]	@ (8001694 <HAL_ADC_MspInit+0x354>)
 8001490:	f005 ffea 	bl	8007468 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001494:	2321      	movs	r3, #33	@ 0x21
 8001496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80014b2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80014b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80014c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.SrcBurstLength = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.DestBurstLength = 1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Mode = DMA_NORMAL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 80014f8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80014fc:	4966      	ldr	r1, [pc, #408]	@ (8001698 <HAL_ADC_MspInit+0x358>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 f8d0 	bl	80066a4 <HAL_DMAEx_List_BuildNode>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_ADC_MspInit+0x1ce>
    {
      Error_Handler();
 800150a:	f000 fc77 	bl	8001dfc <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 800150e:	4a62      	ldr	r2, [pc, #392]	@ (8001698 <HAL_ADC_MspInit+0x358>)
 8001510:	2100      	movs	r1, #0
 8001512:	4862      	ldr	r0, [pc, #392]	@ (800169c <HAL_ADC_MspInit+0x35c>)
 8001514:	f005 f8f2 	bl	80066fc <HAL_DMAEx_List_InsertNode>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_ADC_MspInit+0x1e2>
    {
      Error_Handler();
 800151e:	f000 fc6d 	bl	8001dfc <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8001522:	485e      	ldr	r0, [pc, #376]	@ (800169c <HAL_ADC_MspInit+0x35c>)
 8001524:	f005 f9b3 	bl	800688e <HAL_DMAEx_List_SetCircularMode>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_ADC_MspInit+0x1f2>
    {
      Error_Handler();
 800152e:	f000 fc65 	bl	8001dfc <Error_Handler>
    }

    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8001532:	4b5b      	ldr	r3, [pc, #364]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001534:	4a5b      	ldr	r2, [pc, #364]	@ (80016a4 <HAL_ADC_MspInit+0x364>)
 8001536:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001538:	4b59      	ldr	r3, [pc, #356]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 800153a:	2200      	movs	r2, #0
 800153c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800153e:	4b58      	ldr	r3, [pc, #352]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001540:	2200      	movs	r2, #0
 8001542:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001544:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001546:	2200      	movs	r2, #0
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800154a:	4b55      	ldr	r3, [pc, #340]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 800154c:	2200      	movs	r2, #0
 800154e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001550:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001552:	2281      	movs	r2, #129	@ 0x81
 8001554:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8001556:	4852      	ldr	r0, [pc, #328]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001558:	f004 fee4 	bl	8006324 <HAL_DMAEx_List_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_ADC_MspInit+0x226>
    {
      Error_Handler();
 8001562:	f000 fc4b 	bl	8001dfc <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 8001566:	494d      	ldr	r1, [pc, #308]	@ (800169c <HAL_ADC_MspInit+0x35c>)
 8001568:	484d      	ldr	r0, [pc, #308]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 800156a:	f005 f9f1 	bl	8006950 <HAL_DMAEx_List_LinkQ>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_ADC_MspInit+0x238>
    {
      Error_Handler();
 8001574:	f000 fc42 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel4);
 8001578:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800157c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a47      	ldr	r2, [pc, #284]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001584:	671a      	str	r2, [r3, #112]	@ 0x70
 8001586:	4a46      	ldr	r2, [pc, #280]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001588:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800158c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001594:	2110      	movs	r1, #16
 8001596:	4842      	ldr	r0, [pc, #264]	@ (80016a0 <HAL_ADC_MspInit+0x360>)
 8001598:	f004 fbe2 	bl	8005d60 <HAL_DMA_ConfigChannelAttributes>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 80015a2:	f000 fc2b 	bl	8001dfc <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2025      	movs	r0, #37	@ 0x25
 80015ac:	f003 ff5e 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80015b0:	2025      	movs	r0, #37	@ 0x25
 80015b2:	f003 ff75 	bl	80054a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80015b6:	e061      	b.n	800167c <HAL_ADC_MspInit+0x33c>
  else if(adcHandle->Instance==ADC4)
 80015b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80015bc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a38      	ldr	r2, [pc, #224]	@ (80016a8 <HAL_ADC_MspInit+0x368>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d158      	bne.n	800167c <HAL_ADC_MspInit+0x33c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80015ca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80015ce:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80015d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80015de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80015e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 ff1a 	bl	800942c <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_ADC_MspInit+0x2c2>
      Error_Handler();
 80015fe:	f000 fbfd 	bl	8001dfc <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 8001604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001608:	4a20      	ldr	r2, [pc, #128]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001618:	f003 0220 	and.w	r2, r3, #32
 800161c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001620:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800162a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800162e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 8001632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001636:	4a15      	ldr	r2, [pc, #84]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_ADC_MspInit+0x34c>)
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800164e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001658:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800165c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800165e:	2310      	movs	r3, #16
 8001660:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <HAL_ADC_MspInit+0x350>)
 8001678:	f005 fef6 	bl	8007468 <HAL_GPIO_Init>
}
 800167c:	bf00      	nop
 800167e:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	42028000 	.word	0x42028000
 800168c:	46020c00 	.word	0x46020c00
 8001690:	42020000 	.word	0x42020000
 8001694:	42020400 	.word	0x42020400
 8001698:	20000308 	.word	0x20000308
 800169c:	2000032c 	.word	0x2000032c
 80016a0:	20000344 	.word	0x20000344
 80016a4:	40020250 	.word	0x40020250
 80016a8:	46021000 	.word	0x46021000

080016ac <MX_GPDMA1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09c      	sub	sp, #112	@ 0x70
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  DMA_NodeConfTypeDef NodeConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	226c      	movs	r2, #108	@ 0x6c
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f010 fdff 	bl	80122bc <memset>

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80016be:	4b87      	ldr	r3, [pc, #540]	@ (80018dc <MX_GPDMA1_Init+0x230>)
 80016c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c4:	4a85      	ldr	r2, [pc, #532]	@ (80018dc <MX_GPDMA1_Init+0x230>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80016ce:	4b83      	ldr	r3, [pc, #524]	@ (80018dc <MX_GPDMA1_Init+0x230>)
 80016d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	683b      	ldr	r3, [r7, #0]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	201d      	movs	r0, #29
 80016e2:	f003 fec3 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80016e6:	201d      	movs	r0, #29
 80016e8:	f003 feda 	bl	80054a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	201e      	movs	r0, #30
 80016f2:	f003 febb 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80016f6:	201e      	movs	r0, #30
 80016f8:	f003 fed2 	bl	80054a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	201f      	movs	r0, #31
 8001702:	f003 feb3 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001706:	201f      	movs	r0, #31
 8001708:	f003 feca 	bl	80054a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2020      	movs	r0, #32
 8001712:	f003 feab 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001716:	2020      	movs	r0, #32
 8001718:	f003 fec2 	bl	80054a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2021      	movs	r0, #33	@ 0x21
 8001722:	f003 fea3 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8001726:	2021      	movs	r0, #33	@ 0x21
 8001728:	f003 feba 	bl	80054a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	2022      	movs	r0, #34	@ 0x22
 8001732:	f003 fe9b 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8001736:	2022      	movs	r0, #34	@ 0x22
 8001738:	f003 feb2 	bl	80054a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2023      	movs	r0, #35	@ 0x23
 8001742:	f003 fe93 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 8001746:	2023      	movs	r0, #35	@ 0x23
 8001748:	f003 feaa 	bl	80054a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800174c:	2321      	movs	r3, #33	@ 0x21
 800174e:	607b      	str	r3, [r7, #4]
  NodeConfig.Init.Request = DMA_REQUEST_SW;
 8001750:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001754:	60bb      	str	r3, [r7, #8]
  NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  NodeConfig.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800175a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800175e:	613b      	str	r3, [r7, #16]
  NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001760:	2308      	movs	r3, #8
 8001762:	617b      	str	r3, [r7, #20]
  NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
  NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8001768:	2302      	movs	r3, #2
 800176a:	61fb      	str	r3, [r7, #28]
  NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800176c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001770:	623b      	str	r3, [r7, #32]
  NodeConfig.Init.SrcBurstLength = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
  NodeConfig.Init.DestBurstLength = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
  NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
  NodeConfig.Init.Mode = DMA_NORMAL;
 8001782:	2300      	movs	r3, #0
 8001784:	63bb      	str	r3, [r7, #56]	@ 0x38
  NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_SINGLE_BURST_TRANSFER;
 8001786:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_FALLING;
 800178c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
  NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_LPTIM1_CH2;
 8001792:	230c      	movs	r3, #12
 8001794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	63fb      	str	r3, [r7, #60]	@ 0x3c
  NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800179a:	2300      	movs	r3, #0
 800179c:	643b      	str	r3, [r7, #64]	@ 0x40
  NodeConfig.SrcAddress = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	667b      	str	r3, [r7, #100]	@ 0x64
  NodeConfig.DstAddress = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  NodeConfig.DataSize = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	494c      	ldr	r1, [pc, #304]	@ (80018e0 <MX_GPDMA1_Init+0x234>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 ff78 	bl	80066a4 <HAL_DMAEx_List_BuildNode>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_GPDMA1_Init+0x112>
  {
    Error_Handler();
 80017ba:	f000 fb1f 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80017be:	4a48      	ldr	r2, [pc, #288]	@ (80018e0 <MX_GPDMA1_Init+0x234>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4848      	ldr	r0, [pc, #288]	@ (80018e4 <MX_GPDMA1_Init+0x238>)
 80017c4:	f004 ff9a 	bl	80066fc <HAL_DMAEx_List_InsertNode>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_GPDMA1_Init+0x126>
  {
    Error_Handler();
 80017ce:	f000 fb15 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80017d2:	4844      	ldr	r0, [pc, #272]	@ (80018e4 <MX_GPDMA1_Init+0x238>)
 80017d4:	f005 f85b 	bl	800688e <HAL_DMAEx_List_SetCircularMode>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_GPDMA1_Init+0x136>
  {
    Error_Handler();
 80017de:	f000 fb0d 	bl	8001dfc <Error_Handler>
  }
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80017e2:	4b41      	ldr	r3, [pc, #260]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 80017e4:	4a41      	ldr	r2, [pc, #260]	@ (80018ec <MX_GPDMA1_Init+0x240>)
 80017e6:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80017e8:	4b3f      	ldr	r3, [pc, #252]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 80017ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017ee:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80017f0:	4b3d      	ldr	r3, [pc, #244]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80017f6:	4b3c      	ldr	r3, [pc, #240]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017fc:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001802:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 8001804:	2281      	movs	r2, #129	@ 0x81
 8001806:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001808:	4837      	ldr	r0, [pc, #220]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 800180a:	f004 fd8b 	bl	8006324 <HAL_DMAEx_List_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_GPDMA1_Init+0x16c>
  {
    Error_Handler();
 8001814:	f000 faf2 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8001818:	4932      	ldr	r1, [pc, #200]	@ (80018e4 <MX_GPDMA1_Init+0x238>)
 800181a:	4833      	ldr	r0, [pc, #204]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 800181c:	f005 f898 	bl	8006950 <HAL_DMAEx_List_LinkQ>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_GPDMA1_Init+0x17e>
  {
    Error_Handler();
 8001826:	f000 fae9 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800182a:	2110      	movs	r1, #16
 800182c:	482e      	ldr	r0, [pc, #184]	@ (80018e8 <MX_GPDMA1_Init+0x23c>)
 800182e:	f004 fa97 	bl	8005d60 <HAL_DMA_ConfigChannelAttributes>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_GPDMA1_Init+0x190>
  {
    Error_Handler();
 8001838:	f000 fae0 	bl	8001dfc <Error_Handler>
  }
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 800183c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001840:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	492a      	ldr	r1, [pc, #168]	@ (80018f0 <MX_GPDMA1_Init+0x244>)
 8001846:	4618      	mov	r0, r3
 8001848:	f004 ff2c 	bl	80066a4 <HAL_DMAEx_List_BuildNode>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_GPDMA1_Init+0x1aa>
  {
    Error_Handler();
 8001852:	f000 fad3 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001856:	4a26      	ldr	r2, [pc, #152]	@ (80018f0 <MX_GPDMA1_Init+0x244>)
 8001858:	2100      	movs	r1, #0
 800185a:	4826      	ldr	r0, [pc, #152]	@ (80018f4 <MX_GPDMA1_Init+0x248>)
 800185c:	f004 ff4e 	bl	80066fc <HAL_DMAEx_List_InsertNode>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_GPDMA1_Init+0x1be>
  {
    Error_Handler();
 8001866:	f000 fac9 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800186a:	4822      	ldr	r0, [pc, #136]	@ (80018f4 <MX_GPDMA1_Init+0x248>)
 800186c:	f005 f80f 	bl	800688e <HAL_DMAEx_List_SetCircularMode>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_GPDMA1_Init+0x1ce>
  {
    Error_Handler();
 8001876:	f000 fac1 	bl	8001dfc <Error_Handler>
  }
  handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 800187c:	4a1f      	ldr	r2, [pc, #124]	@ (80018fc <MX_GPDMA1_Init+0x250>)
 800187e:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 8001882:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001886:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 800188a:	2200      	movs	r2, #0
 800188c:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 8001890:	2200      	movs	r2, #0
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 8001896:	2200      	movs	r2, #0
 8001898:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 800189c:	2281      	movs	r2, #129	@ 0x81
 800189e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80018a0:	4815      	ldr	r0, [pc, #84]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 80018a2:	f004 fd3f 	bl	8006324 <HAL_DMAEx_List_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_GPDMA1_Init+0x204>
  {
    Error_Handler();
 80018ac:	f000 faa6 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80018b0:	4910      	ldr	r1, [pc, #64]	@ (80018f4 <MX_GPDMA1_Init+0x248>)
 80018b2:	4811      	ldr	r0, [pc, #68]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 80018b4:	f005 f84c 	bl	8006950 <HAL_DMAEx_List_LinkQ>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_GPDMA1_Init+0x216>
  {
    Error_Handler();
 80018be:	f000 fa9d 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80018c2:	2110      	movs	r1, #16
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <MX_GPDMA1_Init+0x24c>)
 80018c6:	f004 fa4b 	bl	8005d60 <HAL_DMA_ConfigChannelAttributes>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_GPDMA1_Init+0x228>
  {
    Error_Handler();
 80018d0:	f000 fa94 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3770      	adds	r7, #112	@ 0x70
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	46020c00 	.word	0x46020c00
 80018e0:	200003bc 	.word	0x200003bc
 80018e4:	200003e0 	.word	0x200003e0
 80018e8:	200003f8 	.word	0x200003f8
 80018ec:	400200d0 	.word	0x400200d0
 80018f0:	20000470 	.word	0x20000470
 80018f4:	20000494 	.word	0x20000494
 80018f8:	200004ac 	.word	0x200004ac
 80018fc:	40020050 	.word	0x40020050

08001900 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b4e      	ldr	r3, [pc, #312]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a50 <MX_GPIO_Init+0x150>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001926:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001934:	4b46      	ldr	r3, [pc, #280]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193a:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <MX_GPIO_Init+0x150>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001940:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001944:	4b42      	ldr	r3, [pc, #264]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001958:	4a3d      	ldr	r2, [pc, #244]	@ (8001a50 <MX_GPIO_Init+0x150>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001976:	4a36      	ldr	r2, [pc, #216]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001980:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <MX_GPIO_Init+0x150>)
 8001982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED6_Pin|LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001994:	482f      	ldr	r0, [pc, #188]	@ (8001a54 <MX_GPIO_Init+0x154>)
 8001996:	f005 ff3f 	bl	8007818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2103      	movs	r1, #3
 800199e:	482e      	ldr	r0, [pc, #184]	@ (8001a58 <MX_GPIO_Init+0x158>)
 80019a0:	f005 ff3a 	bl	8007818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	210f      	movs	r1, #15
 80019a8:	482c      	ldr	r0, [pc, #176]	@ (8001a5c <MX_GPIO_Init+0x15c>)
 80019aa:	f005 ff35 	bl	8007818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, fn1_Pin|LED1_Pin|NSS_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f241 4104 	movw	r1, #5124	@ 0x1404
 80019b4:	482a      	ldr	r0, [pc, #168]	@ (8001a60 <MX_GPIO_Init+0x160>)
 80019b6:	f005 ff2f 	bl	8007818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED6_Pin LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED5_Pin|LED4_Pin;
 80019ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4820      	ldr	r0, [pc, #128]	@ (8001a54 <MX_GPIO_Init+0x154>)
 80019d4:	f005 fd48 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80019d8:	2303      	movs	r3, #3
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	481a      	ldr	r0, [pc, #104]	@ (8001a58 <MX_GPIO_Init+0x158>)
 80019f0:	f005 fd3a 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR2_Pin IR3_Pin IR4_Pin */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin;
 80019f4:	230f      	movs	r3, #15
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4814      	ldr	r0, [pc, #80]	@ (8001a5c <MX_GPIO_Init+0x15c>)
 8001a0c:	f005 fd2c 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pins : fn1_Pin LED1_Pin NSS_Pin */
  GPIO_InitStruct.Pin = fn1_Pin|LED1_Pin|NSS_Pin;
 8001a10:	f241 4304 	movw	r3, #5124	@ 0x1404
 8001a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <MX_GPIO_Init+0x160>)
 8001a2a:	f005 fd1d 	bl	8007468 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_GPIO_Init+0x158>)
 8001a42:	f005 fd11 	bl	8007468 <HAL_GPIO_Init>

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	46020c00 	.word	0x46020c00
 8001a54:	42020800 	.word	0x42020800
 8001a58:	42021c00 	.word	0x42021c00
 8001a5c:	42020000 	.word	0x42020000
 8001a60:	42020400 	.word	0x42020400

08001a64 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f005 feed 	bl	8007848 <HAL_ICACHE_ConfigAssociativityMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001a74:	f000 f9c2 	bl	8001dfc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001a78:	f005 ff06 	bl	8007888 <HAL_ICACHE_Enable>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001a82:	f000 f9bb 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LPTIM_OC_ConfigTypeDef sConfig1 = {0};
 8001a92:	463b      	mov	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001a9a:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001a9c:	4a24      	ldr	r2, [pc, #144]	@ (8001b30 <MX_LPTIM1_Init+0xa4>)
 8001a9e:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001aa8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aac:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 100;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001ab8:	2264      	movs	r2, #100	@ 0x64
 8001aba:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001adc:	f005 fee4 	bl	80078a8 <HAL_LPTIM_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_LPTIM1_Init+0x5e>
  {
    Error_Handler();
 8001ae6:	f000 f989 	bl	8001dfc <Error_Handler>
  }
  sConfig1.Pulse = 25;
 8001aea:	2319      	movs	r3, #25
 8001aec:	603b      	str	r3, [r7, #0]
  sConfig1.OCPolarity = LPTIM_OCPOLARITY_LOW;
 8001aee:	2301      	movs	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_1) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001afa:	f006 f837 	bl	8007b6c <HAL_LPTIM_OC_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_LPTIM1_Init+0x7c>
  {
    Error_Handler();
 8001b04:	f000 f97a 	bl	8001dfc <Error_Handler>
  }
  sConfig1.Pulse = 50;
 8001b08:	2332      	movs	r3, #50	@ 0x32
 8001b0a:	603b      	str	r3, [r7, #0]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_2) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <MX_LPTIM1_Init+0xa0>)
 8001b14:	f006 f82a 	bl	8007b6c <HAL_LPTIM_OC_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_LPTIM1_Init+0x96>
  {
    Error_Handler();
 8001b1e:	f000 f96d 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000524 	.word	0x20000524
 8001b30:	46004400 	.word	0x46004400

08001b34 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0b2      	sub	sp, #200	@ 0xc8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	22b8      	movs	r2, #184	@ 0xb8
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f010 fbb9 	bl	80122bc <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ba4 <HAL_LPTIM_MspInit+0x70>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d122      	bne.n	8001b9a <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_HSI;
 8001b60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f007 fc5d 	bl	800942c <HAL_RCCEx_PeriphCLKConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8001b78:	f000 f940 	bl	8001dfc <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_LPTIM_MspInit+0x74>)
 8001b7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001b82:	4a09      	ldr	r2, [pc, #36]	@ (8001ba8 <HAL_LPTIM_MspInit+0x74>)
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b88:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_LPTIM_MspInit+0x74>)
 8001b8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	37c8      	adds	r7, #200	@ 0xc8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	46004400 	.word	0x46004400
 8001ba8:	46020c00 	.word	0x46020c00

08001bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb2:	f001 f957 	bl	8002e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb6:	f000 f8b7 	bl	8001d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bba:	f7ff fea1 	bl	8001900 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001bbe:	f7ff fd75 	bl	80016ac <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8001bc2:	f7ff fa59 	bl	8001078 <MX_ADC1_Init>
  MX_ADC4_Init();
 8001bc6:	f7ff fb4d 	bl	8001264 <MX_ADC4_Init>
  MX_ICACHE_Init();
 8001bca:	f7ff ff4b 	bl	8001a64 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8001bce:	f7ff ff5d 	bl	8001a8c <MX_LPTIM1_Init>
  MX_SPI2_Init();
 8001bd2:	f000 f919 	bl	8001e08 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001bd6:	f000 fce5 	bl	80025a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bda:	f000 fd37 	bl	800264c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bde:	f000 fd8b 	bl	80026f8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001be2:	f000 fe21 	bl	8002828 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001be6:	f000 ffc9 	bl	8002b7c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001bea:	f000 fc2b 	bl	8002444 <MX_TIM1_Init>
 	  work_ram_set(i, 0);
   }
  Flash_Load();
*/

  Sensor_Initialize();
 8001bee:	f00f f921 	bl	8010e34 <Sensor_Initialize>
  IMU_initialize();
 8001bf2:	f00e ffc5 	bl	8010b80 <IMU_initialize>
  Communicate_Initialize();
 8001bf6:	f00e fe53 	bl	80108a0 <Communicate_Initialize>
  Encoder_Initialize();
 8001bfa:	f00e ff1b 	bl	8010a34 <Encoder_Initialize>
  Motor_Initialize();
 8001bfe:	f00f f9c7 	bl	8010f90 <Motor_Initialize>
  FAN_Motor_Initialize();
 8001c02:	f00f f9ef 	bl	8010fe4 <FAN_Motor_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Indicate_LED(0xff);
 8001c06:	20ff      	movs	r0, #255	@ 0xff
 8001c08:	f00f f884 	bl	8010d14 <Indicate_LED>
	  IMU_read_DMA_Start();
 8001c0c:	f00e ffec 	bl	8010be8 <IMU_read_DMA_Start>
	  HAL_Delay(200);
 8001c10:	20c8      	movs	r0, #200	@ 0xc8
 8001c12:	f001 f9ed 	bl	8002ff0 <HAL_Delay>
	  Indicate_LED(0x0);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f00f f87c 	bl	8010d14 <Indicate_LED>
	  HAL_Delay(200);
 8001c1c:	20c8      	movs	r0, #200	@ 0xc8
 8001c1e:	f001 f9e7 	bl	8002ff0 <HAL_Delay>
	  printf("hello\n");
 8001c22:	483a      	ldr	r0, [pc, #232]	@ (8001d0c <main+0x160>)
 8001c24:	f010 f98c 	bl	8011f40 <puts>
	  printf("who->%d\n",read_byte(WHO_AM_I));
 8001c28:	200f      	movs	r0, #15
 8001c2a:	f00e ff47 	bl	8010abc <read_byte>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4837      	ldr	r0, [pc, #220]	@ (8001d10 <main+0x164>)
 8001c34:	f010 f91c 	bl	8011e70 <iprintf>
	  printf("%d,%d,%d,%d,",ADC_get_value(0),ADC_get_value(1),ADC_get_value(2),ADC_get_value(3));
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f00f f997 	bl	8010f6c <ADC_get_value>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461c      	mov	r4, r3
 8001c42:	2001      	movs	r0, #1
 8001c44:	f00f f992 	bl	8010f6c <ADC_get_value>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f00f f98d 	bl	8010f6c <ADC_get_value>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461e      	mov	r6, r3
 8001c56:	2003      	movs	r0, #3
 8001c58:	f00f f988 	bl	8010f6c <ADC_get_value>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4633      	mov	r3, r6
 8001c62:	462a      	mov	r2, r5
 8001c64:	4621      	mov	r1, r4
 8001c66:	482b      	ldr	r0, [pc, #172]	@ (8001d14 <main+0x168>)
 8001c68:	f010 f902 	bl	8011e70 <iprintf>
	  printf("%d,%d,%d,%d,",ADC_get_value(4),ADC_get_value(5),ADC_get_value(6),ADC_get_value(7));
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f00f f97d 	bl	8010f6c <ADC_get_value>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461c      	mov	r4, r3
 8001c76:	2005      	movs	r0, #5
 8001c78:	f00f f978 	bl	8010f6c <ADC_get_value>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461d      	mov	r5, r3
 8001c80:	2006      	movs	r0, #6
 8001c82:	f00f f973 	bl	8010f6c <ADC_get_value>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461e      	mov	r6, r3
 8001c8a:	2007      	movs	r0, #7
 8001c8c:	f00f f96e 	bl	8010f6c <ADC_get_value>
 8001c90:	4603      	mov	r3, r0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4633      	mov	r3, r6
 8001c96:	462a      	mov	r2, r5
 8001c98:	4621      	mov	r1, r4
 8001c9a:	481e      	ldr	r0, [pc, #120]	@ (8001d14 <main+0x168>)
 8001c9c:	f010 f8e8 	bl	8011e70 <iprintf>
	  printf("%d,%d\n",ADC_get_value(8),ADC_get_value(9));
 8001ca0:	2008      	movs	r0, #8
 8001ca2:	f00f f963 	bl	8010f6c <ADC_get_value>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461c      	mov	r4, r3
 8001caa:	2009      	movs	r0, #9
 8001cac:	f00f f95e 	bl	8010f6c <ADC_get_value>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	4818      	ldr	r0, [pc, #96]	@ (8001d18 <main+0x16c>)
 8001cb8:	f010 f8da 	bl	8011e70 <iprintf>
	  printf("encoder->%ld,%ld",ENC_CNT_L,ENC_CNT_R);
 8001cbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	4a16      	ldr	r2, [pc, #88]	@ (8001d1c <main+0x170>)
 8001cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4815      	ldr	r0, [pc, #84]	@ (8001d20 <main+0x174>)
 8001cca:	f010 f8d1 	bl	8011e70 <iprintf>
	  printf("gyro->%lf\n",read_gyro_z_axis());
 8001cce:	f00f f801 	bl	8010cd4 <read_gyro_z_axis>
 8001cd2:	ee10 3a10 	vmov	r3, s0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc3a 	bl	8000550 <__aeabi_f2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4810      	ldr	r0, [pc, #64]	@ (8001d24 <main+0x178>)
 8001ce2:	f010 f8c5 	bl	8011e70 <iprintf>
	  printf("%d,%d\n",work_ram_read(2048),work_ram_read(6000));
 8001ce6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001cea:	f00e fed1 	bl	8010a90 <work_ram_read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461c      	mov	r4, r3
 8001cf2:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001cf6:	f00e fecb 	bl	8010a90 <work_ram_read>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4621      	mov	r1, r4
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <main+0x16c>)
 8001d02:	f010 f8b5 	bl	8011e70 <iprintf>
	  Indicate_LED(0xff);
 8001d06:	bf00      	nop
 8001d08:	e77d      	b.n	8001c06 <main+0x5a>
 8001d0a:	bf00      	nop
 8001d0c:	08015990 	.word	0x08015990
 8001d10:	08015998 	.word	0x08015998
 8001d14:	080159a4 	.word	0x080159a4
 8001d18:	080159b4 	.word	0x080159b4
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	080159bc 	.word	0x080159bc
 8001d24:	080159d0 	.word	0x080159d0

08001d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b09e      	sub	sp, #120	@ 0x78
 8001d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	2260      	movs	r2, #96	@ 0x60
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f010 fac0 	bl	80122bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]
 8001d4a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001d4c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001d50:	f006 f824 	bl	8007d9c <HAL_PWREx_ControlVoltageScaling>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001d5a:	f000 f84f 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001d5e:	2312      	movs	r3, #18
 8001d60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d70:	2310      	movs	r3, #16
 8001d72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001d86:	2303      	movs	r3, #3
 8001d88:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001d8a:	230c      	movs	r3, #12
 8001d8c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d92:	2302      	movs	r3, #2
 8001d94:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d96:	2302      	movs	r3, #2
 8001d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	4618      	mov	r0, r3
 8001daa:	f006 f893 	bl	8007ed4 <HAL_RCC_OscConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001db4:	f000 f822 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db8:	231f      	movs	r3, #31
 8001dba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f006 ff59 	bl	8008c8c <HAL_RCC_ClockConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001de0:	f000 f80c 	bl	8001dfc <Error_Handler>
  }

  /** Enable the force of HSI in stop mode
  */
  __HAL_RCC_HSISTOP_ENABLE();
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <SystemClock_Config+0xd0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <SystemClock_Config+0xd0>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	3778      	adds	r7, #120	@ 0x78
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	46020c00 	.word	0x46020c00

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <Error_Handler+0x8>

08001e08 <MX_SPI2_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel6;
DMA_HandleTypeDef handle_GPDMA1_Channel5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e18:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e1a:	4a32      	ldr	r2, [pc, #200]	@ (8001ee4 <MX_SPI2_Init+0xdc>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e2e:	2207      	movs	r2, #7
 8001e30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e44:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e52:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e66:	2207      	movs	r2, #7
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ea6:	480e      	ldr	r0, [pc, #56]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001ea8:	f009 fe34 	bl	800bb14 <HAL_SPI_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_SPI2_Init+0xae>
  {
    Error_Handler();
 8001eb2:	f7ff ffa3 	bl	8001dfc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001eba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_SPI2_Init+0xd8>)
 8001eca:	f00b fa9e 	bl	800d40a <HAL_SPIEx_SetConfigAutonomousMode>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_SPI2_Init+0xd0>
  {
    Error_Handler();
 8001ed4:	f7ff ff92 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000574 	.word	0x20000574
 8001ee4:	40003800 	.word	0x40003800

08001ee8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0b8      	sub	sp, #224	@ 0xe0
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	22b8      	movs	r2, #184	@ 0xb8
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f010 f9d7 	bl	80122bc <memset>
  if(spiHandle->Instance==SPI2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6f      	ldr	r2, [pc, #444]	@ (80020d0 <HAL_SPI_MspInit+0x1e8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	f040 80d6 	bne.w	80020c6 <HAL_SPI_MspInit+0x1de>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001f1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001f26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4618      	mov	r0, r3
 8001f34:	f007 fa7a 	bl	800942c <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 8001f3e:	f7ff ff5d 	bl	8001dfc <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f42:	4b64      	ldr	r3, [pc, #400]	@ (80020d4 <HAL_SPI_MspInit+0x1ec>)
 8001f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f48:	4a62      	ldr	r2, [pc, #392]	@ (80020d4 <HAL_SPI_MspInit+0x1ec>)
 8001f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f52:	4b60      	ldr	r3, [pc, #384]	@ (80020d4 <HAL_SPI_MspInit+0x1ec>)
 8001f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b5c      	ldr	r3, [pc, #368]	@ (80020d4 <HAL_SPI_MspInit+0x1ec>)
 8001f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f66:	4a5b      	ldr	r2, [pc, #364]	@ (80020d4 <HAL_SPI_MspInit+0x1ec>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f70:	4b58      	ldr	r3, [pc, #352]	@ (80020d4 <HAL_SPI_MspInit+0x1ec>)
 8001f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f7e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001f82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f98:	2305      	movs	r3, #5
 8001f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	484c      	ldr	r0, [pc, #304]	@ (80020d8 <HAL_SPI_MspInit+0x1f0>)
 8001fa6:	f005 fa5f 	bl	8007468 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* GPDMA1_REQUEST_SPI2_RX Init */
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
 8001faa:	4b4c      	ldr	r3, [pc, #304]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fac:	4a4c      	ldr	r2, [pc, #304]	@ (80020e0 <HAL_SPI_MspInit+0x1f8>)
 8001fae:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 8001fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel6.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001fb6:	4b49      	ldr	r3, [pc, #292]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel6.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fbc:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel6.Init.SrcInc = DMA_SINC_FIXED;
 8001fc2:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel6.Init.DestInc = DMA_DINC_INCREMENTED;
 8001fc8:	4b44      	ldr	r3, [pc, #272]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fca:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001fce:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel6.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001fd0:	4b42      	ldr	r3, [pc, #264]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel6.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001fd6:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel6.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel6.Init.SrcBurstLength = 1;
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel6.Init.DestBurstLength = 1;
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel6.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel6.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel6.Init.Mode = DMA_NORMAL;
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 8002000:	4836      	ldr	r0, [pc, #216]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8002002:	f003 fb0f 	bl	8005624 <HAL_DMA_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800200c:	f7ff fef6 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle, hdmarx, handle_GPDMA1_Channel6);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a32      	ldr	r2, [pc, #200]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8002014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002018:	4a30      	ldr	r2, [pc, #192]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 800201e:	2110      	movs	r1, #16
 8002020:	482e      	ldr	r0, [pc, #184]	@ (80020dc <HAL_SPI_MspInit+0x1f4>)
 8002022:	f003 fe9d 	bl	8005d60 <HAL_DMA_ConfigChannelAttributes>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 800202c:	f7ff fee6 	bl	8001dfc <Error_Handler>
    }

    /* GPDMA1_REQUEST_SPI2_TX Init */
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8002030:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002032:	4a2d      	ldr	r2, [pc, #180]	@ (80020e8 <HAL_SPI_MspInit+0x200>)
 8002034:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 8002036:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002038:	2209      	movs	r2, #9
 800203a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel5.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800203c:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel5.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002042:	4b28      	ldr	r3, [pc, #160]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002044:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002048:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel5.Init.SrcInc = DMA_SINC_INCREMENTED;
 800204a:	4b26      	ldr	r3, [pc, #152]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 800204c:	2208      	movs	r2, #8
 800204e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel5.Init.DestInc = DMA_DINC_FIXED;
 8002050:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002052:	2200      	movs	r2, #0
 8002054:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel5.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002056:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel5.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel5.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel5.Init.SrcBurstLength = 1;
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 800206a:	2201      	movs	r2, #1
 800206c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel5.Init.DestBurstLength = 1;
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002070:	2201      	movs	r2, #1
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002076:	2200      	movs	r2, #0
 8002078:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel5.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800207a:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel5.Init.Mode = DMA_NORMAL;
 8002080:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002082:	2200      	movs	r2, #0
 8002084:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8002086:	4817      	ldr	r0, [pc, #92]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 8002088:	f003 facc 	bl	8005624 <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_SPI_MspInit+0x1ae>
    {
      Error_Handler();
 8002092:	f7ff feb3 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle, hdmatx, handle_GPDMA1_Channel5);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 800209a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800209e:	4a11      	ldr	r2, [pc, #68]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020a4:	2110      	movs	r1, #16
 80020a6:	480f      	ldr	r0, [pc, #60]	@ (80020e4 <HAL_SPI_MspInit+0x1fc>)
 80020a8:	f003 fe5a 	bl	8005d60 <HAL_DMA_ConfigChannelAttributes>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_SPI_MspInit+0x1ce>
    {
      Error_Handler();
 80020b2:	f7ff fea3 	bl	8001dfc <Error_Handler>
    }

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	203c      	movs	r0, #60	@ 0x3c
 80020bc:	f003 f9d6 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80020c0:	203c      	movs	r0, #60	@ 0x3c
 80020c2:	f003 f9ed 	bl	80054a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020c6:	bf00      	nop
 80020c8:	37e0      	adds	r7, #224	@ 0xe0
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40003800 	.word	0x40003800
 80020d4:	46020c00 	.word	0x46020c00
 80020d8:	42020400 	.word	0x42020400
 80020dc:	20000604 	.word	0x20000604
 80020e0:	40020350 	.word	0x40020350
 80020e4:	2000067c 	.word	0x2000067c
 80020e8:	400202d0 	.word	0x400202d0

080020ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_MspInit+0x30>)
 80020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f8:	4a08      	ldr	r2, [pc, #32]	@ (800211c <HAL_MspInit+0x30>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_MspInit+0x30>)
 8002104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8002110:	f005 fed0 	bl	8007eb4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	46020c00 	.word	0x46020c00

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <NMI_Handler+0x4>

08002128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <MemManage_Handler+0x4>

08002138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <UsageFault_Handler+0x4>

08002148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002176:	f000 ff1b 	bl	8002fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002186:	f003 fc7e 	bl	8005a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200004ac 	.word	0x200004ac

08002194 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <GPDMA1_Channel1_IRQHandler+0x10>)
 800219a:	f003 fc74 	bl	8005a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003f8 	.word	0x200003f8

080021a8 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <GPDMA1_Channel2_IRQHandler+0x10>)
 80021ae:	f003 fc6a 	bl	8005a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000980 	.word	0x20000980

080021bc <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80021c0:	4802      	ldr	r0, [pc, #8]	@ (80021cc <GPDMA1_Channel3_IRQHandler+0x10>)
 80021c2:	f003 fc60 	bl	8005a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000908 	.word	0x20000908

080021d0 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80021d4:	4802      	ldr	r0, [pc, #8]	@ (80021e0 <GPDMA1_Channel4_IRQHandler+0x10>)
 80021d6:	f003 fc56 	bl	8005a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000344 	.word	0x20000344

080021e4 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 80021e8:	4802      	ldr	r0, [pc, #8]	@ (80021f4 <GPDMA1_Channel5_IRQHandler+0x10>)
 80021ea:	f003 fc4c 	bl	8005a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000067c 	.word	0x2000067c

080021f8 <GPDMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 6 global interrupt.
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 0 */

  /* USER CODE END GPDMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel6);
 80021fc:	4802      	ldr	r0, [pc, #8]	@ (8002208 <GPDMA1_Channel6_IRQHandler+0x10>)
 80021fe:	f003 fc42 	bl	8005a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 1 */

  /* USER CODE END GPDMA1_Channel6_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000604 	.word	0x20000604

0800220c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <ADC1_IRQHandler+0x10>)
 8002212:	f001 fe3f 	bl	8003e94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200001f0 	.word	0x200001f0

08002220 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <SPI2_IRQHandler+0x10>)
 8002226:	f00a fd8d 	bl	800cd44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000574 	.word	0x20000574

08002234 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <USART1_IRQHandler+0x10>)
 800223a:	f00c ff6f 	bl	800f11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000874 	.word	0x20000874

08002248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_kill>:

int _kill(int pid, int sig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002262:	f010 f87d 	bl	8012360 <__errno>
 8002266:	4603      	mov	r3, r0
 8002268:	2216      	movs	r2, #22
 800226a:	601a      	str	r2, [r3, #0]
  return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_exit>:

void _exit (int status)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffe7 	bl	8002258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800228a:	bf00      	nop
 800228c:	e7fd      	b.n	800228a <_exit+0x12>

0800228e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e00a      	b.n	80022b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a0:	f00e fb20 	bl	80108e4 <__io_getchar>
 80022a4:	4601      	mov	r1, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	60ba      	str	r2, [r7, #8]
 80022ac:	b2ca      	uxtb	r2, r1
 80022ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dbf0      	blt.n	80022a0 <_read+0x12>
  }

  return len;
 80022be:	687b      	ldr	r3, [r7, #4]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e009      	b.n	80022ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	60ba      	str	r2, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00e faf0 	bl	80108c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3301      	adds	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	dbf1      	blt.n	80022da <_write+0x12>
  }
  return len;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_close>:

int _close(int file)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002328:	605a      	str	r2, [r3, #4]
  return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_isatty>:

int _isatty(int file)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f00f ffe2 	bl	8012360 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20040000 	.word	0x20040000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	200006f4 	.word	0x200006f4
 80023d0:	20002ce0 	.word	0x20002ce0

080023d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023d8:	4b18      	ldr	r3, [pc, #96]	@ (800243c <SystemInit+0x68>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	4a17      	ldr	r2, [pc, #92]	@ (800243c <SystemInit+0x68>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80023e8:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <SystemInit+0x6c>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <SystemInit+0x6c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <SystemInit+0x6c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <SystemInit+0x6c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <SystemInit+0x6c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0e      	ldr	r2, [pc, #56]	@ (8002440 <SystemInit+0x6c>)
 8002406:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800240a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800240e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <SystemInit+0x6c>)
 8002412:	2200      	movs	r2, #0
 8002414:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <SystemInit+0x6c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <SystemInit+0x6c>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002420:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <SystemInit+0x6c>)
 8002424:	2200      	movs	r2, #0
 8002426:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <SystemInit+0x68>)
 800242a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800242e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	46020c00 	.word	0x46020c00

08002444 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09c      	sub	sp, #112	@ 0x70
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002464:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
 8002474:	615a      	str	r2, [r3, #20]
 8002476:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2234      	movs	r2, #52	@ 0x34
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f00f ff1c 	bl	80122bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002484:	4b45      	ldr	r3, [pc, #276]	@ (800259c <MX_TIM1_Init+0x158>)
 8002486:	4a46      	ldr	r2, [pc, #280]	@ (80025a0 <MX_TIM1_Init+0x15c>)
 8002488:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800248a:	4b44      	ldr	r3, [pc, #272]	@ (800259c <MX_TIM1_Init+0x158>)
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002490:	4b42      	ldr	r3, [pc, #264]	@ (800259c <MX_TIM1_Init+0x158>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8002496:	4b41      	ldr	r3, [pc, #260]	@ (800259c <MX_TIM1_Init+0x158>)
 8002498:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800249c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249e:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <MX_TIM1_Init+0x158>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024a4:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <MX_TIM1_Init+0x158>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <MX_TIM1_Init+0x158>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024b0:	483a      	ldr	r0, [pc, #232]	@ (800259c <MX_TIM1_Init+0x158>)
 80024b2:	f00a ffeb 	bl	800d48c <HAL_TIM_Base_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024bc:	f7ff fc9e 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024ca:	4619      	mov	r1, r3
 80024cc:	4833      	ldr	r0, [pc, #204]	@ (800259c <MX_TIM1_Init+0x158>)
 80024ce:	f00b fc2f 	bl	800dd30 <HAL_TIM_ConfigClockSource>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024d8:	f7ff fc90 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024dc:	482f      	ldr	r0, [pc, #188]	@ (800259c <MX_TIM1_Init+0x158>)
 80024de:	f00b f82c 	bl	800d53a <HAL_TIM_PWM_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80024e8:	f7ff fc88 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024fc:	4619      	mov	r1, r3
 80024fe:	4827      	ldr	r0, [pc, #156]	@ (800259c <MX_TIM1_Init+0x158>)
 8002500:	f00c fab0 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800250a:	f7ff fc77 	bl	8001dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800250e:	2370      	movs	r3, #112	@ 0x70
 8002510:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002516:	2300      	movs	r3, #0
 8002518:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800251a:	2300      	movs	r3, #0
 800251c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	481a      	ldr	r0, [pc, #104]	@ (800259c <MX_TIM1_Init+0x158>)
 8002534:	f00b fae8 	bl	800db08 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800253e:	f7ff fc5d 	bl	8001dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800255a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002568:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	@ (800259c <MX_TIM1_Init+0x158>)
 8002580:	f00c fb32 	bl	800ebe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800258a:	f7ff fc37 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800258e:	4803      	ldr	r0, [pc, #12]	@ (800259c <MX_TIM1_Init+0x158>)
 8002590:	f000 fa8e 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 8002594:	bf00      	nop
 8002596:	3770      	adds	r7, #112	@ 0x70
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200006f8 	.word	0x200006f8
 80025a0:	40012c00 	.word	0x40012c00

080025a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	@ 0x30
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	2224      	movs	r2, #36	@ 0x24
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f00f fe82 	bl	80122bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	463b      	mov	r3, r7
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025c2:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <MX_TIM2_Init+0xa4>)
 80025c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002648 <MX_TIM2_Init+0xa4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <MX_TIM2_Init+0xa4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <MX_TIM2_Init+0xa4>)
 80025d8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80025dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <MX_TIM2_Init+0xa4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <MX_TIM2_Init+0xa4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025ea:	2303      	movs	r3, #3
 80025ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025f2:	2301      	movs	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	@ (8002648 <MX_TIM2_Init+0xa4>)
 8002616:	f00b f943 	bl	800d8a0 <HAL_TIM_Encoder_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002620:	f7ff fbec 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800262c:	463b      	mov	r3, r7
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	@ (8002648 <MX_TIM2_Init+0xa4>)
 8002632:	f00c fa17 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800263c:	f7ff fbde 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3730      	adds	r7, #48	@ 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000744 	.word	0x20000744

0800264c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	@ 0x30
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	2224      	movs	r2, #36	@ 0x24
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f00f fe2e 	bl	80122bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002660:	463b      	mov	r3, r7
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800266a:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 800266c:	4a21      	ldr	r2, [pc, #132]	@ (80026f4 <MX_TIM3_Init+0xa8>)
 800266e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002670:	4b1f      	ldr	r3, [pc, #124]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002676:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800267c:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 800267e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002682:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002684:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268a:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002690:	2303      	movs	r3, #3
 8002692:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002698:	2301      	movs	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026a8:	2301      	movs	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	480d      	ldr	r0, [pc, #52]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 80026bc:	f00b f8f0 	bl	800d8a0 <HAL_TIM_Encoder_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80026c6:	f7ff fb99 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026d2:	463b      	mov	r3, r7
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	@ (80026f0 <MX_TIM3_Init+0xa4>)
 80026d8:	f00c f9c4 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80026e2:	f7ff fb8b 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	3730      	adds	r7, #48	@ 0x30
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000790 	.word	0x20000790
 80026f4:	40000400 	.word	0x40000400

080026f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	@ 0x38
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002718:	463b      	mov	r3, r7
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800272a:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <MX_TIM4_Init+0x128>)
 800272c:	4a3d      	ldr	r2, [pc, #244]	@ (8002824 <MX_TIM4_Init+0x12c>)
 800272e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002730:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <MX_TIM4_Init+0x128>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b3a      	ldr	r3, [pc, #232]	@ (8002820 <MX_TIM4_Init+0x128>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800273c:	4b38      	ldr	r3, [pc, #224]	@ (8002820 <MX_TIM4_Init+0x128>)
 800273e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002742:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <MX_TIM4_Init+0x128>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b35      	ldr	r3, [pc, #212]	@ (8002820 <MX_TIM4_Init+0x128>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002750:	4833      	ldr	r0, [pc, #204]	@ (8002820 <MX_TIM4_Init+0x128>)
 8002752:	f00a fe9b 	bl	800d48c <HAL_TIM_Base_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800275c:	f7ff fb4e 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800276a:	4619      	mov	r1, r3
 800276c:	482c      	ldr	r0, [pc, #176]	@ (8002820 <MX_TIM4_Init+0x128>)
 800276e:	f00b fadf 	bl	800dd30 <HAL_TIM_ConfigClockSource>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002778:	f7ff fb40 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800277c:	4828      	ldr	r0, [pc, #160]	@ (8002820 <MX_TIM4_Init+0x128>)
 800277e:	f00a fedc 	bl	800d53a <HAL_TIM_PWM_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002788:	f7ff fb38 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	4821      	ldr	r0, [pc, #132]	@ (8002820 <MX_TIM4_Init+0x128>)
 800279c:	f00c f962 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80027a6:	f7ff fb29 	bl	8001dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80027aa:	2370      	movs	r3, #112	@ 0x70
 80027ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ba:	463b      	mov	r3, r7
 80027bc:	2200      	movs	r2, #0
 80027be:	4619      	mov	r1, r3
 80027c0:	4817      	ldr	r0, [pc, #92]	@ (8002820 <MX_TIM4_Init+0x128>)
 80027c2:	f00b f9a1 	bl	800db08 <HAL_TIM_PWM_ConfigChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80027cc:	f7ff fb16 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	2204      	movs	r2, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4812      	ldr	r0, [pc, #72]	@ (8002820 <MX_TIM4_Init+0x128>)
 80027d8:	f00b f996 	bl	800db08 <HAL_TIM_PWM_ConfigChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80027e2:	f7ff fb0b 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027e6:	463b      	mov	r3, r7
 80027e8:	2208      	movs	r2, #8
 80027ea:	4619      	mov	r1, r3
 80027ec:	480c      	ldr	r0, [pc, #48]	@ (8002820 <MX_TIM4_Init+0x128>)
 80027ee:	f00b f98b 	bl	800db08 <HAL_TIM_PWM_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80027f8:	f7ff fb00 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	220c      	movs	r2, #12
 8002800:	4619      	mov	r1, r3
 8002802:	4807      	ldr	r0, [pc, #28]	@ (8002820 <MX_TIM4_Init+0x128>)
 8002804:	f00b f980 	bl	800db08 <HAL_TIM_PWM_ConfigChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800280e:	f7ff faf5 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002812:	4803      	ldr	r0, [pc, #12]	@ (8002820 <MX_TIM4_Init+0x128>)
 8002814:	f000 f94c 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 8002818:	bf00      	nop
 800281a:	3738      	adds	r7, #56	@ 0x38
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200007dc 	.word	0x200007dc
 8002824:	40000800 	.word	0x40000800

08002828 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002846:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 8002848:	4a20      	ldr	r2, [pc, #128]	@ (80028cc <MX_TIM8_Init+0xa4>)
 800284a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800284c:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 800284e:	2200      	movs	r2, #0
 8002850:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 800285a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800285e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002872:	4815      	ldr	r0, [pc, #84]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 8002874:	f00a fe0a 	bl	800d48c <HAL_TIM_Base_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800287e:	f7ff fabd 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	4619      	mov	r1, r3
 800288e:	480e      	ldr	r0, [pc, #56]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 8002890:	f00b fa4e 	bl	800dd30 <HAL_TIM_ConfigClockSource>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800289a:	f7ff faaf 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <MX_TIM8_Init+0xa0>)
 80028b0:	f00c f8d8 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80028ba:	f7ff fa9f 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000828 	.word	0x20000828
 80028cc:	40013400 	.word	0x40013400

080028d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a20      	ldr	r2, [pc, #128]	@ (8002960 <HAL_TIM_Base_MspInit+0x90>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10f      	bne.n	8002902 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e2:	4b20      	ldr	r3, [pc, #128]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 80028e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 80028ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028ee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80028f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 80028f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002900:	e028      	b.n	8002954 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	@ (8002968 <HAL_TIM_Base_MspInit+0x98>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d10f      	bne.n	800292c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800290c:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 800290e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002912:	4a14      	ldr	r2, [pc, #80]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 800291e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
}
 800292a:	e013      	b.n	8002954 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM8)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0e      	ldr	r2, [pc, #56]	@ (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 8002938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800293c:	4a09      	ldr	r2, [pc, #36]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 800293e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002942:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002946:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <HAL_TIM_Base_MspInit+0x94>)
 8002948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800294c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00
 8002964:	46020c00 	.word	0x46020c00
 8002968:	40000800 	.word	0x40000800
 800296c:	40013400 	.word	0x40013400

08002970 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	@ 0x30
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002990:	d14e      	bne.n	8002a30 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002992:	4b43      	ldr	r3, [pc, #268]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002998:	4a41      	ldr	r2, [pc, #260]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029a2:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 80029a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b0:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 80029b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b6:	4a3a      	ldr	r2, [pc, #232]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029c0:	4b37      	ldr	r3, [pc, #220]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 80029c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	4b34      	ldr	r3, [pc, #208]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 80029d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029d4:	4a32      	ldr	r2, [pc, #200]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029de:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 80029e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029fe:	2301      	movs	r3, #1
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 031c 	add.w	r3, r7, #28
 8002a06:	4619      	mov	r1, r3
 8002a08:	4826      	ldr	r0, [pc, #152]	@ (8002aa4 <HAL_TIM_Encoder_MspInit+0x134>)
 8002a0a:	f004 fd2d 	bl	8007468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	481f      	ldr	r0, [pc, #124]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x138>)
 8002a2a:	f004 fd1d 	bl	8007468 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a2e:	e032      	b.n	8002a96 <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM3)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	@ (8002aac <HAL_TIM_Encoder_MspInit+0x13c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12d      	bne.n	8002a96 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a40:	4a17      	ldr	r2, [pc, #92]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a5e:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a76:	2330      	movs	r3, #48	@ 0x30
 8002a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a86:	2302      	movs	r3, #2
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4805      	ldr	r0, [pc, #20]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x138>)
 8002a92:	f004 fce9 	bl	8007468 <HAL_GPIO_Init>
}
 8002a96:	bf00      	nop
 8002a98:	3730      	adds	r7, #48	@ 0x30
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	46020c00 	.word	0x46020c00
 8002aa4:	42020000 	.word	0x42020000
 8002aa8:	42020400 	.word	0x42020400
 8002aac:	40000400 	.word	0x40000400

08002ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a26      	ldr	r2, [pc, #152]	@ (8002b68 <HAL_TIM_MspPostInit+0xb8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d120      	bne.n	8002b14 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b26      	ldr	r3, [pc, #152]	@ (8002b6c <HAL_TIM_MspPostInit+0xbc>)
 8002ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ad8:	4a24      	ldr	r2, [pc, #144]	@ (8002b6c <HAL_TIM_MspPostInit+0xbc>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_TIM_MspPostInit+0xbc>)
 8002ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4818      	ldr	r0, [pc, #96]	@ (8002b70 <HAL_TIM_MspPostInit+0xc0>)
 8002b0e:	f004 fcab 	bl	8007468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b12:	e024      	b.n	8002b5e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM4)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a16      	ldr	r2, [pc, #88]	@ (8002b74 <HAL_TIM_MspPostInit+0xc4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d11f      	bne.n	8002b5e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <HAL_TIM_MspPostInit+0xbc>)
 8002b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b24:	4a11      	ldr	r2, [pc, #68]	@ (8002b6c <HAL_TIM_MspPostInit+0xbc>)
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <HAL_TIM_MspPostInit+0xbc>)
 8002b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b3c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	4807      	ldr	r0, [pc, #28]	@ (8002b78 <HAL_TIM_MspPostInit+0xc8>)
 8002b5a:	f004 fc85 	bl	8007468 <HAL_GPIO_Init>
}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	@ 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	46020c00 	.word	0x46020c00
 8002b70:	42020000 	.word	0x42020000
 8002b74:	40000800 	.word	0x40000800
 8002b78:	42020400 	.word	0x42020400

08002b7c <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b80:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002b82:	4a23      	ldr	r2, [pc, #140]	@ (8002c10 <MX_USART1_UART_Init+0x94>)
 8002b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b86:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b94:	4b1d      	ldr	r3, [pc, #116]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bac:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bc4:	4811      	ldr	r0, [pc, #68]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bc6:	f00c f8a9 	bl	800ed1c <HAL_UART_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002bd0:	f7ff f914 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	480d      	ldr	r0, [pc, #52]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bd8:	f00d fcb5 	bl	8010546 <HAL_UARTEx_SetTxFifoThreshold>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002be2:	f7ff f90b 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002be6:	2100      	movs	r1, #0
 8002be8:	4808      	ldr	r0, [pc, #32]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bea:	f00d fcea 	bl	80105c2 <HAL_UARTEx_SetRxFifoThreshold>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bf4:	f7ff f902 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	@ (8002c0c <MX_USART1_UART_Init+0x90>)
 8002bfa:	f00d fc6b 	bl	80104d4 <HAL_UARTEx_DisableFifoMode>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c04:	f7ff f8fa 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000874 	.word	0x20000874
 8002c10:	40013800 	.word	0x40013800

08002c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0b8      	sub	sp, #224	@ 0xe0
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	22b8      	movs	r2, #184	@ 0xb8
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00f fb41 	bl	80122bc <memset>
  if(uartHandle->Instance==USART1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8002df4 <HAL_UART_MspInit+0x1e0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	f040 80d3 	bne.w	8002dec <HAL_UART_MspInit+0x1d8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c46:	f04f 0201 	mov.w	r2, #1
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c52:	2300      	movs	r3, #0
 8002c54:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f006 fbe6 	bl	800942c <HAL_RCCEx_PeriphCLKConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c66:	f7ff f8c9 	bl	8001dfc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6a:	4b63      	ldr	r3, [pc, #396]	@ (8002df8 <HAL_UART_MspInit+0x1e4>)
 8002c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c70:	4a61      	ldr	r2, [pc, #388]	@ (8002df8 <HAL_UART_MspInit+0x1e4>)
 8002c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c76:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002df8 <HAL_UART_MspInit+0x1e4>)
 8002c7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	4b5b      	ldr	r3, [pc, #364]	@ (8002df8 <HAL_UART_MspInit+0x1e4>)
 8002c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <HAL_UART_MspInit+0x1e4>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c98:	4b57      	ldr	r3, [pc, #348]	@ (8002df8 <HAL_UART_MspInit+0x1e4>)
 8002c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ca6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002caa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002cca:	4619      	mov	r1, r3
 8002ccc:	484b      	ldr	r0, [pc, #300]	@ (8002dfc <HAL_UART_MspInit+0x1e8>)
 8002cce:	f004 fbcb 	bl	8007468 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e04 <HAL_UART_MspInit+0x1f0>)
 8002cd6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8002cd8:	4b49      	ldr	r3, [pc, #292]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002cda:	2219      	movs	r2, #25
 8002cdc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002cde:	4b48      	ldr	r3, [pc, #288]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce4:	4b46      	ldr	r3, [pc, #280]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cea:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002cec:	4b44      	ldr	r3, [pc, #272]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002cee:	2208      	movs	r2, #8
 8002cf0:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8002cf2:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002cf8:	4b41      	ldr	r3, [pc, #260]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002cfe:	4b40      	ldr	r3, [pc, #256]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002d04:	4b3e      	ldr	r3, [pc, #248]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8002d10:	4b3b      	ldr	r3, [pc, #236]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002d28:	4835      	ldr	r0, [pc, #212]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d2a:	f002 fc7b 	bl	8005624 <HAL_DMA_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8002d34:	f7ff f862 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel3);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a31      	ldr	r2, [pc, #196]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d3c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d3e:	4a30      	ldr	r2, [pc, #192]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d44:	2110      	movs	r1, #16
 8002d46:	482e      	ldr	r0, [pc, #184]	@ (8002e00 <HAL_UART_MspInit+0x1ec>)
 8002d48:	f003 f80a 	bl	8005d60 <HAL_DMA_ConfigChannelAttributes>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002d52:	f7ff f853 	bl	8001dfc <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002d56:	4b2c      	ldr	r3, [pc, #176]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d58:	4a2c      	ldr	r2, [pc, #176]	@ (8002e0c <HAL_UART_MspInit+0x1f8>)
 8002d5a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d5e:	2218      	movs	r2, #24
 8002d60:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002d62:	4b29      	ldr	r3, [pc, #164]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d68:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8002d6e:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002d7a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002d7c:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002d82:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8002d94:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002da0:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002da6:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002dac:	4816      	ldr	r0, [pc, #88]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002dae:	f002 fc39 	bl	8005624 <HAL_DMA_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8002db8:	f7ff f820 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002dc4:	4a10      	ldr	r2, [pc, #64]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002dca:	2110      	movs	r1, #16
 8002dcc:	480e      	ldr	r0, [pc, #56]	@ (8002e08 <HAL_UART_MspInit+0x1f4>)
 8002dce:	f002 ffc7 	bl	8005d60 <HAL_DMA_ConfigChannelAttributes>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_UART_MspInit+0x1c8>
    {
      Error_Handler();
 8002dd8:	f7ff f810 	bl	8001dfc <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2100      	movs	r1, #0
 8002de0:	203d      	movs	r0, #61	@ 0x3d
 8002de2:	f002 fb43 	bl	800546c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002de6:	203d      	movs	r0, #61	@ 0x3d
 8002de8:	f002 fb5a 	bl	80054a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002dec:	bf00      	nop
 8002dee:	37e0      	adds	r7, #224	@ 0xe0
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40013800 	.word	0x40013800
 8002df8:	46020c00 	.word	0x46020c00
 8002dfc:	42020000 	.word	0x42020000
 8002e00:	20000908 	.word	0x20000908
 8002e04:	400201d0 	.word	0x400201d0
 8002e08:	20000980 	.word	0x20000980
 8002e0c:	40020150 	.word	0x40020150

08002e10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e10:	480d      	ldr	r0, [pc, #52]	@ (8002e48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e14:	f7ff fade 	bl	80023d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e18:	480c      	ldr	r0, [pc, #48]	@ (8002e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e1a:	490d      	ldr	r1, [pc, #52]	@ (8002e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <LoopForever+0xe>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e20:	e002      	b.n	8002e28 <LoopCopyDataInit>

08002e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e26:	3304      	adds	r3, #4

08002e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e2c:	d3f9      	bcc.n	8002e22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e30:	4c0a      	ldr	r4, [pc, #40]	@ (8002e5c <LoopForever+0x16>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e34:	e001      	b.n	8002e3a <LoopFillZerobss>

08002e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e38:	3204      	adds	r2, #4

08002e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e3c:	d3fb      	bcc.n	8002e36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e3e:	f00f fa95 	bl	801236c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e42:	f7fe feb3 	bl	8001bac <main>

08002e46 <LoopForever>:

LoopForever:
    b LoopForever
 8002e46:	e7fe      	b.n	8002e46 <LoopForever>
  ldr   r0, =_estack
 8002e48:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e50:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002e54:	08015f18 	.word	0x08015f18
  ldr r2, =_sbss
 8002e58:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002e5c:	20002ce0 	.word	0x20002ce0

08002e60 <ADC4_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC4_IRQHandler>
	...

08002e64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e68:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <HAL_Init+0x50>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	@ (8002eb4 <HAL_Init+0x50>)
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e74:	2003      	movs	r0, #3
 8002e76:	f002 faee 	bl	8005456 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e7a:	f006 f8f9 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <HAL_Init+0x54>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	490c      	ldr	r1, [pc, #48]	@ (8002ebc <HAL_Init+0x58>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e90:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec0 <HAL_Init+0x5c>)
 8002e92:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e94:	2004      	movs	r0, #4
 8002e96:	f002 fb33 	bl	8005500 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e9a:	200f      	movs	r0, #15
 8002e9c:	f000 f812 	bl	8002ec4 <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e002      	b.n	8002eb0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002eaa:	f7ff f91f 	bl	80020ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	46020c00 	.word	0x46020c00
 8002ebc:	080159dc 	.word	0x080159dc
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002ed0:	4b33      	ldr	r3, [pc, #204]	@ (8002fa0 <HAL_InitTick+0xdc>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e05c      	b.n	8002f96 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002edc:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <HAL_InitTick+0xe0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d10c      	bne.n	8002f02 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa8 <HAL_InitTick+0xe4>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa0 <HAL_InitTick+0xdc>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e037      	b.n	8002f72 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002f02:	f002 fb55 	bl	80055b0 <HAL_SYSTICK_GetCLKSourceConfig>
 8002f06:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d023      	beq.n	8002f56 <HAL_InitTick+0x92>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d82d      	bhi.n	8002f70 <HAL_InitTick+0xac>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_InitTick+0x5e>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d00d      	beq.n	8002f3c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002f20:	e026      	b.n	8002f70 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002f22:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <HAL_InitTick+0xe4>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <HAL_InitTick+0xdc>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002f30:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	60fb      	str	r3, [r7, #12]
        break;
 8002f3a:	e01a      	b.n	8002f72 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f3c:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <HAL_InitTick+0xdc>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f4a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	60fb      	str	r3, [r7, #12]
        break;
 8002f54:	e00d      	b.n	8002f72 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_InitTick+0xdc>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	60fb      	str	r3, [r7, #12]
        break;
 8002f6e:	e000      	b.n	8002f72 <HAL_InitTick+0xae>
        break;
 8002f70:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f002 faa2 	bl	80054bc <HAL_SYSTICK_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e009      	b.n	8002f96 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f82:	2200      	movs	r2, #0
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	f002 fa6f 	bl	800546c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002f8e:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_InitTick+0xe8>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	e000e010 	.word	0xe000e010
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_IncTick+0x20>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_IncTick+0x24>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_IncTick+0x24>)
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	200009f8 	.word	0x200009f8

08002fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return uwTick;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <HAL_GetTick+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	200009f8 	.word	0x200009f8

08002ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7ff ffee 	bl	8002fd8 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d005      	beq.n	8003016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_Delay+0x44>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003016:	bf00      	nop
 8003018:	f7ff ffde 	bl	8002fd8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	429a      	cmp	r2, r3
 8003026:	d8f7      	bhi.n	8003018 <HAL_Delay+0x28>
  {
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000008 	.word	0x20000008

08003038 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <HAL_GetREVID+0x18>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	b29b      	uxth	r3, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e0044000 	.word	0xe0044000

08003054 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <LL_ADC_SetResolution+0x3c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d104      	bne.n	80030dc <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f023 020c 	bic.w	r2, r3, #12
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	46021000 	.word	0x46021000

080030fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3360      	adds	r3, #96	@ 0x60
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	430b      	orrs	r3, r1
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3360      	adds	r3, #96	@ 0x60
 800314c:	461a      	mov	r2, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0edb      	lsrs	r3, r3, #27
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b09      	cmp	r3, #9
 8003166:	d807      	bhi.n	8003178 <LL_ADC_GetOffsetChannel+0x3a>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	069a      	lsls	r2, r3, #26
 800316c:	2101      	movs	r1, #1
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	4313      	orrs	r3, r2
 8003176:	e008      	b.n	800318a <LL_ADC_GetOffsetChannel+0x4c>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	069a      	lsls	r2, r3, #26
 800317c:	2101      	movs	r1, #1
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	4313      	orrs	r3, r2
 8003186:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003196:	b480      	push	{r7}
 8003198:	b087      	sub	sp, #28
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3360      	adds	r3, #96	@ 0x60
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	601a      	str	r2, [r3, #0]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3360      	adds	r3, #96	@ 0x60
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8003202:	b480      	push	{r7}
 8003204:	b087      	sub	sp, #28
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3360      	adds	r3, #96	@ 0x60
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	431a      	orrs	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800324a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	2a00      	cmp	r2, #0
 8003262:	d002      	beq.n	800326a <LL_ADC_SetGainCompensation+0x32>
 8003264:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003268:	e000      	b.n	800326c <LL_ADC_SetGainCompensation+0x34>
 800326a:	2200      	movs	r2, #0
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2107      	movs	r1, #7
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	401a      	ands	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a2b      	ldr	r2, [pc, #172]	@ (80033a0 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d020      	beq.n	800333a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3330      	adds	r3, #48	@ 0x30
 80032fc:	461a      	mov	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	4413      	add	r3, r2
 800330a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	211f      	movs	r1, #31
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 011f 	and.w	r1, r3, #31
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	431a      	orrs	r2, r3
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003338:	e02b      	b.n	8003392 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	210f      	movs	r1, #15
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	401a      	ands	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	e010      	b.n	8003384 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	613b      	str	r3, [r7, #16]
  return result;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	f001 011f 	and.w	r1, r1, #31
 800338a:	408b      	lsls	r3, r1
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003392:	bf00      	nop
 8003394:	3724      	adds	r7, #36	@ 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	46021000 	.word	0x46021000

080033a4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	e015      	b.n	80033f4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	60fb      	str	r3, [r7, #12]
  return result;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80033de:	2320      	movs	r3, #32
 80033e0:	e003      	b.n	80033ea <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2201      	movs	r2, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	0e9b      	lsrs	r3, r3, #26
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0303 	and.w	r3, r3, #3
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800347c:	b480      	push	{r7}
 800347e:	b08b      	sub	sp, #44	@ 0x2c
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a2d      	ldr	r2, [pc, #180]	@ (8003540 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d042      	beq.n	8003516 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <LL_ADC_SetChannelSamplingTime+0x28>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	e011      	b.n	80034c8 <LL_ADC_SetChannelSamplingTime+0x4c>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	617b      	str	r3, [r7, #20]
  return result;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	0e5b      	lsrs	r3, r3, #25
 80034cc:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80034d0:	460b      	mov	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3314      	adds	r3, #20
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	0e5b      	lsrs	r3, r3, #25
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	2107      	movs	r1, #7
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	401a      	ands	r2, r3
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	431a      	orrs	r2, r3
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003514:	e00e      	b.n	8003534 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	43db      	mvns	r3, r3
 8003520:	401a      	ands	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	0219      	lsls	r1, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	400b      	ands	r3, r1
 800352a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800352e:	431a      	orrs	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	615a      	str	r2, [r3, #20]
}
 8003534:	bf00      	nop
 8003536:	372c      	adds	r7, #44	@ 0x2c
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	46021000 	.word	0x46021000

08003544 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0318 	and.w	r3, r3, #24
 8003566:	4908      	ldr	r1, [pc, #32]	@ (8003588 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003568:	40d9      	lsrs	r1, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	400b      	ands	r3, r1
 800356e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003572:	431a      	orrs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	000fffff 	.word	0x000fffff

0800358c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800359c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6093      	str	r3, [r2, #8]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035c4:	d101      	bne.n	80035ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80035e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003614:	d101      	bne.n	800361a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <LL_ADC_IsEnabled+0x18>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <LL_ADC_IsEnabled+0x1a>
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003686:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d101      	bne.n	80036b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d101      	bne.n	80036dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e2b3      	b.n	8003c74 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a8b      	ldr	r2, [pc, #556]	@ (8003948 <HAL_ADC_Init+0x25c>)
 800371a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fd fe0b 	bl	8001340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff37 	bl	80035b0 <LL_ADC_IsDeepPowerDownEnabled>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff1d 	bl	800358c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff52 	bl	8003600 <LL_ADC_IsInternalRegulatorEnabled>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff36 	bl	80035d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800376c:	4b77      	ldr	r3, [pc, #476]	@ (800394c <HAL_ADC_Init+0x260>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	4a77      	ldr	r2, [pc, #476]	@ (8003950 <HAL_ADC_Init+0x264>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003780:	e002      	b.n	8003788 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3b01      	subs	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f9      	bne.n	8003782 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff34 	bl	8003600 <LL_ADC_IsInternalRegulatorEnabled>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10e      	bne.n	80037bc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037a2:	f043 0210 	orr.w	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff6c 	bl	800369e <LL_ADC_REG_IsConversionOngoing>
 80037c6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f040 8244 	bne.w	8003c5e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f040 8240 	bne.w	8003c5e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ff2c 	bl	8003650 <LL_ADC_IsEnabled>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d140      	bne.n	8003880 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a51      	ldr	r2, [pc, #324]	@ (8003948 <HAL_ADC_Init+0x25c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d028      	beq.n	800385a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a51      	ldr	r2, [pc, #324]	@ (8003954 <HAL_ADC_Init+0x268>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d109      	bne.n	8003826 <HAL_ADC_Init+0x13a>
 8003812:	4850      	ldr	r0, [pc, #320]	@ (8003954 <HAL_ADC_Init+0x268>)
 8003814:	f7ff ff1c 	bl	8003650 <LL_ADC_IsEnabled>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e008      	b.n	8003838 <HAL_ADC_Init+0x14c>
 8003826:	4848      	ldr	r0, [pc, #288]	@ (8003948 <HAL_ADC_Init+0x25c>)
 8003828:	f7ff ff12 	bl	8003650 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d021      	beq.n	8003880 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a44      	ldr	r2, [pc, #272]	@ (8003954 <HAL_ADC_Init+0x268>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_ADC_Init+0x15e>
 8003846:	4a44      	ldr	r2, [pc, #272]	@ (8003958 <HAL_ADC_Init+0x26c>)
 8003848:	e000      	b.n	800384c <HAL_ADC_Init+0x160>
 800384a:	4a44      	ldr	r2, [pc, #272]	@ (800395c <HAL_ADC_Init+0x270>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7ff fbfe 	bl	8003054 <LL_ADC_SetCommonClock>
 8003858:	e012      	b.n	8003880 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7ff fc29 	bl	80030bc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800386a:	4b3c      	ldr	r3, [pc, #240]	@ (800395c <HAL_ADC_Init+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800387a:	4938      	ldr	r1, [pc, #224]	@ (800395c <HAL_ADC_Init+0x270>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a30      	ldr	r2, [pc, #192]	@ (8003948 <HAL_ADC_Init+0x25c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d010      	beq.n	80038ac <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003890:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003896:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800389c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80038a4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80038a6:	4313      	orrs	r3, r2
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	e030      	b.n	800390e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	7f1b      	ldrb	r3, [r3, #28]
 80038b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038b8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038ba:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038c0:	2a00      	cmp	r2, #0
 80038c2:	d002      	beq.n	80038ca <HAL_ADC_Init+0x1de>
 80038c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038c8:	e000      	b.n	80038cc <HAL_ADC_Init+0x1e0>
 80038ca:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80038cc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80038d2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	da04      	bge.n	80038e6 <HAL_ADC_Init+0x1fa>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038e4:	e001      	b.n	80038ea <HAL_ADC_Init+0x1fe>
 80038e6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80038ea:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4918      	ldr	r1, [pc, #96]	@ (8003954 <HAL_ADC_Init+0x268>)
 80038f2:	428b      	cmp	r3, r1
 80038f4:	d103      	bne.n	80038fe <HAL_ADC_Init+0x212>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038fc:	e003      	b.n	8003906 <HAL_ADC_Init+0x21a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003904:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003906:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	4313      	orrs	r3, r2
 800390c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d12f      	bne.n	8003978 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <HAL_ADC_Init+0x25c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d007      	beq.n	8003932 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	3b01      	subs	r3, #1
 8003928:	045b      	lsls	r3, r3, #17
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	4313      	orrs	r3, r2
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	e022      	b.n	8003978 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	e018      	b.n	8003978 <HAL_ADC_Init+0x28c>
 8003946:	bf00      	nop
 8003948:	46021000 	.word	0x46021000
 800394c:	20000000 	.word	0x20000000
 8003950:	053e2d63 	.word	0x053e2d63
 8003954:	42028000 	.word	0x42028000
 8003958:	42028308 	.word	0x42028308
 800395c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a92      	ldr	r2, [pc, #584]	@ (8003bc8 <HAL_ADC_Init+0x4dc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d018      	beq.n	80039b4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	4313      	orrs	r3, r2
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	4313      	orrs	r3, r2
 800399c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4b89      	ldr	r3, [pc, #548]	@ (8003bcc <HAL_ADC_Init+0x4e0>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	6a39      	ldr	r1, [r7, #32]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	60d3      	str	r3, [r2, #12]
 80039b2:	e031      	b.n	8003a18 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	4313      	orrs	r3, r2
 80039ca:	6a3a      	ldr	r2, [r7, #32]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	4b7e      	ldr	r3, [pc, #504]	@ (8003bd0 <HAL_ADC_Init+0x4e4>)
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	6a39      	ldr	r1, [r7, #32]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bc8 <HAL_ADC_Init+0x4dc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	f000 8093 	beq.w	8003b4a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fe38 	bl	800369e <LL_ADC_REG_IsConversionOngoing>
 8003a2e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fe45 	bl	80036c4 <LL_ADC_INJ_IsConversionOngoing>
 8003a3a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d161      	bne.n	8003b06 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d15e      	bne.n	8003b06 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7f1b      	ldrb	r3, [r3, #28]
 8003a4c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4960      	ldr	r1, [pc, #384]	@ (8003bd4 <HAL_ADC_Init+0x4e8>)
 8003a54:	428b      	cmp	r3, r1
 8003a56:	d102      	bne.n	8003a5e <HAL_ADC_Init+0x372>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5c:	e002      	b.n	8003a64 <HAL_ADC_Init+0x378>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a64:	4313      	orrs	r3, r2
 8003a66:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	6a39      	ldr	r1, [r7, #32]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7ff fbd0 	bl	8003238 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d11e      	bne.n	8003ae0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd8 <HAL_ADC_Init+0x4ec>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ab6:	0411      	lsls	r1, r2, #16
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003ac2:	4311      	orrs	r1, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ace:	0892      	lsrs	r2, r2, #2
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
 8003ade:	e007      	b.n	8003af0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d10c      	bne.n	8003b28 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	f023 010f 	bic.w	r1, r3, #15
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b26:	e007      	b.n	8003b38 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 020f 	bic.w	r2, r2, #15
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003b48:	e092      	b.n	8003c70 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d111      	bne.n	8003b78 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003b5c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003b62:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003b68:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	4b17      	ldr	r3, [pc, #92]	@ (8003bdc <HAL_ADC_Init+0x4f0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	69f9      	ldr	r1, [r7, #28]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b94:	461a      	mov	r2, r3
 8003b96:	2100      	movs	r1, #0
 8003b98:	f7ff fb71 	bl	800327e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003baa:	f7ff fb68 	bl	800327e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d114      	bne.n	8003be0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f062 020f 	orn	r2, r2, #15
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bc6:	e024      	b.n	8003c12 <HAL_ADC_Init+0x526>
 8003bc8:	46021000 	.word	0x46021000
 8003bcc:	fff0c013 	.word	0xfff0c013
 8003bd0:	ffde800d 	.word	0xffde800d
 8003bd4:	42028000 	.word	0x42028000
 8003bd8:	fc00f81e 	.word	0xfc00f81e
 8003bdc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be8:	d113      	bne.n	8003c12 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f003 031c 	and.w	r3, r3, #28
 8003bfc:	f06f 020f 	mvn.w	r2, #15
 8003c00:	fa02 f103 	lsl.w	r1, r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	4b18      	ldr	r3, [pc, #96]	@ (8003c7c <HAL_ADC_Init+0x590>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d10b      	bne.n	8003c3a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c2c:	f023 0303 	bic.w	r3, r3, #3
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003c38:	e01a      	b.n	8003c70 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c3e:	f023 0312 	bic.w	r3, r3, #18
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003c5c:	e008      	b.n	8003c70 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3728      	adds	r7, #40	@ 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	833ffff3 	.word	0x833ffff3

08003c80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0a2      	sub	sp, #136	@ 0x88
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fd04 	bl	800369e <LL_ADC_REG_IsConversionOngoing>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 80e9 	bne.w	8003e70 <HAL_ADC_Start_DMA+0x1f0>
  {
    __HAL_LOCK(hadc);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_Start_DMA+0x2c>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e0e6      	b.n	8003e7a <HAL_ADC_Start_DMA+0x1fa>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f001 f9f5 	bl	80050a4 <ADC_Enable>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cc0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 80ce 	bne.w	8003e66 <HAL_ADC_Start_DMA+0x1e6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a68      	ldr	r2, [pc, #416]	@ (8003e84 <HAL_ADC_Start_DMA+0x204>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d010      	beq.n	8003d0a <HAL_ADC_Start_DMA+0x8a>
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d006      	beq.n	8003d02 <HAL_ADC_Start_DMA+0x82>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cf8:	f023 0206 	bic.w	r2, r3, #6
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003d00:	e006      	b.n	8003d10 <HAL_ADC_Start_DMA+0x90>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003d08:	e002      	b.n	8003d10 <HAL_ADC_Start_DMA+0x90>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	4a5c      	ldr	r2, [pc, #368]	@ (8003e88 <HAL_ADC_Start_DMA+0x208>)
 8003d16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	4a5b      	ldr	r2, [pc, #364]	@ (8003e8c <HAL_ADC_Start_DMA+0x20c>)
 8003d1e:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d24:	4a5a      	ldr	r2, [pc, #360]	@ (8003e90 <HAL_ADC_Start_DMA+0x210>)
 8003d26:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	221c      	movs	r2, #28
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0210 	orr.w	r2, r2, #16
 8003d46:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003e84 <HAL_ADC_Start_DMA+0x204>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d107      	bne.n	8003d62 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d04f      	beq.n	8003e10 <HAL_ADC_Start_DMA+0x190>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d046      	beq.n	8003e08 <HAL_ADC_Start_DMA+0x188>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d040      	beq.n	8003e08 <HAL_ADC_Start_DMA+0x188>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	f107 0314 	add.w	r3, r7, #20
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 fc9b 	bl	80066d0 <HAL_DMAEx_List_GetNodeConfig>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_ADC_Start_DMA+0x124>
            {
              return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e06a      	b.n	8003e7a <HAL_ADC_Start_DMA+0x1fa>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d104      	bne.n	8003db4 <HAL_ADC_Start_DMA+0x134>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003db2:	e00a      	b.n	8003dca <HAL_ADC_Start_DMA+0x14a>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d104      	bne.n	8003dc4 <HAL_ADC_Start_DMA+0x144>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dc2:	e002      	b.n	8003dca <HAL_ADC_Start_DMA+0x14a>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dd6:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 fbbe 	bl	800657c <HAL_DMAEx_List_Start_IT>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003e06:	e028      	b.n	8003e5a <HAL_ADC_Start_DMA+0x1da>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003e0e:	e024      	b.n	8003e5a <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d104      	bne.n	8003e24 <HAL_ADC_Start_DMA+0x1a4>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e22:	e00c      	b.n	8003e3e <HAL_ADC_Start_DMA+0x1be>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d104      	bne.n	8003e38 <HAL_ADC_Start_DMA+0x1b8>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e36:	e002      	b.n	8003e3e <HAL_ADC_Start_DMA+0x1be>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3340      	adds	r3, #64	@ 0x40
 8003e48:	4619      	mov	r1, r3
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e50:	f001 fd14 	bl	800587c <HAL_DMA_Start_IT>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fc09 	bl	8003676 <LL_ADC_REG_StartConversion>
 8003e64:	e007      	b.n	8003e76 <HAL_ADC_Start_DMA+0x1f6>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003e6e:	e002      	b.n	8003e76 <HAL_ADC_Start_DMA+0x1f6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
 8003e72:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003e76:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3788      	adds	r7, #136	@ 0x88
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	46021000 	.word	0x46021000
 8003e88:	08005185 	.word	0x08005185
 8003e8c:	0800525d 	.word	0x0800525d
 8003e90:	08005279 	.word	0x08005279

08003e94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <HAL_ADC_IRQHandler+0x56>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d012      	beq.n	8003eea <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f001 fa03 	bl	80052e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <HAL_ADC_IRQHandler+0x6a>
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_ADC_IRQHandler+0x82>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80a4 	beq.w	8004052 <HAL_ADC_IRQHandler+0x1be>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 809e 	beq.w	8004052 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <HAL_ADC_IRQHandler+0x9a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3d      	ldr	r2, [pc, #244]	@ (8004028 <HAL_ADC_IRQHandler+0x194>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d047      	beq.n	8003fc8 <HAL_ADC_IRQHandler+0x134>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff f9bd 	bl	80032bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d07d      	beq.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
        }
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d174      	bne.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d16d      	bne.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fb96 	bl	800369e <LL_ADC_REG_IsConversionOngoing>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11a      	bne.n	8003fae <HAL_ADC_IRQHandler+0x11a>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020c 	bic.w	r2, r2, #12
 8003f86:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d151      	bne.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa4:	f043 0201 	orr.w	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	679a      	str	r2, [r3, #120]	@ 0x78
 8003fac:	e04a      	b.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb2:	f043 0210 	orr.w	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbe:	f043 0201 	orr.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003fc6:	e03d      	b.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff f975 	bl	80032bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d035      	beq.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d130      	bne.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d129      	bne.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fb52 	bl	800369e <LL_ADC_REG_IsConversionOngoing>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d115      	bne.n	800402c <HAL_ADC_IRQHandler+0x198>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 020c 	bic.w	r2, r2, #12
 800400e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	679a      	str	r2, [r3, #120]	@ 0x78
 8004024:	e00e      	b.n	8004044 <HAL_ADC_IRQHandler+0x1b0>
 8004026:	bf00      	nop
 8004028:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f957 	bl	80042f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	220c      	movs	r2, #12
 8004050:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6d      	ldr	r2, [pc, #436]	@ (800420c <HAL_ADC_IRQHandler+0x378>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d06f      	beq.n	800413c <HAL_ADC_IRQHandler+0x2a8>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_ADC_IRQHandler+0x1dc>
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_ADC_IRQHandler+0x1f0>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004076:	2b00      	cmp	r3, #0
 8004078:	d060      	beq.n	800413c <HAL_ADC_IRQHandler+0x2a8>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05b      	beq.n	800413c <HAL_ADC_IRQHandler+0x2a8>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_ADC_IRQHandler+0x208>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004094:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff f9d8 	bl	8003456 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80040a6:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff f905 	bl	80032bc <LL_ADC_REG_IsTriggerSourceSWStart>
 80040b2:	60b8      	str	r0, [r7, #8]
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	613b      	str	r3, [r7, #16]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d035      	beq.n	800412e <HAL_ADC_IRQHandler+0x29a>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_ADC_IRQHandler+0x248>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02d      	beq.n	800412e <HAL_ADC_IRQHandler+0x29a>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d128      	bne.n	800412e <HAL_ADC_IRQHandler+0x29a>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d121      	bne.n	800412e <HAL_ADC_IRQHandler+0x29a>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fae8 	bl	80036c4 <LL_ADC_INJ_IsConversionOngoing>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d119      	bne.n	800412e <HAL_ADC_IRQHandler+0x29a>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004108:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800410e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <HAL_ADC_IRQHandler+0x29a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 f8bc 	bl	80052ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2260      	movs	r2, #96	@ 0x60
 800413a:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004142:	2b00      	cmp	r3, #0
 8004144:	d011      	beq.n	800416a <HAL_ADC_IRQHandler+0x2d6>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <HAL_ADC_IRQHandler+0x2d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004154:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f8df 	bl	8004320 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2280      	movs	r2, #128	@ 0x80
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d012      	beq.n	800419a <HAL_ADC_IRQHandler+0x306>
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <HAL_ADC_IRQHandler+0x306>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004182:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 f898 	bl	80052c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004198:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <HAL_ADC_IRQHandler+0x336>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <HAL_ADC_IRQHandler+0x336>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f001 f88a 	bl	80052d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03d      	beq.n	8004250 <HAL_ADC_IRQHandler+0x3bc>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d038      	beq.n	8004250 <HAL_ADC_IRQHandler+0x3bc>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_ADC_IRQHandler+0x358>
    {
      overrun_error = 1UL;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e01b      	b.n	8004224 <HAL_ADC_IRQHandler+0x390>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a06      	ldr	r2, [pc, #24]	@ (800420c <HAL_ADC_IRQHandler+0x378>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00c      	beq.n	8004210 <HAL_ADC_IRQHandler+0x37c>
            overrun_error = 1UL;
          }
        }
#else
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00f      	beq.n	8004224 <HAL_ADC_IRQHandler+0x390>
        {
          overrun_error = 1UL;
 8004204:	2301      	movs	r3, #1
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e00c      	b.n	8004224 <HAL_ADC_IRQHandler+0x390>
 800420a:	bf00      	nop
 800420c:	46021000 	.word	0x46021000
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff f910 	bl	800343a <LL_ADC_REG_GetDMATransfer>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_ADC_IRQHandler+0x390>
        {
          overrun_error = 1UL;
 8004220:	2301      	movs	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10e      	bne.n	8004248 <HAL_ADC_IRQHandler+0x3b4>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800422e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f876 	bl	8004334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2210      	movs	r2, #16
 800424e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01b      	beq.n	8004292 <HAL_ADC_IRQHandler+0x3fe>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d016      	beq.n	8004292 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <HAL_ADC_IRQHandler+0x3e8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f877 	bl	8004370 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a17      	ldr	r2, [pc, #92]	@ (80042f4 <HAL_ADC_IRQHandler+0x460>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d126      	bne.n	80042ea <HAL_ADC_IRQHandler+0x456>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_ADC_IRQHandler+0x42c>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_ADC_IRQHandler+0x42c>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f849 	bl	8004348 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042be:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00f      	beq.n	80042ea <HAL_ADC_IRQHandler+0x456>
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_ADC_IRQHandler+0x456>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f841 	bl	800435c <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80042ea:	bf00      	nop
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	46021000 	.word	0x46021000

080042f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b0bc      	sub	sp, #240	@ 0xf0
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4aa8      	ldr	r2, [pc, #672]	@ (8004640 <HAL_ADC_ConfigChannel+0x2bc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d103      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d102      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x36>
 80043b4:	2302      	movs	r3, #2
 80043b6:	f000 be6d 	b.w	8005094 <HAL_ADC_ConfigChannel+0xd10>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f969 	bl	800369e <LL_ADC_REG_IsConversionOngoing>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 864d 	bne.w	800506e <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a99      	ldr	r2, [pc, #612]	@ (8004640 <HAL_ADC_ConfigChannel+0x2bc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	f000 83ea 	beq.w	8004bb4 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d108      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x7a>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0e9b      	lsrs	r3, r3, #26
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2201      	movs	r2, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	e01d      	b.n	800443a <HAL_ADC_ConfigChannel+0xb6>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800440a:	fa93 f3a3 	rbit	r3, r3
 800440e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 8004412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004416:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 800441a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004422:	2320      	movs	r3, #32
 8004424:	e004      	b.n	8004430 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2201      	movs	r2, #1
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	69d1      	ldr	r1, [r2, #28]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	430b      	orrs	r3, r1
 8004446:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	f7fe ff45 	bl	80032e4 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f91d 	bl	800369e <LL_ADC_REG_IsConversionOngoing>
 8004464:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff f929 	bl	80036c4 <LL_ADC_INJ_IsConversionOngoing>
 8004472:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 81ed 	bne.w	800485a <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 81e8 	bne.w	800485a <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	461a      	mov	r2, r3
 8004498:	f7fe fff0 	bl	800347c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d046      	beq.n	800454c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6919      	ldr	r1, [r3, #16]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044ce:	f7fe fe15 	bl	80030fc <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	461a      	mov	r2, r3
 80044e0:	f7fe fe59 	bl	8003196 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	7e9b      	ldrb	r3, [r3, #26]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d11e      	bne.n	800452a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x17e>
 80044fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004500:	e000      	b.n	8004504 <HAL_ADC_ConfigChannel+0x180>
 8004502:	2300      	movs	r3, #0
 8004504:	461a      	mov	r2, r3
 8004506:	f7fe fe7c 	bl	8003202 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x19c>
 800451a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800451e:	e000      	b.n	8004522 <HAL_ADC_ConfigChannel+0x19e>
 8004520:	2300      	movs	r3, #0
 8004522:	461a      	mov	r2, r3
 8004524:	f7fe fe52 	bl	80031cc <LL_ADC_SetOffsetSignedSaturation>
 8004528:	e197      	b.n	800485a <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2200      	movs	r2, #0
 8004534:	4619      	mov	r1, r3
 8004536:	f7fe fe64 	bl	8003202 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2200      	movs	r2, #0
 8004544:	4619      	mov	r1, r3
 8004546:	f7fe fe41 	bl	80031cc <LL_ADC_SetOffsetSignedSaturation>
 800454a:	e186      	b.n	800485a <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fdf3 	bl	800313e <LL_ADC_GetOffsetChannel>
 8004558:	4603      	mov	r3, r0
 800455a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x1f4>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fde8 	bl	800313e <LL_ADC_GetOffsetChannel>
 800456e:	4603      	mov	r3, r0
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	f003 021f 	and.w	r2, r3, #31
 8004576:	e01e      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x232>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fddd 	bl	800313e <LL_ADC_GetOffsetChannel>
 8004584:	4603      	mov	r3, r0
 8004586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8004596:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800459a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 800459e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80045a6:	2320      	movs	r3, #32
 80045a8:	e004      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80045aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d105      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x24a>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	0e9b      	lsrs	r3, r3, #26
 80045c8:	f003 031f 	and.w	r3, r3, #31
 80045cc:	e018      	b.n	8004600 <HAL_ADC_ConfigChannel+0x27c>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045da:	fa93 f3a3 	rbit	r3, r3
 80045de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80045e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80045ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80045f2:	2320      	movs	r3, #32
 80045f4:	e004      	b.n	8004600 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80045f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004600:	429a      	cmp	r2, r3
 8004602:	d107      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2300      	movs	r3, #0
 800460e:	2100      	movs	r1, #0
 8004610:	f7fe fd74 	bl	80030fc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fd8f 	bl	800313e <LL_ADC_GetOffsetChannel>
 8004620:	4603      	mov	r3, r0
 8004622:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x2c0>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fd84 	bl	800313e <LL_ADC_GetOffsetChannel>
 8004636:	4603      	mov	r3, r0
 8004638:	0e9b      	lsrs	r3, r3, #26
 800463a:	f003 021f 	and.w	r2, r3, #31
 800463e:	e020      	b.n	8004682 <HAL_ADC_ConfigChannel+0x2fe>
 8004640:	46021000 	.word	0x46021000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2101      	movs	r1, #1
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fd77 	bl	800313e <LL_ADC_GetOffsetChannel>
 8004650:	4603      	mov	r3, r0
 8004652:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800466a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004672:	2320      	movs	r3, #32
 8004674:	e004      	b.n	8004680 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004676:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d105      	bne.n	800469a <HAL_ADC_ConfigChannel+0x316>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	0e9b      	lsrs	r3, r3, #26
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	e018      	b.n	80046cc <HAL_ADC_ConfigChannel+0x348>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80046ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80046b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80046be:	2320      	movs	r3, #32
 80046c0:	e004      	b.n	80046cc <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80046c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d107      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2300      	movs	r3, #0
 80046da:	2101      	movs	r1, #1
 80046dc:	f7fe fd0e 	bl	80030fc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2102      	movs	r1, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fd29 	bl	800313e <LL_ADC_GetOffsetChannel>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <HAL_ADC_ConfigChannel+0x388>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2102      	movs	r1, #2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fd1e 	bl	800313e <LL_ADC_GetOffsetChannel>
 8004702:	4603      	mov	r3, r0
 8004704:	0e9b      	lsrs	r3, r3, #26
 8004706:	f003 021f 	and.w	r2, r3, #31
 800470a:	e01e      	b.n	800474a <HAL_ADC_ConfigChannel+0x3c6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2102      	movs	r1, #2
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fd13 	bl	800313e <LL_ADC_GetOffsetChannel>
 8004718:	4603      	mov	r3, r0
 800471a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800472a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800472e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004732:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800473a:	2320      	movs	r3, #32
 800473c:	e004      	b.n	8004748 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800473e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x3de>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	0e9b      	lsrs	r3, r3, #26
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	e018      	b.n	8004794 <HAL_ADC_ConfigChannel+0x410>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004776:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800477a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800477e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8004786:	2320      	movs	r3, #32
 8004788:	e004      	b.n	8004794 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800478a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004794:	429a      	cmp	r2, r3
 8004796:	d107      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2300      	movs	r3, #0
 80047a2:	2102      	movs	r1, #2
 80047a4:	f7fe fcaa 	bl	80030fc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2103      	movs	r1, #3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fcc5 	bl	800313e <LL_ADC_GetOffsetChannel>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x450>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2103      	movs	r1, #3
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fcba 	bl	800313e <LL_ADC_GetOffsetChannel>
 80047ca:	4603      	mov	r3, r0
 80047cc:	0e9b      	lsrs	r3, r3, #26
 80047ce:	f003 021f 	and.w	r2, r3, #31
 80047d2:	e01a      	b.n	800480a <HAL_ADC_ConfigChannel+0x486>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2103      	movs	r1, #3
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fcaf 	bl	800313e <LL_ADC_GetOffsetChannel>
 80047e0:	4603      	mov	r3, r0
 80047e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80047ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80047f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 80047fa:	2320      	movs	r3, #32
 80047fc:	e004      	b.n	8004808 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 80047fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d105      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x49e>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	e011      	b.n	8004846 <HAL_ADC_ConfigChannel+0x4c2>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004832:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004834:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 800483a:	2320      	movs	r3, #32
 800483c:	e003      	b.n	8004846 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 800483e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004846:	429a      	cmp	r2, r3
 8004848:	d107      	bne.n	800485a <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	2300      	movs	r3, #0
 8004854:	2103      	movs	r1, #3
 8004856:	f7fe fc51 	bl	80030fc <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe fef6 	bl	8003650 <LL_ADC_IsEnabled>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 840e 	bne.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	f7fe fe63 	bl	8003544 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004886:	f040 80d6 	bne.w	8004a36 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x52a>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	0e9b      	lsrs	r3, r3, #26
 800489c:	3301      	adds	r3, #1
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	bf94      	ite	ls
 80048a6:	2301      	movls	r3, #1
 80048a8:	2300      	movhi	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e019      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x55e>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80048bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048be:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80048c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 80048c6:	2320      	movs	r3, #32
 80048c8:	e003      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 80048ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048cc:	fab3 f383 	clz	r3, r3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2b09      	cmp	r3, #9
 80048da:	bf94      	ite	ls
 80048dc:	2301      	movls	r3, #1
 80048de:	2300      	movhi	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d04d      	beq.n	8004982 <HAL_ADC_ConfigChannel+0x5fe>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x57e>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	0e9b      	lsrs	r3, r3, #26
 80048f8:	3301      	adds	r3, #1
 80048fa:	069b      	lsls	r3, r3, #26
 80048fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004900:	e015      	b.n	800492e <HAL_ADC_ConfigChannel+0x5aa>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004912:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e003      	b.n	8004926 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 800491e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	3301      	adds	r3, #1
 8004928:	069b      	lsls	r3, r3, #26
 800492a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_ADC_ConfigChannel+0x5ca>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	3301      	adds	r3, #1
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2101      	movs	r1, #1
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	e017      	b.n	800497e <HAL_ADC_ConfigChannel+0x5fa>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800495c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800495e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8004966:	2320      	movs	r3, #32
 8004968:	e003      	b.n	8004972 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800496a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800496c:	fab3 f383 	clz	r3, r3
 8004970:	b2db      	uxtb	r3, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	e04e      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x69c>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <HAL_ADC_ConfigChannel+0x61a>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	0e9b      	lsrs	r3, r3, #26
 8004994:	3301      	adds	r3, #1
 8004996:	069b      	lsls	r3, r3, #26
 8004998:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800499c:	e015      	b.n	80049ca <HAL_ADC_ConfigChannel+0x646>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80049ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80049b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 80049b6:	2320      	movs	r3, #32
 80049b8:	e003      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 80049ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	069b      	lsls	r3, r3, #26
 80049c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x666>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0e9b      	lsrs	r3, r3, #26
 80049dc:	3301      	adds	r3, #1
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	e017      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x696>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f2:	fa93 f3a3 	rbit	r3, r3
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80049fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8004a02:	2320      	movs	r3, #32
 8004a04:	e003      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	fab3 f383 	clz	r3, r3
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2101      	movs	r1, #1
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004a32:	f7fe fd23 	bl	800347c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f280 8324 	bge.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a99      	ldr	r2, [pc, #612]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x6ca>
 8004a4a:	4b99      	ldr	r3, [pc, #612]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x92c>)
 8004a4c:	e000      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x6cc>
 8004a4e:	4b99      	ldr	r3, [pc, #612]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x930>)
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fb25 	bl	80030a0 <LL_ADC_GetCommonPathInternalCh>
 8004a56:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a93      	ldr	r2, [pc, #588]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d109      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x6f4>
 8004a64:	4891      	ldr	r0, [pc, #580]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004a66:	f7fe fdf3 	bl	8003650 <LL_ADC_IsEnabled>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e008      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x706>
 8004a78:	488f      	ldr	r0, [pc, #572]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x934>)
 8004a7a:	f7fe fde9 	bl	8003650 <LL_ADC_IsEnabled>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8088 	beq.w	8004ba0 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a89      	ldr	r2, [pc, #548]	@ (8004cbc <HAL_ADC_ConfigChannel+0x938>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d132      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d12c      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a80      	ldr	r2, [pc, #512]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d005      	beq.n	8004abc <HAL_ADC_ConfigChannel+0x738>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a80      	ldr	r2, [pc, #512]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x934>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	f040 82e3 	bne.w	8005082 <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x746>
 8004ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x92c>)
 8004ac8:	e000      	b.n	8004acc <HAL_ADC_ConfigChannel+0x748>
 8004aca:	4a7a      	ldr	r2, [pc, #488]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x930>)
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7fe facf 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004adc:	4b78      	ldr	r3, [pc, #480]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x93c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	099b      	lsrs	r3, r3, #6
 8004ae2:	4a78      	ldr	r2, [pc, #480]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x940>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	099b      	lsrs	r3, r3, #6
 8004aea:	3301      	adds	r3, #1
 8004aec:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004aee:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004af0:	e002      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f9      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004afe:	e2c0      	b.n	8005082 <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a70      	ldr	r2, [pc, #448]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x944>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d121      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11b      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a64      	ldr	r2, [pc, #400]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d005      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0x7a8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a64      	ldr	r2, [pc, #400]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x934>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	f040 82ad 	bne.w	8005086 <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a5e      	ldr	r2, [pc, #376]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x7b6>
 8004b36:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x92c>)
 8004b38:	e000      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x7b8>
 8004b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x930>)
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7fe fa97 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b4c:	e29b      	b.n	8005086 <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5e      	ldr	r2, [pc, #376]	@ (8004ccc <HAL_ADC_ConfigChannel+0x948>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	f040 8297 	bne.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f040 8290 	bne.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d005      	beq.n	8004b7e <HAL_ADC_ConfigChannel+0x7fa>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a50      	ldr	r2, [pc, #320]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x934>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f040 8285 	bne.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a4a      	ldr	r2, [pc, #296]	@ (8004cac <HAL_ADC_ConfigChannel+0x928>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x808>
 8004b88:	4a49      	ldr	r2, [pc, #292]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x92c>)
 8004b8a:	e000      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x80a>
 8004b8c:	4a49      	ldr	r2, [pc, #292]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x930>)
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f7fe fa6e 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
 8004b9e:	e273      	b.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba4:	f043 0220 	orr.w	r2, r3, #32
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8004bb2:	e269      	b.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	f000 8191 	beq.w	8004ee8 <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bce:	d004      	beq.n	8004bda <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x94c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d107      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe fbde 	bl	80033a4 <LL_ADC_REG_SetSequencerChAdd>
 8004be8:	e0b0      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	210f      	movs	r1, #15
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	401a      	ands	r2, r3
 8004c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x896>
 8004c0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c12:	0e9b      	lsrs	r3, r3, #26
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	e011      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x8ba>
 8004c1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 8004c32:	2320      	movs	r3, #32
 8004c34:	e003      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 8004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c38:	fab3 f383 	clz	r3, r3
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	6849      	ldr	r1, [r1, #4]
 8004c42:	f001 011f 	and.w	r1, r1, #31
 8004c46:	408b      	lsls	r3, r1
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d875      	bhi.n	8004d4c <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8004c60:	f7fe f9ea 	bl	8003038 <HAL_GetREVID>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6a:	d866      	bhi.n	8004d3a <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8004c6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x90a>
 8004c78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c7c:	0e9b      	lsrs	r3, r3, #26
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2b13      	cmp	r3, #19
 8004c84:	bf8c      	ite	hi
 8004c86:	2301      	movhi	r3, #1
 8004c88:	2300      	movls	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e02b      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x962>
 8004c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004c92:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	61bb      	str	r3, [r7, #24]
  return result;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d116      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	e018      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x958>
 8004caa:	bf00      	nop
 8004cac:	42028000 	.word	0x42028000
 8004cb0:	42028308 	.word	0x42028308
 8004cb4:	46021308 	.word	0x46021308
 8004cb8:	46021000 	.word	0x46021000
 8004cbc:	ce080000 	.word	0xce080000
 8004cc0:	20000000 	.word	0x20000000
 8004cc4:	053e2d63 	.word	0x053e2d63
 8004cc8:	ca040000 	.word	0xca040000
 8004ccc:	80000001 	.word	0x80000001
 8004cd0:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b13      	cmp	r3, #19
 8004cde:	bf8c      	ite	hi
 8004ce0:	2301      	movhi	r3, #1
 8004ce2:	2300      	movls	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d027      	beq.n	8004d3a <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8004cea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004cee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x986>
 8004cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004cfa:	0e9b      	lsrs	r3, r3, #26
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	3b09      	subs	r3, #9
 8004d02:	2201      	movs	r2, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	e015      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x9b2>
 8004d0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d0e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	60fb      	str	r3, [r7, #12]
  return result;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 8004d22:	2320      	movs	r3, #32
 8004d24:	e003      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	3b09      	subs	r3, #9
 8004d30:	2201      	movs	r2, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7fe facc 	bl	80032e4 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	461a      	mov	r2, r3
 8004d56:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004d5a:	f7fe fb8f 	bl	800347c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f280 8190 	bge.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a97      	ldr	r2, [pc, #604]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x9f2>
 8004d72:	4b97      	ldr	r3, [pc, #604]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004d74:	e000      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x9f4>
 8004d76:	4b97      	ldr	r3, [pc, #604]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe f991 	bl	80030a0 <LL_ADC_GetCommonPathInternalCh>
 8004d7e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a94      	ldr	r2, [pc, #592]	@ (8004fd8 <HAL_ADC_ConfigChannel+0xc54>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d126      	bne.n	8004dda <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d120      	bne.n	8004dda <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a8b      	ldr	r2, [pc, #556]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0xa22>
 8004da2:	4a8b      	ldr	r2, [pc, #556]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004da4:	e000      	b.n	8004da8 <HAL_ADC_ConfigChannel+0xa24>
 8004da6:	4a8b      	ldr	r2, [pc, #556]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f7fe f961 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004db8:	4b88      	ldr	r3, [pc, #544]	@ (8004fdc <HAL_ADC_ConfigChannel+0xc58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	099b      	lsrs	r3, r3, #6
 8004dbe:	4a88      	ldr	r2, [pc, #544]	@ (8004fe0 <HAL_ADC_ConfigChannel+0xc5c>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	099b      	lsrs	r3, r3, #6
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004dca:	e002      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f9      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004dd8:	e067      	b.n	8004eaa <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a81      	ldr	r2, [pc, #516]	@ (8004fe4 <HAL_ADC_ConfigChannel+0xc60>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d116      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d110      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a75      	ldr	r2, [pc, #468]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0xa7a>
 8004dfa:	4a75      	ldr	r2, [pc, #468]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004dfc:	e000      	b.n	8004e00 <HAL_ADC_ConfigChannel+0xa7c>
 8004dfe:	4a75      	ldr	r2, [pc, #468]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7fe f935 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
 8004e10:	e04b      	b.n	8004eaa <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a74      	ldr	r2, [pc, #464]	@ (8004fe8 <HAL_ADC_ConfigChannel+0xc64>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d116      	bne.n	8004e4a <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a67      	ldr	r2, [pc, #412]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0xab2>
 8004e32:	4a67      	ldr	r2, [pc, #412]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004e34:	e000      	b.n	8004e38 <HAL_ADC_ConfigChannel+0xab4>
 8004e36:	4a67      	ldr	r2, [pc, #412]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f7fe f919 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
 8004e48:	e02f      	b.n	8004eaa <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a67      	ldr	r2, [pc, #412]	@ (8004fec <HAL_ADC_ConfigChannel+0xc68>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d12a      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d124      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a62      	ldr	r2, [pc, #392]	@ (8004ff0 <HAL_ADC_ConfigChannel+0xc6c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d11f      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a57      	ldr	r2, [pc, #348]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d101      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0xaf4>
 8004e74:	4a56      	ldr	r2, [pc, #344]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004e76:	e000      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xaf6>
 8004e78:	4a56      	ldr	r2, [pc, #344]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f7fe f8f8 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8004e8a:	f7fe f8d5 	bl	8003038 <HAL_GetREVID>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e94:	d809      	bhi.n	8004eaa <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8004eaa:	f7fe f8c5 	bl	8003038 <HAL_GetREVID>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb4:	f040 80e8 	bne.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8004ff4 <HAL_ADC_ConfigChannel+0xc70>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	f040 80e2 	bne.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 80db 	bne.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004ee6:	e0cf      	b.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ef0:	d004      	beq.n	8004efc <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ef6:	4a40      	ldr	r2, [pc, #256]	@ (8004ff8 <HAL_ADC_ConfigChannel+0xc74>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d106      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe fa80 	bl	800340a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f280 80ba 	bge.w	8005088 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADC_ConfigChannel+0xb9e>
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004f20:	e000      	b.n	8004f24 <HAL_ADC_ConfigChannel+0xba0>
 8004f22:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fe f8bb 	bl	80030a0 <LL_ADC_GetCommonPathInternalCh>
 8004f2a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a32      	ldr	r2, [pc, #200]	@ (8004ffc <HAL_ADC_ConfigChannel+0xc78>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d110      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0xbc2>
 8004f42:	4a23      	ldr	r2, [pc, #140]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004f44:	e000      	b.n	8004f48 <HAL_ADC_ConfigChannel+0xbc4>
 8004f46:	4a23      	ldr	r2, [pc, #140]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7fe f891 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
 8004f58:	e06d      	b.n	8005036 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	@ (8005000 <HAL_ADC_ConfigChannel+0xc7c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d110      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0xbee>
 8004f6e:	4a18      	ldr	r2, [pc, #96]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004f70:	e000      	b.n	8004f74 <HAL_ADC_ConfigChannel+0xbf0>
 8004f72:	4a18      	ldr	r2, [pc, #96]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7fe f87b 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
 8004f84:	e057      	b.n	8005036 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a17      	ldr	r2, [pc, #92]	@ (8004fe8 <HAL_ADC_ConfigChannel+0xc64>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d110      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0d      	ldr	r2, [pc, #52]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0xc1a>
 8004f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004f9c:	e000      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0xc1c>
 8004f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd4 <HAL_ADC_ConfigChannel+0xc50>)
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fe f865 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
 8004fb0:	e041      	b.n	8005036 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8004fec <HAL_ADC_ConfigChannel+0xc68>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d13c      	bne.n	8005036 <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a02      	ldr	r2, [pc, #8]	@ (8004fcc <HAL_ADC_ConfigChannel+0xc48>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d11e      	bne.n	8005004 <HAL_ADC_ConfigChannel+0xc80>
 8004fc6:	4a02      	ldr	r2, [pc, #8]	@ (8004fd0 <HAL_ADC_ConfigChannel+0xc4c>)
 8004fc8:	e01d      	b.n	8005006 <HAL_ADC_ConfigChannel+0xc82>
 8004fca:	bf00      	nop
 8004fcc:	42028000 	.word	0x42028000
 8004fd0:	42028308 	.word	0x42028308
 8004fd4:	46021308 	.word	0x46021308
 8004fd8:	b6002000 	.word	0xb6002000
 8004fdc:	20000000 	.word	0x20000000
 8004fe0:	053e2d63 	.word	0x053e2d63
 8004fe4:	ba004000 	.word	0xba004000
 8004fe8:	80000001 	.word	0x80000001
 8004fec:	b2001000 	.word	0xb2001000
 8004ff0:	46021000 	.word	0x46021000
 8004ff4:	d7200000 	.word	0xd7200000
 8004ff8:	80000010 	.word	0x80000010
 8004ffc:	ce080000 	.word	0xce080000
 8005000:	ca040000 	.word	0xca040000
 8005004:	4a25      	ldr	r2, [pc, #148]	@ (800509c <HAL_ADC_ConfigChannel+0xd18>)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f7fe f832 	bl	800307a <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8005016:	f7fe f80f 	bl	8003038 <HAL_GetREVID>
 800501a:	4603      	mov	r3, r0
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005020:	d809      	bhi.n	8005036 <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8005036:	f7fd ffff 	bl	8003038 <HAL_GetREVID>
 800503a:	4603      	mov	r3, r0
 800503c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005040:	d122      	bne.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <HAL_ADC_ConfigChannel+0xd1c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d11d      	bne.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d117      	bne.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800506c:	e00c      	b.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8005080:	e002      	b.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005086:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8005090:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8005094:	4618      	mov	r0, r3
 8005096:	37f0      	adds	r7, #240	@ 0xf0
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	46021308 	.word	0x46021308
 80050a0:	d7200000 	.word	0xd7200000

080050a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe facd 	bl	8003650 <LL_ADC_IsEnabled>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d15a      	bne.n	8005172 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	4b2e      	ldr	r3, [pc, #184]	@ (800517c <ADC_Enable+0xd8>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00d      	beq.n	80050e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ce:	f043 0210 	orr.w	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e046      	b.n	8005174 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe fa98 	bl	8003628 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <ADC_Enable+0x66>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <ADC_Enable+0xdc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d033      	beq.n	8005172 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800510a:	f7fd ff65 	bl	8002fd8 <HAL_GetTick>
 800510e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005110:	e028      	b.n	8005164 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fa9a 	bl	8003650 <LL_ADC_IsEnabled>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7fe fa7e 	bl	8003628 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800512c:	f7fd ff54 	bl	8002fd8 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d914      	bls.n	8005164 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d00d      	beq.n	8005164 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800514c:	f043 0210 	orr.w	r2, r3, #16
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005158:	f043 0201 	orr.w	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e007      	b.n	8005174 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d1cf      	bne.n	8005112 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	8000003f 	.word	0x8000003f
 8005180:	46021000 	.word	0x46021000

08005184 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005190:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005196:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800519a:	2b00      	cmp	r3, #0
 800519c:	d14b      	bne.n	8005236 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d021      	beq.n	80051fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe f87d 	bl	80032bc <LL_ADC_REG_IsTriggerSourceSWStart>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d032      	beq.n	800522e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d12b      	bne.n	800522e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d11f      	bne.n	800522e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	679a      	str	r2, [r3, #120]	@ 0x78
 80051fa:	e018      	b.n	800522e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d111      	bne.n	800522e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800520e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800521a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff f862 	bl	80042f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005234:	e00e      	b.n	8005254 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff f876 	bl	8004334 <HAL_ADC_ErrorCallback>
}
 8005248:	e004      	b.n	8005254 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005268:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff f84e 	bl	800430c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005284:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800528a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005296:	f043 0204 	orr.w	r2, r3, #4
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff f848 	bl	8004334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800530c:	4b0c      	ldr	r3, [pc, #48]	@ (8005340 <__NVIC_SetPriorityGrouping+0x44>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005318:	4013      	ands	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800532c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800532e:	4a04      	ldr	r2, [pc, #16]	@ (8005340 <__NVIC_SetPriorityGrouping+0x44>)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	60d3      	str	r3, [r2, #12]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	e000ed00 	.word	0xe000ed00

08005344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005348:	4b04      	ldr	r3, [pc, #16]	@ (800535c <__NVIC_GetPriorityGrouping+0x18>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	f003 0307 	and.w	r3, r3, #7
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	e000ed00 	.word	0xe000ed00

08005360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800536a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536e:	2b00      	cmp	r3, #0
 8005370:	db0b      	blt.n	800538a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	f003 021f 	and.w	r2, r3, #31
 8005378:	4907      	ldr	r1, [pc, #28]	@ (8005398 <__NVIC_EnableIRQ+0x38>)
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2001      	movs	r0, #1
 8005382:	fa00 f202 	lsl.w	r2, r0, r2
 8005386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	e000e100 	.word	0xe000e100

0800539c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	db0a      	blt.n	80053c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	490c      	ldr	r1, [pc, #48]	@ (80053e8 <__NVIC_SetPriority+0x4c>)
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	0112      	lsls	r2, r2, #4
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	440b      	add	r3, r1
 80053c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053c4:	e00a      	b.n	80053dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	4908      	ldr	r1, [pc, #32]	@ (80053ec <__NVIC_SetPriority+0x50>)
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	3b04      	subs	r3, #4
 80053d4:	0112      	lsls	r2, r2, #4
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	440b      	add	r3, r1
 80053da:	761a      	strb	r2, [r3, #24]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	e000e100 	.word	0xe000e100
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	@ 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f1c3 0307 	rsb	r3, r3, #7
 800540a:	2b04      	cmp	r3, #4
 800540c:	bf28      	it	cs
 800540e:	2304      	movcs	r3, #4
 8005410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3304      	adds	r3, #4
 8005416:	2b06      	cmp	r3, #6
 8005418:	d902      	bls.n	8005420 <NVIC_EncodePriority+0x30>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3b03      	subs	r3, #3
 800541e:	e000      	b.n	8005422 <NVIC_EncodePriority+0x32>
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005424:	f04f 32ff 	mov.w	r2, #4294967295
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43da      	mvns	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	401a      	ands	r2, r3
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005438:	f04f 31ff 	mov.w	r1, #4294967295
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	43d9      	mvns	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005448:	4313      	orrs	r3, r2
         );
}
 800544a:	4618      	mov	r0, r3
 800544c:	3724      	adds	r7, #36	@ 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ff4c 	bl	80052fc <__NVIC_SetPriorityGrouping>
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800547a:	f7ff ff63 	bl	8005344 <__NVIC_GetPriorityGrouping>
 800547e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	6978      	ldr	r0, [r7, #20]
 8005486:	f7ff ffb3 	bl	80053f0 <NVIC_EncodePriority>
 800548a:	4602      	mov	r2, r0
 800548c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ff82 	bl	800539c <__NVIC_SetPriority>
}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff56 	bl	8005360 <__NVIC_EnableIRQ>
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054cc:	d301      	bcc.n	80054d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80054ce:	2301      	movs	r3, #1
 80054d0:	e00d      	b.n	80054ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80054d2:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <HAL_SYSTICK_Config+0x40>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80054da:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <HAL_SYSTICK_Config+0x40>)
 80054dc:	2200      	movs	r2, #0
 80054de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_SYSTICK_Config+0x40>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a05      	ldr	r2, [pc, #20]	@ (80054fc <HAL_SYSTICK_Config+0x40>)
 80054e6:	f043 0303 	orr.w	r3, r3, #3
 80054ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000e010 	.word	0xe000e010

08005500 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d844      	bhi.n	8005598 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800550e:	a201      	add	r2, pc, #4	@ (adr r2, 8005514 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005537 	.word	0x08005537
 8005518:	08005555 	.word	0x08005555
 800551c:	08005577 	.word	0x08005577
 8005520:	08005599 	.word	0x08005599
 8005524:	08005529 	.word	0x08005529
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005528:	4b1f      	ldr	r3, [pc, #124]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1e      	ldr	r2, [pc, #120]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	6013      	str	r3, [r2, #0]
      break;
 8005534:	e031      	b.n	800559a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005536:	4b1c      	ldr	r3, [pc, #112]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1b      	ldr	r2, [pc, #108]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800553c:	f023 0304 	bic.w	r3, r3, #4
 8005540:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005542:	4b1a      	ldr	r3, [pc, #104]	@ (80055ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005548:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800554a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800554e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005552:	e022      	b.n	800559a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005554:	4b14      	ldr	r3, [pc, #80]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a13      	ldr	r2, [pc, #76]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800555a:	f023 0304 	bic.w	r3, r3, #4
 800555e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005560:	4b12      	ldr	r3, [pc, #72]	@ (80055ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005566:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800556a:	4a10      	ldr	r2, [pc, #64]	@ (80055ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800556c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005574:	e011      	b.n	800559a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005576:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a0b      	ldr	r2, [pc, #44]	@ (80055a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800557c:	f023 0304 	bic.w	r3, r3, #4
 8005580:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005588:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800558c:	4a07      	ldr	r2, [pc, #28]	@ (80055ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800558e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005596:	e000      	b.n	800559a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005598:	bf00      	nop
  }
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e000e010 	.word	0xe000e010
 80055ac:	46020c00 	.word	0x46020c00

080055b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80055b6:	4b19      	ldr	r3, [pc, #100]	@ (800561c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80055c2:	2304      	movs	r3, #4
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	e021      	b.n	800560c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80055c8:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80055ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ce:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80055d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055da:	d011      	beq.n	8005600 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055e2:	d810      	bhi.n	8005606 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f0:	d003      	beq.n	80055fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80055f2:	e008      	b.n	8005606 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80055f4:	2300      	movs	r3, #0
 80055f6:	607b      	str	r3, [r7, #4]
        break;
 80055f8:	e008      	b.n	800560c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80055fa:	2301      	movs	r3, #1
 80055fc:	607b      	str	r3, [r7, #4]
        break;
 80055fe:	e005      	b.n	800560c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005600:	2302      	movs	r3, #2
 8005602:	607b      	str	r3, [r7, #4]
        break;
 8005604:	e002      	b.n	800560c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005606:	2300      	movs	r3, #0
 8005608:	607b      	str	r3, [r7, #4]
        break;
 800560a:	bf00      	nop
    }
  }
  return systick_source;
 800560c:	687b      	ldr	r3, [r7, #4]
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e010 	.word	0xe000e010
 8005620:	46020c00 	.word	0x46020c00

08005624 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800562c:	f7fd fcd4 	bl	8002fd8 <HAL_GetTick>
 8005630:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0db      	b.n	80057f4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a6e      	ldr	r2, [pc, #440]	@ (80057fc <HAL_DMA_Init+0x1d8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f000 809f 	beq.w	8005786 <HAL_DMA_Init+0x162>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6c      	ldr	r2, [pc, #432]	@ (8005800 <HAL_DMA_Init+0x1dc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	f000 8099 	beq.w	8005786 <HAL_DMA_Init+0x162>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6a      	ldr	r2, [pc, #424]	@ (8005804 <HAL_DMA_Init+0x1e0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	f000 8093 	beq.w	8005786 <HAL_DMA_Init+0x162>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a68      	ldr	r2, [pc, #416]	@ (8005808 <HAL_DMA_Init+0x1e4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	f000 808d 	beq.w	8005786 <HAL_DMA_Init+0x162>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a66      	ldr	r2, [pc, #408]	@ (800580c <HAL_DMA_Init+0x1e8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	f000 8087 	beq.w	8005786 <HAL_DMA_Init+0x162>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a64      	ldr	r2, [pc, #400]	@ (8005810 <HAL_DMA_Init+0x1ec>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f000 8081 	beq.w	8005786 <HAL_DMA_Init+0x162>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a62      	ldr	r2, [pc, #392]	@ (8005814 <HAL_DMA_Init+0x1f0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d07b      	beq.n	8005786 <HAL_DMA_Init+0x162>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a61      	ldr	r2, [pc, #388]	@ (8005818 <HAL_DMA_Init+0x1f4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d076      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5f      	ldr	r2, [pc, #380]	@ (800581c <HAL_DMA_Init+0x1f8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d071      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005820 <HAL_DMA_Init+0x1fc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d06c      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005824 <HAL_DMA_Init+0x200>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d067      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5b      	ldr	r2, [pc, #364]	@ (8005828 <HAL_DMA_Init+0x204>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d062      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a59      	ldr	r2, [pc, #356]	@ (800582c <HAL_DMA_Init+0x208>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d05d      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a58      	ldr	r2, [pc, #352]	@ (8005830 <HAL_DMA_Init+0x20c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d058      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a56      	ldr	r2, [pc, #344]	@ (8005834 <HAL_DMA_Init+0x210>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d053      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a55      	ldr	r2, [pc, #340]	@ (8005838 <HAL_DMA_Init+0x214>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d04e      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a53      	ldr	r2, [pc, #332]	@ (800583c <HAL_DMA_Init+0x218>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d049      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a52      	ldr	r2, [pc, #328]	@ (8005840 <HAL_DMA_Init+0x21c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d044      	beq.n	8005786 <HAL_DMA_Init+0x162>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a50      	ldr	r2, [pc, #320]	@ (8005844 <HAL_DMA_Init+0x220>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d03f      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a4f      	ldr	r2, [pc, #316]	@ (8005848 <HAL_DMA_Init+0x224>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d03a      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a4d      	ldr	r2, [pc, #308]	@ (800584c <HAL_DMA_Init+0x228>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d035      	beq.n	8005786 <HAL_DMA_Init+0x162>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a4c      	ldr	r2, [pc, #304]	@ (8005850 <HAL_DMA_Init+0x22c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d030      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a4a      	ldr	r2, [pc, #296]	@ (8005854 <HAL_DMA_Init+0x230>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02b      	beq.n	8005786 <HAL_DMA_Init+0x162>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a49      	ldr	r2, [pc, #292]	@ (8005858 <HAL_DMA_Init+0x234>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d026      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a47      	ldr	r2, [pc, #284]	@ (800585c <HAL_DMA_Init+0x238>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d021      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a46      	ldr	r2, [pc, #280]	@ (8005860 <HAL_DMA_Init+0x23c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01c      	beq.n	8005786 <HAL_DMA_Init+0x162>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a44      	ldr	r2, [pc, #272]	@ (8005864 <HAL_DMA_Init+0x240>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d017      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a43      	ldr	r2, [pc, #268]	@ (8005868 <HAL_DMA_Init+0x244>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d012      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a41      	ldr	r2, [pc, #260]	@ (800586c <HAL_DMA_Init+0x248>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00d      	beq.n	8005786 <HAL_DMA_Init+0x162>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a40      	ldr	r2, [pc, #256]	@ (8005870 <HAL_DMA_Init+0x24c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d008      	beq.n	8005786 <HAL_DMA_Init+0x162>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a3e      	ldr	r2, [pc, #248]	@ (8005874 <HAL_DMA_Init+0x250>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <HAL_DMA_Init+0x162>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3d      	ldr	r2, [pc, #244]	@ (8005878 <HAL_DMA_Init+0x254>)
 8005784:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0206 	orr.w	r2, r2, #6
 80057a4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80057a6:	e00f      	b.n	80057c8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80057a8:	f7fd fc16 	bl	8002fd8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d908      	bls.n	80057c8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2210      	movs	r2, #16
 80057ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2203      	movs	r2, #3
 80057c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e015      	b.n	80057f4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e8      	bne.n	80057a8 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb24 	bl	8005e24 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40020050 	.word	0x40020050
 8005800:	50020050 	.word	0x50020050
 8005804:	400200d0 	.word	0x400200d0
 8005808:	500200d0 	.word	0x500200d0
 800580c:	40020150 	.word	0x40020150
 8005810:	50020150 	.word	0x50020150
 8005814:	400201d0 	.word	0x400201d0
 8005818:	500201d0 	.word	0x500201d0
 800581c:	40020250 	.word	0x40020250
 8005820:	50020250 	.word	0x50020250
 8005824:	400202d0 	.word	0x400202d0
 8005828:	500202d0 	.word	0x500202d0
 800582c:	40020350 	.word	0x40020350
 8005830:	50020350 	.word	0x50020350
 8005834:	400203d0 	.word	0x400203d0
 8005838:	500203d0 	.word	0x500203d0
 800583c:	40020450 	.word	0x40020450
 8005840:	50020450 	.word	0x50020450
 8005844:	400204d0 	.word	0x400204d0
 8005848:	500204d0 	.word	0x500204d0
 800584c:	40020550 	.word	0x40020550
 8005850:	50020550 	.word	0x50020550
 8005854:	400205d0 	.word	0x400205d0
 8005858:	500205d0 	.word	0x500205d0
 800585c:	40020650 	.word	0x40020650
 8005860:	50020650 	.word	0x50020650
 8005864:	400206d0 	.word	0x400206d0
 8005868:	500206d0 	.word	0x500206d0
 800586c:	40020750 	.word	0x40020750
 8005870:	50020750 	.word	0x50020750
 8005874:	400207d0 	.word	0x400207d0
 8005878:	500207d0 	.word	0x500207d0

0800587c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e04f      	b.n	8005934 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_DMA_Start_IT+0x26>
 800589e:	2302      	movs	r3, #2
 80058a0:	e048      	b.n	8005934 <HAL_DMA_Start_IT+0xb8>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d136      	bne.n	8005924 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fa84 	bl	8005dd8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80058de:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058f6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800590e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e007      	b.n	8005934 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2240      	movs	r2, #64	@ 0x40
 8005928:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005944:	f7fd fb48 	bl	8002fd8 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e06b      	b.n	8005a2c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d008      	beq.n	8005972 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e05c      	b.n	8005a2c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0204 	orr.w	r2, r2, #4
 8005980:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2205      	movs	r2, #5
 8005986:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800598a:	e020      	b.n	80059ce <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800598c:	f7fd fb24 	bl	8002fd8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b05      	cmp	r3, #5
 8005998:	d919      	bls.n	80059ce <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599e:	f043 0210 	orr.w	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2203      	movs	r2, #3
 80059aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059be:	2201      	movs	r2, #1
 80059c0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e02e      	b.n	8005a2c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0d7      	beq.n	800598c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0202 	orr.w	r2, r2, #2
 80059ea:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2204      	movs	r2, #4
 80059f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80059fc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a16:	2201      	movs	r2, #1
 8005a18:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e019      	b.n	8005a7a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d004      	beq.n	8005a5c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e00e      	b.n	8005a7a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2204      	movs	r2, #4
 8005a60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005a96:	f023 030f 	bic.w	r3, r3, #15
 8005a9a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa4:	3b50      	subs	r3, #80	@ 0x50
 8005aa6:	09db      	lsrs	r3, r3, #7
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2201      	movs	r2, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 813b 	beq.w	8005d3c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d011      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005aea:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d011      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b1c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b22:	f043 0202 	orr.w	r2, r3, #2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d011      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005b4e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b54:	f043 0204 	orr.w	r2, r3, #4
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d011      	beq.n	8005b8e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b80:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b86:	f043 0208 	orr.w	r2, r3, #8
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d013      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bb2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04c      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d045      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005be8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d12e      	bne.n	8005c54 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c04:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0202 	orr.w	r2, r2, #2
 8005c14:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2e:	2201      	movs	r2, #1
 8005c30:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2200      	movs	r2, #0
 8005c38:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d07a      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	4798      	blx	r3
        }

        return;
 8005c52:	e075      	b.n	8005d40 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2205      	movs	r2, #5
 8005c58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d039      	beq.n	8005cee <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d032      	beq.n	8005cee <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d116      	bne.n	8005ccc <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d111      	bne.n	8005ccc <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	731a      	strb	r2, [r3, #12]
 8005cb8:	e008      	b.n	8005ccc <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005cd4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d025      	beq.n	8005d42 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0202 	orr.w	r2, r2, #2
 8005d04:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1e:	2201      	movs	r2, #1
 8005d20:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
 8005d3a:	e002      	b.n	8005d42 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005d40:	bf00      	nop
    }
  }
}
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e02b      	b.n	8005dcc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005d7c:	f023 030f 	bic.w	r3, r3, #15
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d8a:	3b50      	subs	r3, #80	@ 0x50
 8005d8c:	09db      	lsrs	r3, r3, #7
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2201      	movs	r2, #1
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d012      	beq.n	8005dca <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f003 0311 	and.w	r3, r3, #17
 8005daa:	2b11      	cmp	r3, #17
 8005dac:	d106      	bne.n	8005dbc <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e006      	b.n	8005dca <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	401a      	ands	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	b291      	uxth	r1, r2
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005e04:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a53      	ldr	r2, [pc, #332]	@ (8005fb0 <DMA_Init+0x18c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	f000 80a0 	beq.w	8005faa <DMA_Init+0x186>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a51      	ldr	r2, [pc, #324]	@ (8005fb4 <DMA_Init+0x190>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	f000 809a 	beq.w	8005faa <DMA_Init+0x186>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4f      	ldr	r2, [pc, #316]	@ (8005fb8 <DMA_Init+0x194>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	f000 8094 	beq.w	8005faa <DMA_Init+0x186>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a4d      	ldr	r2, [pc, #308]	@ (8005fbc <DMA_Init+0x198>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	f000 808e 	beq.w	8005faa <DMA_Init+0x186>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4b      	ldr	r2, [pc, #300]	@ (8005fc0 <DMA_Init+0x19c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	f000 8088 	beq.w	8005faa <DMA_Init+0x186>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a49      	ldr	r2, [pc, #292]	@ (8005fc4 <DMA_Init+0x1a0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	f000 8082 	beq.w	8005faa <DMA_Init+0x186>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a47      	ldr	r2, [pc, #284]	@ (8005fc8 <DMA_Init+0x1a4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d07c      	beq.n	8005faa <DMA_Init+0x186>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a45      	ldr	r2, [pc, #276]	@ (8005fcc <DMA_Init+0x1a8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d077      	beq.n	8005faa <DMA_Init+0x186>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a44      	ldr	r2, [pc, #272]	@ (8005fd0 <DMA_Init+0x1ac>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d072      	beq.n	8005faa <DMA_Init+0x186>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a42      	ldr	r2, [pc, #264]	@ (8005fd4 <DMA_Init+0x1b0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d06d      	beq.n	8005faa <DMA_Init+0x186>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a41      	ldr	r2, [pc, #260]	@ (8005fd8 <DMA_Init+0x1b4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d068      	beq.n	8005faa <DMA_Init+0x186>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a3f      	ldr	r2, [pc, #252]	@ (8005fdc <DMA_Init+0x1b8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d063      	beq.n	8005faa <DMA_Init+0x186>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8005fe0 <DMA_Init+0x1bc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d05e      	beq.n	8005faa <DMA_Init+0x186>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fe4 <DMA_Init+0x1c0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d059      	beq.n	8005faa <DMA_Init+0x186>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3b      	ldr	r2, [pc, #236]	@ (8005fe8 <DMA_Init+0x1c4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d054      	beq.n	8005faa <DMA_Init+0x186>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a39      	ldr	r2, [pc, #228]	@ (8005fec <DMA_Init+0x1c8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d04f      	beq.n	8005faa <DMA_Init+0x186>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a38      	ldr	r2, [pc, #224]	@ (8005ff0 <DMA_Init+0x1cc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d04a      	beq.n	8005faa <DMA_Init+0x186>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a36      	ldr	r2, [pc, #216]	@ (8005ff4 <DMA_Init+0x1d0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d045      	beq.n	8005faa <DMA_Init+0x186>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a35      	ldr	r2, [pc, #212]	@ (8005ff8 <DMA_Init+0x1d4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d040      	beq.n	8005faa <DMA_Init+0x186>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a33      	ldr	r2, [pc, #204]	@ (8005ffc <DMA_Init+0x1d8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d03b      	beq.n	8005faa <DMA_Init+0x186>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a32      	ldr	r2, [pc, #200]	@ (8006000 <DMA_Init+0x1dc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d036      	beq.n	8005faa <DMA_Init+0x186>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a30      	ldr	r2, [pc, #192]	@ (8006004 <DMA_Init+0x1e0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d031      	beq.n	8005faa <DMA_Init+0x186>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8006008 <DMA_Init+0x1e4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d02c      	beq.n	8005faa <DMA_Init+0x186>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a2d      	ldr	r2, [pc, #180]	@ (800600c <DMA_Init+0x1e8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d027      	beq.n	8005faa <DMA_Init+0x186>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006010 <DMA_Init+0x1ec>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d022      	beq.n	8005faa <DMA_Init+0x186>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2a      	ldr	r2, [pc, #168]	@ (8006014 <DMA_Init+0x1f0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01d      	beq.n	8005faa <DMA_Init+0x186>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a29      	ldr	r2, [pc, #164]	@ (8006018 <DMA_Init+0x1f4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d018      	beq.n	8005faa <DMA_Init+0x186>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	@ (800601c <DMA_Init+0x1f8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <DMA_Init+0x186>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a26      	ldr	r2, [pc, #152]	@ (8006020 <DMA_Init+0x1fc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <DMA_Init+0x186>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a24      	ldr	r2, [pc, #144]	@ (8006024 <DMA_Init+0x200>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <DMA_Init+0x186>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a23      	ldr	r2, [pc, #140]	@ (8006028 <DMA_Init+0x204>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <DMA_Init+0x186>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a21      	ldr	r2, [pc, #132]	@ (800602c <DMA_Init+0x208>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d142      	bne.n	8006030 <DMA_Init+0x20c>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e041      	b.n	8006032 <DMA_Init+0x20e>
 8005fae:	bf00      	nop
 8005fb0:	40020050 	.word	0x40020050
 8005fb4:	50020050 	.word	0x50020050
 8005fb8:	400200d0 	.word	0x400200d0
 8005fbc:	500200d0 	.word	0x500200d0
 8005fc0:	40020150 	.word	0x40020150
 8005fc4:	50020150 	.word	0x50020150
 8005fc8:	400201d0 	.word	0x400201d0
 8005fcc:	500201d0 	.word	0x500201d0
 8005fd0:	40020250 	.word	0x40020250
 8005fd4:	50020250 	.word	0x50020250
 8005fd8:	400202d0 	.word	0x400202d0
 8005fdc:	500202d0 	.word	0x500202d0
 8005fe0:	40020350 	.word	0x40020350
 8005fe4:	50020350 	.word	0x50020350
 8005fe8:	400203d0 	.word	0x400203d0
 8005fec:	500203d0 	.word	0x500203d0
 8005ff0:	40020450 	.word	0x40020450
 8005ff4:	50020450 	.word	0x50020450
 8005ff8:	400204d0 	.word	0x400204d0
 8005ffc:	500204d0 	.word	0x500204d0
 8006000:	40020550 	.word	0x40020550
 8006004:	50020550 	.word	0x50020550
 8006008:	400205d0 	.word	0x400205d0
 800600c:	500205d0 	.word	0x500205d0
 8006010:	40020650 	.word	0x40020650
 8006014:	50020650 	.word	0x50020650
 8006018:	400206d0 	.word	0x400206d0
 800601c:	500206d0 	.word	0x500206d0
 8006020:	40020750 	.word	0x40020750
 8006024:	50020750 	.word	0x50020750
 8006028:	400207d0 	.word	0x400207d0
 800602c:	500207d0 	.word	0x500207d0
 8006030:	2300      	movs	r3, #0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d012      	beq.n	800605c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	3b01      	subs	r3, #1
 8006040:	051b      	lsls	r3, r3, #20
 8006042:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006046:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	3b01      	subs	r3, #1
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006054:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	430a      	orrs	r2, r1
 800606e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800608e:	f040 80b0 	bne.w	80061f2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a82      	ldr	r2, [pc, #520]	@ (80062a0 <DMA_Init+0x47c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	f000 80a0 	beq.w	80061de <DMA_Init+0x3ba>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a80      	ldr	r2, [pc, #512]	@ (80062a4 <DMA_Init+0x480>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f000 809a 	beq.w	80061de <DMA_Init+0x3ba>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a7e      	ldr	r2, [pc, #504]	@ (80062a8 <DMA_Init+0x484>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	f000 8094 	beq.w	80061de <DMA_Init+0x3ba>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a7c      	ldr	r2, [pc, #496]	@ (80062ac <DMA_Init+0x488>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	f000 808e 	beq.w	80061de <DMA_Init+0x3ba>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a7a      	ldr	r2, [pc, #488]	@ (80062b0 <DMA_Init+0x48c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	f000 8088 	beq.w	80061de <DMA_Init+0x3ba>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a78      	ldr	r2, [pc, #480]	@ (80062b4 <DMA_Init+0x490>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	f000 8082 	beq.w	80061de <DMA_Init+0x3ba>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a76      	ldr	r2, [pc, #472]	@ (80062b8 <DMA_Init+0x494>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d07c      	beq.n	80061de <DMA_Init+0x3ba>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a74      	ldr	r2, [pc, #464]	@ (80062bc <DMA_Init+0x498>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d077      	beq.n	80061de <DMA_Init+0x3ba>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a73      	ldr	r2, [pc, #460]	@ (80062c0 <DMA_Init+0x49c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d072      	beq.n	80061de <DMA_Init+0x3ba>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a71      	ldr	r2, [pc, #452]	@ (80062c4 <DMA_Init+0x4a0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d06d      	beq.n	80061de <DMA_Init+0x3ba>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a70      	ldr	r2, [pc, #448]	@ (80062c8 <DMA_Init+0x4a4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d068      	beq.n	80061de <DMA_Init+0x3ba>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a6e      	ldr	r2, [pc, #440]	@ (80062cc <DMA_Init+0x4a8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d063      	beq.n	80061de <DMA_Init+0x3ba>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a6d      	ldr	r2, [pc, #436]	@ (80062d0 <DMA_Init+0x4ac>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d05e      	beq.n	80061de <DMA_Init+0x3ba>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a6b      	ldr	r2, [pc, #428]	@ (80062d4 <DMA_Init+0x4b0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d059      	beq.n	80061de <DMA_Init+0x3ba>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a6a      	ldr	r2, [pc, #424]	@ (80062d8 <DMA_Init+0x4b4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d054      	beq.n	80061de <DMA_Init+0x3ba>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a68      	ldr	r2, [pc, #416]	@ (80062dc <DMA_Init+0x4b8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d04f      	beq.n	80061de <DMA_Init+0x3ba>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a67      	ldr	r2, [pc, #412]	@ (80062e0 <DMA_Init+0x4bc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d04a      	beq.n	80061de <DMA_Init+0x3ba>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a65      	ldr	r2, [pc, #404]	@ (80062e4 <DMA_Init+0x4c0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d045      	beq.n	80061de <DMA_Init+0x3ba>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a64      	ldr	r2, [pc, #400]	@ (80062e8 <DMA_Init+0x4c4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d040      	beq.n	80061de <DMA_Init+0x3ba>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a62      	ldr	r2, [pc, #392]	@ (80062ec <DMA_Init+0x4c8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d03b      	beq.n	80061de <DMA_Init+0x3ba>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a61      	ldr	r2, [pc, #388]	@ (80062f0 <DMA_Init+0x4cc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d036      	beq.n	80061de <DMA_Init+0x3ba>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a5f      	ldr	r2, [pc, #380]	@ (80062f4 <DMA_Init+0x4d0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d031      	beq.n	80061de <DMA_Init+0x3ba>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a5e      	ldr	r2, [pc, #376]	@ (80062f8 <DMA_Init+0x4d4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d02c      	beq.n	80061de <DMA_Init+0x3ba>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a5c      	ldr	r2, [pc, #368]	@ (80062fc <DMA_Init+0x4d8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d027      	beq.n	80061de <DMA_Init+0x3ba>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a5b      	ldr	r2, [pc, #364]	@ (8006300 <DMA_Init+0x4dc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d022      	beq.n	80061de <DMA_Init+0x3ba>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a59      	ldr	r2, [pc, #356]	@ (8006304 <DMA_Init+0x4e0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01d      	beq.n	80061de <DMA_Init+0x3ba>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a58      	ldr	r2, [pc, #352]	@ (8006308 <DMA_Init+0x4e4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d018      	beq.n	80061de <DMA_Init+0x3ba>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a56      	ldr	r2, [pc, #344]	@ (800630c <DMA_Init+0x4e8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <DMA_Init+0x3ba>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a55      	ldr	r2, [pc, #340]	@ (8006310 <DMA_Init+0x4ec>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00e      	beq.n	80061de <DMA_Init+0x3ba>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a53      	ldr	r2, [pc, #332]	@ (8006314 <DMA_Init+0x4f0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d009      	beq.n	80061de <DMA_Init+0x3ba>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a52      	ldr	r2, [pc, #328]	@ (8006318 <DMA_Init+0x4f4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <DMA_Init+0x3ba>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a50      	ldr	r2, [pc, #320]	@ (800631c <DMA_Init+0x4f8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d101      	bne.n	80061e2 <DMA_Init+0x3be>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <DMA_Init+0x3c0>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00d      	beq.n	8006204 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e008      	b.n	8006204 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061fa:	d103      	bne.n	8006204 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006202:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800620a:	4b45      	ldr	r3, [pc, #276]	@ (8006320 <DMA_Init+0x4fc>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	430b      	orrs	r3, r1
 8006216:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a36      	ldr	r2, [pc, #216]	@ (8006300 <DMA_Init+0x4dc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d022      	beq.n	8006270 <DMA_Init+0x44c>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a35      	ldr	r2, [pc, #212]	@ (8006304 <DMA_Init+0x4e0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01d      	beq.n	8006270 <DMA_Init+0x44c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a33      	ldr	r2, [pc, #204]	@ (8006308 <DMA_Init+0x4e4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d018      	beq.n	8006270 <DMA_Init+0x44c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a32      	ldr	r2, [pc, #200]	@ (800630c <DMA_Init+0x4e8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <DMA_Init+0x44c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a30      	ldr	r2, [pc, #192]	@ (8006310 <DMA_Init+0x4ec>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <DMA_Init+0x44c>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2f      	ldr	r2, [pc, #188]	@ (8006314 <DMA_Init+0x4f0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d009      	beq.n	8006270 <DMA_Init+0x44c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2d      	ldr	r2, [pc, #180]	@ (8006318 <DMA_Init+0x4f4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <DMA_Init+0x44c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2c      	ldr	r2, [pc, #176]	@ (800631c <DMA_Init+0x4f8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d101      	bne.n	8006274 <DMA_Init+0x450>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <DMA_Init+0x452>
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2200      	movs	r2, #0
 8006288:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2200      	movs	r2, #0
 8006290:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40020050 	.word	0x40020050
 80062a4:	50020050 	.word	0x50020050
 80062a8:	400200d0 	.word	0x400200d0
 80062ac:	500200d0 	.word	0x500200d0
 80062b0:	40020150 	.word	0x40020150
 80062b4:	50020150 	.word	0x50020150
 80062b8:	400201d0 	.word	0x400201d0
 80062bc:	500201d0 	.word	0x500201d0
 80062c0:	40020250 	.word	0x40020250
 80062c4:	50020250 	.word	0x50020250
 80062c8:	400202d0 	.word	0x400202d0
 80062cc:	500202d0 	.word	0x500202d0
 80062d0:	40020350 	.word	0x40020350
 80062d4:	50020350 	.word	0x50020350
 80062d8:	400203d0 	.word	0x400203d0
 80062dc:	500203d0 	.word	0x500203d0
 80062e0:	40020450 	.word	0x40020450
 80062e4:	50020450 	.word	0x50020450
 80062e8:	400204d0 	.word	0x400204d0
 80062ec:	500204d0 	.word	0x500204d0
 80062f0:	40020550 	.word	0x40020550
 80062f4:	50020550 	.word	0x50020550
 80062f8:	400205d0 	.word	0x400205d0
 80062fc:	500205d0 	.word	0x500205d0
 8006300:	40020650 	.word	0x40020650
 8006304:	50020650 	.word	0x50020650
 8006308:	400206d0 	.word	0x400206d0
 800630c:	500206d0 	.word	0x500206d0
 8006310:	40020750 	.word	0x40020750
 8006314:	50020750 	.word	0x50020750
 8006318:	400207d0 	.word	0x400207d0
 800631c:	500207d0 	.word	0x500207d0
 8006320:	3cc03180 	.word	0x3cc03180

08006324 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800632c:	f7fc fe54 	bl	8002fd8 <HAL_GetTick>
 8006330:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0db      	b.n	80064f4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6e      	ldr	r2, [pc, #440]	@ (80064fc <HAL_DMAEx_List_Init+0x1d8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f000 809f 	beq.w	8006486 <HAL_DMAEx_List_Init+0x162>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a6c      	ldr	r2, [pc, #432]	@ (8006500 <HAL_DMAEx_List_Init+0x1dc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	f000 8099 	beq.w	8006486 <HAL_DMAEx_List_Init+0x162>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a6a      	ldr	r2, [pc, #424]	@ (8006504 <HAL_DMAEx_List_Init+0x1e0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	f000 8093 	beq.w	8006486 <HAL_DMAEx_List_Init+0x162>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a68      	ldr	r2, [pc, #416]	@ (8006508 <HAL_DMAEx_List_Init+0x1e4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	f000 808d 	beq.w	8006486 <HAL_DMAEx_List_Init+0x162>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a66      	ldr	r2, [pc, #408]	@ (800650c <HAL_DMAEx_List_Init+0x1e8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f000 8087 	beq.w	8006486 <HAL_DMAEx_List_Init+0x162>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a64      	ldr	r2, [pc, #400]	@ (8006510 <HAL_DMAEx_List_Init+0x1ec>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f000 8081 	beq.w	8006486 <HAL_DMAEx_List_Init+0x162>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a62      	ldr	r2, [pc, #392]	@ (8006514 <HAL_DMAEx_List_Init+0x1f0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d07b      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a61      	ldr	r2, [pc, #388]	@ (8006518 <HAL_DMAEx_List_Init+0x1f4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d076      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5f      	ldr	r2, [pc, #380]	@ (800651c <HAL_DMAEx_List_Init+0x1f8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d071      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a5e      	ldr	r2, [pc, #376]	@ (8006520 <HAL_DMAEx_List_Init+0x1fc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d06c      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a5c      	ldr	r2, [pc, #368]	@ (8006524 <HAL_DMAEx_List_Init+0x200>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d067      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a5b      	ldr	r2, [pc, #364]	@ (8006528 <HAL_DMAEx_List_Init+0x204>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d062      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a59      	ldr	r2, [pc, #356]	@ (800652c <HAL_DMAEx_List_Init+0x208>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d05d      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a58      	ldr	r2, [pc, #352]	@ (8006530 <HAL_DMAEx_List_Init+0x20c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d058      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a56      	ldr	r2, [pc, #344]	@ (8006534 <HAL_DMAEx_List_Init+0x210>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d053      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a55      	ldr	r2, [pc, #340]	@ (8006538 <HAL_DMAEx_List_Init+0x214>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d04e      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a53      	ldr	r2, [pc, #332]	@ (800653c <HAL_DMAEx_List_Init+0x218>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d049      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a52      	ldr	r2, [pc, #328]	@ (8006540 <HAL_DMAEx_List_Init+0x21c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d044      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a50      	ldr	r2, [pc, #320]	@ (8006544 <HAL_DMAEx_List_Init+0x220>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d03f      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a4f      	ldr	r2, [pc, #316]	@ (8006548 <HAL_DMAEx_List_Init+0x224>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d03a      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a4d      	ldr	r2, [pc, #308]	@ (800654c <HAL_DMAEx_List_Init+0x228>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d035      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a4c      	ldr	r2, [pc, #304]	@ (8006550 <HAL_DMAEx_List_Init+0x22c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d030      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a4a      	ldr	r2, [pc, #296]	@ (8006554 <HAL_DMAEx_List_Init+0x230>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02b      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a49      	ldr	r2, [pc, #292]	@ (8006558 <HAL_DMAEx_List_Init+0x234>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d026      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a47      	ldr	r2, [pc, #284]	@ (800655c <HAL_DMAEx_List_Init+0x238>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d021      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a46      	ldr	r2, [pc, #280]	@ (8006560 <HAL_DMAEx_List_Init+0x23c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d01c      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a44      	ldr	r2, [pc, #272]	@ (8006564 <HAL_DMAEx_List_Init+0x240>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d017      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a43      	ldr	r2, [pc, #268]	@ (8006568 <HAL_DMAEx_List_Init+0x244>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d012      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a41      	ldr	r2, [pc, #260]	@ (800656c <HAL_DMAEx_List_Init+0x248>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00d      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a40      	ldr	r2, [pc, #256]	@ (8006570 <HAL_DMAEx_List_Init+0x24c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d008      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a3e      	ldr	r2, [pc, #248]	@ (8006574 <HAL_DMAEx_List_Init+0x250>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <HAL_DMAEx_List_Init+0x162>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a3d      	ldr	r2, [pc, #244]	@ (8006578 <HAL_DMAEx_List_Init+0x254>)
 8006484:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0206 	orr.w	r2, r2, #6
 80064a4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064a6:	e00f      	b.n	80064c8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80064a8:	f7fc fd96 	bl	8002fd8 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d908      	bls.n	80064c8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2210      	movs	r2, #16
 80064ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2203      	movs	r2, #3
 80064c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e015      	b.n	80064f4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e8      	bne.n	80064a8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fad0 	bl	8006a7c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40020050 	.word	0x40020050
 8006500:	50020050 	.word	0x50020050
 8006504:	400200d0 	.word	0x400200d0
 8006508:	500200d0 	.word	0x500200d0
 800650c:	40020150 	.word	0x40020150
 8006510:	50020150 	.word	0x50020150
 8006514:	400201d0 	.word	0x400201d0
 8006518:	500201d0 	.word	0x500201d0
 800651c:	40020250 	.word	0x40020250
 8006520:	50020250 	.word	0x50020250
 8006524:	400202d0 	.word	0x400202d0
 8006528:	500202d0 	.word	0x500202d0
 800652c:	40020350 	.word	0x40020350
 8006530:	50020350 	.word	0x50020350
 8006534:	400203d0 	.word	0x400203d0
 8006538:	500203d0 	.word	0x500203d0
 800653c:	40020450 	.word	0x40020450
 8006540:	50020450 	.word	0x50020450
 8006544:	400204d0 	.word	0x400204d0
 8006548:	500204d0 	.word	0x500204d0
 800654c:	40020550 	.word	0x40020550
 8006550:	50020550 	.word	0x50020550
 8006554:	400205d0 	.word	0x400205d0
 8006558:	500205d0 	.word	0x500205d0
 800655c:	40020650 	.word	0x40020650
 8006560:	50020650 	.word	0x50020650
 8006564:	400206d0 	.word	0x400206d0
 8006568:	500206d0 	.word	0x500206d0
 800656c:	40020750 	.word	0x40020750
 8006570:	50020750 	.word	0x50020750
 8006574:	400207d0 	.word	0x400207d0
 8006578:	500207d0 	.word	0x500207d0

0800657c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_DMAEx_List_Start_IT+0x16>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e082      	b.n	800669c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800659c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065a8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d005      	beq.n	80065bc <HAL_DMAEx_List_Start_IT+0x40>
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d16a      	bne.n	800668c <HAL_DMAEx_List_Start_IT+0x110>
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d067      	beq.n	800668c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d157      	bne.n	8006678 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_DMAEx_List_Start_IT+0x5a>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e062      	b.n	800669c <HAL_DMAEx_List_Start_IT+0x120>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ea:	2202      	movs	r2, #2
 80065ec:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f8:	2200      	movs	r2, #0
 80065fa:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800660a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695a      	ldr	r2, [r3, #20]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006622:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800663a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f107 010c 	add.w	r1, r7, #12
 8006646:	2200      	movs	r2, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fe3d 	bl	80072c8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4619      	mov	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	0c0b      	lsrs	r3, r1, #16
 800665c:	041b      	lsls	r3, r3, #16
 800665e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800666c:	4013      	ands	r3, r2
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	430b      	orrs	r3, r1
 8006676:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	e007      	b.n	800669c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2240      	movs	r2, #64	@ 0x40
 8006690:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_DMAEx_List_BuildNode+0x16>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e004      	b.n	80066c8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fb33 	bl	8006d2c <DMA_List_BuildNode>

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e004      	b.n	80066f4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fc75 	bl	8006fdc <DMA_List_GetNodeConfig>

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08c      	sub	sp, #48	@ 0x30
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_DMAEx_List_InsertNode+0x18>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0b6      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d104      	bne.n	800672a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2204      	movs	r2, #4
 8006724:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e0ad      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fd5c 	bl	80071f0 <DMA_List_CheckNodesBaseAddresses>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2205      	movs	r2, #5
 8006742:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e09e      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fd7d 	bl	8007250 <DMA_List_CheckNodesTypes>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2204      	movs	r2, #4
 8006760:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e08f      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2202      	movs	r2, #2
 800676a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006772:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fda3 	bl	80072c8 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d11a      	bne.n	80067c0 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	e06c      	b.n	8006878 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067aa:	4013      	ands	r3, r2
 80067ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067b0:	4319      	orrs	r1, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2202      	movs	r2, #2
 80067bc:	609a      	str	r2, [r3, #8]
 80067be:	e05b      	b.n	8006878 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10f      	bne.n	80067e6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067d0:	4013      	ands	r3, r2
 80067d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067d6:	4319      	orrs	r1, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e043      	b.n	800686e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80067ea:	f107 0314 	add.w	r3, r7, #20
 80067ee:	461a      	mov	r2, r3
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fd98 	bl	8007328 <DMA_List_FindNode>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d132      	bne.n	8006864 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d11a      	bne.n	800683e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	461a      	mov	r2, r3
 8006816:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800681a:	4013      	ands	r3, r2
 800681c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800681e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006820:	4319      	orrs	r1, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800682e:	4013      	ands	r3, r2
 8006830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006834:	4319      	orrs	r1, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800683c:	e017      	b.n	800686e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800683e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006854:	4013      	ands	r3, r2
 8006856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800685a:	4319      	orrs	r1, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006862:	e004      	b.n	800686e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2206      	movs	r2, #6
 8006868:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e00b      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3730      	adds	r7, #48	@ 0x30
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b08a      	sub	sp, #40	@ 0x28
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e052      	b.n	8006946 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e049      	b.n	8006946 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00c      	beq.n	80068d4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d101      	bne.n	80068ca <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e03d      	b.n	8006946 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2204      	movs	r2, #4
 80068ce:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e038      	b.n	8006946 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d104      	bne.n	80068e6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e02f      	b.n	8006946 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f107 0220 	add.w	r2, r7, #32
 80068fa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fce2 	bl	80072c8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006908:	f107 030c 	add.w	r3, r7, #12
 800690c:	461a      	mov	r2, r3
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fd09 	bl	8007328 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006920:	4013      	ands	r3, r2
 8006922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4610      	mov	r0, r2
 8006928:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800692a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800692c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3728      	adds	r7, #40	@ 0x28
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_DMAEx_List_LinkQ+0x16>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e072      	b.n	8006a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006970:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d002      	beq.n	8006984 <HAL_DMAEx_List_LinkQ+0x34>
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b05      	cmp	r3, #5
 8006982:	d108      	bne.n	8006996 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2240      	movs	r2, #64	@ 0x40
 8006988:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e05c      	b.n	8006a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	7b1b      	ldrb	r3, [r3, #12]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d104      	bne.n	80069aa <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e052      	b.n	8006a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2b      	ldr	r2, [pc, #172]	@ (8006a5c <HAL_DMAEx_List_LinkQ+0x10c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d022      	beq.n	80069fa <HAL_DMAEx_List_LinkQ+0xaa>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a29      	ldr	r2, [pc, #164]	@ (8006a60 <HAL_DMAEx_List_LinkQ+0x110>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_DMAEx_List_LinkQ+0xaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a28      	ldr	r2, [pc, #160]	@ (8006a64 <HAL_DMAEx_List_LinkQ+0x114>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d018      	beq.n	80069fa <HAL_DMAEx_List_LinkQ+0xaa>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a26      	ldr	r2, [pc, #152]	@ (8006a68 <HAL_DMAEx_List_LinkQ+0x118>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_DMAEx_List_LinkQ+0xaa>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a25      	ldr	r2, [pc, #148]	@ (8006a6c <HAL_DMAEx_List_LinkQ+0x11c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_DMAEx_List_LinkQ+0xaa>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a23      	ldr	r2, [pc, #140]	@ (8006a70 <HAL_DMAEx_List_LinkQ+0x120>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_DMAEx_List_LinkQ+0xaa>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a22      	ldr	r2, [pc, #136]	@ (8006a74 <HAL_DMAEx_List_LinkQ+0x124>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_DMAEx_List_LinkQ+0xaa>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a20      	ldr	r2, [pc, #128]	@ (8006a78 <HAL_DMAEx_List_LinkQ+0x128>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d101      	bne.n	80069fe <HAL_DMAEx_List_LinkQ+0xae>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <HAL_DMAEx_List_LinkQ+0xb0>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10b      	bne.n	8006a1c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2203      	movs	r2, #3
 8006a16:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e019      	b.n	8006a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a20:	2b81      	cmp	r3, #129	@ 0x81
 8006a22:	d108      	bne.n	8006a36 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10d      	bne.n	8006a48 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e00c      	b.n	8006a50 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2204      	movs	r2, #4
 8006a42:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e003      	b.n	8006a50 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	40020650 	.word	0x40020650
 8006a60:	50020650 	.word	0x50020650
 8006a64:	400206d0 	.word	0x400206d0
 8006a68:	500206d0 	.word	0x500206d0
 8006a6c:	40020750 	.word	0x40020750
 8006a70:	50020750 	.word	0x50020750
 8006a74:	400207d0 	.word	0x400207d0
 8006a78:	500207d0 	.word	0x500207d0

08006a7c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a85      	ldr	r2, [pc, #532]	@ (8006cac <DMA_List_Init+0x230>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	f000 80a0 	beq.w	8006bdc <DMA_List_Init+0x160>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a83      	ldr	r2, [pc, #524]	@ (8006cb0 <DMA_List_Init+0x234>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	f000 809a 	beq.w	8006bdc <DMA_List_Init+0x160>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a81      	ldr	r2, [pc, #516]	@ (8006cb4 <DMA_List_Init+0x238>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	f000 8094 	beq.w	8006bdc <DMA_List_Init+0x160>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a7f      	ldr	r2, [pc, #508]	@ (8006cb8 <DMA_List_Init+0x23c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f000 808e 	beq.w	8006bdc <DMA_List_Init+0x160>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a7d      	ldr	r2, [pc, #500]	@ (8006cbc <DMA_List_Init+0x240>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	f000 8088 	beq.w	8006bdc <DMA_List_Init+0x160>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a7b      	ldr	r2, [pc, #492]	@ (8006cc0 <DMA_List_Init+0x244>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f000 8082 	beq.w	8006bdc <DMA_List_Init+0x160>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a79      	ldr	r2, [pc, #484]	@ (8006cc4 <DMA_List_Init+0x248>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d07c      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a78      	ldr	r2, [pc, #480]	@ (8006cc8 <DMA_List_Init+0x24c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d077      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a76      	ldr	r2, [pc, #472]	@ (8006ccc <DMA_List_Init+0x250>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d072      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a75      	ldr	r2, [pc, #468]	@ (8006cd0 <DMA_List_Init+0x254>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d06d      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a73      	ldr	r2, [pc, #460]	@ (8006cd4 <DMA_List_Init+0x258>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d068      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a72      	ldr	r2, [pc, #456]	@ (8006cd8 <DMA_List_Init+0x25c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d063      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a70      	ldr	r2, [pc, #448]	@ (8006cdc <DMA_List_Init+0x260>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d05e      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a6f      	ldr	r2, [pc, #444]	@ (8006ce0 <DMA_List_Init+0x264>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d059      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8006ce4 <DMA_List_Init+0x268>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d054      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6c      	ldr	r2, [pc, #432]	@ (8006ce8 <DMA_List_Init+0x26c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04f      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6a      	ldr	r2, [pc, #424]	@ (8006cec <DMA_List_Init+0x270>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d04a      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a69      	ldr	r2, [pc, #420]	@ (8006cf0 <DMA_List_Init+0x274>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d045      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a67      	ldr	r2, [pc, #412]	@ (8006cf4 <DMA_List_Init+0x278>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d040      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a66      	ldr	r2, [pc, #408]	@ (8006cf8 <DMA_List_Init+0x27c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d03b      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a64      	ldr	r2, [pc, #400]	@ (8006cfc <DMA_List_Init+0x280>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d036      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a63      	ldr	r2, [pc, #396]	@ (8006d00 <DMA_List_Init+0x284>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d031      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a61      	ldr	r2, [pc, #388]	@ (8006d04 <DMA_List_Init+0x288>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d02c      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a60      	ldr	r2, [pc, #384]	@ (8006d08 <DMA_List_Init+0x28c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d027      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5e      	ldr	r2, [pc, #376]	@ (8006d0c <DMA_List_Init+0x290>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d022      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8006d10 <DMA_List_Init+0x294>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d01d      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a5b      	ldr	r2, [pc, #364]	@ (8006d14 <DMA_List_Init+0x298>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a5a      	ldr	r2, [pc, #360]	@ (8006d18 <DMA_List_Init+0x29c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a58      	ldr	r2, [pc, #352]	@ (8006d1c <DMA_List_Init+0x2a0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a57      	ldr	r2, [pc, #348]	@ (8006d20 <DMA_List_Init+0x2a4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a55      	ldr	r2, [pc, #340]	@ (8006d24 <DMA_List_Init+0x2a8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <DMA_List_Init+0x160>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a54      	ldr	r2, [pc, #336]	@ (8006d28 <DMA_List_Init+0x2ac>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d101      	bne.n	8006be0 <DMA_List_Init+0x164>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <DMA_List_Init+0x166>
 8006be0:	2300      	movs	r3, #0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a36      	ldr	r2, [pc, #216]	@ (8006d0c <DMA_List_Init+0x290>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d022      	beq.n	8006c7e <DMA_List_Init+0x202>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a34      	ldr	r2, [pc, #208]	@ (8006d10 <DMA_List_Init+0x294>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01d      	beq.n	8006c7e <DMA_List_Init+0x202>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a33      	ldr	r2, [pc, #204]	@ (8006d14 <DMA_List_Init+0x298>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d018      	beq.n	8006c7e <DMA_List_Init+0x202>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a31      	ldr	r2, [pc, #196]	@ (8006d18 <DMA_List_Init+0x29c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <DMA_List_Init+0x202>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a30      	ldr	r2, [pc, #192]	@ (8006d1c <DMA_List_Init+0x2a0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00e      	beq.n	8006c7e <DMA_List_Init+0x202>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a2e      	ldr	r2, [pc, #184]	@ (8006d20 <DMA_List_Init+0x2a4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d009      	beq.n	8006c7e <DMA_List_Init+0x202>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8006d24 <DMA_List_Init+0x2a8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <DMA_List_Init+0x202>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a2b      	ldr	r2, [pc, #172]	@ (8006d28 <DMA_List_Init+0x2ac>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <DMA_List_Init+0x206>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <DMA_List_Init+0x208>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2200      	movs	r2, #0
 8006c96:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40020050 	.word	0x40020050
 8006cb0:	50020050 	.word	0x50020050
 8006cb4:	400200d0 	.word	0x400200d0
 8006cb8:	500200d0 	.word	0x500200d0
 8006cbc:	40020150 	.word	0x40020150
 8006cc0:	50020150 	.word	0x50020150
 8006cc4:	400201d0 	.word	0x400201d0
 8006cc8:	500201d0 	.word	0x500201d0
 8006ccc:	40020250 	.word	0x40020250
 8006cd0:	50020250 	.word	0x50020250
 8006cd4:	400202d0 	.word	0x400202d0
 8006cd8:	500202d0 	.word	0x500202d0
 8006cdc:	40020350 	.word	0x40020350
 8006ce0:	50020350 	.word	0x50020350
 8006ce4:	400203d0 	.word	0x400203d0
 8006ce8:	500203d0 	.word	0x500203d0
 8006cec:	40020450 	.word	0x40020450
 8006cf0:	50020450 	.word	0x50020450
 8006cf4:	400204d0 	.word	0x400204d0
 8006cf8:	500204d0 	.word	0x500204d0
 8006cfc:	40020550 	.word	0x40020550
 8006d00:	50020550 	.word	0x50020550
 8006d04:	400205d0 	.word	0x400205d0
 8006d08:	500205d0 	.word	0x500205d0
 8006d0c:	40020650 	.word	0x40020650
 8006d10:	50020650 	.word	0x50020650
 8006d14:	400206d0 	.word	0x400206d0
 8006d18:	500206d0 	.word	0x500206d0
 8006d1c:	40020750 	.word	0x40020750
 8006d20:	50020750 	.word	0x50020750
 8006d24:	400207d0 	.word	0x400207d0
 8006d28:	500207d0 	.word	0x500207d0

08006d2c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d3e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d44:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d4a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006d50:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d017      	beq.n	8006d92 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	3b01      	subs	r3, #1
 8006d76:	051b      	lsls	r3, r3, #20
 8006d78:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d7c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	3b01      	subs	r3, #1
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d8a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6859      	ldr	r1, [r3, #4]
 8006d9a:	f240 237f 	movw	r3, #639	@ 0x27f
 8006d9e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006da0:	431a      	orrs	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dae:	d10c      	bne.n	8006dca <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d011      	beq.n	8006de0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	605a      	str	r2, [r3, #4]
 8006dc8:	e00a      	b.n	8006de0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd2:	d105      	bne.n	8006de0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00f      	beq.n	8006e08 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e00:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e02:	431a      	orrs	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d04e      	beq.n	8006ebc <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e26:	3b01      	subs	r3, #1
 8006e28:	0419      	lsls	r1, r3, #16
 8006e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fd4 <DMA_List_BuildNode+0x2a8>)
 8006e2c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da06      	bge.n	8006e4a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	609a      	str	r2, [r3, #8]
 8006e48:	e005      	b.n	8006e56 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da06      	bge.n	8006e6c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	609a      	str	r2, [r3, #8]
 8006e6a:	e005      	b.n	8006e78 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da06      	bge.n	8006e8e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	609a      	str	r2, [r3, #8]
 8006e8c:	e005      	b.n	8006e9a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da06      	bge.n	8006eb0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	609a      	str	r2, [r3, #8]
 8006eae:	e005      	b.n	8006ebc <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d05d      	beq.n	8006f94 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da09      	bge.n	8006ef4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee4:	425b      	negs	r3, r3
 8006ee6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	615a      	str	r2, [r3, #20]
 8006ef2:	e005      	b.n	8006f00 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da0d      	bge.n	8006f24 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0c:	425b      	negs	r3, r3
 8006f0e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	695a      	ldr	r2, [r3, #20]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	0419      	lsls	r1, r3, #16
 8006f18:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd8 <DMA_List_BuildNode+0x2ac>)
 8006f1a:	400b      	ands	r3, r1
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	615a      	str	r2, [r3, #20]
 8006f22:	e009      	b.n	8006f38 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f2c:	0419      	lsls	r1, r3, #16
 8006f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd8 <DMA_List_BuildNode+0x2ac>)
 8006f30:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f32:	431a      	orrs	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da08      	bge.n	8006f52 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f44:	425b      	negs	r3, r3
 8006f46:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	619a      	str	r2, [r3, #24]
 8006f50:	e004      	b.n	8006f5c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f56:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	da0b      	bge.n	8006f7c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f68:	425b      	negs	r3, r3
 8006f6a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f74:	431a      	orrs	r2, r3
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	619a      	str	r2, [r3, #24]
 8006f7a:	e007      	b.n	8006f8c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f84:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f86:	431a      	orrs	r2, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	61da      	str	r2, [r3, #28]
 8006f92:	e002      	b.n	8006f9a <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d006      	beq.n	8006fbc <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006fba:	e005      	b.n	8006fc8 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	07ff0000 	.word	0x07ff0000
 8006fd8:	1fff0000 	.word	0x1fff0000

08006fdc <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0208 	and.w	r2, r3, #8
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0203 	and.w	r2, r3, #3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800702a:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007034:	0d1b      	lsrs	r3, r3, #20
 8007036:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800703a:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4b66      	ldr	r3, [pc, #408]	@ (80071ec <DMA_List_GetNodeConfig+0x210>)
 8007052:	4013      	ands	r3, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007076:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800707e:	60da      	str	r2, [r3, #12]
 8007080:	e013      	b.n	80070aa <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	e002      	b.n	80070aa <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	0c1b      	lsrs	r3, r3, #16
 8007104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007108:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800710e:	e002      	b.n	8007116 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d04a      	beq.n	80071c8 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800713c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800713e:	89fa      	ldrh	r2, [r7, #14]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	0c1b      	lsrs	r3, r3, #16
 800714a:	b29b      	uxth	r3, r3
 800714c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007150:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007152:	89fa      	ldrh	r2, [r7, #14]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d004      	beq.n	800716e <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007168:	425a      	negs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800717e:	425a      	negs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800718a:	89fa      	ldrh	r2, [r7, #14]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007198:	89fa      	ldrh	r2, [r7, #14]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ae:	425a      	negs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da11      	bge.n	80071e0 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c0:	425a      	negs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80071c6:	e00b      	b.n	80071e0 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	0c002000 	.word	0x0c002000

080071f0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4313      	orrs	r3, r2
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e00a      	b.n	8007232 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e004      	b.n	8007232 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	041b      	lsls	r3, r3, #16
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	d001      	beq.n	8007242 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	e00e      	b.n	800728e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e006      	b.n	800728e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80072a0:	2302      	movs	r3, #2
 80072a2:	e00b      	b.n	80072bc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d001      	beq.n	80072ba <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e000      	b.n	80072bc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007320 <DMA_List_GetCLLRNodeInfo+0x58>)
 80072ea:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00f      	beq.n	8007312 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2207      	movs	r2, #7
 80072f6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80072f8:	e00b      	b.n	8007312 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4a08      	ldr	r2, [pc, #32]	@ (8007324 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007304:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2205      	movs	r2, #5
 8007310:	601a      	str	r2, [r3, #0]
}
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	fe010000 	.word	0xfe010000
 8007324:	f8010000 	.word	0xf8010000

08007328 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	@ 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d142      	bne.n	80073d2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800734c:	e01d      	b.n	800738a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d107      	bne.n	8007364 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800735e:	4013      	ands	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e00f      	b.n	8007384 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	0c1b      	lsrs	r3, r3, #16
 800736e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4413      	add	r3, r2
 8007374:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800737c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007380:	4013      	ands	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	3301      	adds	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	429a      	cmp	r2, r3
 8007392:	d3dc      	bcc.n	800734e <DMA_List_FindNode+0x26>
 8007394:	e029      	b.n	80073ea <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d107      	bne.n	80073ac <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073a6:	4013      	ands	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e00f      	b.n	80073cc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	0c1b      	lsrs	r3, r3, #16
 80073b6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	4413      	add	r3, r2
 80073bc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073c4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073c8:	4013      	ands	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	3301      	adds	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d206      	bcs.n	80073ea <DMA_List_FindNode+0xc2>
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073e2:	4013      	ands	r3, r2
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d1d5      	bne.n	8007396 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d008      	beq.n	8007402 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073f6:	4013      	ands	r3, r2
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d001      	beq.n	8007402 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80073fe:	2301      	movs	r3, #1
 8007400:	e02b      	b.n	800745a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	0c1b      	lsrs	r3, r3, #16
 800741e:	041b      	lsls	r3, r3, #16
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	461a      	mov	r2, r3
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00f      	beq.n	8007458 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	461a      	mov	r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007444:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007448:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	0c1b      	lsrs	r3, r3, #16
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3724      	adds	r7, #36	@ 0x24
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007468:	b480      	push	{r7}
 800746a:	b089      	sub	sp, #36	@ 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800747a:	e1ba      	b.n	80077f2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	2101      	movs	r1, #1
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	fa01 f303 	lsl.w	r3, r1, r3
 8007488:	4013      	ands	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 81aa 	beq.w	80077ec <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a55      	ldr	r2, [pc, #340]	@ (80075f0 <HAL_GPIO_Init+0x188>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d15d      	bne.n	800755c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80074a6:	2201      	movs	r2, #1
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	4013      	ands	r3, r2
 80074b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 0201 	and.w	r2, r3, #1
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80074d0:	4a48      	ldr	r2, [pc, #288]	@ (80075f4 <HAL_GPIO_Init+0x18c>)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074d8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80074da:	4a46      	ldr	r2, [pc, #280]	@ (80075f4 <HAL_GPIO_Init+0x18c>)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4413      	add	r3, r2
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	08da      	lsrs	r2, r3, #3
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	3208      	adds	r2, #8
 80074ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	220f      	movs	r2, #15
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43db      	mvns	r3, r3
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	4013      	ands	r3, r2
 8007508:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	220b      	movs	r2, #11
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	4313      	orrs	r3, r2
 800751c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	08da      	lsrs	r2, r3, #3
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3208      	adds	r2, #8
 8007526:	69f9      	ldr	r1, [r7, #28]
 8007528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	2203      	movs	r2, #3
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43db      	mvns	r3, r3
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	4013      	ands	r3, r2
 8007542:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	2202      	movs	r2, #2
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	4313      	orrs	r3, r2
 8007552:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e067      	b.n	800762c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d003      	beq.n	800756c <HAL_GPIO_Init+0x104>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b12      	cmp	r3, #18
 800756a:	d145      	bne.n	80075f8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	08da      	lsrs	r2, r3, #3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3208      	adds	r2, #8
 8007574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007578:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	220f      	movs	r2, #15
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	43db      	mvns	r3, r3
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	4013      	ands	r3, r2
 800758e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	08da      	lsrs	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3208      	adds	r2, #8
 80075b2:	69f9      	ldr	r1, [r7, #28]
 80075b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	2203      	movs	r2, #3
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	4013      	ands	r3, r2
 80075ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f003 0203 	and.w	r2, r3, #3
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	e01e      	b.n	800762c <HAL_GPIO_Init+0x1c4>
 80075ee:	bf00      	nop
 80075f0:	46020000 	.word	0x46020000
 80075f4:	08015a34 	.word	0x08015a34
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	2203      	movs	r2, #3
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	4013      	ands	r3, r2
 800760e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f003 0203 	and.w	r2, r3, #3
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	4313      	orrs	r3, r2
 8007624:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d00b      	beq.n	800764c <HAL_GPIO_Init+0x1e4>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d007      	beq.n	800764c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007640:	2b11      	cmp	r3, #17
 8007642:	d003      	beq.n	800764c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b12      	cmp	r3, #18
 800764a:	d130      	bne.n	80076ae <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	2203      	movs	r2, #3
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	43db      	mvns	r3, r3
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	4013      	ands	r3, r2
 8007662:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	4313      	orrs	r3, r2
 8007674:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007682:	2201      	movs	r2, #1
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	43db      	mvns	r3, r3
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	4013      	ands	r3, r2
 8007690:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	091b      	lsrs	r3, r3, #4
 8007698:	f003 0201 	and.w	r2, r3, #1
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d017      	beq.n	80076e6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	2203      	movs	r2, #3
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	43db      	mvns	r3, r3
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	4013      	ands	r3, r2
 80076cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	fa02 f303 	lsl.w	r3, r2, r3
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	4313      	orrs	r3, r2
 80076de:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d07c      	beq.n	80077ec <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80076f2:	4a47      	ldr	r2, [pc, #284]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	089b      	lsrs	r3, r3, #2
 80076f8:	3318      	adds	r3, #24
 80076fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	220f      	movs	r2, #15
 800770a:	fa02 f303 	lsl.w	r3, r2, r3
 800770e:	43db      	mvns	r3, r3
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	4013      	ands	r3, r2
 8007714:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	0a9a      	lsrs	r2, r3, #10
 800771a:	4b3e      	ldr	r3, [pc, #248]	@ (8007814 <HAL_GPIO_Init+0x3ac>)
 800771c:	4013      	ands	r3, r2
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	f002 0203 	and.w	r2, r2, #3
 8007724:	00d2      	lsls	r2, r2, #3
 8007726:	4093      	lsls	r3, r2
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	4313      	orrs	r3, r2
 800772c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800772e:	4938      	ldr	r1, [pc, #224]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	089b      	lsrs	r3, r3, #2
 8007734:	3318      	adds	r3, #24
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800773c:	4b34      	ldr	r3, [pc, #208]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	43db      	mvns	r3, r3
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	4013      	ands	r3, r2
 800774a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007758:	69fa      	ldr	r2, [r7, #28]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007760:	4a2b      	ldr	r2, [pc, #172]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007766:	4b2a      	ldr	r3, [pc, #168]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	43db      	mvns	r3, r3
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	4013      	ands	r3, r2
 8007774:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800778a:	4a21      	ldr	r2, [pc, #132]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007790:	4b1f      	ldr	r3, [pc, #124]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 8007792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007796:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	43db      	mvns	r3, r3
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	4013      	ands	r3, r2
 80077a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80077b6:	4a16      	ldr	r2, [pc, #88]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80077be:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 80077c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	4013      	ands	r3, r2
 80077ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80077dc:	69fa      	ldr	r2, [r7, #28]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80077e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007810 <HAL_GPIO_Init+0x3a8>)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	3301      	adds	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f47f ae3d 	bne.w	800747c <HAL_GPIO_Init+0x14>
  }
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	3724      	adds	r7, #36	@ 0x24
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	46022000 	.word	0x46022000
 8007814:	002f7f7f 	.word	0x002f7f7f

08007818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
 8007824:	4613      	mov	r3, r2
 8007826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007828:	787b      	ldrb	r3, [r7, #1]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800782e:	887a      	ldrh	r2, [r7, #2]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007834:	e002      	b.n	800783c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007836:	887a      	ldrh	r2, [r7, #2]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8007854:	4b0b      	ldr	r3, [pc, #44]	@ (8007884 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
 8007864:	e007      	b.n	8007876 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8007866:	4b07      	ldr	r3, [pc, #28]	@ (8007884 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f023 0204 	bic.w	r2, r3, #4
 800786e:	4905      	ldr	r1, [pc, #20]	@ (8007884 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4313      	orrs	r3, r2
 8007874:	600b      	str	r3, [r1, #0]
  }

  return status;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	40030400 	.word	0x40030400

08007888 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800788c:	4b05      	ldr	r3, [pc, #20]	@ (80078a4 <HAL_ICACHE_Enable+0x1c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a04      	ldr	r2, [pc, #16]	@ (80078a4 <HAL_ICACHE_Enable+0x1c>)
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	40030400 	.word	0x40030400

080078a8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0e7      	b.n	8007a8a <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fa f92d 	bl	8001b34 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0201 	orr.w	r2, r2, #1
 80078f0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078fa:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007904:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8007906:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f962 	bl	8007bd4 <LPTIM_WaitForFlag>
 8007910:	4603      	mov	r3, r0
 8007912:	2b03      	cmp	r3, #3
 8007914:	d101      	bne.n	800791a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e0b7      	b.n	8007a8a <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2210      	movs	r2, #16
 8007920:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6a12      	ldr	r2, [r2, #32]
 800792a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800792c:	2110      	movs	r1, #16
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f950 	bl	8007bd4 <LPTIM_WaitForFlag>
 8007934:	4603      	mov	r3, r0
 8007936:	2b03      	cmp	r3, #3
 8007938:	d101      	bne.n	800793e <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e0a5      	b.n	8007a8a <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10e      	bne.n	800796a <HAL_LPTIM_Init+0xc2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d107      	bne.n	800796a <HAL_LPTIM_Init+0xc2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0201 	bic.w	r2, r2, #1
 8007968:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d004      	beq.n	8007984 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007982:	d103      	bne.n	800798c <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 031e 	bic.w	r3, r3, #30
 800798a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007994:	4293      	cmp	r3, r2
 8007996:	d005      	beq.n	80079a4 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800799e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80079a2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007a94 <HAL_LPTIM_Init+0x1ec>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80079b4:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 80079ba:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80079c0:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d107      	bne.n	80079e0 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80079d8:	4313      	orrs	r3, r2
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d004      	beq.n	80079f2 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079f0:	d107      	bne.n	8007a02 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80079fa:	4313      	orrs	r3, r2
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00a      	beq.n	8007a24 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007a16:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007a1c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a19      	ldr	r2, [pc, #100]	@ (8007a98 <HAL_LPTIM_Init+0x1f0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <HAL_LPTIM_Init+0x198>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a18      	ldr	r2, [pc, #96]	@ (8007a9c <HAL_LPTIM_Init+0x1f4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d108      	bne.n	8007a52 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a50:	e00e      	b.n	8007a70 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a12      	ldr	r2, [pc, #72]	@ (8007aa0 <HAL_LPTIM_Init+0x1f8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d004      	beq.n	8007a66 <HAL_LPTIM_Init+0x1be>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a10      	ldr	r2, [pc, #64]	@ (8007aa4 <HAL_LPTIM_Init+0x1fc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d104      	bne.n	8007a70 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	ff39f1fe 	.word	0xff39f1fe
 8007a98:	46004400 	.word	0x46004400
 8007a9c:	40009400 	.word	0x40009400
 8007aa0:	46004800 	.word	0x46004800
 8007aa4:	46004c00 	.word	0x46004c00

08007aa8 <HAL_LPTIM_IC_Start>:
  *            @arg LPTIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_IC_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INPUT_CAPTURE_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <HAL_LPTIM_IC_Start+0x24>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	bf14      	ite	ne
 8007ac4:	2301      	movne	r3, #1
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	e008      	b.n	8007ade <HAL_LPTIM_IC_Start+0x36>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	bf14      	ite	ne
 8007ad8:	2301      	movne	r3, #1
 8007ada:	2300      	moveq	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_LPTIM_IC_Start+0x3e>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e03c      	b.n	8007b60 <HAL_LPTIM_IC_Start+0xb8>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2202      	movs	r2, #2
 8007aea:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <HAL_LPTIM_IC_Start+0x56>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8007afc:	e003      	b.n	8007b06 <HAL_LPTIM_IC_Start+0x5e>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0201 	orr.w	r2, r2, #1
 8007b14:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0204 	orr.w	r2, r2, #4
 8007b24:	611a      	str	r2, [r3, #16]

  /* Enable capture */
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_LPTIM_IC_Start+0x8c>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d009      	beq.n	8007b46 <HAL_LPTIM_IC_Start+0x9e>
 8007b32:	e010      	b.n	8007b56 <HAL_LPTIM_IC_Start+0xae>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0202 	orr.w	r2, r2, #2
 8007b42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007b44:	e007      	b.n	8007b56 <HAL_LPTIM_IC_Start+0xae>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007b54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_LPTIM_OC_ConfigChannel+0x22>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d00b      	beq.n	8007ba4 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 8007b8c:	e018      	b.n	8007bc0 <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f84f 	bl	8007c34 <LPTIM_OC1_SetConfig>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00c      	beq.n	8007bba <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	e012      	b.n	8007bca <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f8aa 	bl	8007d00 <LPTIM_OC2_SetConfig>
 8007bac:	4603      	mov	r3, r0
 8007bae:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	e007      	b.n	8007bca <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 8007bba:	bf00      	nop
 8007bbc:	e000      	b.n	8007bc0 <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 8007bbe:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007be2:	4b12      	ldr	r3, [pc, #72]	@ (8007c2c <LPTIM_WaitForFlag+0x58>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a12      	ldr	r2, [pc, #72]	@ (8007c30 <LPTIM_WaitForFlag+0x5c>)
 8007be8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bec:	0b9b      	lsrs	r3, r3, #14
 8007bee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	4013      	ands	r3, r2
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d002      	beq.n	8007c1e <LPTIM_WaitForFlag+0x4a>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1ec      	bne.n	8007bf8 <LPTIM_WaitForFlag+0x24>

  return result;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	20000000 	.word	0x20000000
 8007c30:	d1b71759 	.word	0xd1b71759

08007c34 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f023 030d 	bic.w	r3, r3, #13
 8007c4c:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a2a      	ldr	r2, [pc, #168]	@ (8007cfc <LPTIM_OC1_SetConfig+0xc8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d112      	bne.n	8007c7e <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c66:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	055b      	lsls	r3, r3, #21
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	60da      	str	r2, [r3, #12]
 8007c7c:	e005      	b.n	8007c8a <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0201 	orr.w	r2, r2, #1
 8007c98:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2208      	movs	r2, #8
 8007ca0:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 8007cac:	2108      	movs	r1, #8
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff ff90 	bl	8007bd4 <LPTIM_WaitForFlag>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d101      	bne.n	8007cbe <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e01a      	b.n	8007cf4 <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10e      	bne.n	8007cea <LPTIM_OC1_SetConfig+0xb6>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d107      	bne.n	8007cea <LPTIM_OC1_SetConfig+0xb6>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0201 	bic.w	r2, r2, #1
 8007ce8:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	46004c00 	.word	0x46004c00

08007d00 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d10:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8007d18:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	049b      	lsls	r3, r3, #18
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0201 	orr.w	r2, r2, #1
 8007d34:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007d3e:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 8007d4a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff ff40 	bl	8007bd4 <LPTIM_WaitForFlag>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e01a      	b.n	8007d94 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10e      	bne.n	8007d8a <LPTIM_OC2_SetConfig+0x8a>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <LPTIM_OC2_SetConfig+0x8a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007da4:	4b39      	ldr	r3, [pc, #228]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007dac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d10b      	bne.n	8007dce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dbc:	d905      	bls.n	8007dca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007dbe:	4b33      	ldr	r3, [pc, #204]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	4a32      	ldr	r2, [pc, #200]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007dc8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e057      	b.n	8007e7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd4:	d90a      	bls.n	8007dec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007de8:	60d3      	str	r3, [r2, #12]
 8007dea:	e007      	b.n	8007dfc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007dec:	4b27      	ldr	r3, [pc, #156]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007df4:	4925      	ldr	r1, [pc, #148]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007dfc:	4b24      	ldr	r3, [pc, #144]	@ (8007e90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a24      	ldr	r2, [pc, #144]	@ (8007e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e02:	fba2 2303 	umull	r2, r3, r2, r3
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	2232      	movs	r2, #50	@ 0x32
 8007e0a:	fb02 f303 	mul.w	r3, r2, r3
 8007e0e:	4a21      	ldr	r2, [pc, #132]	@ (8007e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e10:	fba2 2303 	umull	r2, r3, r2, r3
 8007e14:	099b      	lsrs	r3, r3, #6
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007e1a:	e002      	b.n	8007e22 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007e22:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <HAL_PWREx_ControlVoltageScaling+0x98>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f3      	bne.n	8007e1c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01b      	beq.n	8007e72 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007e3a:	4b15      	ldr	r3, [pc, #84]	@ (8007e90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a15      	ldr	r2, [pc, #84]	@ (8007e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e40:	fba2 2303 	umull	r2, r3, r2, r3
 8007e44:	099b      	lsrs	r3, r3, #6
 8007e46:	2232      	movs	r2, #50	@ 0x32
 8007e48:	fb02 f303 	mul.w	r3, r2, r3
 8007e4c:	4a11      	ldr	r2, [pc, #68]	@ (8007e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e52:	099b      	lsrs	r3, r3, #6
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007e58:	e002      	b.n	8007e60 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007e60:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f3      	bne.n	8007e5a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e000      	b.n	8007e7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	46020800 	.word	0x46020800
 8007e90:	20000000 	.word	0x20000000
 8007e94:	10624dd3 	.word	0x10624dd3

08007e98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007e9c:	4b04      	ldr	r3, [pc, #16]	@ (8007eb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	46020800 	.word	0x46020800

08007eb4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8007eb8:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <HAL_PWREx_EnableVddA+0x1c>)
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4a04      	ldr	r2, [pc, #16]	@ (8007ed0 <HAL_PWREx_EnableVddA+0x1c>)
 8007ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ec2:	6113      	str	r3, [r2, #16]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	46020800 	.word	0x46020800

08007ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08e      	sub	sp, #56	@ 0x38
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007edc:	2300      	movs	r3, #0
 8007ede:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f000 bec8 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eee:	4b99      	ldr	r3, [pc, #612]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f003 030c 	and.w	r3, r3, #12
 8007ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ef8:	4b96      	ldr	r3, [pc, #600]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0310 	and.w	r3, r3, #16
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 816c 	beq.w	80081e8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_RCC_OscConfig+0x52>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	2b0c      	cmp	r3, #12
 8007f1a:	f040 80de 	bne.w	80080da <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	f040 80da 	bne.w	80080da <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d102      	bne.n	8007f34 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f000 bea5 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f38:	4b86      	ldr	r3, [pc, #536]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d004      	beq.n	8007f4e <HAL_RCC_OscConfig+0x7a>
 8007f44:	4b83      	ldr	r3, [pc, #524]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007f4c:	e005      	b.n	8007f5a <HAL_RCC_OscConfig+0x86>
 8007f4e:	4b81      	ldr	r3, [pc, #516]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f54:	041b      	lsls	r3, r3, #16
 8007f56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d255      	bcs.n	800800a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f001 f9d9 	bl	8009320 <RCC_SetFlashLatencyFromMSIRange>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f000 be82 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007f7a:	4b76      	ldr	r3, [pc, #472]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	4a75      	ldr	r2, [pc, #468]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007f80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f84:	6093      	str	r3, [r2, #8]
 8007f86:	4b73      	ldr	r3, [pc, #460]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f92:	4970      	ldr	r1, [pc, #448]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007fa0:	d309      	bcc.n	8007fb6 <HAL_RCC_OscConfig+0xe2>
 8007fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f023 021f 	bic.w	r2, r3, #31
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	4969      	ldr	r1, [pc, #420]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60cb      	str	r3, [r1, #12]
 8007fb4:	e07e      	b.n	80080b4 <HAL_RCC_OscConfig+0x1e0>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	da0a      	bge.n	8007fd4 <HAL_RCC_OscConfig+0x100>
 8007fbe:	4b65      	ldr	r3, [pc, #404]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	015b      	lsls	r3, r3, #5
 8007fcc:	4961      	ldr	r1, [pc, #388]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60cb      	str	r3, [r1, #12]
 8007fd2:	e06f      	b.n	80080b4 <HAL_RCC_OscConfig+0x1e0>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fdc:	d30a      	bcc.n	8007ff4 <HAL_RCC_OscConfig+0x120>
 8007fde:	4b5d      	ldr	r3, [pc, #372]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	029b      	lsls	r3, r3, #10
 8007fec:	4959      	ldr	r1, [pc, #356]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60cb      	str	r3, [r1, #12]
 8007ff2:	e05f      	b.n	80080b4 <HAL_RCC_OscConfig+0x1e0>
 8007ff4:	4b57      	ldr	r3, [pc, #348]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	03db      	lsls	r3, r3, #15
 8008002:	4954      	ldr	r1, [pc, #336]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008004:	4313      	orrs	r3, r2
 8008006:	60cb      	str	r3, [r1, #12]
 8008008:	e054      	b.n	80080b4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800800a:	4b52      	ldr	r3, [pc, #328]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	4a51      	ldr	r2, [pc, #324]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008010:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008014:	6093      	str	r3, [r2, #8]
 8008016:	4b4f      	ldr	r3, [pc, #316]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008022:	494c      	ldr	r1, [pc, #304]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008024:	4313      	orrs	r3, r2
 8008026:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008030:	d309      	bcc.n	8008046 <HAL_RCC_OscConfig+0x172>
 8008032:	4b48      	ldr	r3, [pc, #288]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f023 021f 	bic.w	r2, r3, #31
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	4945      	ldr	r1, [pc, #276]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008040:	4313      	orrs	r3, r2
 8008042:	60cb      	str	r3, [r1, #12]
 8008044:	e028      	b.n	8008098 <HAL_RCC_OscConfig+0x1c4>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	da0a      	bge.n	8008064 <HAL_RCC_OscConfig+0x190>
 800804e:	4b41      	ldr	r3, [pc, #260]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	015b      	lsls	r3, r3, #5
 800805c:	493d      	ldr	r1, [pc, #244]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 800805e:	4313      	orrs	r3, r2
 8008060:	60cb      	str	r3, [r1, #12]
 8008062:	e019      	b.n	8008098 <HAL_RCC_OscConfig+0x1c4>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806c:	d30a      	bcc.n	8008084 <HAL_RCC_OscConfig+0x1b0>
 800806e:	4b39      	ldr	r3, [pc, #228]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	029b      	lsls	r3, r3, #10
 800807c:	4935      	ldr	r1, [pc, #212]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 800807e:	4313      	orrs	r3, r2
 8008080:	60cb      	str	r3, [r1, #12]
 8008082:	e009      	b.n	8008098 <HAL_RCC_OscConfig+0x1c4>
 8008084:	4b33      	ldr	r3, [pc, #204]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	03db      	lsls	r3, r3, #15
 8008092:	4930      	ldr	r1, [pc, #192]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008094:	4313      	orrs	r3, r2
 8008096:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 f93c 	bl	8009320 <RCC_SetFlashLatencyFromMSIRange>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f000 bde5 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80080b4:	f001 f8de 	bl	8009274 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80080b8:	4b27      	ldr	r3, [pc, #156]	@ (8008158 <HAL_RCC_OscConfig+0x284>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fa ff01 	bl	8002ec4 <HAL_InitTick>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80080c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 808a 	beq.w	80081e6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80080d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080d6:	f000 bdd2 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d066      	beq.n	80081b0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80080e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80080ee:	f7fa ff73 	bl	8002fd8 <HAL_GetTick>
 80080f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80080f4:	e009      	b.n	800810a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80080f6:	f7fa ff6f 	bl	8002fd8 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d902      	bls.n	800810a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	f000 bdba 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800810a:	4b12      	ldr	r3, [pc, #72]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0ef      	beq.n	80080f6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008116:	4b0f      	ldr	r3, [pc, #60]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	4a0e      	ldr	r2, [pc, #56]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 800811c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008120:	6093      	str	r3, [r2, #8]
 8008122:	4b0c      	ldr	r3, [pc, #48]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812e:	4909      	ldr	r1, [pc, #36]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008130:	4313      	orrs	r3, r2
 8008132:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008138:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800813c:	d30e      	bcc.n	800815c <HAL_RCC_OscConfig+0x288>
 800813e:	4b05      	ldr	r3, [pc, #20]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f023 021f 	bic.w	r2, r3, #31
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	4902      	ldr	r1, [pc, #8]	@ (8008154 <HAL_RCC_OscConfig+0x280>)
 800814c:	4313      	orrs	r3, r2
 800814e:	60cb      	str	r3, [r1, #12]
 8008150:	e04a      	b.n	80081e8 <HAL_RCC_OscConfig+0x314>
 8008152:	bf00      	nop
 8008154:	46020c00 	.word	0x46020c00
 8008158:	20000004 	.word	0x20000004
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	da0a      	bge.n	800817a <HAL_RCC_OscConfig+0x2a6>
 8008164:	4b98      	ldr	r3, [pc, #608]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	015b      	lsls	r3, r3, #5
 8008172:	4995      	ldr	r1, [pc, #596]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008174:	4313      	orrs	r3, r2
 8008176:	60cb      	str	r3, [r1, #12]
 8008178:	e036      	b.n	80081e8 <HAL_RCC_OscConfig+0x314>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008182:	d30a      	bcc.n	800819a <HAL_RCC_OscConfig+0x2c6>
 8008184:	4b90      	ldr	r3, [pc, #576]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	029b      	lsls	r3, r3, #10
 8008192:	498d      	ldr	r1, [pc, #564]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008194:	4313      	orrs	r3, r2
 8008196:	60cb      	str	r3, [r1, #12]
 8008198:	e026      	b.n	80081e8 <HAL_RCC_OscConfig+0x314>
 800819a:	4b8b      	ldr	r3, [pc, #556]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	03db      	lsls	r3, r3, #15
 80081a8:	4987      	ldr	r1, [pc, #540]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60cb      	str	r3, [r1, #12]
 80081ae:	e01b      	b.n	80081e8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80081b0:	4b85      	ldr	r3, [pc, #532]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a84      	ldr	r2, [pc, #528]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80081b6:	f023 0301 	bic.w	r3, r3, #1
 80081ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80081bc:	f7fa ff0c 	bl	8002fd8 <HAL_GetTick>
 80081c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80081c2:	e009      	b.n	80081d8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081c4:	f7fa ff08 	bl	8002fd8 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d902      	bls.n	80081d8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	f000 bd53 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80081d8:	4b7b      	ldr	r3, [pc, #492]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1ef      	bne.n	80081c4 <HAL_RCC_OscConfig+0x2f0>
 80081e4:	e000      	b.n	80081e8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80081e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 808b 	beq.w	800830c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d005      	beq.n	8008208 <HAL_RCC_OscConfig+0x334>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fe:	2b0c      	cmp	r3, #12
 8008200:	d109      	bne.n	8008216 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008204:	2b03      	cmp	r3, #3
 8008206:	d106      	bne.n	8008216 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d17d      	bne.n	800830c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f000 bd34 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800821e:	d106      	bne.n	800822e <HAL_RCC_OscConfig+0x35a>
 8008220:	4b69      	ldr	r3, [pc, #420]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a68      	ldr	r2, [pc, #416]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	e041      	b.n	80082b2 <HAL_RCC_OscConfig+0x3de>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008236:	d112      	bne.n	800825e <HAL_RCC_OscConfig+0x38a>
 8008238:	4b63      	ldr	r3, [pc, #396]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a62      	ldr	r2, [pc, #392]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800823e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	4b60      	ldr	r3, [pc, #384]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a5f      	ldr	r2, [pc, #380]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800824a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	4b5d      	ldr	r3, [pc, #372]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a5c      	ldr	r2, [pc, #368]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	e029      	b.n	80082b2 <HAL_RCC_OscConfig+0x3de>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008266:	d112      	bne.n	800828e <HAL_RCC_OscConfig+0x3ba>
 8008268:	4b57      	ldr	r3, [pc, #348]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a56      	ldr	r2, [pc, #344]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800826e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	4b54      	ldr	r3, [pc, #336]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a53      	ldr	r2, [pc, #332]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800827a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	4b51      	ldr	r3, [pc, #324]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a50      	ldr	r2, [pc, #320]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e011      	b.n	80082b2 <HAL_RCC_OscConfig+0x3de>
 800828e:	4b4e      	ldr	r3, [pc, #312]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a4d      	ldr	r2, [pc, #308]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	4b4b      	ldr	r3, [pc, #300]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a4a      	ldr	r2, [pc, #296]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80082a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	4b48      	ldr	r3, [pc, #288]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a47      	ldr	r2, [pc, #284]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80082ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d014      	beq.n	80082e4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80082ba:	f7fa fe8d 	bl	8002fd8 <HAL_GetTick>
 80082be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082c0:	e009      	b.n	80082d6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c2:	f7fa fe89 	bl	8002fd8 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b64      	cmp	r3, #100	@ 0x64
 80082ce:	d902      	bls.n	80082d6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	f000 bcd4 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082d6:	4b3c      	ldr	r3, [pc, #240]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0ef      	beq.n	80082c2 <HAL_RCC_OscConfig+0x3ee>
 80082e2:	e013      	b.n	800830c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80082e4:	f7fa fe78 	bl	8002fd8 <HAL_GetTick>
 80082e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082ea:	e009      	b.n	8008300 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082ec:	f7fa fe74 	bl	8002fd8 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b64      	cmp	r3, #100	@ 0x64
 80082f8:	d902      	bls.n	8008300 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	f000 bcbf 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008300:	4b31      	ldr	r3, [pc, #196]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1ef      	bne.n	80082ec <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d05f      	beq.n	80083d8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	2b04      	cmp	r3, #4
 800831c:	d005      	beq.n	800832a <HAL_RCC_OscConfig+0x456>
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	2b0c      	cmp	r3, #12
 8008322:	d114      	bne.n	800834e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008326:	2b02      	cmp	r3, #2
 8008328:	d111      	bne.n	800834e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d102      	bne.n	8008338 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f000 bca3 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008338:	4b23      	ldr	r3, [pc, #140]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	4920      	ldr	r1, [pc, #128]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008348:	4313      	orrs	r3, r2
 800834a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800834c:	e044      	b.n	80083d8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d024      	beq.n	80083a0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008356:	4b1c      	ldr	r3, [pc, #112]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800835c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008360:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008362:	f7fa fe39 	bl	8002fd8 <HAL_GetTick>
 8008366:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008368:	e009      	b.n	800837e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800836a:	f7fa fe35 	bl	8002fd8 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d902      	bls.n	800837e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	f000 bc80 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800837e:	4b12      	ldr	r3, [pc, #72]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0ef      	beq.n	800836a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800838a:	4b0f      	ldr	r3, [pc, #60]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	041b      	lsls	r3, r3, #16
 8008398:	490b      	ldr	r1, [pc, #44]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 800839a:	4313      	orrs	r3, r2
 800839c:	610b      	str	r3, [r1, #16]
 800839e:	e01b      	b.n	80083d8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80083a0:	4b09      	ldr	r3, [pc, #36]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a08      	ldr	r2, [pc, #32]	@ (80083c8 <HAL_RCC_OscConfig+0x4f4>)
 80083a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80083ac:	f7fa fe14 	bl	8002fd8 <HAL_GetTick>
 80083b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80083b2:	e00b      	b.n	80083cc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083b4:	f7fa fe10 	bl	8002fd8 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d904      	bls.n	80083cc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	f000 bc5b 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
 80083c8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80083cc:	4baf      	ldr	r3, [pc, #700]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1ed      	bne.n	80083b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 80c8 	beq.w	8008576 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80083e6:	2300      	movs	r3, #0
 80083e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ec:	4ba7      	ldr	r3, [pc, #668]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80083ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d111      	bne.n	800841e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083fa:	4ba4      	ldr	r3, [pc, #656]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80083fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008400:	4aa2      	ldr	r2, [pc, #648]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008402:	f043 0304 	orr.w	r3, r3, #4
 8008406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800840a:	4ba0      	ldr	r3, [pc, #640]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800840c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800841e:	4b9c      	ldr	r3, [pc, #624]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 8008420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d119      	bne.n	800845e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800842a:	4b99      	ldr	r3, [pc, #612]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 800842c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842e:	4a98      	ldr	r2, [pc, #608]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008436:	f7fa fdcf 	bl	8002fd8 <HAL_GetTick>
 800843a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800843c:	e009      	b.n	8008452 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800843e:	f7fa fdcb 	bl	8002fd8 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d902      	bls.n	8008452 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	f000 bc16 	b.w	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008452:	4b8f      	ldr	r3, [pc, #572]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 8008454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0ef      	beq.n	800843e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d05f      	beq.n	8008526 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8008466:	4b89      	ldr	r3, [pc, #548]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800846c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008478:	429a      	cmp	r2, r3
 800847a:	d037      	beq.n	80084ec <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e3f4      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d01b      	beq.n	80084d6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800849e:	4b7b      	ldr	r3, [pc, #492]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80084a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084a4:	4a79      	ldr	r2, [pc, #484]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80084a6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80084aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80084ae:	f7fa fd93 	bl	8002fd8 <HAL_GetTick>
 80084b2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80084b4:	e008      	b.n	80084c8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b6:	f7fa fd8f 	bl	8002fd8 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b05      	cmp	r3, #5
 80084c2:	d901      	bls.n	80084c8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e3da      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80084c8:	4b70      	ldr	r3, [pc, #448]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80084ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1ef      	bne.n	80084b6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80084d6:	4b6d      	ldr	r3, [pc, #436]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80084d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	4969      	ldr	r1, [pc, #420]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80084ec:	4b67      	ldr	r3, [pc, #412]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80084ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084f2:	4a66      	ldr	r2, [pc, #408]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80084f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80084fc:	f7fa fd6c 	bl	8002fd8 <HAL_GetTick>
 8008500:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008504:	f7fa fd68 	bl	8002fd8 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b05      	cmp	r3, #5
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e3b3      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008516:	4b5d      	ldr	r3, [pc, #372]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800851c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0ef      	beq.n	8008504 <HAL_RCC_OscConfig+0x630>
 8008524:	e01b      	b.n	800855e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008526:	4b59      	ldr	r3, [pc, #356]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800852c:	4a57      	ldr	r2, [pc, #348]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800852e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008532:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008536:	f7fa fd4f 	bl	8002fd8 <HAL_GetTick>
 800853a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800853c:	e008      	b.n	8008550 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800853e:	f7fa fd4b 	bl	8002fd8 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b05      	cmp	r3, #5
 800854a:	d901      	bls.n	8008550 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e396      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008550:	4b4e      	ldr	r3, [pc, #312]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1ef      	bne.n	800853e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800855e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008562:	2b01      	cmp	r3, #1
 8008564:	d107      	bne.n	8008576 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008566:	4b49      	ldr	r3, [pc, #292]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800856c:	4a47      	ldr	r2, [pc, #284]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800856e:	f023 0304 	bic.w	r3, r3, #4
 8008572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 8111 	beq.w	80087a6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8008584:	2300      	movs	r3, #0
 8008586:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800858a:	4b40      	ldr	r3, [pc, #256]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800858c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d111      	bne.n	80085bc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008598:	4b3c      	ldr	r3, [pc, #240]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800859a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800859e:	4a3b      	ldr	r2, [pc, #236]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80085a0:	f043 0304 	orr.w	r3, r3, #4
 80085a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80085a8:	4b38      	ldr	r3, [pc, #224]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 80085aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80085bc:	4b34      	ldr	r3, [pc, #208]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d118      	bne.n	80085fa <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80085c8:	4b31      	ldr	r3, [pc, #196]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 80085ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085cc:	4a30      	ldr	r2, [pc, #192]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085d4:	f7fa fd00 	bl	8002fd8 <HAL_GetTick>
 80085d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085dc:	f7fa fcfc 	bl	8002fd8 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e347      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80085ee:	4b28      	ldr	r3, [pc, #160]	@ (8008690 <HAL_RCC_OscConfig+0x7bc>)
 80085f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0f0      	beq.n	80085dc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01f      	beq.n	8008646 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	d010      	beq.n	8008634 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008612:	4b1e      	ldr	r3, [pc, #120]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008618:	4a1c      	ldr	r2, [pc, #112]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800861a:	f043 0304 	orr.w	r3, r3, #4
 800861e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008622:	4b1a      	ldr	r3, [pc, #104]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008628:	4a18      	ldr	r2, [pc, #96]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800862a:	f043 0301 	orr.w	r3, r3, #1
 800862e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008632:	e018      	b.n	8008666 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008634:	4b15      	ldr	r3, [pc, #84]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800863a:	4a14      	ldr	r2, [pc, #80]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008644:	e00f      	b.n	8008666 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008646:	4b11      	ldr	r3, [pc, #68]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800864c:	4a0f      	ldr	r2, [pc, #60]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008656:	4b0d      	ldr	r3, [pc, #52]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 8008658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800865c:	4a0b      	ldr	r2, [pc, #44]	@ (800868c <HAL_RCC_OscConfig+0x7b8>)
 800865e:	f023 0304 	bic.w	r3, r3, #4
 8008662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d057      	beq.n	800871e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800866e:	f7fa fcb3 	bl	8002fd8 <HAL_GetTick>
 8008672:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008674:	e00e      	b.n	8008694 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008676:	f7fa fcaf 	bl	8002fd8 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008684:	4293      	cmp	r3, r2
 8008686:	d905      	bls.n	8008694 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e2f8      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
 800868c:	46020c00 	.word	0x46020c00
 8008690:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008694:	4b9c      	ldr	r3, [pc, #624]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0e9      	beq.n	8008676 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01b      	beq.n	80086e6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80086ae:	4b96      	ldr	r3, [pc, #600]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80086b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086b4:	4a94      	ldr	r2, [pc, #592]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80086b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80086be:	e00a      	b.n	80086d6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086c0:	f7fa fc8a 	bl	8002fd8 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e2d3      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80086d6:	4b8c      	ldr	r3, [pc, #560]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80086d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0ed      	beq.n	80086c0 <HAL_RCC_OscConfig+0x7ec>
 80086e4:	e053      	b.n	800878e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80086e6:	4b88      	ldr	r3, [pc, #544]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80086e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086ec:	4a86      	ldr	r2, [pc, #536]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80086ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80086f6:	e00a      	b.n	800870e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086f8:	f7fa fc6e 	bl	8002fd8 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008706:	4293      	cmp	r3, r2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e2b7      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800870e:	4b7e      	ldr	r3, [pc, #504]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1ed      	bne.n	80086f8 <HAL_RCC_OscConfig+0x824>
 800871c:	e037      	b.n	800878e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800871e:	f7fa fc5b 	bl	8002fd8 <HAL_GetTick>
 8008722:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008724:	e00a      	b.n	800873c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008726:	f7fa fc57 	bl	8002fd8 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008734:	4293      	cmp	r3, r2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e2a0      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800873c:	4b72      	ldr	r3, [pc, #456]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800873e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1ed      	bne.n	8008726 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800874a:	4b6f      	ldr	r3, [pc, #444]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800874c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01a      	beq.n	800878e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008758:	4b6b      	ldr	r3, [pc, #428]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800875a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800875e:	4a6a      	ldr	r2, [pc, #424]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008764:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008768:	e00a      	b.n	8008780 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800876a:	f7fa fc35 	bl	8002fd8 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008778:	4293      	cmp	r3, r2
 800877a:	d901      	bls.n	8008780 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e27e      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008780:	4b61      	ldr	r3, [pc, #388]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1ed      	bne.n	800876a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800878e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008792:	2b01      	cmp	r3, #1
 8008794:	d107      	bne.n	80087a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008796:	4b5c      	ldr	r3, [pc, #368]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800879c:	4a5a      	ldr	r2, [pc, #360]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800879e:	f023 0304 	bic.w	r3, r3, #4
 80087a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d036      	beq.n	8008820 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d019      	beq.n	80087ee <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80087ba:	4b53      	ldr	r3, [pc, #332]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a52      	ldr	r2, [pc, #328]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80087c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80087c4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80087c6:	f7fa fc07 	bl	8002fd8 <HAL_GetTick>
 80087ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087ce:	f7fa fc03 	bl	8002fd8 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e24e      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80087e0:	4b49      	ldr	r3, [pc, #292]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x8fa>
 80087ec:	e018      	b.n	8008820 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80087ee:	4b46      	ldr	r3, [pc, #280]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a45      	ldr	r2, [pc, #276]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80087f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087f8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80087fa:	f7fa fbed 	bl	8002fd8 <HAL_GetTick>
 80087fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008802:	f7fa fbe9 	bl	8002fd8 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e234      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008814:	4b3c      	ldr	r3, [pc, #240]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f0      	bne.n	8008802 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008828:	2b00      	cmp	r3, #0
 800882a:	d036      	beq.n	800889a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008830:	2b00      	cmp	r3, #0
 8008832:	d019      	beq.n	8008868 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008834:	4b34      	ldr	r3, [pc, #208]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a33      	ldr	r2, [pc, #204]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800883a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800883e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008840:	f7fa fbca 	bl	8002fd8 <HAL_GetTick>
 8008844:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008848:	f7fa fbc6 	bl	8002fd8 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e211      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800885a:	4b2b      	ldr	r3, [pc, #172]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0f0      	beq.n	8008848 <HAL_RCC_OscConfig+0x974>
 8008866:	e018      	b.n	800889a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008868:	4b27      	ldr	r3, [pc, #156]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a26      	ldr	r2, [pc, #152]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 800886e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008872:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008874:	f7fa fbb0 	bl	8002fd8 <HAL_GetTick>
 8008878:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800887c:	f7fa fbac 	bl	8002fd8 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e1f7      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800888e:	4b1e      	ldr	r3, [pc, #120]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f0      	bne.n	800887c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d07f      	beq.n	80089a6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d062      	beq.n	8008974 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80088ae:	4b16      	ldr	r3, [pc, #88]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	4a15      	ldr	r2, [pc, #84]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80088b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088b8:	6093      	str	r3, [r2, #8]
 80088ba:	4b13      	ldr	r3, [pc, #76]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c6:	4910      	ldr	r1, [pc, #64]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80088d4:	d309      	bcc.n	80088ea <HAL_RCC_OscConfig+0xa16>
 80088d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f023 021f 	bic.w	r2, r3, #31
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	4909      	ldr	r1, [pc, #36]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60cb      	str	r3, [r1, #12]
 80088e8:	e02a      	b.n	8008940 <HAL_RCC_OscConfig+0xa6c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da0c      	bge.n	800890c <HAL_RCC_OscConfig+0xa38>
 80088f2:	4b05      	ldr	r3, [pc, #20]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	015b      	lsls	r3, r3, #5
 8008900:	4901      	ldr	r1, [pc, #4]	@ (8008908 <HAL_RCC_OscConfig+0xa34>)
 8008902:	4313      	orrs	r3, r2
 8008904:	60cb      	str	r3, [r1, #12]
 8008906:	e01b      	b.n	8008940 <HAL_RCC_OscConfig+0xa6c>
 8008908:	46020c00 	.word	0x46020c00
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008914:	d30a      	bcc.n	800892c <HAL_RCC_OscConfig+0xa58>
 8008916:	4ba1      	ldr	r3, [pc, #644]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	029b      	lsls	r3, r3, #10
 8008924:	499d      	ldr	r1, [pc, #628]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008926:	4313      	orrs	r3, r2
 8008928:	60cb      	str	r3, [r1, #12]
 800892a:	e009      	b.n	8008940 <HAL_RCC_OscConfig+0xa6c>
 800892c:	4b9b      	ldr	r3, [pc, #620]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	03db      	lsls	r3, r3, #15
 800893a:	4998      	ldr	r1, [pc, #608]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 800893c:	4313      	orrs	r3, r2
 800893e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008940:	4b96      	ldr	r3, [pc, #600]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a95      	ldr	r2, [pc, #596]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008946:	f043 0310 	orr.w	r3, r3, #16
 800894a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800894c:	f7fa fb44 	bl	8002fd8 <HAL_GetTick>
 8008950:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008954:	f7fa fb40 	bl	8002fd8 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e18b      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008966:	4b8d      	ldr	r3, [pc, #564]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0f0      	beq.n	8008954 <HAL_RCC_OscConfig+0xa80>
 8008972:	e018      	b.n	80089a6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008974:	4b89      	ldr	r3, [pc, #548]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a88      	ldr	r2, [pc, #544]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 800897a:	f023 0310 	bic.w	r3, r3, #16
 800897e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008980:	f7fa fb2a 	bl	8002fd8 <HAL_GetTick>
 8008984:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008988:	f7fa fb26 	bl	8002fd8 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e171      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800899a:	4b80      	ldr	r3, [pc, #512]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1f0      	bne.n	8008988 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8166 	beq.w	8008c7c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089b6:	4b79      	ldr	r3, [pc, #484]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	f003 030c 	and.w	r3, r3, #12
 80089be:	2b0c      	cmp	r3, #12
 80089c0:	f000 80f2 	beq.w	8008ba8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	f040 80c5 	bne.w	8008b58 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80089ce:	4b73      	ldr	r3, [pc, #460]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a72      	ldr	r2, [pc, #456]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 80089d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80089da:	f7fa fafd 	bl	8002fd8 <HAL_GetTick>
 80089de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80089e0:	e008      	b.n	80089f4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089e2:	f7fa faf9 	bl	8002fd8 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d901      	bls.n	80089f4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e144      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80089f4:	4b69      	ldr	r3, [pc, #420]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f0      	bne.n	80089e2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a00:	4b66      	ldr	r3, [pc, #408]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a06:	f003 0304 	and.w	r3, r3, #4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d111      	bne.n	8008a32 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008a0e:	4b63      	ldr	r3, [pc, #396]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a14:	4a61      	ldr	r2, [pc, #388]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008a16:	f043 0304 	orr.w	r3, r3, #4
 8008a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008a32:	4b5b      	ldr	r3, [pc, #364]	@ (8008ba0 <HAL_RCC_OscConfig+0xccc>)
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a3e:	d102      	bne.n	8008a46 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008a46:	4b56      	ldr	r3, [pc, #344]	@ (8008ba0 <HAL_RCC_OscConfig+0xccc>)
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	4a55      	ldr	r2, [pc, #340]	@ (8008ba0 <HAL_RCC_OscConfig+0xccc>)
 8008a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a50:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008a52:	4b52      	ldr	r3, [pc, #328]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a5a:	f023 0303 	bic.w	r3, r3, #3
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008a66:	3a01      	subs	r2, #1
 8008a68:	0212      	lsls	r2, r2, #8
 8008a6a:	4311      	orrs	r1, r2
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008a70:	430a      	orrs	r2, r1
 8008a72:	494a      	ldr	r1, [pc, #296]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a78:	4b48      	ldr	r3, [pc, #288]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a7c:	4b49      	ldr	r3, [pc, #292]	@ (8008ba4 <HAL_RCC_OscConfig+0xcd0>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a84:	3a01      	subs	r2, #1
 8008a86:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008a8e:	3a01      	subs	r2, #1
 8008a90:	0252      	lsls	r2, r2, #9
 8008a92:	b292      	uxth	r2, r2
 8008a94:	4311      	orrs	r1, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008a9a:	3a01      	subs	r2, #1
 8008a9c:	0412      	lsls	r2, r2, #16
 8008a9e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008aa2:	4311      	orrs	r1, r2
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	0612      	lsls	r2, r2, #24
 8008aac:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	493a      	ldr	r1, [pc, #232]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008ab8:	4b38      	ldr	r3, [pc, #224]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	4a37      	ldr	r2, [pc, #220]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008abe:	f023 0310 	bic.w	r3, r3, #16
 8008ac2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ac8:	4a34      	ldr	r2, [pc, #208]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008ace:	4b33      	ldr	r3, [pc, #204]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	4a32      	ldr	r2, [pc, #200]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008ad4:	f043 0310 	orr.w	r3, r3, #16
 8008ad8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008ada:	4b30      	ldr	r3, [pc, #192]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ade:	f023 020c 	bic.w	r2, r3, #12
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae6:	492d      	ldr	r1, [pc, #180]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8008aec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d105      	bne.n	8008b00 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008af4:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba0 <HAL_RCC_OscConfig+0xccc>)
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4a29      	ldr	r2, [pc, #164]	@ (8008ba0 <HAL_RCC_OscConfig+0xccc>)
 8008afa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008afe:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008b00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d107      	bne.n	8008b18 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008b08:	4b24      	ldr	r3, [pc, #144]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b0e:	4a23      	ldr	r2, [pc, #140]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b10:	f023 0304 	bic.w	r3, r3, #4
 8008b14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008b18:	4b20      	ldr	r3, [pc, #128]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008b24:	f7fa fa58 	bl	8002fd8 <HAL_GetTick>
 8008b28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b2c:	f7fa fa54 	bl	8002fd8 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e09f      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008b3e:	4b17      	ldr	r3, [pc, #92]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0f0      	beq.n	8008b2c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b4a:	4b14      	ldr	r3, [pc, #80]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b4e:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b54:	6293      	str	r3, [r2, #40]	@ 0x28
 8008b56:	e091      	b.n	8008c7c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008b58:	4b10      	ldr	r3, [pc, #64]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008b64:	f7fa fa38 	bl	8002fd8 <HAL_GetTick>
 8008b68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b6c:	f7fa fa34 	bl	8002fd8 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e07f      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008b7e:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008b8a:	4b04      	ldr	r3, [pc, #16]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8e:	4a03      	ldr	r2, [pc, #12]	@ (8008b9c <HAL_RCC_OscConfig+0xcc8>)
 8008b90:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008b94:	f023 0303 	bic.w	r3, r3, #3
 8008b98:	6293      	str	r3, [r2, #40]	@ 0x28
 8008b9a:	e06f      	b.n	8008c7c <HAL_RCC_OscConfig+0xda8>
 8008b9c:	46020c00 	.word	0x46020c00
 8008ba0:	46020800 	.word	0x46020800
 8008ba4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008ba8:	4b37      	ldr	r3, [pc, #220]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bae:	4b36      	ldr	r3, [pc, #216]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d039      	beq.n	8008c30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f003 0203 	and.w	r2, r3, #3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d132      	bne.n	8008c30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	0a1b      	lsrs	r3, r3, #8
 8008bce:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d129      	bne.n	8008c30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d122      	bne.n	8008c30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bf4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d11a      	bne.n	8008c30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	0a5b      	lsrs	r3, r3, #9
 8008bfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d111      	bne.n	8008c30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	0c1b      	lsrs	r3, r3, #16
 8008c10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c18:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d108      	bne.n	8008c30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	0e1b      	lsrs	r3, r3, #24
 8008c22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c2a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e024      	b.n	8008c7e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008c34:	4b14      	ldr	r3, [pc, #80]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c38:	08db      	lsrs	r3, r3, #3
 8008c3a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d01a      	beq.n	8008c7c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008c46:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008c4c:	f023 0310 	bic.w	r3, r3, #16
 8008c50:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c52:	f7fa f9c1 	bl	8002fd8 <HAL_GetTick>
 8008c56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008c58:	bf00      	nop
 8008c5a:	f7fa f9bd 	bl	8002fd8 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d0f9      	beq.n	8008c5a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c6a:	4a07      	ldr	r2, [pc, #28]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008c70:	4b05      	ldr	r3, [pc, #20]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c74:	4a04      	ldr	r2, [pc, #16]	@ (8008c88 <HAL_RCC_OscConfig+0xdb4>)
 8008c76:	f043 0310 	orr.w	r3, r3, #16
 8008c7a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3738      	adds	r7, #56	@ 0x38
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	46020c00 	.word	0x46020c00

08008c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e1d9      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8008f10 <HAL_RCC_ClockConfig+0x284>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d910      	bls.n	8008cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cae:	4b98      	ldr	r3, [pc, #608]	@ (8008f10 <HAL_RCC_ClockConfig+0x284>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f023 020f 	bic.w	r2, r3, #15
 8008cb6:	4996      	ldr	r1, [pc, #600]	@ (8008f10 <HAL_RCC_ClockConfig+0x284>)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbe:	4b94      	ldr	r3, [pc, #592]	@ (8008f10 <HAL_RCC_ClockConfig+0x284>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e1c1      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d010      	beq.n	8008cfe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	695a      	ldr	r2, [r3, #20]
 8008ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d908      	bls.n	8008cfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8008cec:	4b89      	ldr	r3, [pc, #548]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	4986      	ldr	r1, [pc, #536]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0308 	and.w	r3, r3, #8
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d012      	beq.n	8008d30 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691a      	ldr	r2, [r3, #16]
 8008d0e:	4b81      	ldr	r3, [pc, #516]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d909      	bls.n	8008d30 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008d1c:	4b7d      	ldr	r3, [pc, #500]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	497a      	ldr	r1, [pc, #488]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d010      	beq.n	8008d5e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	4b74      	ldr	r3, [pc, #464]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d908      	bls.n	8008d5e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008d4c:	4b71      	ldr	r3, [pc, #452]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	496e      	ldr	r1, [pc, #440]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d010      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	4b69      	ldr	r3, [pc, #420]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d908      	bls.n	8008d8c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008d7a:	4b66      	ldr	r3, [pc, #408]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	f023 020f 	bic.w	r2, r3, #15
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	4963      	ldr	r1, [pc, #396]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80d2 	beq.w	8008f3e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d143      	bne.n	8008e2e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008da6:	4b5b      	ldr	r3, [pc, #364]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d110      	bne.n	8008dd6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008db4:	4b57      	ldr	r3, [pc, #348]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dba:	4a56      	ldr	r2, [pc, #344]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008dbc:	f043 0304 	orr.w	r3, r3, #4
 8008dc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008dc4:	4b53      	ldr	r3, [pc, #332]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	60bb      	str	r3, [r7, #8]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8008dd6:	f7fa f8ff 	bl	8002fd8 <HAL_GetTick>
 8008dda:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8008f18 <HAL_RCC_ClockConfig+0x28c>)
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00f      	beq.n	8008e08 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008de8:	e008      	b.n	8008dfc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8008dea:	f7fa f8f5 	bl	8002fd8 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d901      	bls.n	8008dfc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e12b      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008dfc:	4b46      	ldr	r3, [pc, #280]	@ (8008f18 <HAL_RCC_ClockConfig+0x28c>)
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0f0      	beq.n	8008dea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d107      	bne.n	8008e1e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008e0e:	4b41      	ldr	r3, [pc, #260]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e14:	4a3f      	ldr	r2, [pc, #252]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e16:	f023 0304 	bic.w	r3, r3, #4
 8008e1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d121      	bne.n	8008e6e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e112      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d107      	bne.n	8008e46 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e36:	4b37      	ldr	r3, [pc, #220]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d115      	bne.n	8008e6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e106      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d107      	bne.n	8008e5e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008e4e:	4b31      	ldr	r3, [pc, #196]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e0fa      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0f2      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008e6e:	4b29      	ldr	r3, [pc, #164]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f023 0203 	bic.w	r2, r3, #3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4926      	ldr	r1, [pc, #152]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008e80:	f7fa f8aa 	bl	8002fd8 <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d112      	bne.n	8008eb4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e8e:	e00a      	b.n	8008ea6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e90:	f7fa f8a2 	bl	8002fd8 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d901      	bls.n	8008ea6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e0d6      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f003 030c 	and.w	r3, r3, #12
 8008eae:	2b0c      	cmp	r3, #12
 8008eb0:	d1ee      	bne.n	8008e90 <HAL_RCC_ClockConfig+0x204>
 8008eb2:	e044      	b.n	8008f3e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d112      	bne.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ebc:	e00a      	b.n	8008ed4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ebe:	f7fa f88b 	bl	8002fd8 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d901      	bls.n	8008ed4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e0bf      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	f003 030c 	and.w	r3, r3, #12
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d1ee      	bne.n	8008ebe <HAL_RCC_ClockConfig+0x232>
 8008ee0:	e02d      	b.n	8008f3e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d123      	bne.n	8008f32 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008eea:	e00a      	b.n	8008f02 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eec:	f7fa f874 	bl	8002fd8 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e0a8      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f02:	4b04      	ldr	r3, [pc, #16]	@ (8008f14 <HAL_RCC_ClockConfig+0x288>)
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f003 030c 	and.w	r3, r3, #12
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1ee      	bne.n	8008eec <HAL_RCC_ClockConfig+0x260>
 8008f0e:	e016      	b.n	8008f3e <HAL_RCC_ClockConfig+0x2b2>
 8008f10:	40022000 	.word	0x40022000
 8008f14:	46020c00 	.word	0x46020c00
 8008f18:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f1c:	f7fa f85c 	bl	8002fd8 <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e090      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f32:	4b4a      	ldr	r3, [pc, #296]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	f003 030c 	and.w	r3, r3, #12
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d1ee      	bne.n	8008f1c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d010      	beq.n	8008f6c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b43      	ldr	r3, [pc, #268]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d208      	bcs.n	8008f6c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008f5a:	4b40      	ldr	r3, [pc, #256]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	f023 020f 	bic.w	r2, r3, #15
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	493d      	ldr	r1, [pc, #244]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8009060 <HAL_RCC_ClockConfig+0x3d4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d210      	bcs.n	8008f9c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7a:	4b39      	ldr	r3, [pc, #228]	@ (8009060 <HAL_RCC_ClockConfig+0x3d4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f023 020f 	bic.w	r2, r3, #15
 8008f82:	4937      	ldr	r1, [pc, #220]	@ (8009060 <HAL_RCC_ClockConfig+0x3d4>)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8a:	4b35      	ldr	r3, [pc, #212]	@ (8009060 <HAL_RCC_ClockConfig+0x3d4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d001      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e05b      	b.n	8009054 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d010      	beq.n	8008fca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	4b2b      	ldr	r3, [pc, #172]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d208      	bcs.n	8008fca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008fb8:	4b28      	ldr	r3, [pc, #160]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4925      	ldr	r1, [pc, #148]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d012      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691a      	ldr	r2, [r3, #16]
 8008fda:	4b20      	ldr	r3, [pc, #128]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	091b      	lsrs	r3, r3, #4
 8008fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d209      	bcs.n	8008ffc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	4919      	ldr	r1, [pc, #100]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0310 	and.w	r3, r3, #16
 8009004:	2b00      	cmp	r3, #0
 8009006:	d010      	beq.n	800902a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695a      	ldr	r2, [r3, #20]
 800900c:	4b13      	ldr	r3, [pc, #76]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009014:	429a      	cmp	r2, r3
 8009016:	d208      	bcs.n	800902a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009018:	4b10      	ldr	r3, [pc, #64]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	490d      	ldr	r1, [pc, #52]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8009026:	4313      	orrs	r3, r2
 8009028:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800902a:	f000 f821 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800902e:	4602      	mov	r2, r0
 8009030:	4b0a      	ldr	r3, [pc, #40]	@ (800905c <HAL_RCC_ClockConfig+0x3d0>)
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	f003 030f 	and.w	r3, r3, #15
 8009038:	490a      	ldr	r1, [pc, #40]	@ (8009064 <HAL_RCC_ClockConfig+0x3d8>)
 800903a:	5ccb      	ldrb	r3, [r1, r3]
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
 8009040:	4a09      	ldr	r2, [pc, #36]	@ (8009068 <HAL_RCC_ClockConfig+0x3dc>)
 8009042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009044:	4b09      	ldr	r3, [pc, #36]	@ (800906c <HAL_RCC_ClockConfig+0x3e0>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f7f9 ff3b 	bl	8002ec4 <HAL_InitTick>
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]

  return status;
 8009052:	7bfb      	ldrb	r3, [r7, #15]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	46020c00 	.word	0x46020c00
 8009060:	40022000 	.word	0x40022000
 8009064:	080159dc 	.word	0x080159dc
 8009068:	20000000 	.word	0x20000000
 800906c:	20000004 	.word	0x20000004

08009070 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009070:	b480      	push	{r7}
 8009072:	b08b      	sub	sp, #44	@ 0x2c
 8009074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800907e:	4b78      	ldr	r3, [pc, #480]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f003 030c 	and.w	r3, r3, #12
 8009086:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009088:	4b75      	ldr	r3, [pc, #468]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800908a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908c:	f003 0303 	and.w	r3, r3, #3
 8009090:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_RCC_GetSysClockFreq+0x34>
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	2b0c      	cmp	r3, #12
 800909c:	d121      	bne.n	80090e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d11e      	bne.n	80090e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80090a4:	4b6e      	ldr	r3, [pc, #440]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d107      	bne.n	80090c0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80090b0:	4b6b      	ldr	r3, [pc, #428]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80090b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090b6:	0b1b      	lsrs	r3, r3, #12
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80090be:	e005      	b.n	80090cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80090c0:	4b67      	ldr	r3, [pc, #412]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	0f1b      	lsrs	r3, r3, #28
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80090cc:	4a65      	ldr	r2, [pc, #404]	@ (8009264 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d110      	bne.n	80090fe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80090e0:	e00d      	b.n	80090fe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80090e2:	4b5f      	ldr	r3, [pc, #380]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f003 030c 	and.w	r3, r3, #12
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d102      	bne.n	80090f4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80090ee:	4b5e      	ldr	r3, [pc, #376]	@ (8009268 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80090f0:	623b      	str	r3, [r7, #32]
 80090f2:	e004      	b.n	80090fe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	2b08      	cmp	r3, #8
 80090f8:	d101      	bne.n	80090fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80090fa:	4b5b      	ldr	r3, [pc, #364]	@ (8009268 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80090fc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b0c      	cmp	r3, #12
 8009102:	f040 80a5 	bne.w	8009250 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009106:	4b56      	ldr	r3, [pc, #344]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009110:	4b53      	ldr	r3, [pc, #332]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009114:	0a1b      	lsrs	r3, r3, #8
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	3301      	adds	r3, #1
 800911c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800911e:	4b50      	ldr	r3, [pc, #320]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009122:	091b      	lsrs	r3, r3, #4
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800912a:	4b4d      	ldr	r3, [pc, #308]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800912c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912e:	08db      	lsrs	r3, r3, #3
 8009130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	fb02 f303 	mul.w	r3, r2, r3
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d003      	beq.n	8009154 <HAL_RCC_GetSysClockFreq+0xe4>
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b03      	cmp	r3, #3
 8009150:	d022      	beq.n	8009198 <HAL_RCC_GetSysClockFreq+0x128>
 8009152:	e043      	b.n	80091dc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800926c <HAL_RCC_GetSysClockFreq+0x1fc>
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	4b3e      	ldr	r3, [pc, #248]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009176:	ed97 6a01 	vldr	s12, [r7, #4]
 800917a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8009270 <HAL_RCC_GetSysClockFreq+0x200>
 800917e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009182:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800918a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800918e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009196:	e046      	b.n	8009226 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800926c <HAL_RCC_GetSysClockFreq+0x1fc>
 80091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091aa:	4b2d      	ldr	r3, [pc, #180]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80091ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80091ba:	ed97 6a01 	vldr	s12, [r7, #4]
 80091be:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009270 <HAL_RCC_GetSysClockFreq+0x200>
 80091c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80091ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091da:	e024      	b.n	8009226 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	ee07 3a90 	vmov	s15, r3
 80091ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80091f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fc:	ee07 3a90 	vmov	s15, r3
 8009200:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009204:	ed97 6a01 	vldr	s12, [r7, #4]
 8009208:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8009270 <HAL_RCC_GetSysClockFreq+0x200>
 800920c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009210:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009214:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009218:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800921c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009220:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009224:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009226:	4b0e      	ldr	r3, [pc, #56]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800922a:	0e1b      	lsrs	r3, r3, #24
 800922c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009230:	3301      	adds	r3, #1
 8009232:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800923e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800924a:	ee17 3a90 	vmov	r3, s15
 800924e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009250:	6a3b      	ldr	r3, [r7, #32]
}
 8009252:	4618      	mov	r0, r3
 8009254:	372c      	adds	r7, #44	@ 0x2c
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	46020c00 	.word	0x46020c00
 8009264:	080159f4 	.word	0x080159f4
 8009268:	00f42400 	.word	0x00f42400
 800926c:	4b742400 	.word	0x4b742400
 8009270:	46000000 	.word	0x46000000

08009274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009278:	f7ff fefa 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800927c:	4602      	mov	r2, r0
 800927e:	4b07      	ldr	r3, [pc, #28]	@ (800929c <HAL_RCC_GetHCLKFreq+0x28>)
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	4906      	ldr	r1, [pc, #24]	@ (80092a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009288:	5ccb      	ldrb	r3, [r1, r3]
 800928a:	fa22 f303 	lsr.w	r3, r2, r3
 800928e:	4a05      	ldr	r2, [pc, #20]	@ (80092a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8009290:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009292:	4b04      	ldr	r3, [pc, #16]	@ (80092a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8009294:	681b      	ldr	r3, [r3, #0]
}
 8009296:	4618      	mov	r0, r3
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	46020c00 	.word	0x46020c00
 80092a0:	080159dc 	.word	0x080159dc
 80092a4:	20000000 	.word	0x20000000

080092a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80092ac:	f7ff ffe2 	bl	8009274 <HAL_RCC_GetHCLKFreq>
 80092b0:	4602      	mov	r2, r0
 80092b2:	4b05      	ldr	r3, [pc, #20]	@ (80092c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	091b      	lsrs	r3, r3, #4
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	4903      	ldr	r1, [pc, #12]	@ (80092cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80092be:	5ccb      	ldrb	r3, [r1, r3]
 80092c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	46020c00 	.word	0x46020c00
 80092cc:	080159ec 	.word	0x080159ec

080092d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80092d4:	f7ff ffce 	bl	8009274 <HAL_RCC_GetHCLKFreq>
 80092d8:	4602      	mov	r2, r0
 80092da:	4b05      	ldr	r3, [pc, #20]	@ (80092f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	4903      	ldr	r1, [pc, #12]	@ (80092f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092e6:	5ccb      	ldrb	r3, [r1, r3]
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	46020c00 	.word	0x46020c00
 80092f4:	080159ec 	.word	0x080159ec

080092f8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80092fc:	f7ff ffba 	bl	8009274 <HAL_RCC_GetHCLKFreq>
 8009300:	4602      	mov	r2, r0
 8009302:	4b05      	ldr	r3, [pc, #20]	@ (8009318 <HAL_RCC_GetPCLK3Freq+0x20>)
 8009304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009306:	091b      	lsrs	r3, r3, #4
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	4903      	ldr	r1, [pc, #12]	@ (800931c <HAL_RCC_GetPCLK3Freq+0x24>)
 800930e:	5ccb      	ldrb	r3, [r1, r3]
 8009310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009314:	4618      	mov	r0, r3
 8009316:	bd80      	pop	{r7, pc}
 8009318:	46020c00 	.word	0x46020c00
 800931c:	080159ec 	.word	0x080159ec

08009320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009328:	4b3e      	ldr	r3, [pc, #248]	@ (8009424 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800932a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009336:	f7fe fdaf 	bl	8007e98 <HAL_PWREx_GetVoltageRange>
 800933a:	6178      	str	r0, [r7, #20]
 800933c:	e019      	b.n	8009372 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800933e:	4b39      	ldr	r3, [pc, #228]	@ (8009424 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009344:	4a37      	ldr	r2, [pc, #220]	@ (8009424 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009346:	f043 0304 	orr.w	r3, r3, #4
 800934a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800934e:	4b35      	ldr	r3, [pc, #212]	@ (8009424 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800935c:	f7fe fd9c 	bl	8007e98 <HAL_PWREx_GetVoltageRange>
 8009360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009362:	4b30      	ldr	r3, [pc, #192]	@ (8009424 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009368:	4a2e      	ldr	r2, [pc, #184]	@ (8009424 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800936a:	f023 0304 	bic.w	r3, r3, #4
 800936e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009378:	d003      	beq.n	8009382 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009380:	d109      	bne.n	8009396 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009388:	d202      	bcs.n	8009390 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800938a:	2301      	movs	r3, #1
 800938c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800938e:	e033      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009394:	e030      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800939c:	d208      	bcs.n	80093b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093a4:	d102      	bne.n	80093ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80093a6:	2303      	movs	r3, #3
 80093a8:	613b      	str	r3, [r7, #16]
 80093aa:	e025      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e035      	b.n	800941c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093b6:	d90f      	bls.n	80093d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093c4:	d902      	bls.n	80093cc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80093c6:	2300      	movs	r3, #0
 80093c8:	613b      	str	r3, [r7, #16]
 80093ca:	e015      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80093cc:	2301      	movs	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	e012      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	e00f      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093de:	d109      	bne.n	80093f4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e6:	d102      	bne.n	80093ee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80093e8:	2301      	movs	r3, #1
 80093ea:	613b      	str	r3, [r7, #16]
 80093ec:	e004      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80093ee:	2302      	movs	r3, #2
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	e001      	b.n	80093f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80093f4:	2301      	movs	r3, #1
 80093f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80093f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f023 020f 	bic.w	r2, r3, #15
 8009400:	4909      	ldr	r1, [pc, #36]	@ (8009428 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	4313      	orrs	r3, r2
 8009406:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009408:	4b07      	ldr	r3, [pc, #28]	@ (8009428 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	429a      	cmp	r2, r3
 8009414:	d001      	beq.n	800941a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	46020c00 	.word	0x46020c00
 8009428:	40022000 	.word	0x40022000

0800942c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800942c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009430:	b0b4      	sub	sp, #208	@ 0xd0
 8009432:	af00      	add	r7, sp, #0
 8009434:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009438:	2300      	movs	r3, #0
 800943a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800943e:	2300      	movs	r3, #0
 8009440:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f002 0401 	and.w	r4, r2, #1
 8009450:	2500      	movs	r5, #0
 8009452:	ea54 0305 	orrs.w	r3, r4, r5
 8009456:	d00b      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009458:	4bc4      	ldr	r3, [pc, #784]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800945a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800945e:	f023 0103 	bic.w	r1, r3, #3
 8009462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009468:	4ac0      	ldr	r2, [pc, #768]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800946a:	430b      	orrs	r3, r1
 800946c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f002 0804 	and.w	r8, r2, #4
 800947c:	f04f 0900 	mov.w	r9, #0
 8009480:	ea58 0309 	orrs.w	r3, r8, r9
 8009484:	d00b      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009486:	4bb9      	ldr	r3, [pc, #740]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800948c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009490:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009496:	4ab5      	ldr	r2, [pc, #724]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009498:	430b      	orrs	r3, r1
 800949a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800949e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f002 0a08 	and.w	sl, r2, #8
 80094aa:	f04f 0b00 	mov.w	fp, #0
 80094ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80094b2:	d00b      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80094b4:	4bad      	ldr	r3, [pc, #692]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80094b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80094be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80094c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c4:	4aa9      	ldr	r2, [pc, #676]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80094c6:	430b      	orrs	r3, r1
 80094c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f002 0310 	and.w	r3, r2, #16
 80094d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094dc:	2300      	movs	r3, #0
 80094de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4313      	orrs	r3, r2
 80094ea:	d00b      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80094ec:	4b9f      	ldr	r3, [pc, #636]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80094ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80094f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80094fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094fc:	4a9b      	ldr	r2, [pc, #620]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80094fe:	430b      	orrs	r3, r1
 8009500:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	f002 0320 	and.w	r3, r2, #32
 8009510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009514:	2300      	movs	r3, #0
 8009516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800951a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800951e:	460b      	mov	r3, r1
 8009520:	4313      	orrs	r3, r2
 8009522:	d00b      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009524:	4b91      	ldr	r3, [pc, #580]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800952a:	f023 0107 	bic.w	r1, r3, #7
 800952e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009534:	4a8d      	ldr	r2, [pc, #564]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009536:	430b      	orrs	r3, r1
 8009538:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800953c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800954c:	2300      	movs	r3, #0
 800954e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009552:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009556:	460b      	mov	r3, r1
 8009558:	4313      	orrs	r3, r2
 800955a:	d00b      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800955c:	4b83      	ldr	r3, [pc, #524]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800955e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009562:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800956a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800956c:	4a7f      	ldr	r2, [pc, #508]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800956e:	430b      	orrs	r3, r1
 8009570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009584:	2300      	movs	r3, #0
 8009586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800958a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800958e:	460b      	mov	r3, r1
 8009590:	4313      	orrs	r3, r2
 8009592:	d00b      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009594:	4b75      	ldr	r3, [pc, #468]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800959a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800959e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095a4:	4a71      	ldr	r2, [pc, #452]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80095a6:	430b      	orrs	r3, r1
 80095a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80095b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095bc:	2300      	movs	r3, #0
 80095be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80095c6:	460b      	mov	r3, r1
 80095c8:	4313      	orrs	r3, r2
 80095ca:	d00b      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80095cc:	4b67      	ldr	r3, [pc, #412]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80095ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80095d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095dc:	4a63      	ldr	r2, [pc, #396]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80095de:	430b      	orrs	r3, r1
 80095e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80095f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80095fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80095fe:	460b      	mov	r3, r1
 8009600:	4313      	orrs	r3, r2
 8009602:	d00b      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009604:	4b59      	ldr	r3, [pc, #356]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800960a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800960e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009614:	4a55      	ldr	r2, [pc, #340]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009616:	430b      	orrs	r3, r1
 8009618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800961c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800962c:	2300      	movs	r3, #0
 800962e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009632:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009636:	460b      	mov	r3, r1
 8009638:	4313      	orrs	r3, r2
 800963a:	d00b      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800963c:	4b4b      	ldr	r3, [pc, #300]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800963e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009642:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800964a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800964c:	4a47      	ldr	r2, [pc, #284]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800964e:	430b      	orrs	r3, r1
 8009650:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009662:	2300      	movs	r3, #0
 8009664:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009666:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800966a:	460b      	mov	r3, r1
 800966c:	4313      	orrs	r3, r2
 800966e:	d00b      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009670:	4b3e      	ldr	r3, [pc, #248]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009676:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800967a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800967e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009680:	4a3a      	ldr	r2, [pc, #232]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009682:	430b      	orrs	r3, r1
 8009684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009694:	673b      	str	r3, [r7, #112]	@ 0x70
 8009696:	2300      	movs	r3, #0
 8009698:	677b      	str	r3, [r7, #116]	@ 0x74
 800969a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800969e:	460b      	mov	r3, r1
 80096a0:	4313      	orrs	r3, r2
 80096a2:	d00b      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80096a4:	4b31      	ldr	r3, [pc, #196]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80096a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80096ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80096b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096b4:	4a2d      	ldr	r2, [pc, #180]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80096b6:	430b      	orrs	r3, r1
 80096b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80096bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80096c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096ca:	2300      	movs	r3, #0
 80096cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80096d2:	460b      	mov	r3, r1
 80096d4:	4313      	orrs	r3, r2
 80096d6:	d04f      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80096d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80096dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096e0:	2b80      	cmp	r3, #128	@ 0x80
 80096e2:	d02d      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80096e4:	2b80      	cmp	r3, #128	@ 0x80
 80096e6:	d827      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80096e8:	2b60      	cmp	r3, #96	@ 0x60
 80096ea:	d02b      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80096ec:	2b60      	cmp	r3, #96	@ 0x60
 80096ee:	d823      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80096f0:	2b40      	cmp	r3, #64	@ 0x40
 80096f2:	d006      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80096f4:	2b40      	cmp	r3, #64	@ 0x40
 80096f6:	d81f      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	d011      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8009700:	e01a      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009702:	4b1a      	ldr	r3, [pc, #104]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009706:	4a19      	ldr	r2, [pc, #100]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800970c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800970e:	e01a      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009714:	3308      	adds	r3, #8
 8009716:	4618      	mov	r0, r3
 8009718:	f002 f8cc 	bl	800b8b4 <RCCEx_PLL2_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009722:	e010      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009728:	332c      	adds	r3, #44	@ 0x2c
 800972a:	4618      	mov	r0, r3
 800972c:	f002 f95a 	bl	800b9e4 <RCCEx_PLL3_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009736:	e006      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 800973e:	e002      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8009744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009746:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800974a:	2b00      	cmp	r3, #0
 800974c:	d110      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800974e:	4b07      	ldr	r3, [pc, #28]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009754:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800975c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009760:	4a02      	ldr	r2, [pc, #8]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009762:	430b      	orrs	r3, r1
 8009764:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009768:	e006      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800976a:	bf00      	nop
 800976c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009770:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009774:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009778:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009784:	663b      	str	r3, [r7, #96]	@ 0x60
 8009786:	2300      	movs	r3, #0
 8009788:	667b      	str	r3, [r7, #100]	@ 0x64
 800978a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800978e:	460b      	mov	r3, r1
 8009790:	4313      	orrs	r3, r2
 8009792:	d046      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009798:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800979c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80097a0:	d028      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80097a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80097a6:	d821      	bhi.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80097a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ac:	d022      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80097ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097b2:	d81b      	bhi.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80097b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097b8:	d01c      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80097ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097be:	d815      	bhi.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80097c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097c4:	d008      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80097c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097ca:	d80f      	bhi.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d011      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80097d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097d4:	d00e      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80097d6:	e009      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80097dc:	3308      	adds	r3, #8
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 f868 	bl	800b8b4 <RCCEx_PLL2_Config>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80097ea:	e004      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80097f2:	e000      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 80097f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10d      	bne.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80097fe:	4bb6      	ldr	r3, [pc, #728]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009804:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800980c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009810:	4ab1      	ldr	r2, [pc, #708]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009812:	430b      	orrs	r3, r1
 8009814:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009818:	e003      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800981e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800982e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009830:	2300      	movs	r3, #0
 8009832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009834:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d03e      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800983e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009846:	2b04      	cmp	r3, #4
 8009848:	d81d      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800984a:	a201      	add	r2, pc, #4	@ (adr r2, 8009850 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	0800988f 	.word	0x0800988f
 8009854:	08009865 	.word	0x08009865
 8009858:	08009873 	.word	0x08009873
 800985c:	0800988f 	.word	0x0800988f
 8009860:	0800988f 	.word	0x0800988f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009864:	4b9c      	ldr	r3, [pc, #624]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009868:	4a9b      	ldr	r2, [pc, #620]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800986a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800986e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009870:	e00e      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009876:	332c      	adds	r3, #44	@ 0x2c
 8009878:	4618      	mov	r0, r3
 800987a:	f002 f8b3 	bl	800b9e4 <RCCEx_PLL3_Config>
 800987e:	4603      	mov	r3, r0
 8009880:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8009884:	e004      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 800988c:	e000      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 800988e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009890:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10d      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009898:	4b8f      	ldr	r3, [pc, #572]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800989a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800989e:	f023 0107 	bic.w	r1, r3, #7
 80098a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80098a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098aa:	4a8b      	ldr	r2, [pc, #556]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80098ac:	430b      	orrs	r3, r1
 80098ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80098b2:	e003      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b4:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80098b8:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80098bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80098c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80098ca:	2300      	movs	r3, #0
 80098cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80098ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80098d2:	460b      	mov	r3, r1
 80098d4:	4313      	orrs	r3, r2
 80098d6:	d04a      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80098d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80098dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098e4:	d028      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80098e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098ea:	d821      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80098ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098f0:	d024      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x510>
 80098f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098f6:	d81b      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80098f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fc:	d00e      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80098fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009902:	d815      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d01b      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800990c:	d110      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800990e:	4b72      	ldr	r3, [pc, #456]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009912:	4a71      	ldr	r2, [pc, #452]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009918:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800991a:	e012      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800991c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009920:	332c      	adds	r3, #44	@ 0x2c
 8009922:	4618      	mov	r0, r3
 8009924:	f002 f85e 	bl	800b9e4 <RCCEx_PLL3_Config>
 8009928:	4603      	mov	r3, r0
 800992a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 800992e:	e008      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8009936:	e004      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8009938:	bf00      	nop
 800993a:	e002      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 800993c:	bf00      	nop
 800993e:	e000      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8009940:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009942:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10d      	bne.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800994a:	4b63      	ldr	r3, [pc, #396]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800994c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009950:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009954:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800995e:	430b      	orrs	r3, r1
 8009960:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009964:	e003      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009966:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800996a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800996e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800997a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800997c:	2300      	movs	r3, #0
 800997e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009980:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009984:	460b      	mov	r3, r1
 8009986:	4313      	orrs	r3, r2
 8009988:	f000 80ba 	beq.w	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800998c:	2300      	movs	r3, #0
 800998e:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009992:	4b51      	ldr	r3, [pc, #324]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	d113      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099a0:	4b4d      	ldr	r3, [pc, #308]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80099a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099a6:	4a4c      	ldr	r2, [pc, #304]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80099a8:	f043 0304 	orr.w	r3, r3, #4
 80099ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80099b0:	4b49      	ldr	r3, [pc, #292]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80099b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099b6:	f003 0304 	and.w	r3, r3, #4
 80099ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
      pwrclkchanged = SET;
 80099c2:	2301      	movs	r3, #1
 80099c4:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80099c8:	4b44      	ldr	r3, [pc, #272]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80099ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099cc:	4a43      	ldr	r2, [pc, #268]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80099ce:	f043 0301 	orr.w	r3, r3, #1
 80099d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099d4:	f7f9 fb00 	bl	8002fd8 <HAL_GetTick>
 80099d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80099dc:	e00b      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099de:	f7f9 fafb 	bl	8002fd8 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d903      	bls.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 80099f4:	e005      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80099f6:	4b39      	ldr	r3, [pc, #228]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80099f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0ed      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8009a02:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d16a      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a0a:	4b33      	ldr	r3, [pc, #204]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d023      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8009a20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009a24:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8009a28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d01b      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a30:	4b29      	ldr	r3, [pc, #164]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a3e:	4b26      	ldr	r3, [pc, #152]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a44:	4a24      	ldr	r2, [pc, #144]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a4e:	4b22      	ldr	r3, [pc, #136]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a54:	4a20      	ldr	r2, [pc, #128]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009a64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d019      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a74:	f7f9 fab0 	bl	8002fd8 <HAL_GetTick>
 8009a78:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a7c:	e00d      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a7e:	f7f9 faab 	bl	8002fd8 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a88:	1ad2      	subs	r2, r2, r3
 8009a8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d903      	bls.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
            break;
 8009a98:	e006      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d0ea      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 8009aa8:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10d      	bne.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009ab0:	4b09      	ldr	r3, [pc, #36]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ab6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009aba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ac2:	4a05      	ldr	r2, [pc, #20]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009aca:	e00d      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009acc:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009ad0:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
 8009ad4:	e008      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8009ad6:	bf00      	nop
 8009ad8:	46020c00 	.word	0x46020c00
 8009adc:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae0:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009ae4:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ae8:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d107      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009af0:	4bc0      	ldr	r3, [pc, #768]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009af6:	4abf      	ldr	r2, [pc, #764]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009af8:	f023 0304 	bic.w	r3, r3, #4
 8009afc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b0e:	2300      	movs	r3, #0
 8009b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009b16:	460b      	mov	r3, r1
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	d042      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8009b1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b24:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009b28:	d022      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8009b2a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009b2e:	d81b      	bhi.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8009b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b34:	d011      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8009b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b3a:	d815      	bhi.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d019      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8009b40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b44:	d110      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 feb1 	bl	800b8b4 <RCCEx_PLL2_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8009b58:	e00d      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b5a:	4ba6      	ldr	r3, [pc, #664]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5e:	4aa5      	ldr	r2, [pc, #660]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b64:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009b66:	e006      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8009b6e:	e002      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8009b70:	bf00      	nop
 8009b72:	e000      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8009b74:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009b76:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10d      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8009b7e:	4b9d      	ldr	r3, [pc, #628]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b84:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b90:	4a98      	ldr	r2, [pc, #608]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009b92:	430b      	orrs	r3, r1
 8009b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009b98:	e003      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009b9e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009bae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	d02d      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009bbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bca:	d00b      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8009bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd0:	d804      	bhi.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d008      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bda:	d007      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8009be2:	e004      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8009be4:	bf00      	nop
 8009be6:	e002      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8009be8:	bf00      	nop
 8009bea:	e000      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8009bec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009bee:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10d      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009bf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bfc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c08:	4a7a      	ldr	r2, [pc, #488]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009c10:	e003      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c12:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009c16:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009c26:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c28:	2300      	movs	r3, #0
 8009c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c2c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009c30:	460b      	mov	r3, r1
 8009c32:	4313      	orrs	r3, r2
 8009c34:	d019      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c42:	d105      	bne.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c44:	4b6b      	ldr	r3, [pc, #428]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c48:	4a6a      	ldr	r2, [pc, #424]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c4e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009c50:	4b68      	ldr	r3, [pc, #416]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009c52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c56:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009c5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c62:	4a64      	ldr	r2, [pc, #400]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009c64:	430b      	orrs	r3, r1
 8009c66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009c6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c78:	2300      	movs	r3, #0
 8009c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009c80:	460b      	mov	r3, r1
 8009c82:	4313      	orrs	r3, r2
 8009c84:	d00c      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009c86:	4b5b      	ldr	r3, [pc, #364]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009c94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009c98:	4956      	ldr	r1, [pc, #344]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009ca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009cac:	623b      	str	r3, [r7, #32]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cb2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	d00c      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009cc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009cca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009cce:	4949      	ldr	r1, [pc, #292]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009cd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009ce2:	61bb      	str	r3, [r7, #24]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009cec:	460b      	mov	r3, r1
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	d00c      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009cf2:	4b40      	ldr	r3, [pc, #256]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cf8:	f023 0218 	bic.w	r2, r3, #24
 8009cfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d04:	493b      	ldr	r1, [pc, #236]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009d22:	460b      	mov	r3, r1
 8009d24:	4313      	orrs	r3, r2
 8009d26:	d032      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8009d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d34:	d105      	bne.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d36:	4b2f      	ldr	r3, [pc, #188]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d40:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8009d42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d4e:	d108      	bne.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d54:	3308      	adds	r3, #8
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fdac 	bl	800b8b4 <RCCEx_PLL2_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    }
    if (ret == HAL_OK)
 8009d62:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10d      	bne.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009d6a:	4b22      	ldr	r3, [pc, #136]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d7c:	491d      	ldr	r1, [pc, #116]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009d84:	e003      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d86:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009d8a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8009d8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8009d9a:	60bb      	str	r3, [r7, #8]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009da4:	460b      	mov	r3, r1
 8009da6:	4313      	orrs	r3, r2
 8009da8:	d03d      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8009daa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009db6:	d00e      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8009db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dbc:	d815      	bhi.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d01a      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dc6:	d110      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dcc:	4a09      	ldr	r2, [pc, #36]	@ (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8009dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dd2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009dd4:	e011      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009dda:	3308      	adds	r3, #8
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 fd69 	bl	800b8b4 <RCCEx_PLL2_Config>
 8009de2:	4603      	mov	r3, r0
 8009de4:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009de8:	e007      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        break;
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8009df2:	bf00      	nop
 8009df4:	46020c00 	.word	0x46020c00
        break;
 8009df8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009dfa:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10d      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009e02:	4b1a      	ldr	r3, [pc, #104]	@ (8009e6c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8009e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e08:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e14:	4915      	ldr	r1, [pc, #84]	@ (8009e6c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009e1c:	e003      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8009e22:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	2300      	movs	r3, #0
 8009e36:	607b      	str	r3, [r7, #4]
 8009e38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	d00c      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009e42:	4b0a      	ldr	r3, [pc, #40]	@ (8009e6c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8009e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e48:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009e4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009e50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e54:	4905      	ldr	r1, [pc, #20]	@ (8009e6c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009e5c:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	37d0      	adds	r7, #208	@ 0xd0
 8009e64:	46bd      	mov	sp, r7
 8009e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e6a:	bf00      	nop
 8009e6c:	46020c00 	.word	0x46020c00

08009e70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b089      	sub	sp, #36	@ 0x24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009e78:	4ba6      	ldr	r3, [pc, #664]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e80:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009e82:	4ba4      	ldr	r3, [pc, #656]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009e8c:	4ba1      	ldr	r3, [pc, #644]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	3301      	adds	r3, #1
 8009e98:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009e9a:	4b9e      	ldr	r3, [pc, #632]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9e:	091b      	lsrs	r3, r3, #4
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009ea6:	4b9b      	ldr	r3, [pc, #620]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eaa:	08db      	lsrs	r3, r3, #3
 8009eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d062      	beq.n	8009f8e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	f200 8081 	bhi.w	8009fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d024      	beq.n	8009f20 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d17a      	bne.n	8009fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a118 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b89      	ldr	r3, [pc, #548]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f02:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a11c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1e:	e08f      	b.n	800a040 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009f20:	4b7c      	ldr	r3, [pc, #496]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009f2c:	4b79      	ldr	r3, [pc, #484]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	0f1b      	lsrs	r3, r3, #28
 8009f32:	f003 030f 	and.w	r3, r3, #15
 8009f36:	e006      	b.n	8009f46 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009f38:	4b76      	ldr	r3, [pc, #472]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f3e:	041b      	lsls	r3, r3, #16
 8009f40:	0f1b      	lsrs	r3, r3, #28
 8009f42:	f003 030f 	and.w	r3, r3, #15
 8009f46:	4a76      	ldr	r2, [pc, #472]	@ (800a120 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4c:	ee07 3a90 	vmov	s15, r3
 8009f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	ee07 3a90 	vmov	s15, r3
 8009f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f70:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a11c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f8c:	e058      	b.n	800a040 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	ee07 3a90 	vmov	s15, r3
 8009f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f98:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a118 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa0:	4b5c      	ldr	r3, [pc, #368]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa8:	ee07 3a90 	vmov	s15, r3
 8009fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fb4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a11c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fd0:	e036      	b.n	800a040 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009fd2:	4b50      	ldr	r3, [pc, #320]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d005      	beq.n	8009fea <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009fde:	4b4d      	ldr	r3, [pc, #308]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	0f1b      	lsrs	r3, r3, #28
 8009fe4:	f003 030f 	and.w	r3, r3, #15
 8009fe8:	e006      	b.n	8009ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009fea:	4b4a      	ldr	r3, [pc, #296]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ff0:	041b      	lsls	r3, r3, #16
 8009ff2:	0f1b      	lsrs	r3, r3, #28
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	4a49      	ldr	r2, [pc, #292]	@ (800a120 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	ee07 3a90 	vmov	s15, r3
 800a00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a022:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a11c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a02a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a02e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a032:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a03a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a03e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a040:	4b34      	ldr	r3, [pc, #208]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d017      	beq.n	800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a04c:	4b31      	ldr	r3, [pc, #196]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a04e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a050:	0a5b      	lsrs	r3, r3, #9
 800a052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a05e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a062:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a066:	edd7 6a07 	vldr	s13, [r7, #28]
 800a06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a072:	ee17 2a90 	vmov	r2, s15
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	e002      	b.n	800a082 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a082:	4b24      	ldr	r3, [pc, #144]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d017      	beq.n	800a0be <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a08e:	4b21      	ldr	r3, [pc, #132]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a098:	ee07 3a90 	vmov	s15, r3
 800a09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a0a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0a4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b4:	ee17 2a90 	vmov	r2, s15
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	605a      	str	r2, [r3, #4]
 800a0bc:	e002      	b.n	800a0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a0c4:	4b13      	ldr	r3, [pc, #76]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d017      	beq.n	800a100 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a0d0:	4b10      	ldr	r3, [pc, #64]	@ (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d4:	0e1b      	lsrs	r3, r3, #24
 800a0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a0e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a0ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f6:	ee17 2a90 	vmov	r2, s15
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a0fe:	e002      	b.n	800a106 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	609a      	str	r2, [r3, #8]
}
 800a106:	bf00      	nop
 800a108:	3724      	adds	r7, #36	@ 0x24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	46020c00 	.word	0x46020c00
 800a118:	4b742400 	.word	0x4b742400
 800a11c:	46000000 	.word	0x46000000
 800a120:	080159f4 	.word	0x080159f4

0800a124 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a124:	b480      	push	{r7}
 800a126:	b089      	sub	sp, #36	@ 0x24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a12c:	4ba6      	ldr	r3, [pc, #664]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a134:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a136:	4ba4      	ldr	r3, [pc, #656]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a140:	4ba1      	ldr	r3, [pc, #644]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a144:	0a1b      	lsrs	r3, r3, #8
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	3301      	adds	r3, #1
 800a14c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a14e:	4b9e      	ldr	r3, [pc, #632]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a152:	091b      	lsrs	r3, r3, #4
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a15a:	4b9b      	ldr	r3, [pc, #620]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15e:	08db      	lsrs	r3, r3, #3
 800a160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	fb02 f303 	mul.w	r3, r2, r3
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a172:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d062      	beq.n	800a242 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b03      	cmp	r3, #3
 800a180:	f200 8081 	bhi.w	800a286 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d024      	beq.n	800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d17a      	bne.n	800a286 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a2:	4b89      	ldr	r3, [pc, #548]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a1a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1b6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1d2:	e08f      	b.n	800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a1d4:	4b7c      	ldr	r3, [pc, #496]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a1e0:	4b79      	ldr	r3, [pc, #484]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	0f1b      	lsrs	r3, r3, #28
 800a1e6:	f003 030f 	and.w	r3, r3, #15
 800a1ea:	e006      	b.n	800a1fa <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800a1ec:	4b76      	ldr	r3, [pc, #472]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a1ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a1f2:	041b      	lsls	r3, r3, #16
 800a1f4:	0f1b      	lsrs	r3, r3, #28
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	4a76      	ldr	r2, [pc, #472]	@ (800a3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a220:	ed97 6a02 	vldr	s12, [r7, #8]
 800a224:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a230:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a234:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a240:	e058      	b.n	800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	ee07 3a90 	vmov	s15, r3
 800a248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a254:	4b5c      	ldr	r3, [pc, #368]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25c:	ee07 3a90 	vmov	s15, r3
 800a260:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a264:	ed97 6a02 	vldr	s12, [r7, #8]
 800a268:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a26c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a270:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a278:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a284:	e036      	b.n	800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a286:	4b50      	ldr	r3, [pc, #320]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d005      	beq.n	800a29e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a292:	4b4d      	ldr	r3, [pc, #308]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	0f1b      	lsrs	r3, r3, #28
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	e006      	b.n	800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a29e:	4b4a      	ldr	r3, [pc, #296]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a2a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a2a4:	041b      	lsls	r3, r3, #16
 800a2a6:	0f1b      	lsrs	r3, r3, #28
 800a2a8:	f003 030f 	and.w	r3, r3, #15
 800a2ac:	4a49      	ldr	r2, [pc, #292]	@ (800a3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	ee07 3a90 	vmov	s15, r3
 800a2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2d6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2f2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a2f4:	4b34      	ldr	r3, [pc, #208]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d017      	beq.n	800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a300:	4b31      	ldr	r3, [pc, #196]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a304:	0a5b      	lsrs	r3, r3, #9
 800a306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a30a:	ee07 3a90 	vmov	s15, r3
 800a30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a316:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a31a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a31e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a326:	ee17 2a90 	vmov	r2, s15
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	e002      	b.n	800a336 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a336:	4b24      	ldr	r3, [pc, #144]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d017      	beq.n	800a372 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a342:	4b21      	ldr	r3, [pc, #132]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a346:	0c1b      	lsrs	r3, r3, #16
 800a348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a358:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a35c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a368:	ee17 2a90 	vmov	r2, s15
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	605a      	str	r2, [r3, #4]
 800a370:	e002      	b.n	800a378 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a378:	4b13      	ldr	r3, [pc, #76]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d017      	beq.n	800a3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a384:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a388:	0e1b      	lsrs	r3, r3, #24
 800a38a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a39a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a39e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3aa:	ee17 2a90 	vmov	r2, s15
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a3b2:	e002      	b.n	800a3ba <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	609a      	str	r2, [r3, #8]
}
 800a3ba:	bf00      	nop
 800a3bc:	3724      	adds	r7, #36	@ 0x24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	46020c00 	.word	0x46020c00
 800a3cc:	4b742400 	.word	0x4b742400
 800a3d0:	46000000 	.word	0x46000000
 800a3d4:	080159f4 	.word	0x080159f4

0800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b089      	sub	sp, #36	@ 0x24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a3e0:	4ba6      	ldr	r3, [pc, #664]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a3ea:	4ba4      	ldr	r3, [pc, #656]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a3f4:	4ba1      	ldr	r3, [pc, #644]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f8:	0a1b      	lsrs	r3, r3, #8
 800a3fa:	f003 030f 	and.w	r3, r3, #15
 800a3fe:	3301      	adds	r3, #1
 800a400:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a402:	4b9e      	ldr	r3, [pc, #632]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a406:	091b      	lsrs	r3, r3, #4
 800a408:	f003 0301 	and.w	r3, r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a40e:	4b9b      	ldr	r3, [pc, #620]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a412:	08db      	lsrs	r3, r3, #3
 800a414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	fb02 f303 	mul.w	r3, r2, r3
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a426:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d062      	beq.n	800a4f6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2b03      	cmp	r3, #3
 800a434:	f200 8081 	bhi.w	800a53a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d024      	beq.n	800a488 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b02      	cmp	r3, #2
 800a442:	d17a      	bne.n	800a53a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a456:	4b89      	ldr	r3, [pc, #548]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a466:	ed97 6a02 	vldr	s12, [r7, #8]
 800a46a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a684 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a472:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a482:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a486:	e08f      	b.n	800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a488:	4b7c      	ldr	r3, [pc, #496]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a494:	4b79      	ldr	r3, [pc, #484]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	0f1b      	lsrs	r3, r3, #28
 800a49a:	f003 030f 	and.w	r3, r3, #15
 800a49e:	e006      	b.n	800a4ae <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a4a0:	4b76      	ldr	r3, [pc, #472]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4a6:	041b      	lsls	r3, r3, #16
 800a4a8:	0f1b      	lsrs	r3, r3, #28
 800a4aa:	f003 030f 	and.w	r3, r3, #15
 800a4ae:	4a76      	ldr	r2, [pc, #472]	@ (800a688 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4b4:	ee07 3a90 	vmov	s15, r3
 800a4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4d8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a684 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a4dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a4ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4f4:	e058      	b.n	800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	ee07 3a90 	vmov	s15, r3
 800a4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a500:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a508:	4b5c      	ldr	r3, [pc, #368]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a518:	ed97 6a02 	vldr	s12, [r7, #8]
 800a51c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a684 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a520:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a524:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a52c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a530:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a538:	e036      	b.n	800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a53a:	4b50      	ldr	r3, [pc, #320]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a542:	2b00      	cmp	r3, #0
 800a544:	d005      	beq.n	800a552 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a546:	4b4d      	ldr	r3, [pc, #308]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	0f1b      	lsrs	r3, r3, #28
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	e006      	b.n	800a560 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a552:	4b4a      	ldr	r3, [pc, #296]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a558:	041b      	lsls	r3, r3, #16
 800a55a:	0f1b      	lsrs	r3, r3, #28
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	4a49      	ldr	r2, [pc, #292]	@ (800a688 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a566:	ee07 3a90 	vmov	s15, r3
 800a56a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	ee07 3a90 	vmov	s15, r3
 800a574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	ee07 3a90 	vmov	s15, r3
 800a582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a586:	ed97 6a02 	vldr	s12, [r7, #8]
 800a58a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a684 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5a6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a5a8:	4b34      	ldr	r3, [pc, #208]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d017      	beq.n	800a5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a5b4:	4b31      	ldr	r3, [pc, #196]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a5b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5b8:	0a5b      	lsrs	r3, r3, #9
 800a5ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a5c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a5ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5da:	ee17 2a90 	vmov	r2, s15
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e002      	b.n	800a5ea <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a5ea:	4b24      	ldr	r3, [pc, #144]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d017      	beq.n	800a626 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a5f6:	4b21      	ldr	r3, [pc, #132]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5fa:	0c1b      	lsrs	r3, r3, #16
 800a5fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a600:	ee07 3a90 	vmov	s15, r3
 800a604:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a60c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a610:	edd7 6a07 	vldr	s13, [r7, #28]
 800a614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a61c:	ee17 2a90 	vmov	r2, s15
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	605a      	str	r2, [r3, #4]
 800a624:	e002      	b.n	800a62c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a62c:	4b13      	ldr	r3, [pc, #76]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a634:	2b00      	cmp	r3, #0
 800a636:	d017      	beq.n	800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a638:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a63a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a63c:	0e1b      	lsrs	r3, r3, #24
 800a63e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a64a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a64e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a652:	edd7 6a07 	vldr	s13, [r7, #28]
 800a656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a65a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a65e:	ee17 2a90 	vmov	r2, s15
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a666:	e002      	b.n	800a66e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	609a      	str	r2, [r3, #8]
}
 800a66e:	bf00      	nop
 800a670:	3724      	adds	r7, #36	@ 0x24
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	46020c00 	.word	0x46020c00
 800a680:	4b742400 	.word	0x4b742400
 800a684:	46000000 	.word	0x46000000
 800a688:	080159f4 	.word	0x080159f4

0800a68c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08e      	sub	sp, #56	@ 0x38
 800a690:	af00      	add	r7, sp, #0
 800a692:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a69a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800a69e:	430b      	orrs	r3, r1
 800a6a0:	d145      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a6a2:	4bac      	ldr	r3, [pc, #688]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a6a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6ac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a6ae:	4ba9      	ldr	r3, [pc, #676]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a6b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d108      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6c2:	d104      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a6c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ca:	f001 b8e3 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a6ce:	4ba1      	ldr	r3, [pc, #644]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a6d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6dc:	d114      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6e4:	d110      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a6e6:	4b9b      	ldr	r3, [pc, #620]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a6e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6f4:	d103      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a6f6:	23fa      	movs	r3, #250	@ 0xfa
 800a6f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a6fa:	f001 b8cb 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800a6fe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a702:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a704:	f001 b8c6 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a708:	4b92      	ldr	r3, [pc, #584]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a714:	d107      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a71c:	d103      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a71e:	4b8e      	ldr	r3, [pc, #568]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34
 800a722:	f001 b8b7 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	637b      	str	r3, [r7, #52]	@ 0x34
 800a72a:	f001 b8b3 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a72e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a732:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a736:	430b      	orrs	r3, r1
 800a738:	d151      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a73a:	4b86      	ldr	r3, [pc, #536]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a73c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a740:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a744:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	2b80      	cmp	r3, #128	@ 0x80
 800a74a:	d035      	beq.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	2b80      	cmp	r3, #128	@ 0x80
 800a750:	d841      	bhi.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	2b60      	cmp	r3, #96	@ 0x60
 800a756:	d02a      	beq.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	2b60      	cmp	r3, #96	@ 0x60
 800a75c:	d83b      	bhi.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a760:	2b40      	cmp	r3, #64	@ 0x40
 800a762:	d009      	beq.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a766:	2b40      	cmp	r3, #64	@ 0x40
 800a768:	d835      	bhi.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00c      	beq.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	2b20      	cmp	r3, #32
 800a774:	d012      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a776:	e02e      	b.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff fb77 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a786:	f001 b885 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a78a:	f107 0318 	add.w	r3, r7, #24
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fcc8 	bl	800a124 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a798:	f001 b87c 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a79c:	f107 030c 	add.w	r3, r7, #12
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff fe19 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7aa:	f001 b873 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a7ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a7b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7b4:	f001 b86e 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7b8:	4b66      	ldr	r3, [pc, #408]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7c4:	d103      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a7c6:	4b65      	ldr	r3, [pc, #404]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a7c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a7ca:	f001 b863 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7d2:	f001 b85f 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :
      {
        frequency = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7da:	f001 b85b 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a7de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7e2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	d165      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a7ea:	4b5a      	ldr	r3, [pc, #360]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a7ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7f0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a7f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a7fc:	d034      	beq.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a804:	d853      	bhi.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800a806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a80c:	d00b      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a814:	d84b      	bhi.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800a816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d016      	beq.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a822:	d009      	beq.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a824:	e043      	b.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x222>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff fb20 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a832:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a834:	f001 b82e 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a838:	f107 0318 	add.w	r3, r7, #24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff fc71 	bl	800a124 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a846:	f001 b825 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a84a:	4b42      	ldr	r3, [pc, #264]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a856:	d103      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        {
          frequency = HSI48_VALUE;
 800a858:	4b41      	ldr	r3, [pc, #260]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a85c:	f001 b81a 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a864:	f001 b816 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a868:	4b3a      	ldr	r3, [pc, #232]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b20      	cmp	r3, #32
 800a872:	d118      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a874:	4b37      	ldr	r3, [pc, #220]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d005      	beq.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 800a880:	4b34      	ldr	r3, [pc, #208]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	0e1b      	lsrs	r3, r3, #24
 800a886:	f003 030f 	and.w	r3, r3, #15
 800a88a:	e006      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a88c:	4b31      	ldr	r3, [pc, #196]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a88e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a892:	041b      	lsls	r3, r3, #16
 800a894:	0e1b      	lsrs	r3, r3, #24
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	4a32      	ldr	r2, [pc, #200]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a8a2:	f000 bff7 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8aa:	f000 bff3 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :

        frequency = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8b2:	f000 bfef 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ba:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800a8be:	430b      	orrs	r3, r1
 800a8c0:	f040 808a 	bne.w	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a8c4:	4b23      	ldr	r3, [pc, #140]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a8c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8ce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d16f      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a8d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a8d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8dc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a8e0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a8e8:	d03e      	beq.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a8f0:	d85d      	bhi.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f8:	d00b      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a900:	d855      	bhi.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	2b00      	cmp	r3, #0
 800a906:	d016      	beq.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800a908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a90e:	d009      	beq.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 800a910:	e04d      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x322>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff faaa 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a920:	f000 bfb8 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a924:	f107 0318 	add.w	r3, r7, #24
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fbfb 	bl	800a124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a932:	f000 bfaf 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a936:	4b07      	ldr	r3, [pc, #28]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a93e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a942:	d103      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          {
            frequency = HSI48_VALUE;
 800a944:	4b06      	ldr	r3, [pc, #24]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a948:	f000 bfa4 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a950:	f000 bfa0 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a954:	46020c00 	.word	0x46020c00
 800a958:	0007a120 	.word	0x0007a120
 800a95c:	00f42400 	.word	0x00f42400
 800a960:	02dc6c00 	.word	0x02dc6c00
 800a964:	080159f4 	.word	0x080159f4
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a968:	4bab      	ldr	r3, [pc, #684]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0320 	and.w	r3, r3, #32
 800a970:	2b20      	cmp	r3, #32
 800a972:	d118      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a974:	4ba8      	ldr	r3, [pc, #672]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800a980:	4ba5      	ldr	r3, [pc, #660]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	0e1b      	lsrs	r3, r3, #24
 800a986:	f003 030f 	and.w	r3, r3, #15
 800a98a:	e006      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800a98c:	4ba2      	ldr	r3, [pc, #648]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a98e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a992:	041b      	lsls	r3, r3, #16
 800a994:	0e1b      	lsrs	r3, r3, #24
 800a996:	f003 030f 	and.w	r3, r3, #15
 800a99a:	4aa0      	ldr	r2, [pc, #640]	@ (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a9a2:	f000 bf77 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a9aa:	f000 bf73 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        default :
        {
          frequency = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a9b2:	f000 bf6f 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9bc:	d108      	bne.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fa54 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9cc:	f000 bf62 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else
    {
      frequency = 0U;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d4:	f000 bf5e 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9dc:	1e51      	subs	r1, r2, #1
 800a9de:	430b      	orrs	r3, r1
 800a9e0:	d136      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a9e2:	4b8d      	ldr	r3, [pc, #564]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a9e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d104      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a9f4:	f7fe fc6c 	bl	80092d0 <HAL_RCC_GetPCLK2Freq>
 800a9f8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9fa:	f000 bf4b 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d104      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aa04:	f7fe fb34 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800aa08:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa0a:	f000 bf43 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800aa0e:	4b82      	ldr	r3, [pc, #520]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa1a:	d106      	bne.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d103      	bne.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
    {
      frequency = HSI_VALUE;
 800aa22:	4b7f      	ldr	r3, [pc, #508]	@ (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aa24:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa26:	f000 bf35 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800aa2a:	4b7b      	ldr	r3, [pc, #492]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d107      	bne.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d104      	bne.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
    {
      frequency = LSE_VALUE;
 800aa3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa44:	f000 bf26 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa4c:	f000 bf22 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800aa50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa54:	1f11      	subs	r1, r2, #4
 800aa56:	430b      	orrs	r3, r1
 800aa58:	d136      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800aa5a:	4b6f      	ldr	r3, [pc, #444]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d104      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aa6c:	f7fe fc1c 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800aa70:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa72:	f000 bf0f 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800aa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa78:	2b10      	cmp	r3, #16
 800aa7a:	d104      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aa7c:	f7fe faf8 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800aa80:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa82:	f000 bf07 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800aa86:	4b64      	ldr	r3, [pc, #400]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa92:	d106      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800aa94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d103      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      frequency = HSI_VALUE;
 800aa9a:	4b61      	ldr	r3, [pc, #388]	@ (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aa9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa9e:	f000 bef9 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800aaa2:	4b5d      	ldr	r3, [pc, #372]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aaa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d107      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	2b30      	cmp	r3, #48	@ 0x30
 800aab4:	d104      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
    {
      frequency = LSE_VALUE;
 800aab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaba:	637b      	str	r3, [r7, #52]	@ 0x34
 800aabc:	f000 beea 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac4:	f000 bee6 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800aac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aacc:	f1a2 0108 	sub.w	r1, r2, #8
 800aad0:	430b      	orrs	r3, r1
 800aad2:	d136      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800aad4:	4b50      	ldr	r3, [pc, #320]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aada:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aade:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800aae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d104      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aae6:	f7fe fbdf 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800aaea:	6378      	str	r0, [r7, #52]	@ 0x34
 800aaec:	f000 bed2 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf2:	2b40      	cmp	r3, #64	@ 0x40
 800aaf4:	d104      	bne.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aaf6:	f7fe fabb 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800aafa:	6378      	str	r0, [r7, #52]	@ 0x34
 800aafc:	f000 beca 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ab00:	4b45      	ldr	r3, [pc, #276]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab0c:	d106      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	2b80      	cmp	r3, #128	@ 0x80
 800ab12:	d103      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = HSI_VALUE;
 800ab14:	4b42      	ldr	r3, [pc, #264]	@ (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ab16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab18:	f000 bebc 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ab1c:	4b3e      	ldr	r3, [pc, #248]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d107      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab2e:	d104      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
    {
      frequency = LSE_VALUE;
 800ab30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab36:	f000 bead 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab3e:	f000 bea9 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800ab42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab46:	f1a2 0110 	sub.w	r1, r2, #16
 800ab4a:	430b      	orrs	r3, r1
 800ab4c:	d139      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ab4e:	4b32      	ldr	r3, [pc, #200]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab58:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d104      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab60:	f7fe fba2 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800ab64:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab66:	f000 be95 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab70:	d104      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ab72:	f7fe fa7d 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800ab76:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab78:	f000 be8c 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ab7c:	4b26      	ldr	r3, [pc, #152]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab88:	d107      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab90:	d103      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HSI_VALUE;
 800ab92:	4b23      	ldr	r3, [pc, #140]	@ (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ab94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab96:	f000 be7d 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ab9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aba0:	f003 0302 	and.w	r3, r3, #2
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d108      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abae:	d104      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = LSE_VALUE;
 800abb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb6:	f000 be6d 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800abba:	2300      	movs	r3, #0
 800abbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800abbe:	f000 be69 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800abc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc6:	f1a2 0120 	sub.w	r1, r2, #32
 800abca:	430b      	orrs	r3, r1
 800abcc:	d15f      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800abce:	4b12      	ldr	r3, [pc, #72]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800abd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800abe0:	f7fe fb8a 	bl	80092f8 <HAL_RCC_GetPCLK3Freq>
 800abe4:	6378      	str	r0, [r7, #52]	@ 0x34
 800abe6:	f000 be55 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800abea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abec:	2b01      	cmp	r3, #1
 800abee:	d104      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800abf0:	f7fe fa3e 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800abf4:	6378      	str	r0, [r7, #52]	@ 0x34
 800abf6:	f000 be4d 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800abfa:	4b07      	ldr	r3, [pc, #28]	@ (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac06:	d10d      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d10a      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HSI_VALUE;
 800ac0e:	4b04      	ldr	r3, [pc, #16]	@ (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ac10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac12:	f000 be3f 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800ac16:	bf00      	nop
 800ac18:	46020c00 	.word	0x46020c00
 800ac1c:	080159f4 	.word	0x080159f4
 800ac20:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ac24:	4baf      	ldr	r3, [pc, #700]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ac26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d107      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d104      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = LSE_VALUE;
 800ac38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac3e:	f000 be29 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ac42:	4ba8      	ldr	r3, [pc, #672]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0320 	and.w	r3, r3, #32
 800ac4a:	2b20      	cmp	r3, #32
 800ac4c:	d11b      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	d118      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac54:	4ba3      	ldr	r3, [pc, #652]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 800ac60:	4ba0      	ldr	r3, [pc, #640]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	0e1b      	lsrs	r3, r3, #24
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	e006      	b.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800ac6c:	4b9d      	ldr	r3, [pc, #628]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ac6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac72:	041b      	lsls	r3, r3, #16
 800ac74:	0e1b      	lsrs	r3, r3, #24
 800ac76:	f003 030f 	and.w	r3, r3, #15
 800ac7a:	4a9b      	ldr	r2, [pc, #620]	@ (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800ac7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac82:	f000 be07 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8a:	f000 be03 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ac8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac92:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ac96:	430b      	orrs	r3, r1
 800ac98:	d16c      	bne.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ac9a:	4b92      	ldr	r3, [pc, #584]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ac9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aca0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aca4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acac:	d104      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800acae:	f7fe f9df 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800acb2:	6378      	str	r0, [r7, #52]	@ 0x34
 800acb4:	f000 bdee 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800acb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acbe:	d108      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc0:	f107 0318 	add.w	r3, r7, #24
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff fa2d 	bl	800a124 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	637b      	str	r3, [r7, #52]	@ 0x34
 800acce:	f000 bde1 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800acd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d104      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800acd8:	f7fe facc 	bl	8009274 <HAL_RCC_GetHCLKFreq>
 800acdc:	6378      	str	r0, [r7, #52]	@ 0x34
 800acde:	f000 bdd9 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ace8:	d122      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800acea:	4b7e      	ldr	r3, [pc, #504]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0320 	and.w	r3, r3, #32
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	d118      	bne.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800acf6:	4b7b      	ldr	r3, [pc, #492]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d005      	beq.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800ad02:	4b78      	ldr	r3, [pc, #480]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	0e1b      	lsrs	r3, r3, #24
 800ad08:	f003 030f 	and.w	r3, r3, #15
 800ad0c:	e006      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 800ad0e:	4b75      	ldr	r3, [pc, #468]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ad10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad14:	041b      	lsls	r3, r3, #16
 800ad16:	0e1b      	lsrs	r3, r3, #24
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	4a72      	ldr	r2, [pc, #456]	@ (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800ad1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad24:	f000 bdb6 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad2c:	f000 bdb2 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ad30:	4b6c      	ldr	r3, [pc, #432]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad3c:	d107      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad44:	d103      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
    {
      frequency = HSE_VALUE;
 800ad46:	4b69      	ldr	r3, [pc, #420]	@ (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 800ad48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad4a:	f000 bda3 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ad4e:	4b65      	ldr	r3, [pc, #404]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad5a:	d107      	bne.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad62:	d103      	bne.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
    {
      frequency = HSI_VALUE;
 800ad64:	4b61      	ldr	r3, [pc, #388]	@ (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 800ad66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad68:	f000 bd94 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad70:	f000 bd90 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ad74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad78:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	d158      	bne.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ad80:	4b58      	ldr	r3, [pc, #352]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ad82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad86:	f003 0307 	and.w	r3, r3, #7
 800ad8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d84b      	bhi.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 800ad92:	a201      	add	r2, pc, #4	@ (adr r2, 800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>)
 800ad94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad98:	0800add1 	.word	0x0800add1
 800ad9c:	0800adad 	.word	0x0800adad
 800ada0:	0800adbf 	.word	0x0800adbf
 800ada4:	0800addb 	.word	0x0800addb
 800ada8:	0800ade5 	.word	0x0800ade5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff f85d 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adba:	f000 bd6b 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adbe:	f107 030c 	add.w	r3, r7, #12
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7ff fb08 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adcc:	f000 bd62 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800add0:	f7fe fa50 	bl	8009274 <HAL_RCC_GetHCLKFreq>
 800add4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800add6:	f000 bd5d 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800adda:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800adde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ade0:	f000 bd58 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ade4:	4b3f      	ldr	r3, [pc, #252]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0320 	and.w	r3, r3, #32
 800adec:	2b20      	cmp	r3, #32
 800adee:	d118      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800adf0:	4b3c      	ldr	r3, [pc, #240]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d005      	beq.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 800adfc:	4b39      	ldr	r3, [pc, #228]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	0e1b      	lsrs	r3, r3, #24
 800ae02:	f003 030f 	and.w	r3, r3, #15
 800ae06:	e006      	b.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800ae08:	4b36      	ldr	r3, [pc, #216]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ae0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae0e:	041b      	lsls	r3, r3, #16
 800ae10:	0e1b      	lsrs	r3, r3, #24
 800ae12:	f003 030f 	and.w	r3, r3, #15
 800ae16:	4a34      	ldr	r2, [pc, #208]	@ (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800ae18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae1e:	f000 bd39 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae26:	f000 bd35 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae2e:	f000 bd31 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ae32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae36:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800ae3a:	430b      	orrs	r3, r1
 800ae3c:	d16d      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ae3e:	4b29      	ldr	r3, [pc, #164]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800ae40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae44:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ae48:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae50:	d036      	beq.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae58:	d85b      	bhi.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae60:	d029      	beq.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae68:	d853      	bhi.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae70:	d013      	beq.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800ae72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae78:	d84b      	bhi.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d015      	beq.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae86:	d144      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe ffef 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ae92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae96:	f000 bcfd 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae9a:	f107 030c 	add.w	r3, r7, #12
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff fa9a 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aea8:	f000 bcf4 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800aeac:	f7fe f9e2 	bl	8009274 <HAL_RCC_GetHCLKFreq>
 800aeb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aeb2:	f000 bcef 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aeb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800aeba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aebc:	f000 bcea 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aec0:	4b08      	ldr	r3, [pc, #32]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0320 	and.w	r3, r3, #32
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d11e      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aecc:	4b05      	ldr	r3, [pc, #20]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00b      	beq.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800aed8:	4b02      	ldr	r3, [pc, #8]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	0e1b      	lsrs	r3, r3, #24
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	e00c      	b.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 800aee4:	46020c00 	.word	0x46020c00
 800aee8:	080159f4 	.word	0x080159f4
 800aeec:	00f42400 	.word	0x00f42400
 800aef0:	4b9d      	ldr	r3, [pc, #628]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800aef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aef6:	041b      	lsls	r3, r3, #16
 800aef8:	0e1b      	lsrs	r3, r3, #24
 800aefa:	f003 030f 	and.w	r3, r3, #15
 800aefe:	4a9b      	ldr	r2, [pc, #620]	@ (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 800af00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800af06:	f000 bcc5 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af0e:	f000 bcc1 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af16:	f000 bcbd 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800af1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af1e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800af22:	430b      	orrs	r3, r1
 800af24:	d14c      	bne.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800af26:	4b90      	ldr	r3, [pc, #576]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800af28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af30:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	2b00      	cmp	r3, #0
 800af36:	d104      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800af38:	f7fe f9b6 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800af3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800af3e:	f000 bca9 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af48:	d104      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af4a:	f7fe f891 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800af4e:	6378      	str	r0, [r7, #52]	@ 0x34
 800af50:	f000 bca0 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800af54:	4b84      	ldr	r3, [pc, #528]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af60:	d107      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af68:	d103      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
    {
      frequency = HSI_VALUE;
 800af6a:	4b81      	ldr	r3, [pc, #516]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800af6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af6e:	f000 bc91 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800af72:	4b7d      	ldr	r3, [pc, #500]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b20      	cmp	r3, #32
 800af7c:	d11c      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af84:	d118      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af86:	4b78      	ldr	r3, [pc, #480]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x912>
 800af92:	4b75      	ldr	r3, [pc, #468]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	0e1b      	lsrs	r3, r3, #24
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	e006      	b.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800af9e:	4b72      	ldr	r3, [pc, #456]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800afa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800afa4:	041b      	lsls	r3, r3, #16
 800afa6:	0e1b      	lsrs	r3, r3, #24
 800afa8:	f003 030f 	and.w	r3, r3, #15
 800afac:	4a6f      	ldr	r2, [pc, #444]	@ (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 800afae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb4:	f000 bc6e 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	637b      	str	r3, [r7, #52]	@ 0x34
 800afbc:	f000 bc6a 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800afc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afc4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800afc8:	430b      	orrs	r3, r1
 800afca:	d14c      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800afcc:	4b66      	ldr	r3, [pc, #408]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800afce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800afd6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800afd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d104      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800afde:	f7fe f963 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800afe2:	6378      	str	r0, [r7, #52]	@ 0x34
 800afe4:	f000 bc56 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afee:	d104      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aff0:	f7fe f83e 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800aff4:	6378      	str	r0, [r7, #52]	@ 0x34
 800aff6:	f000 bc4d 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800affa:	4b5b      	ldr	r3, [pc, #364]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b006:	d107      	bne.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b00e:	d103      	bne.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
    {
      frequency = HSI_VALUE;
 800b010:	4b57      	ldr	r3, [pc, #348]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800b012:	637b      	str	r3, [r7, #52]	@ 0x34
 800b014:	f000 bc3e 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b018:	4b53      	ldr	r3, [pc, #332]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0320 	and.w	r3, r3, #32
 800b020:	2b20      	cmp	r3, #32
 800b022:	d11c      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b02a:	d118      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b02c:	4b4e      	ldr	r3, [pc, #312]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b038:	4b4b      	ldr	r3, [pc, #300]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	0e1b      	lsrs	r3, r3, #24
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	e006      	b.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800b044:	4b48      	ldr	r3, [pc, #288]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b04a:	041b      	lsls	r3, r3, #16
 800b04c:	0e1b      	lsrs	r3, r3, #24
 800b04e:	f003 030f 	and.w	r3, r3, #15
 800b052:	4a46      	ldr	r2, [pc, #280]	@ (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 800b054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b058:	637b      	str	r3, [r7, #52]	@ 0x34
 800b05a:	f000 bc1b 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	637b      	str	r3, [r7, #52]	@ 0x34
 800b062:	f000 bc17 	b.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b06a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b06e:	430b      	orrs	r3, r1
 800b070:	d151      	bne.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b072:	4b3d      	ldr	r3, [pc, #244]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b078:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b07c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b080:	2bc0      	cmp	r3, #192	@ 0xc0
 800b082:	d024      	beq.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	2bc0      	cmp	r3, #192	@ 0xc0
 800b088:	d842      	bhi.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	2b80      	cmp	r3, #128	@ 0x80
 800b08e:	d00d      	beq.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b092:	2b80      	cmp	r3, #128	@ 0x80
 800b094:	d83c      	bhi.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800b096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d003      	beq.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	2b40      	cmp	r3, #64	@ 0x40
 800b0a0:	d011      	beq.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800b0a2:	e035      	b.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b0a4:	f7fe f928 	bl	80092f8 <HAL_RCC_GetPCLK3Freq>
 800b0a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b0aa:	e3f3      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0ac:	4b2e      	ldr	r3, [pc, #184]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0b8:	d102      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
        {
          frequency = HSI_VALUE;
 800b0ba:	4b2d      	ldr	r3, [pc, #180]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800b0bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0be:	e3e9      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0c4:	e3e6      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b0c6:	f7fd ffd3 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800b0ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b0cc:	e3e2      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b0ce:	4b26      	ldr	r3, [pc, #152]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b20      	cmp	r3, #32
 800b0d8:	d117      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0da:	4b23      	ldr	r3, [pc, #140]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800b0e6:	4b20      	ldr	r3, [pc, #128]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	0e1b      	lsrs	r3, r3, #24
 800b0ec:	f003 030f 	and.w	r3, r3, #15
 800b0f0:	e006      	b.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b0f2:	4b1d      	ldr	r3, [pc, #116]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b0f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b0f8:	041b      	lsls	r3, r3, #16
 800b0fa:	0e1b      	lsrs	r3, r3, #24
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	4a1a      	ldr	r2, [pc, #104]	@ (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 800b102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b106:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b108:	e3c4      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b10e:	e3c1      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      default:
      {
        frequency = 0U;
 800b110:	2300      	movs	r3, #0
 800b112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b114:	e3be      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b11a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800b11e:	430b      	orrs	r3, r1
 800b120:	d14d      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b122:	4b11      	ldr	r3, [pc, #68]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b128:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b12c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	2b00      	cmp	r3, #0
 800b132:	d103      	bne.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b134:	f7fe f8b8 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800b138:	6378      	str	r0, [r7, #52]	@ 0x34
 800b13a:	e3ab      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b142:	d103      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b144:	f7fd ff94 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800b148:	6378      	str	r0, [r7, #52]	@ 0x34
 800b14a:	e3a3      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b14c:	4b06      	ldr	r3, [pc, #24]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b158:	d10c      	bne.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b160:	d108      	bne.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 800b162:	4b03      	ldr	r3, [pc, #12]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800b164:	637b      	str	r3, [r7, #52]	@ 0x34
 800b166:	e395      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800b168:	46020c00 	.word	0x46020c00
 800b16c:	080159f4 	.word	0x080159f4
 800b170:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b174:	4ba4      	ldr	r3, [pc, #656]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0320 	and.w	r3, r3, #32
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	d11b      	bne.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b186:	d117      	bne.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b188:	4b9f      	ldr	r3, [pc, #636]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800b194:	4b9c      	ldr	r3, [pc, #624]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	0e1b      	lsrs	r3, r3, #24
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	e006      	b.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b1a0:	4b99      	ldr	r3, [pc, #612]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b1a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1a6:	041b      	lsls	r3, r3, #16
 800b1a8:	0e1b      	lsrs	r3, r3, #24
 800b1aa:	f003 030f 	and.w	r3, r3, #15
 800b1ae:	4a97      	ldr	r2, [pc, #604]	@ (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800b1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b6:	e36d      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1bc:	e36a      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b1be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1c2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	d164      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b1ca:	4b8f      	ldr	r3, [pc, #572]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b1cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d120      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1dc:	4b8a      	ldr	r3, [pc, #552]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 0320 	and.w	r3, r3, #32
 800b1e4:	2b20      	cmp	r3, #32
 800b1e6:	d117      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1e8:	4b87      	ldr	r3, [pc, #540]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d005      	beq.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 800b1f4:	4b84      	ldr	r3, [pc, #528]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	0e1b      	lsrs	r3, r3, #24
 800b1fa:	f003 030f 	and.w	r3, r3, #15
 800b1fe:	e006      	b.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 800b200:	4b81      	ldr	r3, [pc, #516]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b206:	041b      	lsls	r3, r3, #16
 800b208:	0e1b      	lsrs	r3, r3, #24
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	4a7f      	ldr	r2, [pc, #508]	@ (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800b210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b214:	637b      	str	r3, [r7, #52]	@ 0x34
 800b216:	e33d      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 800b218:	2300      	movs	r3, #0
 800b21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b21c:	e33a      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b21e:	4b7a      	ldr	r3, [pc, #488]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b228:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b22c:	d112      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800b22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b234:	d10e      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b236:	4b74      	ldr	r3, [pc, #464]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b23c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b244:	d102      	bne.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      {
        frequency = LSI_VALUE / 128U;
 800b246:	23fa      	movs	r3, #250	@ 0xfa
 800b248:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b24a:	e323      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800b24c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b250:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b252:	e31f      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b254:	4b6c      	ldr	r3, [pc, #432]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b25c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b260:	d106      	bne.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b268:	d102      	bne.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
    {
      frequency = HSI_VALUE;
 800b26a:	4b69      	ldr	r3, [pc, #420]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800b26c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b26e:	e311      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b270:	4b65      	ldr	r3, [pc, #404]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d107      	bne.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 800b27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b280:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b284:	d103      	bne.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
    {
      frequency = LSE_VALUE;
 800b286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b28c:	e302      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	637b      	str	r3, [r7, #52]	@ 0x34
 800b292:	e2ff      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b298:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b29c:	430b      	orrs	r3, r1
 800b29e:	d164      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b2a0:	4b59      	ldr	r3, [pc, #356]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b2a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b2aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d120      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b2b2:	4b55      	ldr	r3, [pc, #340]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d117      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2be:	4b52      	ldr	r3, [pc, #328]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d005      	beq.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 800b2ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	0e1b      	lsrs	r3, r3, #24
 800b2d0:	f003 030f 	and.w	r3, r3, #15
 800b2d4:	e006      	b.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 800b2d6:	4b4c      	ldr	r3, [pc, #304]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b2d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b2dc:	041b      	lsls	r3, r3, #16
 800b2de:	0e1b      	lsrs	r3, r3, #24
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	4a49      	ldr	r2, [pc, #292]	@ (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800b2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ec:	e2d2      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f2:	e2cf      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b2f4:	4b44      	ldr	r3, [pc, #272]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b2f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b302:	d112      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
 800b304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b30a:	d10e      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b30c:	4b3e      	ldr	r3, [pc, #248]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b30e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b31a:	d102      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
      {
        frequency = LSI_VALUE / 128U;
 800b31c:	23fa      	movs	r3, #250	@ 0xfa
 800b31e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b320:	e2b8      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800b322:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b326:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b328:	e2b4      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b32a:	4b37      	ldr	r3, [pc, #220]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b336:	d106      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b33e:	d102      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = HSI_VALUE;
 800b340:	4b33      	ldr	r3, [pc, #204]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800b342:	637b      	str	r3, [r7, #52]	@ 0x34
 800b344:	e2a6      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b346:	4b30      	ldr	r3, [pc, #192]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b02      	cmp	r3, #2
 800b352:	d107      	bne.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b35a:	d103      	bne.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
    {
      frequency = LSE_VALUE;
 800b35c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b360:	637b      	str	r3, [r7, #52]	@ 0x34
 800b362:	e297      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	637b      	str	r3, [r7, #52]	@ 0x34
 800b368:	e294      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b36a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b36e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b372:	430b      	orrs	r3, r1
 800b374:	d14e      	bne.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b376:	4b24      	ldr	r3, [pc, #144]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b37c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b380:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b384:	2b00      	cmp	r3, #0
 800b386:	d103      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b388:	f7fd ff8e 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800b38c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b38e:	e281      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b390:	4b1d      	ldr	r3, [pc, #116]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b396:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b39a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b39e:	d112      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b3a6:	d10e      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3a8:	4b17      	ldr	r3, [pc, #92]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b3aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3b6:	d102      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
      {
        frequency = LSI_VALUE / 128U;
 800b3b8:	23fa      	movs	r3, #250	@ 0xfa
 800b3ba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3bc:	e26a      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800b3be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b3c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3c4:	e266      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b3c6:	4b10      	ldr	r3, [pc, #64]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3d2:	d106      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b3da:	d102      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = HSI_VALUE;
 800b3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800b3de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e0:	e258      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b3e2:	4b09      	ldr	r3, [pc, #36]	@ (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800b3e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3e8:	f003 0302 	and.w	r3, r3, #2
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d107      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b3f6:	d103      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
    {
      frequency = LSE_VALUE;
 800b3f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3fe:	e249      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b400:	2300      	movs	r3, #0
 800b402:	637b      	str	r3, [r7, #52]	@ 0x34
 800b404:	e246      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800b406:	bf00      	nop
 800b408:	46020c00 	.word	0x46020c00
 800b40c:	080159f4 	.word	0x080159f4
 800b410:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b418:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800b41c:	430b      	orrs	r3, r1
 800b41e:	d12d      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b420:	4ba9      	ldr	r3, [pc, #676]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b426:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b42a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b42c:	4ba6      	ldr	r3, [pc, #664]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b438:	d105      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
    {
      frequency = HSE_VALUE;
 800b440:	4ba2      	ldr	r3, [pc, #648]	@ (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800b442:	637b      	str	r3, [r7, #52]	@ 0x34
 800b444:	e226      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b44c:	d107      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b44e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fd0c 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b45c:	e21a      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b464:	d107      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b466:	f107 0318 	add.w	r3, r7, #24
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe fe5a 	bl	800a124 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	637b      	str	r3, [r7, #52]	@ 0x34
 800b474:	e20e      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	637b      	str	r3, [r7, #52]	@ 0x34
 800b47a:	e20b      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b480:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800b484:	430b      	orrs	r3, r1
 800b486:	d156      	bne.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b488:	4b8f      	ldr	r3, [pc, #572]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b48a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b48e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b492:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b496:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b49a:	d028      	beq.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 800b49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b4a2:	d845      	bhi.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4aa:	d013      	beq.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4b2:	d83d      	bhi.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d004      	beq.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4c0:	d004      	beq.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
 800b4c2:	e035      	b.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b4c4:	f7fd ff04 	bl	80092d0 <HAL_RCC_GetPCLK2Freq>
 800b4c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b4ca:	e1e3      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b4cc:	f7fd fdd0 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800b4d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b4d2:	e1df      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4d4:	4b7c      	ldr	r3, [pc, #496]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4e0:	d102      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI_VALUE;
 800b4e2:	4b7a      	ldr	r3, [pc, #488]	@ (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800b4e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b4e6:	e1d5      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b4ec:	e1d2      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b4ee:	4b76      	ldr	r3, [pc, #472]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	d117      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b4fa:	4b73      	ldr	r3, [pc, #460]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d005      	beq.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800b506:	4b70      	ldr	r3, [pc, #448]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	0e1b      	lsrs	r3, r3, #24
 800b50c:	f003 030f 	and.w	r3, r3, #15
 800b510:	e006      	b.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800b512:	4b6d      	ldr	r3, [pc, #436]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b518:	041b      	lsls	r3, r3, #16
 800b51a:	0e1b      	lsrs	r3, r3, #24
 800b51c:	f003 030f 	and.w	r3, r3, #15
 800b520:	4a6b      	ldr	r2, [pc, #428]	@ (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800b522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b526:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b528:	e1b4      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b52a:	2300      	movs	r3, #0
 800b52c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b52e:	e1b1      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b534:	e1ae      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b53a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800b53e:	430b      	orrs	r3, r1
 800b540:	d156      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b542:	4b61      	ldr	r3, [pc, #388]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b54c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b554:	d028      	beq.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b55c:	d845      	bhi.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800b55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b564:	d013      	beq.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b56c:	d83d      	bhi.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800b56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b570:	2b00      	cmp	r3, #0
 800b572:	d004      	beq.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800b574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b57a:	d004      	beq.n	800b586 <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 800b57c:	e035      	b.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b57e:	f7fd fe93 	bl	80092a8 <HAL_RCC_GetPCLK1Freq>
 800b582:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b584:	e186      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b586:	f7fd fd73 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800b58a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b58c:	e182      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b58e:	4b4e      	ldr	r3, [pc, #312]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b59a:	d102      	bne.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
        {
          frequency = HSI_VALUE;
 800b59c:	4b4b      	ldr	r3, [pc, #300]	@ (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800b59e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5a0:	e178      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5a6:	e175      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b5a8:	4b47      	ldr	r3, [pc, #284]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b20      	cmp	r3, #32
 800b5b2:	d117      	bne.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5b4:	4b44      	ldr	r3, [pc, #272]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d005      	beq.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
 800b5c0:	4b41      	ldr	r3, [pc, #260]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	0e1b      	lsrs	r3, r3, #24
 800b5c6:	f003 030f 	and.w	r3, r3, #15
 800b5ca:	e006      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 800b5cc:	4b3e      	ldr	r3, [pc, #248]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b5ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b5d2:	041b      	lsls	r3, r3, #16
 800b5d4:	0e1b      	lsrs	r3, r3, #24
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	4a3d      	ldr	r2, [pc, #244]	@ (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800b5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5e2:	e157      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5e8:	e154      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5ee:	e151      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	d17d      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b5fc:	4b32      	ldr	r3, [pc, #200]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b5fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b602:	f003 0318 	and.w	r3, r3, #24
 800b606:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60a:	2b18      	cmp	r3, #24
 800b60c:	d871      	bhi.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
 800b60e:	a201      	add	r2, pc, #4	@ (adr r2, 800b614 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>)
 800b610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b614:	0800b679 	.word	0x0800b679
 800b618:	0800b6f3 	.word	0x0800b6f3
 800b61c:	0800b6f3 	.word	0x0800b6f3
 800b620:	0800b6f3 	.word	0x0800b6f3
 800b624:	0800b6f3 	.word	0x0800b6f3
 800b628:	0800b6f3 	.word	0x0800b6f3
 800b62c:	0800b6f3 	.word	0x0800b6f3
 800b630:	0800b6f3 	.word	0x0800b6f3
 800b634:	0800b681 	.word	0x0800b681
 800b638:	0800b6f3 	.word	0x0800b6f3
 800b63c:	0800b6f3 	.word	0x0800b6f3
 800b640:	0800b6f3 	.word	0x0800b6f3
 800b644:	0800b6f3 	.word	0x0800b6f3
 800b648:	0800b6f3 	.word	0x0800b6f3
 800b64c:	0800b6f3 	.word	0x0800b6f3
 800b650:	0800b6f3 	.word	0x0800b6f3
 800b654:	0800b689 	.word	0x0800b689
 800b658:	0800b6f3 	.word	0x0800b6f3
 800b65c:	0800b6f3 	.word	0x0800b6f3
 800b660:	0800b6f3 	.word	0x0800b6f3
 800b664:	0800b6f3 	.word	0x0800b6f3
 800b668:	0800b6f3 	.word	0x0800b6f3
 800b66c:	0800b6f3 	.word	0x0800b6f3
 800b670:	0800b6f3 	.word	0x0800b6f3
 800b674:	0800b6a3 	.word	0x0800b6a3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b678:	f7fd fe3e 	bl	80092f8 <HAL_RCC_GetPCLK3Freq>
 800b67c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b67e:	e109      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b680:	f7fd fcf6 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800b684:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b686:	e105      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b688:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b694:	d102      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = HSI_VALUE;
 800b696:	4b0d      	ldr	r3, [pc, #52]	@ (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800b698:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b69a:	e0fb      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6a0:	e0f8      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b6a2:	4b09      	ldr	r3, [pc, #36]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f003 0320 	and.w	r3, r3, #32
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d11e      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b6ae:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00c      	beq.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800b6ba:	4b03      	ldr	r3, [pc, #12]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	0e1b      	lsrs	r3, r3, #24
 800b6c0:	f003 030f 	and.w	r3, r3, #15
 800b6c4:	e00d      	b.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 800b6c6:	bf00      	nop
 800b6c8:	46020c00 	.word	0x46020c00
 800b6cc:	00f42400 	.word	0x00f42400
 800b6d0:	080159f4 	.word	0x080159f4
 800b6d4:	4b72      	ldr	r3, [pc, #456]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b6d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6da:	041b      	lsls	r3, r3, #16
 800b6dc:	0e1b      	lsrs	r3, r3, #24
 800b6de:	f003 030f 	and.w	r3, r3, #15
 800b6e2:	4a70      	ldr	r2, [pc, #448]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 800b6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6ea:	e0d3      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6f0:	e0d0      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6f6:	e0cd      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6fc:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800b700:	430b      	orrs	r3, r1
 800b702:	d155      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b704:	4b66      	ldr	r3, [pc, #408]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b70a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b70e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b712:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b716:	d013      	beq.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 800b718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b71e:	d844      	bhi.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b726:	d013      	beq.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800b728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b72e:	d83c      	bhi.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 800b730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b732:	2b00      	cmp	r3, #0
 800b734:	d014      	beq.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b73c:	d014      	beq.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 800b73e:	e034      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b740:	f107 0318 	add.w	r3, r7, #24
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fced 	bl	800a124 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b74e:	e0a1      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe fb8b 	bl	8009e70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b75e:	e099      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b760:	f7fd fc86 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800b764:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b766:	e095      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b768:	4b4d      	ldr	r3, [pc, #308]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0320 	and.w	r3, r3, #32
 800b770:	2b20      	cmp	r3, #32
 800b772:	d117      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1118>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b774:	4b4a      	ldr	r3, [pc, #296]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d005      	beq.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 800b780:	4b47      	ldr	r3, [pc, #284]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	0e1b      	lsrs	r3, r3, #24
 800b786:	f003 030f 	and.w	r3, r3, #15
 800b78a:	e006      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
 800b78c:	4b44      	ldr	r3, [pc, #272]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b78e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b792:	041b      	lsls	r3, r3, #16
 800b794:	0e1b      	lsrs	r3, r3, #24
 800b796:	f003 030f 	and.w	r3, r3, #15
 800b79a:	4a42      	ldr	r2, [pc, #264]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 800b79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b7a2:	e077      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7a8:	e074      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7ae:	e071      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b7b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7b4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800b7b8:	430b      	orrs	r3, r1
 800b7ba:	d131      	bne.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x1194>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b7bc:	4b38      	ldr	r3, [pc, #224]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b7be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b7c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b7c8:	4b35      	ldr	r3, [pc, #212]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b7ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7ce:	f003 0302 	and.w	r3, r3, #2
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d106      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d103      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
    {
      frequency = LSE_VALUE;
 800b7dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7e2:	e057      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b7e4:	4b2e      	ldr	r3, [pc, #184]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b7e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7f2:	d112      	bne.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7fa:	d10e      	bne.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7fc:	4b28      	ldr	r3, [pc, #160]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b7fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b80a:	d102      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
      {
        frequency = LSI_VALUE / 128U;
 800b80c:	23fa      	movs	r3, #250	@ 0xfa
 800b80e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b810:	e040      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800b812:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b816:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b818:	e03c      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b81e:	e039      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b824:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b828:	430b      	orrs	r3, r1
 800b82a:	d131      	bne.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b82c:	4b1c      	ldr	r3, [pc, #112]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b82e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b832:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b836:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b838:	4b19      	ldr	r3, [pc, #100]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b844:	d105      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 800b846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d102      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
    {
      frequency = HSI48_VALUE;
 800b84c:	4b16      	ldr	r3, [pc, #88]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800b84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b850:	e020      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b852:	4b13      	ldr	r3, [pc, #76]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b85a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b85e:	d106      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b866:	d102      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b868:	4b10      	ldr	r3, [pc, #64]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 800b86a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b86c:	e012      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b86e:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b87a:	d106      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b882:	d102      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
    {
      frequency = HSI_VALUE;
 800b884:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800b886:	637b      	str	r3, [r7, #52]	@ 0x34
 800b888:	e004      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b88e:	e001      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b896:	4618      	mov	r0, r3
 800b898:	3738      	adds	r7, #56	@ 0x38
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	46020c00 	.word	0x46020c00
 800b8a4:	080159f4 	.word	0x080159f4
 800b8a8:	02dc6c00 	.word	0x02dc6c00
 800b8ac:	016e3600 	.word	0x016e3600
 800b8b0:	00f42400 	.word	0x00f42400

0800b8b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b8bc:	4b47      	ldr	r3, [pc, #284]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a46      	ldr	r2, [pc, #280]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b8c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b8c8:	f7f7 fb86 	bl	8002fd8 <HAL_GetTick>
 800b8cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8ce:	e008      	b.n	800b8e2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8d0:	f7f7 fb82 	bl	8002fd8 <HAL_GetTick>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d901      	bls.n	800b8e2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e077      	b.n	800b9d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8e2:	4b3e      	ldr	r3, [pc, #248]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1f0      	bne.n	800b8d0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b8ee:	4b3b      	ldr	r3, [pc, #236]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b8f6:	f023 0303 	bic.w	r3, r3, #3
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	6811      	ldr	r1, [r2, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	6852      	ldr	r2, [r2, #4]
 800b902:	3a01      	subs	r2, #1
 800b904:	0212      	lsls	r2, r2, #8
 800b906:	430a      	orrs	r2, r1
 800b908:	4934      	ldr	r1, [pc, #208]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b90e:	4b33      	ldr	r3, [pc, #204]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b912:	4b33      	ldr	r3, [pc, #204]	@ (800b9e0 <RCCEx_PLL2_Config+0x12c>)
 800b914:	4013      	ands	r3, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6892      	ldr	r2, [r2, #8]
 800b91a:	3a01      	subs	r2, #1
 800b91c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	68d2      	ldr	r2, [r2, #12]
 800b924:	3a01      	subs	r2, #1
 800b926:	0252      	lsls	r2, r2, #9
 800b928:	b292      	uxth	r2, r2
 800b92a:	4311      	orrs	r1, r2
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	6912      	ldr	r2, [r2, #16]
 800b930:	3a01      	subs	r2, #1
 800b932:	0412      	lsls	r2, r2, #16
 800b934:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b938:	4311      	orrs	r1, r2
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	6952      	ldr	r2, [r2, #20]
 800b93e:	3a01      	subs	r2, #1
 800b940:	0612      	lsls	r2, r2, #24
 800b942:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b946:	430a      	orrs	r2, r1
 800b948:	4924      	ldr	r1, [pc, #144]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b94e:	4b23      	ldr	r3, [pc, #140]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b952:	f023 020c 	bic.w	r2, r3, #12
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	4920      	ldr	r1, [pc, #128]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b960:	4b1e      	ldr	r3, [pc, #120]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	491c      	ldr	r1, [pc, #112]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b96e:	4b1b      	ldr	r3, [pc, #108]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b972:	4a1a      	ldr	r2, [pc, #104]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b974:	f023 0310 	bic.w	r3, r3, #16
 800b978:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b97a:	4b18      	ldr	r3, [pc, #96]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b97c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b97e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b982:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	69d2      	ldr	r2, [r2, #28]
 800b98a:	00d2      	lsls	r2, r2, #3
 800b98c:	4913      	ldr	r1, [pc, #76]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b992:	4b12      	ldr	r3, [pc, #72]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	4a11      	ldr	r2, [pc, #68]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b998:	f043 0310 	orr.w	r3, r3, #16
 800b99c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b99e:	4b0f      	ldr	r3, [pc, #60]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a0e      	ldr	r2, [pc, #56]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b9a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b9aa:	f7f7 fb15 	bl	8002fd8 <HAL_GetTick>
 800b9ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9b0:	e008      	b.n	800b9c4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9b2:	f7f7 fb11 	bl	8002fd8 <HAL_GetTick>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d901      	bls.n	800b9c4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e006      	b.n	800b9d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9c4:	4b05      	ldr	r3, [pc, #20]	@ (800b9dc <RCCEx_PLL2_Config+0x128>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d0f0      	beq.n	800b9b2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0

}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	46020c00 	.word	0x46020c00
 800b9e0:	80800000 	.word	0x80800000

0800b9e4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b9ec:	4b47      	ldr	r3, [pc, #284]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a46      	ldr	r2, [pc, #280]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800b9f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b9f8:	f7f7 faee 	bl	8002fd8 <HAL_GetTick>
 800b9fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9fe:	e008      	b.n	800ba12 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba00:	f7f7 faea 	bl	8002fd8 <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d901      	bls.n	800ba12 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e077      	b.n	800bb02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba12:	4b3e      	ldr	r3, [pc, #248]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1f0      	bne.n	800ba00 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ba1e:	4b3b      	ldr	r3, [pc, #236]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ba26:	f023 0303 	bic.w	r3, r3, #3
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6811      	ldr	r1, [r2, #0]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	6852      	ldr	r2, [r2, #4]
 800ba32:	3a01      	subs	r2, #1
 800ba34:	0212      	lsls	r2, r2, #8
 800ba36:	430a      	orrs	r2, r1
 800ba38:	4934      	ldr	r1, [pc, #208]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	630b      	str	r3, [r1, #48]	@ 0x30
 800ba3e:	4b33      	ldr	r3, [pc, #204]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba42:	4b33      	ldr	r3, [pc, #204]	@ (800bb10 <RCCEx_PLL3_Config+0x12c>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	6892      	ldr	r2, [r2, #8]
 800ba4a:	3a01      	subs	r2, #1
 800ba4c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	68d2      	ldr	r2, [r2, #12]
 800ba54:	3a01      	subs	r2, #1
 800ba56:	0252      	lsls	r2, r2, #9
 800ba58:	b292      	uxth	r2, r2
 800ba5a:	4311      	orrs	r1, r2
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	6912      	ldr	r2, [r2, #16]
 800ba60:	3a01      	subs	r2, #1
 800ba62:	0412      	lsls	r2, r2, #16
 800ba64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ba68:	4311      	orrs	r1, r2
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6952      	ldr	r2, [r2, #20]
 800ba6e:	3a01      	subs	r2, #1
 800ba70:	0612      	lsls	r2, r2, #24
 800ba72:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ba76:	430a      	orrs	r2, r1
 800ba78:	4924      	ldr	r1, [pc, #144]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ba7e:	4b23      	ldr	r3, [pc, #140]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba82:	f023 020c 	bic.w	r2, r3, #12
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	4920      	ldr	r1, [pc, #128]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ba90:	4b1e      	ldr	r3, [pc, #120]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	491c      	ldr	r1, [pc, #112]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ba9e:	4b1b      	ldr	r3, [pc, #108]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800baa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baa2:	4a1a      	ldr	r2, [pc, #104]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800baa4:	f023 0310 	bic.w	r3, r3, #16
 800baa8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800baaa:	4b18      	ldr	r3, [pc, #96]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800baac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800baae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bab2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	69d2      	ldr	r2, [r2, #28]
 800baba:	00d2      	lsls	r2, r2, #3
 800babc:	4913      	ldr	r1, [pc, #76]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800bac2:	4b12      	ldr	r3, [pc, #72]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800bac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac6:	4a11      	ldr	r2, [pc, #68]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800bac8:	f043 0310 	orr.w	r3, r3, #16
 800bacc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800bace:	4b0f      	ldr	r3, [pc, #60]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a0e      	ldr	r2, [pc, #56]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800bad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bad8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bada:	f7f7 fa7d 	bl	8002fd8 <HAL_GetTick>
 800bade:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bae0:	e008      	b.n	800baf4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bae2:	f7f7 fa79 	bl	8002fd8 <HAL_GetTick>
 800bae6:	4602      	mov	r2, r0
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	2b02      	cmp	r3, #2
 800baee:	d901      	bls.n	800baf4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e006      	b.n	800bb02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800baf4:	4b05      	ldr	r3, [pc, #20]	@ (800bb0c <RCCEx_PLL3_Config+0x128>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d0f0      	beq.n	800bae2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	46020c00 	.word	0x46020c00
 800bb10:	80800000 	.word	0x80800000

0800bb14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e0fb      	b.n	800bd1e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a7f      	ldr	r2, [pc, #508]	@ (800bd28 <HAL_SPI_Init+0x214>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d004      	beq.n	800bb3a <HAL_SPI_Init+0x26>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a7d      	ldr	r2, [pc, #500]	@ (800bd2c <HAL_SPI_Init+0x218>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	e000      	b.n	800bb3c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800bb3a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a78      	ldr	r2, [pc, #480]	@ (800bd28 <HAL_SPI_Init+0x214>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d004      	beq.n	800bb56 <HAL_SPI_Init+0x42>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a76      	ldr	r2, [pc, #472]	@ (800bd2c <HAL_SPI_Init+0x218>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d105      	bne.n	800bb62 <HAL_SPI_Init+0x4e>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	2b0f      	cmp	r3, #15
 800bb5c:	d901      	bls.n	800bb62 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e0dd      	b.n	800bd1e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 fc36 	bl	800d3d4 <SPI_GetPacketSize>
 800bb68:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a6e      	ldr	r2, [pc, #440]	@ (800bd28 <HAL_SPI_Init+0x214>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d004      	beq.n	800bb7e <HAL_SPI_Init+0x6a>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a6c      	ldr	r2, [pc, #432]	@ (800bd2c <HAL_SPI_Init+0x218>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d102      	bne.n	800bb84 <HAL_SPI_Init+0x70>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d816      	bhi.n	800bbb2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb88:	4a69      	ldr	r2, [pc, #420]	@ (800bd30 <HAL_SPI_Init+0x21c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d00e      	beq.n	800bbac <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a68      	ldr	r2, [pc, #416]	@ (800bd34 <HAL_SPI_Init+0x220>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d009      	beq.n	800bbac <HAL_SPI_Init+0x98>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a66      	ldr	r2, [pc, #408]	@ (800bd38 <HAL_SPI_Init+0x224>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d004      	beq.n	800bbac <HAL_SPI_Init+0x98>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a65      	ldr	r2, [pc, #404]	@ (800bd3c <HAL_SPI_Init+0x228>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d104      	bne.n	800bbb6 <HAL_SPI_Init+0xa2>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b10      	cmp	r3, #16
 800bbb0:	d901      	bls.n	800bbb6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e0b3      	b.n	800bd1e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7f6 f98c 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f022 0201 	bic.w	r2, r2, #1
 800bbe6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bbf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bbfc:	d119      	bne.n	800bc32 <HAL_SPI_Init+0x11e>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc06:	d103      	bne.n	800bc10 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d008      	beq.n	800bc22 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10c      	bne.n	800bc32 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc20:	d107      	bne.n	800bc32 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bc30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00f      	beq.n	800bc5e <HAL_SPI_Init+0x14a>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b06      	cmp	r3, #6
 800bc44:	d90b      	bls.n	800bc5e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	e007      	b.n	800bc6e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	69da      	ldr	r2, [r3, #28]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc76:	431a      	orrs	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc80:	ea42 0103 	orr.w	r1, r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68da      	ldr	r2, [r3, #12]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc98:	431a      	orrs	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	431a      	orrs	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	431a      	orrs	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	431a      	orrs	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	431a      	orrs	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc2:	431a      	orrs	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	431a      	orrs	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcce:	431a      	orrs	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcda:	ea42 0103 	orr.w	r1, r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	46002000 	.word	0x46002000
 800bd2c:	56002000 	.word	0x56002000
 800bd30:	40013000 	.word	0x40013000
 800bd34:	50013000 	.word	0x50013000
 800bd38:	40003800 	.word	0x40003800
 800bd3c:	50003800 	.word	0x50003800

0800bd40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	603b      	str	r3, [r7, #0]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3320      	adds	r3, #32
 800bd56:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a90      	ldr	r2, [pc, #576]	@ (800bfa0 <HAL_SPI_Transmit+0x260>)
 800bd5e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd60:	f7f7 f93a 	bl	8002fd8 <HAL_GetTick>
 800bd64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d001      	beq.n	800bd76 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800bd72:	2302      	movs	r3, #2
 800bd74:	e1f4      	b.n	800c160 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <HAL_SPI_Transmit+0x42>
 800bd7c:	88fb      	ldrh	r3, [r7, #6]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e1ec      	b.n	800c160 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d101      	bne.n	800bd94 <HAL_SPI_Transmit+0x54>
 800bd90:	2302      	movs	r3, #2
 800bd92:	e1e5      	b.n	800c160 <HAL_SPI_Transmit+0x420>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2203      	movs	r2, #3
 800bda0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	88fa      	ldrh	r2, [r7, #6]
 800bdb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	88fa      	ldrh	r2, [r7, #6]
 800bdbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bdec:	d108      	bne.n	800be00 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	e009      	b.n	800be14 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800be12:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	0c1b      	lsrs	r3, r3, #16
 800be1c:	041b      	lsls	r3, r3, #16
 800be1e:	88f9      	ldrh	r1, [r7, #6]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	6812      	ldr	r2, [r2, #0]
 800be24:	430b      	orrs	r3, r1
 800be26:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f042 0201 	orr.w	r2, r2, #1
 800be36:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	69db      	ldr	r3, [r3, #28]
 800be3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10c      	bne.n	800be60 <HAL_SPI_Transmit+0x120>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be4e:	d107      	bne.n	800be60 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	2b0f      	cmp	r3, #15
 800be66:	d95b      	bls.n	800bf20 <HAL_SPI_Transmit+0x1e0>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a4d      	ldr	r2, [pc, #308]	@ (800bfa4 <HAL_SPI_Transmit+0x264>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d04f      	beq.n	800bf12 <HAL_SPI_Transmit+0x1d2>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a4c      	ldr	r2, [pc, #304]	@ (800bfa8 <HAL_SPI_Transmit+0x268>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d04a      	beq.n	800bf12 <HAL_SPI_Transmit+0x1d2>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a4a      	ldr	r2, [pc, #296]	@ (800bfac <HAL_SPI_Transmit+0x26c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d045      	beq.n	800bf12 <HAL_SPI_Transmit+0x1d2>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a49      	ldr	r2, [pc, #292]	@ (800bfb0 <HAL_SPI_Transmit+0x270>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d147      	bne.n	800bf20 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800be90:	e03f      	b.n	800bf12 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d114      	bne.n	800beca <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6812      	ldr	r2, [r2, #0]
 800beaa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb0:	1d1a      	adds	r2, r3, #4
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bec8:	e023      	b.n	800bf12 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beca:	f7f7 f885 	bl	8002fd8 <HAL_GetTick>
 800bece:	4602      	mov	r2, r0
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d803      	bhi.n	800bee2 <HAL_SPI_Transmit+0x1a2>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d102      	bne.n	800bee8 <HAL_SPI_Transmit+0x1a8>
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d114      	bne.n	800bf12 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f001 f9a5 	bl	800d238 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bef4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e126      	b.n	800c160 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1b9      	bne.n	800be92 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bf1e:	e0f9      	b.n	800c114 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	2b07      	cmp	r3, #7
 800bf26:	f240 80ee 	bls.w	800c106 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bf2a:	e067      	b.n	800bffc <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d13c      	bne.n	800bfb4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d918      	bls.n	800bf78 <HAL_SPI_Transmit+0x238>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d014      	beq.n	800bf78 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	3b02      	subs	r3, #2
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf76:	e041      	b.n	800bffc <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf7c:	881a      	ldrh	r2, [r3, #0]
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf86:	1c9a      	adds	r2, r3, #2
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	3b01      	subs	r3, #1
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf9e:	e02d      	b.n	800bffc <HAL_SPI_Transmit+0x2bc>
 800bfa0:	46002000 	.word	0x46002000
 800bfa4:	40013000 	.word	0x40013000
 800bfa8:	50013000 	.word	0x50013000
 800bfac:	40003800 	.word	0x40003800
 800bfb0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfb4:	f7f7 f810 	bl	8002fd8 <HAL_GetTick>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d803      	bhi.n	800bfcc <HAL_SPI_Transmit+0x28c>
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d102      	bne.n	800bfd2 <HAL_SPI_Transmit+0x292>
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d114      	bne.n	800bffc <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f001 f930 	bl	800d238 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800bff8:	2303      	movs	r3, #3
 800bffa:	e0b1      	b.n	800c160 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c002:	b29b      	uxth	r3, r3
 800c004:	2b00      	cmp	r3, #0
 800c006:	d191      	bne.n	800bf2c <HAL_SPI_Transmit+0x1ec>
 800c008:	e084      	b.n	800c114 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b02      	cmp	r3, #2
 800c016:	d152      	bne.n	800c0be <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c01e:	b29b      	uxth	r3, r3
 800c020:	2b03      	cmp	r3, #3
 800c022:	d918      	bls.n	800c056 <HAL_SPI_Transmit+0x316>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c028:	2b40      	cmp	r3, #64	@ 0x40
 800c02a:	d914      	bls.n	800c056 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6812      	ldr	r2, [r2, #0]
 800c036:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c03c:	1d1a      	adds	r2, r3, #4
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c048:	b29b      	uxth	r3, r3
 800c04a:	3b04      	subs	r3, #4
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c054:	e057      	b.n	800c106 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d917      	bls.n	800c092 <HAL_SPI_Transmit+0x352>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d013      	beq.n	800c092 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c06e:	881a      	ldrh	r2, [r3, #0]
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c078:	1c9a      	adds	r2, r3, #2
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c084:	b29b      	uxth	r3, r3
 800c086:	3b02      	subs	r3, #2
 800c088:	b29a      	uxth	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c090:	e039      	b.n	800c106 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3320      	adds	r3, #32
 800c09c:	7812      	ldrb	r2, [r2, #0]
 800c09e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0a4:	1c5a      	adds	r2, r3, #1
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c0bc:	e023      	b.n	800c106 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0be:	f7f6 ff8b 	bl	8002fd8 <HAL_GetTick>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d803      	bhi.n	800c0d6 <HAL_SPI_Transmit+0x396>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d4:	d102      	bne.n	800c0dc <HAL_SPI_Transmit+0x39c>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d114      	bne.n	800c106 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f001 f8ab 	bl	800d238 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e02c      	b.n	800c160 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f47f af7b 	bne.w	800c00a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2200      	movs	r2, #0
 800c11c:	2108      	movs	r1, #8
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f001 f92a 	bl	800d378 <SPI_WaitOnFlagUntilTimeout>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d007      	beq.n	800c13a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c130:	f043 0220 	orr.w	r2, r3, #32
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f001 f87c 	bl	800d238 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800c15e:	2300      	movs	r3, #0
  }
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08e      	sub	sp, #56	@ 0x38
 800c16c:	af02      	add	r7, sp, #8
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3320      	adds	r3, #32
 800c17c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3330      	adds	r3, #48	@ 0x30
 800c184:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18a:	095b      	lsrs	r3, r3, #5
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	3301      	adds	r3, #1
 800c190:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a90      	ldr	r2, [pc, #576]	@ (800c3d8 <HAL_SPI_TransmitReceive+0x270>)
 800c198:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c19a:	f7f6 ff1d 	bl	8002fd8 <HAL_GetTick>
 800c19e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800c1a0:	887b      	ldrh	r3, [r7, #2]
 800c1a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800c1a4:	887b      	ldrh	r3, [r7, #2]
 800c1a6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d001      	beq.n	800c1b8 <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	e332      	b.n	800c81e <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d005      	beq.n	800c1ca <HAL_SPI_TransmitReceive+0x62>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <HAL_SPI_TransmitReceive+0x62>
 800c1c4:	887b      	ldrh	r3, [r7, #2]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e327      	b.n	800c81e <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d101      	bne.n	800c1dc <HAL_SPI_TransmitReceive+0x74>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	e320      	b.n	800c81e <HAL_SPI_TransmitReceive+0x6b6>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2205      	movs	r2, #5
 800c1e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	887a      	ldrh	r2, [r7, #2]
 800c1fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	887a      	ldrh	r2, [r7, #2]
 800c206:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	887a      	ldrh	r2, [r7, #2]
 800c214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	887a      	ldrh	r2, [r7, #2]
 800c21c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68da      	ldr	r2, [r3, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800c23a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a66      	ldr	r2, [pc, #408]	@ (800c3dc <HAL_SPI_TransmitReceive+0x274>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d00e      	beq.n	800c264 <HAL_SPI_TransmitReceive+0xfc>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a65      	ldr	r2, [pc, #404]	@ (800c3e0 <HAL_SPI_TransmitReceive+0x278>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d009      	beq.n	800c264 <HAL_SPI_TransmitReceive+0xfc>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a63      	ldr	r2, [pc, #396]	@ (800c3e4 <HAL_SPI_TransmitReceive+0x27c>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d004      	beq.n	800c264 <HAL_SPI_TransmitReceive+0xfc>
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a62      	ldr	r2, [pc, #392]	@ (800c3e8 <HAL_SPI_TransmitReceive+0x280>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d102      	bne.n	800c26a <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800c264:	2310      	movs	r3, #16
 800c266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c268:	e001      	b.n	800c26e <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800c26a:	2308      	movs	r3, #8
 800c26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	0c1b      	lsrs	r3, r3, #16
 800c276:	041b      	lsls	r3, r3, #16
 800c278:	8879      	ldrh	r1, [r7, #2]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	6812      	ldr	r2, [r2, #0]
 800c27e:	430b      	orrs	r3, r1
 800c280:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f042 0201 	orr.w	r2, r2, #1
 800c290:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10c      	bne.n	800c2ba <HAL_SPI_TransmitReceive+0x152>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c2a8:	d107      	bne.n	800c2ba <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	2b0f      	cmp	r3, #15
 800c2c0:	f240 80c1 	bls.w	800c446 <HAL_SPI_TransmitReceive+0x2de>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a44      	ldr	r2, [pc, #272]	@ (800c3dc <HAL_SPI_TransmitReceive+0x274>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d00f      	beq.n	800c2ee <HAL_SPI_TransmitReceive+0x186>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a43      	ldr	r2, [pc, #268]	@ (800c3e0 <HAL_SPI_TransmitReceive+0x278>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d00a      	beq.n	800c2ee <HAL_SPI_TransmitReceive+0x186>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a41      	ldr	r2, [pc, #260]	@ (800c3e4 <HAL_SPI_TransmitReceive+0x27c>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d005      	beq.n	800c2ee <HAL_SPI_TransmitReceive+0x186>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a40      	ldr	r2, [pc, #256]	@ (800c3e8 <HAL_SPI_TransmitReceive+0x280>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	f040 80ac 	bne.w	800c446 <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800c2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f0:	089b      	lsrs	r3, r3, #2
 800c2f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c2f4:	e09e      	b.n	800c434 <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	f003 0302 	and.w	r3, r3, #2
 800c300:	2b02      	cmp	r3, #2
 800c302:	d120      	bne.n	800c346 <HAL_SPI_TransmitReceive+0x1de>
 800c304:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c306:	2b00      	cmp	r3, #0
 800c308:	d01d      	beq.n	800c346 <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c30a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c30c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c310:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c312:	429a      	cmp	r2, r3
 800c314:	d217      	bcs.n	800c346 <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	6812      	ldr	r2, [r2, #0]
 800c320:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c332:	b29b      	uxth	r3, r3
 800c334:	3b01      	subs	r3, #1
 800c336:	b29a      	uxth	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c344:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	695b      	ldr	r3, [r3, #20]
 800c34c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c34e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c350:	2b00      	cmp	r3, #0
 800c352:	d06f      	beq.n	800c434 <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d118      	bne.n	800c394 <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c36a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c36c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c372:	1d1a      	adds	r2, r3, #4
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c37e:	b29b      	uxth	r3, r3
 800c380:	3b01      	subs	r3, #1
 800c382:	b29a      	uxth	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c390:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c392:	e04f      	b.n	800c434 <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c394:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c396:	8bfb      	ldrh	r3, [r7, #30]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d227      	bcs.n	800c3ec <HAL_SPI_TransmitReceive+0x284>
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d022      	beq.n	800c3ec <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c3b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3b6:	1d1a      	adds	r2, r3, #4
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c3d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c3d6:	e02d      	b.n	800c434 <HAL_SPI_TransmitReceive+0x2cc>
 800c3d8:	46002000 	.word	0x46002000
 800c3dc:	40013000 	.word	0x40013000
 800c3e0:	50013000 	.word	0x50013000
 800c3e4:	40003800 	.word	0x40003800
 800c3e8:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3ec:	f7f6 fdf4 	bl	8002fd8 <HAL_GetTick>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d803      	bhi.n	800c404 <HAL_SPI_TransmitReceive+0x29c>
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d102      	bne.n	800c40a <HAL_SPI_TransmitReceive+0x2a2>
 800c404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c406:	2b00      	cmp	r3, #0
 800c408:	d114      	bne.n	800c434 <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f000 ff14 	bl	800d238 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800c430:	2303      	movs	r3, #3
 800c432:	e1f4      	b.n	800c81e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c434:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c436:	2b00      	cmp	r3, #0
 800c438:	f47f af5d 	bne.w	800c2f6 <HAL_SPI_TransmitReceive+0x18e>
 800c43c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f47f af59 	bne.w	800c2f6 <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c444:	e1c5      	b.n	800c7d2 <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	2b07      	cmp	r3, #7
 800c44c:	f240 81b9 	bls.w	800c7c2 <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800c450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c452:	085b      	lsrs	r3, r3, #1
 800c454:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c456:	e0c0      	b.n	800c5da <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b02      	cmp	r3, #2
 800c464:	d11f      	bne.n	800c4a6 <HAL_SPI_TransmitReceive+0x33e>
 800c466:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01c      	beq.n	800c4a6 <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c46c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c46e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c472:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c474:	429a      	cmp	r2, r3
 800c476:	d216      	bcs.n	800c4a6 <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c47c:	881a      	ldrh	r2, [r3, #0]
 800c47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c480:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c486:	1c9a      	adds	r2, r3, #2
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c492:	b29b      	uxth	r3, r3
 800c494:	3b01      	subs	r3, #1
 800c496:	b29a      	uxth	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	695b      	ldr	r3, [r3, #20]
 800c4ac:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c4ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 8092 	beq.w	800c5da <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	f003 0301 	and.w	r3, r3, #1
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d118      	bne.n	800c4f6 <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4c8:	6a3a      	ldr	r2, [r7, #32]
 800c4ca:	8812      	ldrh	r2, [r2, #0]
 800c4cc:	b292      	uxth	r2, r2
 800c4ce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4d4:	1c9a      	adds	r2, r3, #2
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c4f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c4f4:	e071      	b.n	800c5da <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c4f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c4f8:	8bfb      	ldrh	r3, [r7, #30]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d228      	bcs.n	800c550 <HAL_SPI_TransmitReceive+0x3e8>
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d023      	beq.n	800c550 <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c50c:	6a3a      	ldr	r2, [r7, #32]
 800c50e:	8812      	ldrh	r2, [r2, #0]
 800c510:	b292      	uxth	r2, r2
 800c512:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c518:	1c9a      	adds	r2, r3, #2
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c522:	6a3a      	ldr	r2, [r7, #32]
 800c524:	8812      	ldrh	r2, [r2, #0]
 800c526:	b292      	uxth	r2, r2
 800c528:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c52e:	1c9a      	adds	r2, r3, #2
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	3b02      	subs	r3, #2
 800c53e:	b29a      	uxth	r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c54c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c54e:	e044      	b.n	800c5da <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c550:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c552:	2b01      	cmp	r3, #1
 800c554:	d11d      	bne.n	800c592 <HAL_SPI_TransmitReceive+0x42a>
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d018      	beq.n	800c592 <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c564:	6a3a      	ldr	r2, [r7, #32]
 800c566:	8812      	ldrh	r2, [r2, #0]
 800c568:	b292      	uxth	r2, r2
 800c56a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c570:	1c9a      	adds	r2, r3, #2
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	3b01      	subs	r3, #1
 800c580:	b29a      	uxth	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c58e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c590:	e023      	b.n	800c5da <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c592:	f7f6 fd21 	bl	8002fd8 <HAL_GetTick>
 800c596:	4602      	mov	r2, r0
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d803      	bhi.n	800c5aa <HAL_SPI_TransmitReceive+0x442>
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a8:	d102      	bne.n	800c5b0 <HAL_SPI_TransmitReceive+0x448>
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d114      	bne.n	800c5da <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 fe41 	bl	800d238 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	e121      	b.n	800c81e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c5da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f47f af3b 	bne.w	800c458 <HAL_SPI_TransmitReceive+0x2f0>
 800c5e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f47f af37 	bne.w	800c458 <HAL_SPI_TransmitReceive+0x2f0>
 800c5ea:	e0f2      	b.n	800c7d2 <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	f003 0302 	and.w	r3, r3, #2
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d121      	bne.n	800c63e <HAL_SPI_TransmitReceive+0x4d6>
 800c5fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d01e      	beq.n	800c63e <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c600:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c602:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c606:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c608:	429a      	cmp	r2, r3
 800c60a:	d218      	bcs.n	800c63e <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3320      	adds	r3, #32
 800c616:	7812      	ldrb	r2, [r2, #0]
 800c618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	3b01      	subs	r3, #1
 800c62e:	b29a      	uxth	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c63c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c646:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 80ba 	beq.w	800c7c2 <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d11b      	bne.n	800c694 <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c668:	7812      	ldrb	r2, [r2, #0]
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c67e:	b29b      	uxth	r3, r3
 800c680:	3b01      	subs	r3, #1
 800c682:	b29a      	uxth	r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c690:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c692:	e096      	b.n	800c7c2 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c694:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c696:	8bfb      	ldrh	r3, [r7, #30]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d24a      	bcs.n	800c732 <HAL_SPI_TransmitReceive+0x5ca>
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d045      	beq.n	800c732 <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6b2:	7812      	ldrb	r2, [r2, #0]
 800c6b4:	b2d2      	uxtb	r2, r2
 800c6b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6ce:	7812      	ldrb	r2, [r2, #0]
 800c6d0:	b2d2      	uxtb	r2, r2
 800c6d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6d8:	1c5a      	adds	r2, r3, #1
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6ea:	7812      	ldrb	r2, [r2, #0]
 800c6ec:	b2d2      	uxtb	r2, r2
 800c6ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c706:	7812      	ldrb	r2, [r2, #0]
 800c708:	b2d2      	uxtb	r2, r2
 800c70a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	3b04      	subs	r3, #4
 800c720:	b29a      	uxth	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c72e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c730:	e047      	b.n	800c7c2 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c732:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c734:	2b03      	cmp	r3, #3
 800c736:	d820      	bhi.n	800c77a <HAL_SPI_TransmitReceive+0x612>
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d01b      	beq.n	800c77a <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c74e:	7812      	ldrb	r2, [r2, #0]
 800c750:	b2d2      	uxtb	r2, r2
 800c752:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c764:	b29b      	uxth	r3, r3
 800c766:	3b01      	subs	r3, #1
 800c768:	b29a      	uxth	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c776:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c778:	e023      	b.n	800c7c2 <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c77a:	f7f6 fc2d 	bl	8002fd8 <HAL_GetTick>
 800c77e:	4602      	mov	r2, r0
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c786:	429a      	cmp	r2, r3
 800c788:	d803      	bhi.n	800c792 <HAL_SPI_TransmitReceive+0x62a>
 800c78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c790:	d102      	bne.n	800c798 <HAL_SPI_TransmitReceive+0x630>
 800c792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c794:	2b00      	cmp	r3, #0
 800c796:	d114      	bne.n	800c7c2 <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 fd4d 	bl	800d238 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e02d      	b.n	800c81e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c7c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f47f af11 	bne.w	800c5ec <HAL_SPI_TransmitReceive+0x484>
 800c7ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f47f af0d 	bne.w	800c5ec <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d8:	2200      	movs	r2, #0
 800c7da:	2108      	movs	r1, #8
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fdcb 	bl	800d378 <SPI_WaitOnFlagUntilTimeout>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d007      	beq.n	800c7f8 <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7ee:	f043 0220 	orr.w	r2, r3, #32
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f000 fd1d 	bl	800d238 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2201      	movs	r2, #1
 800c802:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	e000      	b.n	800c81e <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 800c81c:	2300      	movs	r3, #0
  }
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3730      	adds	r7, #48	@ 0x30
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop

0800c828 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a91      	ldr	r2, [pc, #580]	@ (800ca80 <HAL_SPI_TransmitReceive_DMA+0x258>)
 800c83c:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b01      	cmp	r3, #1
 800c848:	d001      	beq.n	800c84e <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 800c84a:	2302      	movs	r3, #2
 800c84c:	e274      	b.n	800cd38 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d005      	beq.n	800c860 <HAL_SPI_TransmitReceive_DMA+0x38>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <HAL_SPI_TransmitReceive_DMA+0x38>
 800c85a:	887b      	ldrh	r3, [r7, #2]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d101      	bne.n	800c864 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	e269      	b.n	800cd38 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d101      	bne.n	800c872 <HAL_SPI_TransmitReceive_DMA+0x4a>
 800c86e:	2302      	movs	r3, #2
 800c870:	e262      	b.n	800cd38 <HAL_SPI_TransmitReceive_DMA+0x510>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2201      	movs	r2, #1
 800c876:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2205      	movs	r2, #5
 800c87e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	887a      	ldrh	r2, [r7, #2]
 800c894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	887a      	ldrh	r2, [r7, #2]
 800c89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	887a      	ldrh	r2, [r7, #2]
 800c8aa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	887a      	ldrh	r2, [r7, #2]
 800c8b2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68da      	ldr	r2, [r3, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800c8d0:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c8e0:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	2b0f      	cmp	r3, #15
 800c8e8:	d920      	bls.n	800c92c <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8f0:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800c8f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8f6:	d105      	bne.n	800c904 <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8fe:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800c900:	2b02      	cmp	r3, #2
 800c902:	d013      	beq.n	800c92c <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 800c908:	4a5e      	ldr	r2, [pc, #376]	@ (800ca84 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d01e      	beq.n	800c94c <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a5d      	ldr	r2, [pc, #372]	@ (800ca88 <HAL_SPI_TransmitReceive_DMA+0x260>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d019      	beq.n	800c94c <HAL_SPI_TransmitReceive_DMA+0x124>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a5b      	ldr	r2, [pc, #364]	@ (800ca8c <HAL_SPI_TransmitReceive_DMA+0x264>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d014      	beq.n	800c94c <HAL_SPI_TransmitReceive_DMA+0x124>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a5a      	ldr	r2, [pc, #360]	@ (800ca90 <HAL_SPI_TransmitReceive_DMA+0x268>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d00f      	beq.n	800c94c <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800c930:	2b07      	cmp	r3, #7
 800c932:	d911      	bls.n	800c958 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c93a:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d005      	beq.n	800c94c <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c946:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d105      	bne.n	800c958 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	e1ef      	b.n	800cd38 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	2b07      	cmp	r3, #7
 800c95e:	d842      	bhi.n	800c9e6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d109      	bne.n	800c980 <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c972:	b29b      	uxth	r3, r3
 800c974:	3301      	adds	r3, #1
 800c976:	105b      	asrs	r3, r3, #1
 800c978:	b29a      	uxth	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d109      	bne.n	800c9a0 <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c992:	b29b      	uxth	r3, r3
 800c994:	3303      	adds	r3, #3
 800c996:	109b      	asrs	r3, r3, #2
 800c998:	b29a      	uxth	r2, r3
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9a6:	69db      	ldr	r3, [r3, #28]
 800c9a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9ac:	d109      	bne.n	800c9c2 <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	105b      	asrs	r3, r3, #1
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9c8:	69db      	ldr	r3, [r3, #28]
 800c9ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9ce:	d12f      	bne.n	800ca30 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	3303      	adds	r3, #3
 800c9da:	109b      	asrs	r3, r3, #2
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c9e4:	e024      	b.n	800ca30 <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	2b0f      	cmp	r3, #15
 800c9ec:	d820      	bhi.n	800ca30 <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d109      	bne.n	800ca0e <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	3301      	adds	r3, #1
 800ca04:	105b      	asrs	r3, r3, #1
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca14:	69db      	ldr	r3, [r3, #28]
 800ca16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca1a:	d109      	bne.n	800ca30 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	3301      	adds	r3, #1
 800ca26:	105b      	asrs	r3, r3, #1
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca36:	4a17      	ldr	r2, [pc, #92]	@ (800ca94 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 800ca38:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca40:	4a15      	ldr	r2, [pc, #84]	@ (800ca98 <HAL_SPI_TransmitReceive_DMA+0x270>)
 800ca42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca4a:	4a14      	ldr	r2, [pc, #80]	@ (800ca9c <HAL_SPI_TransmitReceive_DMA+0x274>)
 800ca4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca54:	2200      	movs	r2, #0
 800ca56:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	2b07      	cmp	r3, #7
 800ca5e:	d804      	bhi.n	800ca6a <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	887a      	ldrh	r2, [r7, #2]
 800ca64:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ca68:	e020      	b.n	800caac <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	2b0f      	cmp	r3, #15
 800ca70:	d816      	bhi.n	800caa0 <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 800ca72:	887b      	ldrh	r3, [r7, #2]
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ca7e:	e015      	b.n	800caac <HAL_SPI_TransmitReceive_DMA+0x284>
 800ca80:	46002000 	.word	0x46002000
 800ca84:	40013000 	.word	0x40013000
 800ca88:	50013000 	.word	0x50013000
 800ca8c:	40003800 	.word	0x40003800
 800ca90:	50003800 	.word	0x50003800
 800ca94:	0800d1a3 	.word	0x0800d1a3
 800ca98:	0800d151 	.word	0x0800d151
 800ca9c:	0800d1bf 	.word	0x0800d1bf
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800caa0:	887b      	ldrh	r3, [r7, #2]
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d02d      	beq.n	800cb18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d024      	beq.n	800cb12 <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cace:	b29a      	uxth	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800caea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cafa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7f9 fd38 	bl	800657c <HAL_DMAEx_List_Start_IT>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	75fb      	strb	r3, [r7, #23]
 800cb10:	e014      	b.n	800cb3c <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	75fb      	strb	r3, [r7, #23]
 800cb16:	e011      	b.n	800cb3c <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3330      	adds	r3, #48	@ 0x30
 800cb24:	4619      	mov	r1, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb2a:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb32:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800cb34:	f7f8 fea2 	bl	800587c <HAL_DMA_Start_IT>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d011      	beq.n	800cb66 <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb48:	f043 0210 	orr.w	r2, r3, #16
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e0e8      	b.n	800cd38 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cb74:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb86:	2200      	movs	r2, #0
 800cb88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb90:	2200      	movs	r2, #0
 800cb92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb9a:	4a69      	ldr	r2, [pc, #420]	@ (800cd40 <HAL_SPI_TransmitReceive_DMA+0x518>)
 800cb9c:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	2b07      	cmp	r3, #7
 800cba4:	d804      	bhi.n	800cbb0 <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	887a      	ldrh	r2, [r7, #2]
 800cbaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbae:	e010      	b.n	800cbd2 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	2b0f      	cmp	r3, #15
 800cbb6:	d806      	bhi.n	800cbc6 <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 800cbb8:	887b      	ldrh	r3, [r7, #2]
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbc4:	e005      	b.n	800cbd2 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800cbc6:	887b      	ldrh	r3, [r7, #2]
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d02d      	beq.n	800cc3e <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d024      	beq.n	800cc38 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f103 0220 	add.w	r2, r3, #32
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7f9 fca5 	bl	800657c <HAL_DMAEx_List_Start_IT>
 800cc32:	4603      	mov	r3, r0
 800cc34:	75fb      	strb	r3, [r7, #23]
 800cc36:	e014      	b.n	800cc62 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	75fb      	strb	r3, [r7, #23]
 800cc3c:	e011      	b.n	800cc62 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc48:	4619      	mov	r1, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	3320      	adds	r3, #32
 800cc50:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc58:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800cc5a:	f7f8 fe0f 	bl	800587c <HAL_DMA_Start_IT>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d017      	beq.n	800cc98 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7f8 fe64 	bl	800593c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc7a:	f043 0210 	orr.w	r2, r3, #16
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e04f      	b.n	800cd38 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cca0:	2b81      	cmp	r3, #129	@ 0x81
 800cca2:	d10e      	bne.n	800ccc2 <HAL_SPI_TransmitReceive_DMA+0x49a>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccac:	2b81      	cmp	r3, #129	@ 0x81
 800ccae:	d108      	bne.n	800ccc2 <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	6812      	ldr	r2, [r2, #0]
 800ccba:	0c1b      	lsrs	r3, r3, #16
 800ccbc:	041b      	lsls	r3, r3, #16
 800ccbe:	6053      	str	r3, [r2, #4]
 800ccc0:	e009      	b.n	800ccd6 <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	0c1b      	lsrs	r3, r3, #16
 800ccca:	041b      	lsls	r3, r3, #16
 800cccc:	8879      	ldrh	r1, [r7, #2]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	430b      	orrs	r3, r1
 800ccd4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	689a      	ldr	r2, [r3, #8]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cce4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	691a      	ldr	r2, [r3, #16]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800ccf4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f042 0201 	orr.w	r2, r2, #1
 800cd04:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d10c      	bne.n	800cd2e <HAL_SPI_TransmitReceive_DMA+0x506>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd1c:	d107      	bne.n	800cd2e <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd2c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	0800d1bf 	.word	0x0800d1bf

0800cd44 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08a      	sub	sp, #40	@ 0x28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cd5c:	6a3a      	ldr	r2, [r7, #32]
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	4013      	ands	r3, r2
 800cd62:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cd76:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3330      	adds	r3, #48	@ 0x30
 800cd7e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d010      	beq.n	800cdac <HAL_SPI_IRQHandler+0x68>
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	f003 0308 	and.w	r3, r3, #8
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00b      	beq.n	800cdac <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	699a      	ldr	r2, [r3, #24]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cda2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f9c9 	bl	800d13c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800cdaa:	e19a      	b.n	800d0e2 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d113      	bne.n	800cdde <HAL_SPI_IRQHandler+0x9a>
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	f003 0320 	and.w	r3, r3, #32
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10e      	bne.n	800cdde <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d009      	beq.n	800cdde <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	4798      	blx	r3
    handled = 1UL;
 800cdda:	2301      	movs	r3, #1
 800cddc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10f      	bne.n	800ce08 <HAL_SPI_IRQHandler+0xc4>
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00a      	beq.n	800ce08 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d105      	bne.n	800ce08 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	4798      	blx	r3
    handled = 1UL;
 800ce04:	2301      	movs	r3, #1
 800ce06:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	f003 0320 	and.w	r3, r3, #32
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10f      	bne.n	800ce32 <HAL_SPI_IRQHandler+0xee>
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	f003 0302 	and.w	r3, r3, #2
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00a      	beq.n	800ce32 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d105      	bne.n	800ce32 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	4798      	blx	r3
    handled = 1UL;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800ce32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f040 814f 	bne.w	800d0d8 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	f003 0308 	and.w	r3, r3, #8
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 808b 	beq.w	800cf5c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	699a      	ldr	r2, [r3, #24]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f042 0208 	orr.w	r2, r2, #8
 800ce54:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	699a      	ldr	r2, [r3, #24]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f042 0210 	orr.w	r2, r2, #16
 800ce64:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	699a      	ldr	r2, [r3, #24]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce74:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	691a      	ldr	r2, [r3, #16]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f022 0208 	bic.w	r2, r2, #8
 800ce84:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d13d      	bne.n	800cf10 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ce94:	e036      	b.n	800cf04 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	2b0f      	cmp	r3, #15
 800ce9c:	d90b      	bls.n	800ceb6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cea6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cea8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceae:	1d1a      	adds	r2, r3, #4
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ceb4:	e01d      	b.n	800cef2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	2b07      	cmp	r3, #7
 800cebc:	d90b      	bls.n	800ced6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	8812      	ldrh	r2, [r2, #0]
 800cec6:	b292      	uxth	r2, r2
 800cec8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cece:	1c9a      	adds	r2, r3, #2
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ced4:	e00d      	b.n	800cef2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cee2:	7812      	ldrb	r2, [r2, #0]
 800cee4:	b2d2      	uxtb	r2, r2
 800cee6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceec:	1c5a      	adds	r2, r3, #1
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	3b01      	subs	r3, #1
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1c2      	bne.n	800ce96 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f991 	bl	800d238 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d003      	beq.n	800cf30 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f8fd 	bl	800d128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cf2e:	e0d8      	b.n	800d0e2 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cf30:	7cfb      	ldrb	r3, [r7, #19]
 800cf32:	2b05      	cmp	r3, #5
 800cf34:	d103      	bne.n	800cf3e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f003 fe6e 	bl	8010c18 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800cf3c:	e0ce      	b.n	800d0dc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800cf3e:	7cfb      	ldrb	r3, [r7, #19]
 800cf40:	2b04      	cmp	r3, #4
 800cf42:	d103      	bne.n	800cf4c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f8db 	bl	800d100 <HAL_SPI_RxCpltCallback>
    return;
 800cf4a:	e0c7      	b.n	800d0dc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800cf4c:	7cfb      	ldrb	r3, [r7, #19]
 800cf4e:	2b03      	cmp	r3, #3
 800cf50:	f040 80c4 	bne.w	800d0dc <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f8c9 	bl	800d0ec <HAL_SPI_TxCpltCallback>
    return;
 800cf5a:	e0bf      	b.n	800d0dc <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f000 80bd 	beq.w	800d0e2 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00f      	beq.n	800cf92 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf78:	f043 0204 	orr.w	r2, r3, #4
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	699a      	ldr	r2, [r3, #24]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf90:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00f      	beq.n	800cfbc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cfa2:	f043 0201 	orr.w	r2, r3, #1
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	699a      	ldr	r2, [r3, #24]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cfba:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00f      	beq.n	800cfe6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cfcc:	f043 0208 	orr.w	r2, r3, #8
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	699a      	ldr	r2, [r3, #24]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cfe4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	f003 0320 	and.w	r3, r3, #32
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00f      	beq.n	800d010 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cff6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	699a      	ldr	r2, [r3, #24]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f042 0220 	orr.w	r2, r2, #32
 800d00e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d016:	2b00      	cmp	r3, #0
 800d018:	d062      	beq.n	800d0e0 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f022 0201 	bic.w	r2, r2, #1
 800d028:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	6812      	ldr	r2, [r2, #0]
 800d034:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800d038:	f023 0303 	bic.w	r3, r3, #3
 800d03c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d044:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d048:	d13e      	bne.n	800d0c8 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	689a      	ldr	r2, [r3, #8]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d058:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d060:	2b00      	cmp	r3, #0
 800d062:	d015      	beq.n	800d090 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d06a:	4a1f      	ldr	r2, [pc, #124]	@ (800d0e8 <HAL_SPI_IRQHandler+0x3a4>)
 800d06c:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d074:	4618      	mov	r0, r3
 800d076:	f7f8 fcdd 	bl	8005a34 <HAL_DMA_Abort_IT>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d007      	beq.n	800d090 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d096:	2b00      	cmp	r3, #0
 800d098:	d022      	beq.n	800d0e0 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0a0:	4a11      	ldr	r2, [pc, #68]	@ (800d0e8 <HAL_SPI_IRQHandler+0x3a4>)
 800d0a2:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7f8 fcc2 	bl	8005a34 <HAL_DMA_Abort_IT>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d014      	beq.n	800d0e0 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d0c6:	e00b      	b.n	800d0e0 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f829 	bl	800d128 <HAL_SPI_ErrorCallback>
    return;
 800d0d6:	e003      	b.n	800d0e0 <HAL_SPI_IRQHandler+0x39c>
    return;
 800d0d8:	bf00      	nop
 800d0da:	e002      	b.n	800d0e2 <HAL_SPI_IRQHandler+0x39e>
    return;
 800d0dc:	bf00      	nop
 800d0de:	e000      	b.n	800d0e2 <HAL_SPI_IRQHandler+0x39e>
    return;
 800d0e0:	bf00      	nop
  }
}
 800d0e2:	3728      	adds	r7, #40	@ 0x28
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	0800d205 	.word	0x0800d205

0800d0ec <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d15c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b07      	cmp	r3, #7
 800d168:	d017      	beq.n	800d19a <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d172:	2b81      	cmp	r3, #129	@ 0x81
 800d174:	d109      	bne.n	800d18a <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d17c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800d17e:	2b81      	cmp	r3, #129	@ 0x81
 800d180:	d103      	bne.n	800d18a <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f003 fd48 	bl	8010c18 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800d188:	e007      	b.n	800d19a <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	691a      	ldr	r2, [r3, #16]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f042 0208 	orr.w	r2, r2, #8
 800d198:	611a      	str	r2, [r3, #16]
}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b084      	sub	sp, #16
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1ae:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f7ff ffaf 	bl	800d114 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d1b6:	bf00      	nop
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b084      	sub	sp, #16
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1ca:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7f8 fdbb 	bl	8005d48 <HAL_DMA_GetError>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d011      	beq.n	800d1fc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f000 f82d 	bl	800d238 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d1e4:	f043 0210 	orr.w	r2, r3, #16
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f7ff ff96 	bl	800d128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800d1fc:	bf00      	nop
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d210:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7ff ff7c 	bl	800d128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d230:	bf00      	nop
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	699a      	ldr	r2, [r3, #24]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f042 0208 	orr.w	r2, r2, #8
 800d256:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	699a      	ldr	r2, [r3, #24]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f042 0210 	orr.w	r2, r2, #16
 800d266:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f022 0201 	bic.w	r2, r2, #1
 800d276:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	6812      	ldr	r2, [r2, #0]
 800d282:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800d286:	f023 0303 	bic.w	r3, r3, #3
 800d28a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	689a      	ldr	r2, [r3, #8]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d29a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b04      	cmp	r3, #4
 800d2a6:	d014      	beq.n	800d2d2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f003 0320 	and.w	r3, r3, #32
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00f      	beq.n	800d2d2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	699a      	ldr	r2, [r3, #24]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f042 0220 	orr.w	r2, r2, #32
 800d2d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d014      	beq.n	800d308 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00f      	beq.n	800d308 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2ee:	f043 0204 	orr.w	r2, r3, #4
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	699a      	ldr	r2, [r3, #24]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d306:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00f      	beq.n	800d332 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d318:	f043 0201 	orr.w	r2, r3, #1
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	699a      	ldr	r2, [r3, #24]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d330:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00f      	beq.n	800d35c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d342:	f043 0208 	orr.w	r2, r3, #8
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	699a      	ldr	r2, [r3, #24]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d35a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800d36c:	bf00      	nop
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	603b      	str	r3, [r7, #0]
 800d384:	4613      	mov	r3, r2
 800d386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d388:	e010      	b.n	800d3ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d38a:	f7f5 fe25 	bl	8002fd8 <HAL_GetTick>
 800d38e:	4602      	mov	r2, r0
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d803      	bhi.n	800d3a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a0:	d102      	bne.n	800d3a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e00f      	b.n	800d3cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	695a      	ldr	r2, [r3, #20]
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	bf0c      	ite	eq
 800d3bc:	2301      	moveq	r3, #1
 800d3be:	2300      	movne	r3, #0
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d0df      	beq.n	800d38a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3e0:	095b      	lsrs	r3, r3, #5
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	3307      	adds	r3, #7
 800d3f2:	08db      	lsrs	r3, r3, #3
 800d3f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d12e      	bne.n	800d47e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800d426:	2b01      	cmp	r3, #1
 800d428:	d101      	bne.n	800d42e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d42a:	2302      	movs	r3, #2
 800d42c:	e028      	b.n	800d480 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2202      	movs	r2, #2
 800d43a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f022 0201 	bic.w	r2, r2, #1
 800d44c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800d45a:	ea42 0103 	orr.w	r1, r2, r3
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	689a      	ldr	r2, [r3, #8]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	e000      	b.n	800d480 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
  }
}
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	e049      	b.n	800d532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7f5 fa0c 	bl	80028d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	3304      	adds	r3, #4
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	4610      	mov	r0, r2
 800d4cc:	f000 fd32 	bl	800df34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b082      	sub	sp, #8
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e049      	b.n	800d5e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 f841 	bl	800d5e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2202      	movs	r2, #2
 800d56a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3304      	adds	r3, #4
 800d576:	4619      	mov	r1, r3
 800d578:	4610      	mov	r0, r2
 800d57a:	f000 fcdb 	bl	800df34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d109      	bne.n	800d620 <HAL_TIM_PWM_Start+0x24>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b01      	cmp	r3, #1
 800d616:	bf14      	ite	ne
 800d618:	2301      	movne	r3, #1
 800d61a:	2300      	moveq	r3, #0
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	e03c      	b.n	800d69a <HAL_TIM_PWM_Start+0x9e>
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2b04      	cmp	r3, #4
 800d624:	d109      	bne.n	800d63a <HAL_TIM_PWM_Start+0x3e>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b01      	cmp	r3, #1
 800d630:	bf14      	ite	ne
 800d632:	2301      	movne	r3, #1
 800d634:	2300      	moveq	r3, #0
 800d636:	b2db      	uxtb	r3, r3
 800d638:	e02f      	b.n	800d69a <HAL_TIM_PWM_Start+0x9e>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	2b08      	cmp	r3, #8
 800d63e:	d109      	bne.n	800d654 <HAL_TIM_PWM_Start+0x58>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b01      	cmp	r3, #1
 800d64a:	bf14      	ite	ne
 800d64c:	2301      	movne	r3, #1
 800d64e:	2300      	moveq	r3, #0
 800d650:	b2db      	uxtb	r3, r3
 800d652:	e022      	b.n	800d69a <HAL_TIM_PWM_Start+0x9e>
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b0c      	cmp	r3, #12
 800d658:	d109      	bne.n	800d66e <HAL_TIM_PWM_Start+0x72>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d660:	b2db      	uxtb	r3, r3
 800d662:	2b01      	cmp	r3, #1
 800d664:	bf14      	ite	ne
 800d666:	2301      	movne	r3, #1
 800d668:	2300      	moveq	r3, #0
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	e015      	b.n	800d69a <HAL_TIM_PWM_Start+0x9e>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b10      	cmp	r3, #16
 800d672:	d109      	bne.n	800d688 <HAL_TIM_PWM_Start+0x8c>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	bf14      	ite	ne
 800d680:	2301      	movne	r3, #1
 800d682:	2300      	moveq	r3, #0
 800d684:	b2db      	uxtb	r3, r3
 800d686:	e008      	b.n	800d69a <HAL_TIM_PWM_Start+0x9e>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	2b01      	cmp	r3, #1
 800d692:	bf14      	ite	ne
 800d694:	2301      	movne	r3, #1
 800d696:	2300      	moveq	r3, #0
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e0d8      	b.n	800d854 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d104      	bne.n	800d6b2 <HAL_TIM_PWM_Start+0xb6>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6b0:	e023      	b.n	800d6fa <HAL_TIM_PWM_Start+0xfe>
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b04      	cmp	r3, #4
 800d6b6:	d104      	bne.n	800d6c2 <HAL_TIM_PWM_Start+0xc6>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6c0:	e01b      	b.n	800d6fa <HAL_TIM_PWM_Start+0xfe>
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b08      	cmp	r3, #8
 800d6c6:	d104      	bne.n	800d6d2 <HAL_TIM_PWM_Start+0xd6>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2202      	movs	r2, #2
 800d6cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d6d0:	e013      	b.n	800d6fa <HAL_TIM_PWM_Start+0xfe>
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2b0c      	cmp	r3, #12
 800d6d6:	d104      	bne.n	800d6e2 <HAL_TIM_PWM_Start+0xe6>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2202      	movs	r2, #2
 800d6dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d6e0:	e00b      	b.n	800d6fa <HAL_TIM_PWM_Start+0xfe>
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	2b10      	cmp	r3, #16
 800d6e6:	d104      	bne.n	800d6f2 <HAL_TIM_PWM_Start+0xf6>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d6f0:	e003      	b.n	800d6fa <HAL_TIM_PWM_Start+0xfe>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2201      	movs	r2, #1
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	4618      	mov	r0, r3
 800d704:	f001 f988 	bl	800ea18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a53      	ldr	r2, [pc, #332]	@ (800d85c <HAL_TIM_PWM_Start+0x260>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d02c      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a52      	ldr	r2, [pc, #328]	@ (800d860 <HAL_TIM_PWM_Start+0x264>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d027      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a50      	ldr	r2, [pc, #320]	@ (800d864 <HAL_TIM_PWM_Start+0x268>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d022      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a4f      	ldr	r2, [pc, #316]	@ (800d868 <HAL_TIM_PWM_Start+0x26c>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d01d      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a4d      	ldr	r2, [pc, #308]	@ (800d86c <HAL_TIM_PWM_Start+0x270>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d018      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a4c      	ldr	r2, [pc, #304]	@ (800d870 <HAL_TIM_PWM_Start+0x274>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d013      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a4a      	ldr	r2, [pc, #296]	@ (800d874 <HAL_TIM_PWM_Start+0x278>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d00e      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a49      	ldr	r2, [pc, #292]	@ (800d878 <HAL_TIM_PWM_Start+0x27c>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d009      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a47      	ldr	r2, [pc, #284]	@ (800d87c <HAL_TIM_PWM_Start+0x280>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d004      	beq.n	800d76c <HAL_TIM_PWM_Start+0x170>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a46      	ldr	r2, [pc, #280]	@ (800d880 <HAL_TIM_PWM_Start+0x284>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d101      	bne.n	800d770 <HAL_TIM_PWM_Start+0x174>
 800d76c:	2301      	movs	r3, #1
 800d76e:	e000      	b.n	800d772 <HAL_TIM_PWM_Start+0x176>
 800d770:	2300      	movs	r3, #0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d007      	beq.n	800d786 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d784:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a34      	ldr	r2, [pc, #208]	@ (800d85c <HAL_TIM_PWM_Start+0x260>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d040      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a32      	ldr	r2, [pc, #200]	@ (800d860 <HAL_TIM_PWM_Start+0x264>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d03b      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7a2:	d036      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d7ac:	d031      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a34      	ldr	r2, [pc, #208]	@ (800d884 <HAL_TIM_PWM_Start+0x288>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d02c      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a32      	ldr	r2, [pc, #200]	@ (800d888 <HAL_TIM_PWM_Start+0x28c>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d027      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a31      	ldr	r2, [pc, #196]	@ (800d88c <HAL_TIM_PWM_Start+0x290>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d022      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a2f      	ldr	r2, [pc, #188]	@ (800d890 <HAL_TIM_PWM_Start+0x294>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d01d      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a2e      	ldr	r2, [pc, #184]	@ (800d894 <HAL_TIM_PWM_Start+0x298>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d018      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a2c      	ldr	r2, [pc, #176]	@ (800d898 <HAL_TIM_PWM_Start+0x29c>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d013      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a1d      	ldr	r2, [pc, #116]	@ (800d864 <HAL_TIM_PWM_Start+0x268>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d00e      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800d868 <HAL_TIM_PWM_Start+0x26c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d009      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a1a      	ldr	r2, [pc, #104]	@ (800d86c <HAL_TIM_PWM_Start+0x270>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d004      	beq.n	800d812 <HAL_TIM_PWM_Start+0x216>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a18      	ldr	r2, [pc, #96]	@ (800d870 <HAL_TIM_PWM_Start+0x274>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d115      	bne.n	800d83e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	689a      	ldr	r2, [r3, #8]
 800d818:	4b20      	ldr	r3, [pc, #128]	@ (800d89c <HAL_TIM_PWM_Start+0x2a0>)
 800d81a:	4013      	ands	r3, r2
 800d81c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b06      	cmp	r3, #6
 800d822:	d015      	beq.n	800d850 <HAL_TIM_PWM_Start+0x254>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d82a:	d011      	beq.n	800d850 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f042 0201 	orr.w	r2, r2, #1
 800d83a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d83c:	e008      	b.n	800d850 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f042 0201 	orr.w	r2, r2, #1
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	e000      	b.n	800d852 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d850:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	40012c00 	.word	0x40012c00
 800d860:	50012c00 	.word	0x50012c00
 800d864:	40013400 	.word	0x40013400
 800d868:	50013400 	.word	0x50013400
 800d86c:	40014000 	.word	0x40014000
 800d870:	50014000 	.word	0x50014000
 800d874:	40014400 	.word	0x40014400
 800d878:	50014400 	.word	0x50014400
 800d87c:	40014800 	.word	0x40014800
 800d880:	50014800 	.word	0x50014800
 800d884:	40000400 	.word	0x40000400
 800d888:	50000400 	.word	0x50000400
 800d88c:	40000800 	.word	0x40000800
 800d890:	50000800 	.word	0x50000800
 800d894:	40000c00 	.word	0x40000c00
 800d898:	50000c00 	.word	0x50000c00
 800d89c:	00010007 	.word	0x00010007

0800d8a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d101      	bne.n	800d8b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e097      	b.n	800d9e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7f5 f851 	bl	8002970 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	6812      	ldr	r2, [r2, #0]
 800d8e0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800d8e4:	f023 0307 	bic.w	r3, r3, #7
 800d8e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	f000 fb1d 	bl	800df34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	4313      	orrs	r3, r2
 800d91a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d922:	f023 0303 	bic.w	r3, r3, #3
 800d926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	689a      	ldr	r2, [r3, #8]
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	699b      	ldr	r3, [r3, #24]
 800d930:	021b      	lsls	r3, r3, #8
 800d932:	4313      	orrs	r3, r2
 800d934:	693a      	ldr	r2, [r7, #16]
 800d936:	4313      	orrs	r3, r2
 800d938:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800d940:	f023 030c 	bic.w	r3, r3, #12
 800d944:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d94c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	68da      	ldr	r2, [r3, #12]
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	69db      	ldr	r3, [r3, #28]
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	4313      	orrs	r3, r2
 800d95e:	693a      	ldr	r2, [r7, #16]
 800d960:	4313      	orrs	r3, r2
 800d962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	011a      	lsls	r2, r3, #4
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	6a1b      	ldr	r3, [r3, #32]
 800d96e:	031b      	lsls	r3, r3, #12
 800d970:	4313      	orrs	r3, r2
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	4313      	orrs	r3, r2
 800d976:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800d97e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800d986:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	695b      	ldr	r3, [r3, #20]
 800d990:	011b      	lsls	r3, r3, #4
 800d992:	4313      	orrs	r3, r2
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	4313      	orrs	r3, r2
 800d998:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3718      	adds	r7, #24
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d9fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800da04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d110      	bne.n	800da3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d102      	bne.n	800da28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800da22:	7b7b      	ldrb	r3, [r7, #13]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d001      	beq.n	800da2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e069      	b.n	800db00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2202      	movs	r2, #2
 800da30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2202      	movs	r2, #2
 800da38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da3c:	e031      	b.n	800daa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	2b04      	cmp	r3, #4
 800da42:	d110      	bne.n	800da66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800da44:	7bbb      	ldrb	r3, [r7, #14]
 800da46:	2b01      	cmp	r3, #1
 800da48:	d102      	bne.n	800da50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800da4a:	7b3b      	ldrb	r3, [r7, #12]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d001      	beq.n	800da54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e055      	b.n	800db00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2202      	movs	r2, #2
 800da58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2202      	movs	r2, #2
 800da60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da64:	e01d      	b.n	800daa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da66:	7bfb      	ldrb	r3, [r7, #15]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d108      	bne.n	800da7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800da6c:	7bbb      	ldrb	r3, [r7, #14]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d105      	bne.n	800da7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da72:	7b7b      	ldrb	r3, [r7, #13]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d102      	bne.n	800da7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800da78:	7b3b      	ldrb	r3, [r7, #12]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d001      	beq.n	800da82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	e03e      	b.n	800db00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2202      	movs	r2, #2
 800da86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2202      	movs	r2, #2
 800da8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2202      	movs	r2, #2
 800da96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2202      	movs	r2, #2
 800da9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d003      	beq.n	800dab0 <HAL_TIM_Encoder_Start+0xc4>
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	2b04      	cmp	r3, #4
 800daac:	d008      	beq.n	800dac0 <HAL_TIM_Encoder_Start+0xd4>
 800daae:	e00f      	b.n	800dad0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2201      	movs	r2, #1
 800dab6:	2100      	movs	r1, #0
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 ffad 	bl	800ea18 <TIM_CCxChannelCmd>
      break;
 800dabe:	e016      	b.n	800daee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2201      	movs	r2, #1
 800dac6:	2104      	movs	r1, #4
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 ffa5 	bl	800ea18 <TIM_CCxChannelCmd>
      break;
 800dace:	e00e      	b.n	800daee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2201      	movs	r2, #1
 800dad6:	2100      	movs	r1, #0
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 ff9d 	bl	800ea18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2201      	movs	r2, #1
 800dae4:	2104      	movs	r1, #4
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 ff96 	bl	800ea18 <TIM_CCxChannelCmd>
      break;
 800daec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f042 0201 	orr.w	r2, r2, #1
 800dafc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d101      	bne.n	800db26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db22:	2302      	movs	r3, #2
 800db24:	e0ff      	b.n	800dd26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b14      	cmp	r3, #20
 800db32:	f200 80f0 	bhi.w	800dd16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db36:	a201      	add	r2, pc, #4	@ (adr r2, 800db3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800db91 	.word	0x0800db91
 800db40:	0800dd17 	.word	0x0800dd17
 800db44:	0800dd17 	.word	0x0800dd17
 800db48:	0800dd17 	.word	0x0800dd17
 800db4c:	0800dbd1 	.word	0x0800dbd1
 800db50:	0800dd17 	.word	0x0800dd17
 800db54:	0800dd17 	.word	0x0800dd17
 800db58:	0800dd17 	.word	0x0800dd17
 800db5c:	0800dc13 	.word	0x0800dc13
 800db60:	0800dd17 	.word	0x0800dd17
 800db64:	0800dd17 	.word	0x0800dd17
 800db68:	0800dd17 	.word	0x0800dd17
 800db6c:	0800dc53 	.word	0x0800dc53
 800db70:	0800dd17 	.word	0x0800dd17
 800db74:	0800dd17 	.word	0x0800dd17
 800db78:	0800dd17 	.word	0x0800dd17
 800db7c:	0800dc95 	.word	0x0800dc95
 800db80:	0800dd17 	.word	0x0800dd17
 800db84:	0800dd17 	.word	0x0800dd17
 800db88:	0800dd17 	.word	0x0800dd17
 800db8c:	0800dcd5 	.word	0x0800dcd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 facc 	bl	800e134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	699a      	ldr	r2, [r3, #24]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f042 0208 	orr.w	r2, r2, #8
 800dbaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	699a      	ldr	r2, [r3, #24]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f022 0204 	bic.w	r2, r2, #4
 800dbba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6999      	ldr	r1, [r3, #24]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	691a      	ldr	r2, [r3, #16]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	619a      	str	r2, [r3, #24]
      break;
 800dbce:	e0a5      	b.n	800dd1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f000 fb6e 	bl	800e2b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	699a      	ldr	r2, [r3, #24]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6999      	ldr	r1, [r3, #24]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	021a      	lsls	r2, r3, #8
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	619a      	str	r2, [r3, #24]
      break;
 800dc10:	e084      	b.n	800dd1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	68b9      	ldr	r1, [r7, #8]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 fbfd 	bl	800e418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	69da      	ldr	r2, [r3, #28]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f042 0208 	orr.w	r2, r2, #8
 800dc2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	69da      	ldr	r2, [r3, #28]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f022 0204 	bic.w	r2, r2, #4
 800dc3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	69d9      	ldr	r1, [r3, #28]
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	691a      	ldr	r2, [r3, #16]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	430a      	orrs	r2, r1
 800dc4e:	61da      	str	r2, [r3, #28]
      break;
 800dc50:	e064      	b.n	800dd1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	68b9      	ldr	r1, [r7, #8]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 fc8b 	bl	800e574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	69da      	ldr	r2, [r3, #28]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69da      	ldr	r2, [r3, #28]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	69d9      	ldr	r1, [r3, #28]
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	021a      	lsls	r2, r3, #8
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	61da      	str	r2, [r3, #28]
      break;
 800dc92:	e043      	b.n	800dd1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68b9      	ldr	r1, [r7, #8]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 fd1a 	bl	800e6d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f042 0208 	orr.w	r2, r2, #8
 800dcae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f022 0204 	bic.w	r2, r2, #4
 800dcbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	691a      	ldr	r2, [r3, #16]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800dcd2:	e023      	b.n	800dd1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68b9      	ldr	r1, [r7, #8]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 fd7c 	bl	800e7d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dcee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dcfe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	021a      	lsls	r2, r3, #8
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	430a      	orrs	r2, r1
 800dd12:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800dd14:	e002      	b.n	800dd1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd16:	2301      	movs	r3, #1
 800dd18:	75fb      	strb	r3, [r7, #23]
      break;
 800dd1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dd24:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop

0800dd30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d101      	bne.n	800dd4c <HAL_TIM_ConfigClockSource+0x1c>
 800dd48:	2302      	movs	r3, #2
 800dd4a:	e0e6      	b.n	800df1a <HAL_TIM_ConfigClockSource+0x1ea>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2202      	movs	r2, #2
 800dd58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800dd6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800dd6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a67      	ldr	r2, [pc, #412]	@ (800df24 <HAL_TIM_ConfigClockSource+0x1f4>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	f000 80b1 	beq.w	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800dd8c:	4a65      	ldr	r2, [pc, #404]	@ (800df24 <HAL_TIM_ConfigClockSource+0x1f4>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	f200 80b6 	bhi.w	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800dd94:	4a64      	ldr	r2, [pc, #400]	@ (800df28 <HAL_TIM_ConfigClockSource+0x1f8>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	f000 80a9 	beq.w	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800dd9c:	4a62      	ldr	r2, [pc, #392]	@ (800df28 <HAL_TIM_ConfigClockSource+0x1f8>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	f200 80ae 	bhi.w	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800dda4:	4a61      	ldr	r2, [pc, #388]	@ (800df2c <HAL_TIM_ConfigClockSource+0x1fc>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	f000 80a1 	beq.w	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800ddac:	4a5f      	ldr	r2, [pc, #380]	@ (800df2c <HAL_TIM_ConfigClockSource+0x1fc>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	f200 80a6 	bhi.w	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800ddb4:	4a5e      	ldr	r2, [pc, #376]	@ (800df30 <HAL_TIM_ConfigClockSource+0x200>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	f000 8099 	beq.w	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800ddbc:	4a5c      	ldr	r2, [pc, #368]	@ (800df30 <HAL_TIM_ConfigClockSource+0x200>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	f200 809e 	bhi.w	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800ddc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ddc8:	f000 8091 	beq.w	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800ddcc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ddd0:	f200 8096 	bhi.w	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800ddd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddd8:	f000 8089 	beq.w	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800dddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dde0:	f200 808e 	bhi.w	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800dde4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dde8:	d03e      	beq.n	800de68 <HAL_TIM_ConfigClockSource+0x138>
 800ddea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddee:	f200 8087 	bhi.w	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800ddf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddf6:	f000 8086 	beq.w	800df06 <HAL_TIM_ConfigClockSource+0x1d6>
 800ddfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddfe:	d87f      	bhi.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800de00:	2b70      	cmp	r3, #112	@ 0x70
 800de02:	d01a      	beq.n	800de3a <HAL_TIM_ConfigClockSource+0x10a>
 800de04:	2b70      	cmp	r3, #112	@ 0x70
 800de06:	d87b      	bhi.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800de08:	2b60      	cmp	r3, #96	@ 0x60
 800de0a:	d050      	beq.n	800deae <HAL_TIM_ConfigClockSource+0x17e>
 800de0c:	2b60      	cmp	r3, #96	@ 0x60
 800de0e:	d877      	bhi.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800de10:	2b50      	cmp	r3, #80	@ 0x50
 800de12:	d03c      	beq.n	800de8e <HAL_TIM_ConfigClockSource+0x15e>
 800de14:	2b50      	cmp	r3, #80	@ 0x50
 800de16:	d873      	bhi.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800de18:	2b40      	cmp	r3, #64	@ 0x40
 800de1a:	d058      	beq.n	800dece <HAL_TIM_ConfigClockSource+0x19e>
 800de1c:	2b40      	cmp	r3, #64	@ 0x40
 800de1e:	d86f      	bhi.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800de20:	2b30      	cmp	r3, #48	@ 0x30
 800de22:	d064      	beq.n	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800de24:	2b30      	cmp	r3, #48	@ 0x30
 800de26:	d86b      	bhi.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800de28:	2b20      	cmp	r3, #32
 800de2a:	d060      	beq.n	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800de2c:	2b20      	cmp	r3, #32
 800de2e:	d867      	bhi.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
 800de30:	2b00      	cmp	r3, #0
 800de32:	d05c      	beq.n	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800de34:	2b10      	cmp	r3, #16
 800de36:	d05a      	beq.n	800deee <HAL_TIM_ConfigClockSource+0x1be>
 800de38:	e062      	b.n	800df00 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de4a:	f000 fdc5 	bl	800e9d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800de5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	609a      	str	r2, [r3, #8]
      break;
 800de66:	e04f      	b.n	800df08 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de78:	f000 fdae 	bl	800e9d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	689a      	ldr	r2, [r3, #8]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800de8a:	609a      	str	r2, [r3, #8]
      break;
 800de8c:	e03c      	b.n	800df08 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800de9a:	461a      	mov	r2, r3
 800de9c:	f000 fd20 	bl	800e8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2150      	movs	r1, #80	@ 0x50
 800dea6:	4618      	mov	r0, r3
 800dea8:	f000 fd79 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800deac:	e02c      	b.n	800df08 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800deba:	461a      	mov	r2, r3
 800debc:	f000 fd3f 	bl	800e93e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2160      	movs	r1, #96	@ 0x60
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 fd69 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800decc:	e01c      	b.n	800df08 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deda:	461a      	mov	r2, r3
 800dedc:	f000 fd00 	bl	800e8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2140      	movs	r1, #64	@ 0x40
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 fd59 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800deec:	e00c      	b.n	800df08 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4619      	mov	r1, r3
 800def8:	4610      	mov	r0, r2
 800defa:	f000 fd50 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800defe:	e003      	b.n	800df08 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800df00:	2301      	movs	r3, #1
 800df02:	73fb      	strb	r3, [r7, #15]
      break;
 800df04:	e000      	b.n	800df08 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800df06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	00100070 	.word	0x00100070
 800df28:	00100040 	.word	0x00100040
 800df2c:	00100030 	.word	0x00100030
 800df30:	00100020 	.word	0x00100020

0800df34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df34:	b480      	push	{r7}
 800df36:	b085      	sub	sp, #20
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	4a6b      	ldr	r2, [pc, #428]	@ (800e0f4 <TIM_Base_SetConfig+0x1c0>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d02b      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4a6a      	ldr	r2, [pc, #424]	@ (800e0f8 <TIM_Base_SetConfig+0x1c4>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d027      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df5a:	d023      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df62:	d01f      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4a65      	ldr	r2, [pc, #404]	@ (800e0fc <TIM_Base_SetConfig+0x1c8>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d01b      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a64      	ldr	r2, [pc, #400]	@ (800e100 <TIM_Base_SetConfig+0x1cc>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d017      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4a63      	ldr	r2, [pc, #396]	@ (800e104 <TIM_Base_SetConfig+0x1d0>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d013      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a62      	ldr	r2, [pc, #392]	@ (800e108 <TIM_Base_SetConfig+0x1d4>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d00f      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a61      	ldr	r2, [pc, #388]	@ (800e10c <TIM_Base_SetConfig+0x1d8>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d00b      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a60      	ldr	r2, [pc, #384]	@ (800e110 <TIM_Base_SetConfig+0x1dc>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d007      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a5f      	ldr	r2, [pc, #380]	@ (800e114 <TIM_Base_SetConfig+0x1e0>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d003      	beq.n	800dfa4 <TIM_Base_SetConfig+0x70>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a5e      	ldr	r2, [pc, #376]	@ (800e118 <TIM_Base_SetConfig+0x1e4>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d108      	bne.n	800dfb6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4a4e      	ldr	r2, [pc, #312]	@ (800e0f4 <TIM_Base_SetConfig+0x1c0>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d043      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a4d      	ldr	r2, [pc, #308]	@ (800e0f8 <TIM_Base_SetConfig+0x1c4>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d03f      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfcc:	d03b      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dfd4:	d037      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4a48      	ldr	r2, [pc, #288]	@ (800e0fc <TIM_Base_SetConfig+0x1c8>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d033      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a47      	ldr	r2, [pc, #284]	@ (800e100 <TIM_Base_SetConfig+0x1cc>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d02f      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4a46      	ldr	r2, [pc, #280]	@ (800e104 <TIM_Base_SetConfig+0x1d0>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d02b      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a45      	ldr	r2, [pc, #276]	@ (800e108 <TIM_Base_SetConfig+0x1d4>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d027      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a44      	ldr	r2, [pc, #272]	@ (800e10c <TIM_Base_SetConfig+0x1d8>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d023      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a43      	ldr	r2, [pc, #268]	@ (800e110 <TIM_Base_SetConfig+0x1dc>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d01f      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4a42      	ldr	r2, [pc, #264]	@ (800e114 <TIM_Base_SetConfig+0x1e0>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d01b      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a41      	ldr	r2, [pc, #260]	@ (800e118 <TIM_Base_SetConfig+0x1e4>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d017      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a40      	ldr	r2, [pc, #256]	@ (800e11c <TIM_Base_SetConfig+0x1e8>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d013      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4a3f      	ldr	r2, [pc, #252]	@ (800e120 <TIM_Base_SetConfig+0x1ec>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d00f      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4a3e      	ldr	r2, [pc, #248]	@ (800e124 <TIM_Base_SetConfig+0x1f0>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d00b      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a3d      	ldr	r2, [pc, #244]	@ (800e128 <TIM_Base_SetConfig+0x1f4>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d007      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a3c      	ldr	r2, [pc, #240]	@ (800e12c <TIM_Base_SetConfig+0x1f8>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d003      	beq.n	800e046 <TIM_Base_SetConfig+0x112>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a3b      	ldr	r2, [pc, #236]	@ (800e130 <TIM_Base_SetConfig+0x1fc>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d108      	bne.n	800e058 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e04c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	4313      	orrs	r3, r2
 800e056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	4313      	orrs	r3, r2
 800e064:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	689a      	ldr	r2, [r3, #8]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a1e      	ldr	r2, [pc, #120]	@ (800e0f4 <TIM_Base_SetConfig+0x1c0>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d023      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a1d      	ldr	r2, [pc, #116]	@ (800e0f8 <TIM_Base_SetConfig+0x1c4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d01f      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a22      	ldr	r2, [pc, #136]	@ (800e114 <TIM_Base_SetConfig+0x1e0>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d01b      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a21      	ldr	r2, [pc, #132]	@ (800e118 <TIM_Base_SetConfig+0x1e4>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d017      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a20      	ldr	r2, [pc, #128]	@ (800e11c <TIM_Base_SetConfig+0x1e8>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d013      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4a1f      	ldr	r2, [pc, #124]	@ (800e120 <TIM_Base_SetConfig+0x1ec>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d00f      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a1e      	ldr	r2, [pc, #120]	@ (800e124 <TIM_Base_SetConfig+0x1f0>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d00b      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800e128 <TIM_Base_SetConfig+0x1f4>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d007      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a1c      	ldr	r2, [pc, #112]	@ (800e12c <TIM_Base_SetConfig+0x1f8>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d003      	beq.n	800e0c6 <TIM_Base_SetConfig+0x192>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4a1b      	ldr	r2, [pc, #108]	@ (800e130 <TIM_Base_SetConfig+0x1fc>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d103      	bne.n	800e0ce <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	691a      	ldr	r2, [r3, #16]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f043 0204 	orr.w	r2, r3, #4
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	601a      	str	r2, [r3, #0]
}
 800e0e6:	bf00      	nop
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	40012c00 	.word	0x40012c00
 800e0f8:	50012c00 	.word	0x50012c00
 800e0fc:	40000400 	.word	0x40000400
 800e100:	50000400 	.word	0x50000400
 800e104:	40000800 	.word	0x40000800
 800e108:	50000800 	.word	0x50000800
 800e10c:	40000c00 	.word	0x40000c00
 800e110:	50000c00 	.word	0x50000c00
 800e114:	40013400 	.word	0x40013400
 800e118:	50013400 	.word	0x50013400
 800e11c:	40014000 	.word	0x40014000
 800e120:	50014000 	.word	0x50014000
 800e124:	40014400 	.word	0x40014400
 800e128:	50014400 	.word	0x50014400
 800e12c:	40014800 	.word	0x40014800
 800e130:	50014800 	.word	0x50014800

0800e134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e134:	b480      	push	{r7}
 800e136:	b087      	sub	sp, #28
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6a1b      	ldr	r3, [r3, #32]
 800e142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6a1b      	ldr	r3, [r3, #32]
 800e148:	f023 0201 	bic.w	r2, r3, #1
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	699b      	ldr	r3, [r3, #24]
 800e15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f023 0303 	bic.w	r3, r3, #3
 800e16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	4313      	orrs	r3, r2
 800e178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f023 0302 	bic.w	r3, r3, #2
 800e180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	697a      	ldr	r2, [r7, #20]
 800e188:	4313      	orrs	r3, r2
 800e18a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4a40      	ldr	r2, [pc, #256]	@ (800e290 <TIM_OC1_SetConfig+0x15c>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d023      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4a3f      	ldr	r2, [pc, #252]	@ (800e294 <TIM_OC1_SetConfig+0x160>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d01f      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a3e      	ldr	r2, [pc, #248]	@ (800e298 <TIM_OC1_SetConfig+0x164>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d01b      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a3d      	ldr	r2, [pc, #244]	@ (800e29c <TIM_OC1_SetConfig+0x168>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d017      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4a3c      	ldr	r2, [pc, #240]	@ (800e2a0 <TIM_OC1_SetConfig+0x16c>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d013      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4a3b      	ldr	r2, [pc, #236]	@ (800e2a4 <TIM_OC1_SetConfig+0x170>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d00f      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4a3a      	ldr	r2, [pc, #232]	@ (800e2a8 <TIM_OC1_SetConfig+0x174>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d00b      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4a39      	ldr	r2, [pc, #228]	@ (800e2ac <TIM_OC1_SetConfig+0x178>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d007      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a38      	ldr	r2, [pc, #224]	@ (800e2b0 <TIM_OC1_SetConfig+0x17c>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d003      	beq.n	800e1dc <TIM_OC1_SetConfig+0xa8>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a37      	ldr	r2, [pc, #220]	@ (800e2b4 <TIM_OC1_SetConfig+0x180>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d10c      	bne.n	800e1f6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f023 0308 	bic.w	r3, r3, #8
 800e1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	697a      	ldr	r2, [r7, #20]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f023 0304 	bic.w	r3, r3, #4
 800e1f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a25      	ldr	r2, [pc, #148]	@ (800e290 <TIM_OC1_SetConfig+0x15c>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d023      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a24      	ldr	r2, [pc, #144]	@ (800e294 <TIM_OC1_SetConfig+0x160>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d01f      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a23      	ldr	r2, [pc, #140]	@ (800e298 <TIM_OC1_SetConfig+0x164>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d01b      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a22      	ldr	r2, [pc, #136]	@ (800e29c <TIM_OC1_SetConfig+0x168>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d017      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a21      	ldr	r2, [pc, #132]	@ (800e2a0 <TIM_OC1_SetConfig+0x16c>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d013      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a20      	ldr	r2, [pc, #128]	@ (800e2a4 <TIM_OC1_SetConfig+0x170>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d00f      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a1f      	ldr	r2, [pc, #124]	@ (800e2a8 <TIM_OC1_SetConfig+0x174>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d00b      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4a1e      	ldr	r2, [pc, #120]	@ (800e2ac <TIM_OC1_SetConfig+0x178>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d007      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4a1d      	ldr	r2, [pc, #116]	@ (800e2b0 <TIM_OC1_SetConfig+0x17c>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d003      	beq.n	800e246 <TIM_OC1_SetConfig+0x112>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4a1c      	ldr	r2, [pc, #112]	@ (800e2b4 <TIM_OC1_SetConfig+0x180>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d111      	bne.n	800e26a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e24c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	695b      	ldr	r3, [r3, #20]
 800e25a:	693a      	ldr	r2, [r7, #16]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	693a      	ldr	r2, [r7, #16]
 800e266:	4313      	orrs	r3, r2
 800e268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	697a      	ldr	r2, [r7, #20]
 800e282:	621a      	str	r2, [r3, #32]
}
 800e284:	bf00      	nop
 800e286:	371c      	adds	r7, #28
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	40012c00 	.word	0x40012c00
 800e294:	50012c00 	.word	0x50012c00
 800e298:	40013400 	.word	0x40013400
 800e29c:	50013400 	.word	0x50013400
 800e2a0:	40014000 	.word	0x40014000
 800e2a4:	50014000 	.word	0x50014000
 800e2a8:	40014400 	.word	0x40014400
 800e2ac:	50014400 	.word	0x50014400
 800e2b0:	40014800 	.word	0x40014800
 800e2b4:	50014800 	.word	0x50014800

0800e2b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	f023 0210 	bic.w	r2, r3, #16
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e2e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	021b      	lsls	r3, r3, #8
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	f023 0320 	bic.w	r3, r3, #32
 800e306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	011b      	lsls	r3, r3, #4
 800e30e:	697a      	ldr	r2, [r7, #20]
 800e310:	4313      	orrs	r3, r2
 800e312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4a36      	ldr	r2, [pc, #216]	@ (800e3f0 <TIM_OC2_SetConfig+0x138>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d00b      	beq.n	800e334 <TIM_OC2_SetConfig+0x7c>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a35      	ldr	r2, [pc, #212]	@ (800e3f4 <TIM_OC2_SetConfig+0x13c>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d007      	beq.n	800e334 <TIM_OC2_SetConfig+0x7c>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a34      	ldr	r2, [pc, #208]	@ (800e3f8 <TIM_OC2_SetConfig+0x140>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d003      	beq.n	800e334 <TIM_OC2_SetConfig+0x7c>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a33      	ldr	r2, [pc, #204]	@ (800e3fc <TIM_OC2_SetConfig+0x144>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d10d      	bne.n	800e350 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e33a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	011b      	lsls	r3, r3, #4
 800e342:	697a      	ldr	r2, [r7, #20]
 800e344:	4313      	orrs	r3, r2
 800e346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e34e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a27      	ldr	r2, [pc, #156]	@ (800e3f0 <TIM_OC2_SetConfig+0x138>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d023      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4a26      	ldr	r2, [pc, #152]	@ (800e3f4 <TIM_OC2_SetConfig+0x13c>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d01f      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a25      	ldr	r2, [pc, #148]	@ (800e3f8 <TIM_OC2_SetConfig+0x140>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d01b      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a24      	ldr	r2, [pc, #144]	@ (800e3fc <TIM_OC2_SetConfig+0x144>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d017      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a23      	ldr	r2, [pc, #140]	@ (800e400 <TIM_OC2_SetConfig+0x148>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d013      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4a22      	ldr	r2, [pc, #136]	@ (800e404 <TIM_OC2_SetConfig+0x14c>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d00f      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a21      	ldr	r2, [pc, #132]	@ (800e408 <TIM_OC2_SetConfig+0x150>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d00b      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a20      	ldr	r2, [pc, #128]	@ (800e40c <TIM_OC2_SetConfig+0x154>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d007      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4a1f      	ldr	r2, [pc, #124]	@ (800e410 <TIM_OC2_SetConfig+0x158>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d003      	beq.n	800e3a0 <TIM_OC2_SetConfig+0xe8>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a1e      	ldr	r2, [pc, #120]	@ (800e414 <TIM_OC2_SetConfig+0x15c>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d113      	bne.n	800e3c8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e3a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e3ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	693a      	ldr	r2, [r7, #16]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	693a      	ldr	r2, [r7, #16]
 800e3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	621a      	str	r2, [r3, #32]
}
 800e3e2:	bf00      	nop
 800e3e4:	371c      	adds	r7, #28
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop
 800e3f0:	40012c00 	.word	0x40012c00
 800e3f4:	50012c00 	.word	0x50012c00
 800e3f8:	40013400 	.word	0x40013400
 800e3fc:	50013400 	.word	0x50013400
 800e400:	40014000 	.word	0x40014000
 800e404:	50014000 	.word	0x50014000
 800e408:	40014400 	.word	0x40014400
 800e40c:	50014400 	.word	0x50014400
 800e410:	40014800 	.word	0x40014800
 800e414:	50014800 	.word	0x50014800

0800e418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e418:	b480      	push	{r7}
 800e41a:	b087      	sub	sp, #28
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	69db      	ldr	r3, [r3, #28]
 800e43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e44a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f023 0303 	bic.w	r3, r3, #3
 800e452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	4313      	orrs	r3, r2
 800e45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	021b      	lsls	r3, r3, #8
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	4313      	orrs	r3, r2
 800e470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4a35      	ldr	r2, [pc, #212]	@ (800e54c <TIM_OC3_SetConfig+0x134>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d00b      	beq.n	800e492 <TIM_OC3_SetConfig+0x7a>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4a34      	ldr	r2, [pc, #208]	@ (800e550 <TIM_OC3_SetConfig+0x138>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d007      	beq.n	800e492 <TIM_OC3_SetConfig+0x7a>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4a33      	ldr	r2, [pc, #204]	@ (800e554 <TIM_OC3_SetConfig+0x13c>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d003      	beq.n	800e492 <TIM_OC3_SetConfig+0x7a>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4a32      	ldr	r2, [pc, #200]	@ (800e558 <TIM_OC3_SetConfig+0x140>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d10d      	bne.n	800e4ae <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	021b      	lsls	r3, r3, #8
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e4ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4a26      	ldr	r2, [pc, #152]	@ (800e54c <TIM_OC3_SetConfig+0x134>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d023      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4a25      	ldr	r2, [pc, #148]	@ (800e550 <TIM_OC3_SetConfig+0x138>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d01f      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4a24      	ldr	r2, [pc, #144]	@ (800e554 <TIM_OC3_SetConfig+0x13c>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d01b      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4a23      	ldr	r2, [pc, #140]	@ (800e558 <TIM_OC3_SetConfig+0x140>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d017      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4a22      	ldr	r2, [pc, #136]	@ (800e55c <TIM_OC3_SetConfig+0x144>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d013      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4a21      	ldr	r2, [pc, #132]	@ (800e560 <TIM_OC3_SetConfig+0x148>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d00f      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a20      	ldr	r2, [pc, #128]	@ (800e564 <TIM_OC3_SetConfig+0x14c>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d00b      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4a1f      	ldr	r2, [pc, #124]	@ (800e568 <TIM_OC3_SetConfig+0x150>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d007      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4a1e      	ldr	r2, [pc, #120]	@ (800e56c <TIM_OC3_SetConfig+0x154>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d003      	beq.n	800e4fe <TIM_OC3_SetConfig+0xe6>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e570 <TIM_OC3_SetConfig+0x158>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d113      	bne.n	800e526 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e50c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	693a      	ldr	r2, [r7, #16]
 800e516:	4313      	orrs	r3, r2
 800e518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	011b      	lsls	r3, r3, #4
 800e520:	693a      	ldr	r2, [r7, #16]
 800e522:	4313      	orrs	r3, r2
 800e524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	693a      	ldr	r2, [r7, #16]
 800e52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	685a      	ldr	r2, [r3, #4]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	697a      	ldr	r2, [r7, #20]
 800e53e:	621a      	str	r2, [r3, #32]
}
 800e540:	bf00      	nop
 800e542:	371c      	adds	r7, #28
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	40012c00 	.word	0x40012c00
 800e550:	50012c00 	.word	0x50012c00
 800e554:	40013400 	.word	0x40013400
 800e558:	50013400 	.word	0x50013400
 800e55c:	40014000 	.word	0x40014000
 800e560:	50014000 	.word	0x50014000
 800e564:	40014400 	.word	0x40014400
 800e568:	50014400 	.word	0x50014400
 800e56c:	40014800 	.word	0x40014800
 800e570:	50014800 	.word	0x50014800

0800e574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e574:	b480      	push	{r7}
 800e576:	b087      	sub	sp, #28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6a1b      	ldr	r3, [r3, #32]
 800e588:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	69db      	ldr	r3, [r3, #28]
 800e59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e5a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	021b      	lsls	r3, r3, #8
 800e5b6:	68fa      	ldr	r2, [r7, #12]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e5c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	031b      	lsls	r3, r3, #12
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	4a36      	ldr	r2, [pc, #216]	@ (800e6ac <TIM_OC4_SetConfig+0x138>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d00b      	beq.n	800e5f0 <TIM_OC4_SetConfig+0x7c>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a35      	ldr	r2, [pc, #212]	@ (800e6b0 <TIM_OC4_SetConfig+0x13c>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d007      	beq.n	800e5f0 <TIM_OC4_SetConfig+0x7c>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4a34      	ldr	r2, [pc, #208]	@ (800e6b4 <TIM_OC4_SetConfig+0x140>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d003      	beq.n	800e5f0 <TIM_OC4_SetConfig+0x7c>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	4a33      	ldr	r2, [pc, #204]	@ (800e6b8 <TIM_OC4_SetConfig+0x144>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d10d      	bne.n	800e60c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e5f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	031b      	lsls	r3, r3, #12
 800e5fe:	697a      	ldr	r2, [r7, #20]
 800e600:	4313      	orrs	r3, r2
 800e602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e60a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a27      	ldr	r2, [pc, #156]	@ (800e6ac <TIM_OC4_SetConfig+0x138>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d023      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a26      	ldr	r2, [pc, #152]	@ (800e6b0 <TIM_OC4_SetConfig+0x13c>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d01f      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a25      	ldr	r2, [pc, #148]	@ (800e6b4 <TIM_OC4_SetConfig+0x140>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d01b      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a24      	ldr	r2, [pc, #144]	@ (800e6b8 <TIM_OC4_SetConfig+0x144>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d017      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a23      	ldr	r2, [pc, #140]	@ (800e6bc <TIM_OC4_SetConfig+0x148>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d013      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a22      	ldr	r2, [pc, #136]	@ (800e6c0 <TIM_OC4_SetConfig+0x14c>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d00f      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a21      	ldr	r2, [pc, #132]	@ (800e6c4 <TIM_OC4_SetConfig+0x150>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d00b      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a20      	ldr	r2, [pc, #128]	@ (800e6c8 <TIM_OC4_SetConfig+0x154>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d007      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6cc <TIM_OC4_SetConfig+0x158>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d003      	beq.n	800e65c <TIM_OC4_SetConfig+0xe8>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a1e      	ldr	r2, [pc, #120]	@ (800e6d0 <TIM_OC4_SetConfig+0x15c>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d113      	bne.n	800e684 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e662:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e66a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	019b      	lsls	r3, r3, #6
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	4313      	orrs	r3, r2
 800e676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	019b      	lsls	r3, r3, #6
 800e67e:	693a      	ldr	r2, [r7, #16]
 800e680:	4313      	orrs	r3, r2
 800e682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	621a      	str	r2, [r3, #32]
}
 800e69e:	bf00      	nop
 800e6a0:	371c      	adds	r7, #28
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	40012c00 	.word	0x40012c00
 800e6b0:	50012c00 	.word	0x50012c00
 800e6b4:	40013400 	.word	0x40013400
 800e6b8:	50013400 	.word	0x50013400
 800e6bc:	40014000 	.word	0x40014000
 800e6c0:	50014000 	.word	0x50014000
 800e6c4:	40014400 	.word	0x40014400
 800e6c8:	50014400 	.word	0x50014400
 800e6cc:	40014800 	.word	0x40014800
 800e6d0:	50014800 	.word	0x50014800

0800e6d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a1b      	ldr	r3, [r3, #32]
 800e6e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	4313      	orrs	r3, r2
 800e710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	041b      	lsls	r3, r3, #16
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	4313      	orrs	r3, r2
 800e724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4a21      	ldr	r2, [pc, #132]	@ (800e7b0 <TIM_OC5_SetConfig+0xdc>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d023      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a20      	ldr	r2, [pc, #128]	@ (800e7b4 <TIM_OC5_SetConfig+0xe0>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d01f      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a1f      	ldr	r2, [pc, #124]	@ (800e7b8 <TIM_OC5_SetConfig+0xe4>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d01b      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a1e      	ldr	r2, [pc, #120]	@ (800e7bc <TIM_OC5_SetConfig+0xe8>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d017      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a1d      	ldr	r2, [pc, #116]	@ (800e7c0 <TIM_OC5_SetConfig+0xec>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d013      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a1c      	ldr	r2, [pc, #112]	@ (800e7c4 <TIM_OC5_SetConfig+0xf0>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d00f      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a1b      	ldr	r2, [pc, #108]	@ (800e7c8 <TIM_OC5_SetConfig+0xf4>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d00b      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a1a      	ldr	r2, [pc, #104]	@ (800e7cc <TIM_OC5_SetConfig+0xf8>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d007      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a19      	ldr	r2, [pc, #100]	@ (800e7d0 <TIM_OC5_SetConfig+0xfc>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d003      	beq.n	800e776 <TIM_OC5_SetConfig+0xa2>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a18      	ldr	r2, [pc, #96]	@ (800e7d4 <TIM_OC5_SetConfig+0x100>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d109      	bne.n	800e78a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e77c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	021b      	lsls	r3, r3, #8
 800e784:	697a      	ldr	r2, [r7, #20]
 800e786:	4313      	orrs	r3, r2
 800e788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	693a      	ldr	r2, [r7, #16]
 800e7a2:	621a      	str	r2, [r3, #32]
}
 800e7a4:	bf00      	nop
 800e7a6:	371c      	adds	r7, #28
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	40012c00 	.word	0x40012c00
 800e7b4:	50012c00 	.word	0x50012c00
 800e7b8:	40013400 	.word	0x40013400
 800e7bc:	50013400 	.word	0x50013400
 800e7c0:	40014000 	.word	0x40014000
 800e7c4:	50014000 	.word	0x50014000
 800e7c8:	40014400 	.word	0x40014400
 800e7cc:	50014400 	.word	0x50014400
 800e7d0:	40014800 	.word	0x40014800
 800e7d4:	50014800 	.word	0x50014800

0800e7d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b087      	sub	sp, #28
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6a1b      	ldr	r3, [r3, #32]
 800e7e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a1b      	ldr	r3, [r3, #32]
 800e7ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e80a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	021b      	lsls	r3, r3, #8
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4313      	orrs	r3, r2
 800e816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e81e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	051b      	lsls	r3, r3, #20
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	4313      	orrs	r3, r2
 800e82a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a22      	ldr	r2, [pc, #136]	@ (800e8b8 <TIM_OC6_SetConfig+0xe0>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d023      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a21      	ldr	r2, [pc, #132]	@ (800e8bc <TIM_OC6_SetConfig+0xe4>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d01f      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a20      	ldr	r2, [pc, #128]	@ (800e8c0 <TIM_OC6_SetConfig+0xe8>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d01b      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a1f      	ldr	r2, [pc, #124]	@ (800e8c4 <TIM_OC6_SetConfig+0xec>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d017      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a1e      	ldr	r2, [pc, #120]	@ (800e8c8 <TIM_OC6_SetConfig+0xf0>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d013      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a1d      	ldr	r2, [pc, #116]	@ (800e8cc <TIM_OC6_SetConfig+0xf4>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d00f      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a1c      	ldr	r2, [pc, #112]	@ (800e8d0 <TIM_OC6_SetConfig+0xf8>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d00b      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a1b      	ldr	r2, [pc, #108]	@ (800e8d4 <TIM_OC6_SetConfig+0xfc>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d007      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a1a      	ldr	r2, [pc, #104]	@ (800e8d8 <TIM_OC6_SetConfig+0x100>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d003      	beq.n	800e87c <TIM_OC6_SetConfig+0xa4>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a19      	ldr	r2, [pc, #100]	@ (800e8dc <TIM_OC6_SetConfig+0x104>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d109      	bne.n	800e890 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	695b      	ldr	r3, [r3, #20]
 800e888:	029b      	lsls	r3, r3, #10
 800e88a:	697a      	ldr	r2, [r7, #20]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	621a      	str	r2, [r3, #32]
}
 800e8aa:	bf00      	nop
 800e8ac:	371c      	adds	r7, #28
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	40012c00 	.word	0x40012c00
 800e8bc:	50012c00 	.word	0x50012c00
 800e8c0:	40013400 	.word	0x40013400
 800e8c4:	50013400 	.word	0x50013400
 800e8c8:	40014000 	.word	0x40014000
 800e8cc:	50014000 	.word	0x50014000
 800e8d0:	40014400 	.word	0x40014400
 800e8d4:	50014400 	.word	0x50014400
 800e8d8:	40014800 	.word	0x40014800
 800e8dc:	50014800 	.word	0x50014800

0800e8e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6a1b      	ldr	r3, [r3, #32]
 800e8f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6a1b      	ldr	r3, [r3, #32]
 800e8f6:	f023 0201 	bic.w	r2, r3, #1
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e90a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	011b      	lsls	r3, r3, #4
 800e910:	693a      	ldr	r2, [r7, #16]
 800e912:	4313      	orrs	r3, r2
 800e914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f023 030a 	bic.w	r3, r3, #10
 800e91c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	4313      	orrs	r3, r2
 800e924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	697a      	ldr	r2, [r7, #20]
 800e930:	621a      	str	r2, [r3, #32]
}
 800e932:	bf00      	nop
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr

0800e93e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e93e:	b480      	push	{r7}
 800e940:	b087      	sub	sp, #28
 800e942:	af00      	add	r7, sp, #0
 800e944:	60f8      	str	r0, [r7, #12]
 800e946:	60b9      	str	r1, [r7, #8]
 800e948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6a1b      	ldr	r3, [r3, #32]
 800e954:	f023 0210 	bic.w	r2, r3, #16
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	031b      	lsls	r3, r3, #12
 800e96e:	693a      	ldr	r2, [r7, #16]
 800e970:	4313      	orrs	r3, r2
 800e972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e97a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	011b      	lsls	r3, r3, #4
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	4313      	orrs	r3, r2
 800e984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	693a      	ldr	r2, [r7, #16]
 800e98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	621a      	str	r2, [r3, #32]
}
 800e992:	bf00      	nop
 800e994:	371c      	adds	r7, #28
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e99e:	b480      	push	{r7}
 800e9a0:	b085      	sub	sp, #20
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e9b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	f043 0307 	orr.w	r3, r3, #7
 800e9c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	609a      	str	r2, [r3, #8]
}
 800e9cc:	bf00      	nop
 800e9ce:	3714      	adds	r7, #20
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	021a      	lsls	r2, r3, #8
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	431a      	orrs	r2, r3
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	697a      	ldr	r2, [r7, #20]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	697a      	ldr	r2, [r7, #20]
 800ea0a:	609a      	str	r2, [r3, #8]
}
 800ea0c:	bf00      	nop
 800ea0e:	371c      	adds	r7, #28
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f003 031f 	and.w	r3, r3, #31
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6a1a      	ldr	r2, [r3, #32]
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	43db      	mvns	r3, r3
 800ea3a:	401a      	ands	r2, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6a1a      	ldr	r2, [r3, #32]
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	f003 031f 	and.w	r3, r3, #31
 800ea4a:	6879      	ldr	r1, [r7, #4]
 800ea4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea50:	431a      	orrs	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	621a      	str	r2, [r3, #32]
}
 800ea56:	bf00      	nop
 800ea58:	371c      	adds	r7, #28
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
	...

0800ea64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d101      	bne.n	800ea7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea78:	2302      	movs	r3, #2
 800ea7a:	e097      	b.n	800ebac <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2202      	movs	r2, #2
 800ea88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a45      	ldr	r2, [pc, #276]	@ (800ebb8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d00e      	beq.n	800eac4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4a44      	ldr	r2, [pc, #272]	@ (800ebbc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d009      	beq.n	800eac4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	4a42      	ldr	r2, [pc, #264]	@ (800ebc0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d004      	beq.n	800eac4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4a41      	ldr	r2, [pc, #260]	@ (800ebc4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d108      	bne.n	800ead6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800eaca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800eadc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eae0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a2f      	ldr	r2, [pc, #188]	@ (800ebb8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d040      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a2e      	ldr	r2, [pc, #184]	@ (800ebbc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d03b      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb10:	d036      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eb1a:	d031      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a29      	ldr	r2, [pc, #164]	@ (800ebc8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d02c      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4a28      	ldr	r2, [pc, #160]	@ (800ebcc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d027      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a26      	ldr	r2, [pc, #152]	@ (800ebd0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d022      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4a25      	ldr	r2, [pc, #148]	@ (800ebd4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d01d      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a23      	ldr	r2, [pc, #140]	@ (800ebd8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d018      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4a22      	ldr	r2, [pc, #136]	@ (800ebdc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d013      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a18      	ldr	r2, [pc, #96]	@ (800ebc0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d00e      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	4a17      	ldr	r2, [pc, #92]	@ (800ebc4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d009      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d004      	beq.n	800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a1a      	ldr	r2, [pc, #104]	@ (800ebe4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d10c      	bne.n	800eb9a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	40012c00 	.word	0x40012c00
 800ebbc:	50012c00 	.word	0x50012c00
 800ebc0:	40013400 	.word	0x40013400
 800ebc4:	50013400 	.word	0x50013400
 800ebc8:	40000400 	.word	0x40000400
 800ebcc:	50000400 	.word	0x50000400
 800ebd0:	40000800 	.word	0x40000800
 800ebd4:	50000800 	.word	0x50000800
 800ebd8:	40000c00 	.word	0x40000c00
 800ebdc:	50000c00 	.word	0x50000c00
 800ebe0:	40014000 	.word	0x40014000
 800ebe4:	50014000 	.word	0x50014000

0800ebe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d101      	bne.n	800ec04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ec00:	2302      	movs	r3, #2
 800ec02:	e07d      	b.n	800ed00 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	4313      	orrs	r3, r2
 800ec18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4313      	orrs	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	041b      	lsls	r3, r3, #16
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	69db      	ldr	r3, [r3, #28]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a1e      	ldr	r2, [pc, #120]	@ (800ed0c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d00e      	beq.n	800ecb4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a1d      	ldr	r2, [pc, #116]	@ (800ed10 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d009      	beq.n	800ecb4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a1b      	ldr	r2, [pc, #108]	@ (800ed14 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d004      	beq.n	800ecb4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a1a      	ldr	r2, [pc, #104]	@ (800ed18 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d11c      	bne.n	800ecee <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecbe:	051b      	lsls	r3, r3, #20
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecea:	4313      	orrs	r3, r2
 800ecec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3714      	adds	r7, #20
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	40012c00 	.word	0x40012c00
 800ed10:	50012c00 	.word	0x50012c00
 800ed14:	40013400 	.word	0x40013400
 800ed18:	50013400 	.word	0x50013400

0800ed1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d101      	bne.n	800ed2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e042      	b.n	800edb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d106      	bne.n	800ed46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7f3 ff67 	bl	8002c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2224      	movs	r2, #36	@ 0x24
 800ed4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f022 0201 	bic.w	r2, r2, #1
 800ed5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d002      	beq.n	800ed6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 fec0 	bl	800faec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 fd25 	bl	800f7bc <UART_SetConfig>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d101      	bne.n	800ed7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e01b      	b.n	800edb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ed8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	689a      	ldr	r2, [r3, #8]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ed9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f042 0201 	orr.w	r2, r2, #1
 800edaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f000 ff3f 	bl	800fc30 <UART_CheckIdleState>
 800edb2:	4603      	mov	r3, r0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08c      	sub	sp, #48	@ 0x30
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	4613      	mov	r3, r2
 800edc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800edca:	88fb      	ldrh	r3, [r7, #6]
 800edcc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800edd4:	2b20      	cmp	r3, #32
 800edd6:	f040 80ad 	bne.w	800ef34 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <HAL_UART_Transmit_DMA+0x2a>
 800ede0:	88fb      	ldrh	r3, [r7, #6]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d101      	bne.n	800edea <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800ede6:	2301      	movs	r3, #1
 800ede8:	e0a5      	b.n	800ef36 <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	68ba      	ldr	r2, [r7, #8]
 800edee:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	88fa      	ldrh	r2, [r7, #6]
 800edf4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	88fa      	ldrh	r2, [r7, #6]
 800edfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2221      	movs	r2, #33	@ 0x21
 800ee0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d06d      	beq.n	800eef4 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee1c:	4a48      	ldr	r2, [pc, #288]	@ (800ef40 <HAL_UART_Transmit_DMA+0x184>)
 800ee1e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee24:	4a47      	ldr	r2, [pc, #284]	@ (800ef44 <HAL_UART_Transmit_DMA+0x188>)
 800ee26:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee2c:	4a46      	ldr	r2, [pc, #280]	@ (800ef48 <HAL_UART_Transmit_DMA+0x18c>)
 800ee2e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee34:	2200      	movs	r2, #0
 800ee36:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee40:	d106      	bne.n	800ee50 <HAL_UART_Transmit_DMA+0x94>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	691b      	ldr	r3, [r3, #16]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d102      	bne.n	800ee50 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 800ee4a:	88fb      	ldrh	r3, [r7, #6]
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d02d      	beq.n	800eeba <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d024      	beq.n	800eeb2 <HAL_UART_Transmit_DMA+0xf6>
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d01e      	beq.n	800eeb2 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800ee7e:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7f7 fb69 	bl	800657c <HAL_DMAEx_List_Start_IT>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800eeb0:	e012      	b.n	800eed8 <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800eeb8:	e00e      	b.n	800eed8 <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eec2:	4619      	mov	r1, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	3328      	adds	r3, #40	@ 0x28
 800eeca:	461a      	mov	r2, r3
 800eecc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800eece:	f7f6 fcd5 	bl	800587c <HAL_DMA_Start_IT>
 800eed2:	4603      	mov	r3, r0
 800eed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800eed8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d009      	beq.n	800eef4 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2210      	movs	r2, #16
 800eee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2220      	movs	r2, #32
 800eeec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	e020      	b.n	800ef36 <HAL_UART_Transmit_DMA+0x17a>
      }
    }
#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2240      	movs	r2, #64	@ 0x40
 800eefa:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3308      	adds	r3, #8
 800ef02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	e853 3f00 	ldrex	r3, [r3]
 800ef0a:	617b      	str	r3, [r7, #20]
   return(result);
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3308      	adds	r3, #8
 800ef1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef1c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef20:	6a39      	ldr	r1, [r7, #32]
 800ef22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef24:	e841 2300 	strex	r3, r2, [r1]
 800ef28:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1e5      	bne.n	800eefc <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	e000      	b.n	800ef36 <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800ef34:	2302      	movs	r3, #2
  }
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3730      	adds	r7, #48	@ 0x30
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	0801019f 	.word	0x0801019f
 800ef44:	08010233 	.word	0x08010233
 800ef48:	080103b3 	.word	0x080103b3

0800ef4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b08a      	sub	sp, #40	@ 0x28
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	4613      	mov	r3, r2
 800ef58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef60:	2b20      	cmp	r3, #32
 800ef62:	d13c      	bne.n	800efde <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d002      	beq.n	800ef70 <HAL_UART_Receive_DMA+0x24>
 800ef6a:	88fb      	ldrh	r3, [r7, #6]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d101      	bne.n	800ef74 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	e035      	b.n	800efe0 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a1a      	ldr	r2, [pc, #104]	@ (800efe8 <HAL_UART_Receive_DMA+0x9c>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d024      	beq.n	800efce <HAL_UART_Receive_DMA+0x82>
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a18      	ldr	r2, [pc, #96]	@ (800efec <HAL_UART_Receive_DMA+0xa0>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d01f      	beq.n	800efce <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d018      	beq.n	800efce <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	e853 3f00 	ldrex	r3, [r3]
 800efa8:	613b      	str	r3, [r7, #16]
   return(result);
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800efb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	461a      	mov	r2, r3
 800efb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efba:	623b      	str	r3, [r7, #32]
 800efbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efbe:	69f9      	ldr	r1, [r7, #28]
 800efc0:	6a3a      	ldr	r2, [r7, #32]
 800efc2:	e841 2300 	strex	r3, r2, [r1]
 800efc6:	61bb      	str	r3, [r7, #24]
   return(result);
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1e6      	bne.n	800ef9c <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800efce:	88fb      	ldrh	r3, [r7, #6]
 800efd0:	461a      	mov	r2, r3
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 ff43 	bl	800fe60 <UART_Start_Receive_DMA>
 800efda:	4603      	mov	r3, r0
 800efdc:	e000      	b.n	800efe0 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800efde:	2302      	movs	r3, #2
  }
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3728      	adds	r7, #40	@ 0x28
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	46002400 	.word	0x46002400
 800efec:	56002400 	.word	0x56002400

0800eff0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b090      	sub	sp, #64	@ 0x40
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800effe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f006:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f012:	2b80      	cmp	r3, #128	@ 0x80
 800f014:	d139      	bne.n	800f08a <HAL_UART_DMAStop+0x9a>
 800f016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f018:	2b21      	cmp	r3, #33	@ 0x21
 800f01a:	d136      	bne.n	800f08a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	3308      	adds	r3, #8
 800f022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	e853 3f00 	ldrex	r3, [r3]
 800f02a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f032:	637b      	str	r3, [r7, #52]	@ 0x34
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3308      	adds	r3, #8
 800f03a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f03c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f03e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f044:	e841 2300 	strex	r3, r2, [r1]
 800f048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1e5      	bne.n	800f01c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f054:	2b00      	cmp	r3, #0
 800f056:	d015      	beq.n	800f084 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7f6 fc6d 	bl	800593c <HAL_DMA_Abort>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00d      	beq.n	800f084 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7f6 fe6b 	bl	8005d48 <HAL_DMA_GetError>
 800f072:	4603      	mov	r3, r0
 800f074:	2b10      	cmp	r3, #16
 800f076:	d105      	bne.n	800f084 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2210      	movs	r2, #16
 800f07c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f080:	2303      	movs	r3, #3
 800f082:	e047      	b.n	800f114 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 ffe3 	bl	8010050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f094:	2b40      	cmp	r3, #64	@ 0x40
 800f096:	d13c      	bne.n	800f112 <HAL_UART_DMAStop+0x122>
 800f098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09a:	2b22      	cmp	r3, #34	@ 0x22
 800f09c:	d139      	bne.n	800f112 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3308      	adds	r3, #8
 800f0a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	e853 3f00 	ldrex	r3, [r3]
 800f0ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0be:	61ba      	str	r2, [r7, #24]
 800f0c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c2:	6979      	ldr	r1, [r7, #20]
 800f0c4:	69ba      	ldr	r2, [r7, #24]
 800f0c6:	e841 2300 	strex	r3, r2, [r1]
 800f0ca:	613b      	str	r3, [r7, #16]
   return(result);
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d1e5      	bne.n	800f09e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d017      	beq.n	800f10c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7f6 fc2a 	bl	800593c <HAL_DMA_Abort>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00e      	beq.n	800f10c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f6 fe27 	bl	8005d48 <HAL_DMA_GetError>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b10      	cmp	r3, #16
 800f0fe:	d105      	bne.n	800f10c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2210      	movs	r2, #16
 800f104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f108:	2303      	movs	r3, #3
 800f10a:	e003      	b.n	800f114 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 ffe0 	bl	80100d2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f112:	2300      	movs	r3, #0
}
 800f114:	4618      	mov	r0, r3
 800f116:	3740      	adds	r7, #64	@ 0x40
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b0ba      	sub	sp, #232	@ 0xe8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	69db      	ldr	r3, [r3, #28]
 800f12a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f146:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f14a:	4013      	ands	r3, r2
 800f14c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f154:	2b00      	cmp	r3, #0
 800f156:	d11b      	bne.n	800f190 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f15c:	f003 0320 	and.w	r3, r3, #32
 800f160:	2b00      	cmp	r3, #0
 800f162:	d015      	beq.n	800f190 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f168:	f003 0320 	and.w	r3, r3, #32
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d105      	bne.n	800f17c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d009      	beq.n	800f190 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f180:	2b00      	cmp	r3, #0
 800f182:	f000 82e5 	beq.w	800f750 <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	4798      	blx	r3
      }
      return;
 800f18e:	e2df      	b.n	800f750 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f194:	2b00      	cmp	r3, #0
 800f196:	f000 8123 	beq.w	800f3e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f19a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f19e:	4b8d      	ldr	r3, [pc, #564]	@ (800f3d4 <HAL_UART_IRQHandler+0x2b8>)
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d106      	bne.n	800f1b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f1a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f1aa:	4b8b      	ldr	r3, [pc, #556]	@ (800f3d8 <HAL_UART_IRQHandler+0x2bc>)
 800f1ac:	4013      	ands	r3, r2
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 8116 	beq.w	800f3e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1b8:	f003 0301 	and.w	r3, r3, #1
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d011      	beq.n	800f1e4 <HAL_UART_IRQHandler+0xc8>
 800f1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00b      	beq.n	800f1e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1da:	f043 0201 	orr.w	r2, r3, #1
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1e8:	f003 0302 	and.w	r3, r3, #2
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d011      	beq.n	800f214 <HAL_UART_IRQHandler+0xf8>
 800f1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1f4:	f003 0301 	and.w	r3, r3, #1
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00b      	beq.n	800f214 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2202      	movs	r2, #2
 800f202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f20a:	f043 0204 	orr.w	r2, r3, #4
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f218:	f003 0304 	and.w	r3, r3, #4
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d011      	beq.n	800f244 <HAL_UART_IRQHandler+0x128>
 800f220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00b      	beq.n	800f244 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2204      	movs	r2, #4
 800f232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f23a:	f043 0202 	orr.w	r2, r3, #2
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f248:	f003 0308 	and.w	r3, r3, #8
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d017      	beq.n	800f280 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f254:	f003 0320 	and.w	r3, r3, #32
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d105      	bne.n	800f268 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f25c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f260:	4b5c      	ldr	r3, [pc, #368]	@ (800f3d4 <HAL_UART_IRQHandler+0x2b8>)
 800f262:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00b      	beq.n	800f280 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2208      	movs	r2, #8
 800f26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f276:	f043 0208 	orr.w	r2, r3, #8
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d012      	beq.n	800f2b2 <HAL_UART_IRQHandler+0x196>
 800f28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00c      	beq.n	800f2b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f2a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2a8:	f043 0220 	orr.w	r2, r3, #32
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f000 824b 	beq.w	800f754 <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2c2:	f003 0320 	and.w	r3, r3, #32
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d013      	beq.n	800f2f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2ce:	f003 0320 	and.w	r3, r3, #32
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d105      	bne.n	800f2e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f2d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d007      	beq.n	800f2f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d003      	beq.n	800f2f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f306:	2b40      	cmp	r3, #64	@ 0x40
 800f308:	d005      	beq.n	800f316 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f30a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f30e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f312:	2b00      	cmp	r3, #0
 800f314:	d054      	beq.n	800f3c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 fedb 	bl	80100d2 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f326:	2b40      	cmp	r3, #64	@ 0x40
 800f328:	d146      	bne.n	800f3b8 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	3308      	adds	r3, #8
 800f330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f338:	e853 3f00 	ldrex	r3, [r3]
 800f33c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	3308      	adds	r3, #8
 800f352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f35a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f366:	e841 2300 	strex	r3, r2, [r1]
 800f36a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f36e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1d9      	bne.n	800f32a <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d017      	beq.n	800f3b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f386:	4a15      	ldr	r2, [pc, #84]	@ (800f3dc <HAL_UART_IRQHandler+0x2c0>)
 800f388:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f390:	4618      	mov	r0, r3
 800f392:	f7f6 fb4f 	bl	8005a34 <HAL_DMA_Abort_IT>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d019      	beq.n	800f3d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f3a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f3aa:	4610      	mov	r0, r2
 800f3ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3ae:	e00f      	b.n	800f3d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f9ed 	bl	800f790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3b6:	e00b      	b.n	800f3d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 f9e9 	bl	800f790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3be:	e007      	b.n	800f3d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f9e5 	bl	800f790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f3ce:	e1c1      	b.n	800f754 <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3d0:	bf00      	nop
    return;
 800f3d2:	e1bf      	b.n	800f754 <HAL_UART_IRQHandler+0x638>
 800f3d4:	10000001 	.word	0x10000001
 800f3d8:	04000120 	.word	0x04000120
 800f3dc:	08010433 	.word	0x08010433

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	f040 816a 	bne.w	800f6be <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3ee:	f003 0310 	and.w	r3, r3, #16
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f000 8163 	beq.w	800f6be <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3fc:	f003 0310 	and.w	r3, r3, #16
 800f400:	2b00      	cmp	r3, #0
 800f402:	f000 815c 	beq.w	800f6be <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2210      	movs	r2, #16
 800f40c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f418:	2b40      	cmp	r3, #64	@ 0x40
 800f41a:	f040 80d2 	bne.w	800f5c2 <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f428:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f42c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f430:	2b00      	cmp	r3, #0
 800f432:	f000 80ac 	beq.w	800f58e <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f43c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f440:	429a      	cmp	r2, r3
 800f442:	f080 80a4 	bcs.w	800f58e <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f44c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f458:	2b81      	cmp	r3, #129	@ 0x81
 800f45a:	f000 8087 	beq.w	800f56c <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f466:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f46a:	e853 3f00 	ldrex	r3, [r3]
 800f46e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f472:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f476:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f47a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	461a      	mov	r2, r3
 800f484:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f488:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f48c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f490:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f494:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f498:	e841 2300 	strex	r3, r2, [r1]
 800f49c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f4a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1da      	bne.n	800f45e <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	3308      	adds	r3, #8
 800f4ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f4b2:	e853 3f00 	ldrex	r3, [r3]
 800f4b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f4b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f4ba:	f023 0301 	bic.w	r3, r3, #1
 800f4be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f4cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f4d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f4d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f4d8:	e841 2300 	strex	r3, r2, [r1]
 800f4dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f4de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1e1      	bne.n	800f4a8 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3308      	adds	r3, #8
 800f4ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f4ee:	e853 3f00 	ldrex	r3, [r3]
 800f4f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f4f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f4f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3308      	adds	r3, #8
 800f504:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f508:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f50a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f50e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f510:	e841 2300 	strex	r3, r2, [r1]
 800f514:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f516:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d1e3      	bne.n	800f4e4 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2220      	movs	r2, #32
 800f520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2200      	movs	r2, #0
 800f528:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f532:	e853 3f00 	ldrex	r3, [r3]
 800f536:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f53a:	f023 0310 	bic.w	r3, r3, #16
 800f53e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f54c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f54e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f550:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f552:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f554:	e841 2300 	strex	r3, r2, [r1]
 800f558:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f55a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1e4      	bne.n	800f52a <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f566:	4618      	mov	r0, r3
 800f568:	f7f6 f9e8 	bl	800593c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2202      	movs	r2, #2
 800f570:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f57e:	b29b      	uxth	r3, r3
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	b29b      	uxth	r3, r3
 800f584:	4619      	mov	r1, r3
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f90c 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f58c:	e0e4      	b.n	800f758 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f594:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f598:	429a      	cmp	r2, r3
 800f59a:	f040 80dd 	bne.w	800f758 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5a6:	2b81      	cmp	r3, #129	@ 0x81
 800f5a8:	f040 80d6 	bne.w	800f758 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f000 f8f2 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
      return;
 800f5c0:	e0ca      	b.n	800f758 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 80bc 	beq.w	800f75c <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 800f5e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f000 80b7 	beq.w	800f75c <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f6:	e853 3f00 	ldrex	r3, [r3]
 800f5fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	461a      	mov	r2, r3
 800f60c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f610:	647b      	str	r3, [r7, #68]	@ 0x44
 800f612:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f614:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f618:	e841 2300 	strex	r3, r2, [r1]
 800f61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1e4      	bne.n	800f5ee <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3308      	adds	r3, #8
 800f62a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62e:	e853 3f00 	ldrex	r3, [r3]
 800f632:	623b      	str	r3, [r7, #32]
   return(result);
 800f634:	6a3b      	ldr	r3, [r7, #32]
 800f636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f63a:	f023 0301 	bic.w	r3, r3, #1
 800f63e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3308      	adds	r3, #8
 800f648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f64c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f654:	e841 2300 	strex	r3, r2, [r1]
 800f658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1e1      	bne.n	800f624 <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2220      	movs	r2, #32
 800f664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	e853 3f00 	ldrex	r3, [r3]
 800f680:	60fb      	str	r3, [r7, #12]
   return(result);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f023 0310 	bic.w	r3, r3, #16
 800f688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	461a      	mov	r2, r3
 800f692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f696:	61fb      	str	r3, [r7, #28]
 800f698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f69a:	69b9      	ldr	r1, [r7, #24]
 800f69c:	69fa      	ldr	r2, [r7, #28]
 800f69e:	e841 2300 	strex	r3, r2, [r1]
 800f6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1e4      	bne.n	800f674 <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2202      	movs	r2, #2
 800f6ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f6b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 f874 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f6bc:	e04e      	b.n	800f75c <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d014      	beq.n	800f6f4 <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d105      	bne.n	800f6e2 <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f6d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d008      	beq.n	800f6f4 <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d03a      	beq.n	800f760 <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	4798      	blx	r3
    }
    return;
 800f6f2:	e035      	b.n	800f760 <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d009      	beq.n	800f714 <HAL_UART_IRQHandler+0x5f8>
 800f700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d003      	beq.n	800f714 <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 fea2 	bl	8010456 <UART_EndTransmit_IT>
    return;
 800f712:	e026      	b.n	800f762 <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d009      	beq.n	800f734 <HAL_UART_IRQHandler+0x618>
 800f720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f724:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d003      	beq.n	800f734 <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fec7 	bl	80104c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f732:	e016      	b.n	800f762 <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d010      	beq.n	800f762 <HAL_UART_IRQHandler+0x646>
 800f740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f744:	2b00      	cmp	r3, #0
 800f746:	da0c      	bge.n	800f762 <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 feaf 	bl	80104ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f74e:	e008      	b.n	800f762 <HAL_UART_IRQHandler+0x646>
      return;
 800f750:	bf00      	nop
 800f752:	e006      	b.n	800f762 <HAL_UART_IRQHandler+0x646>
    return;
 800f754:	bf00      	nop
 800f756:	e004      	b.n	800f762 <HAL_UART_IRQHandler+0x646>
      return;
 800f758:	bf00      	nop
 800f75a:	e002      	b.n	800f762 <HAL_UART_IRQHandler+0x646>
      return;
 800f75c:	bf00      	nop
 800f75e:	e000      	b.n	800f762 <HAL_UART_IRQHandler+0x646>
    return;
 800f760:	bf00      	nop
  }
}
 800f762:	37e8      	adds	r7, #232	@ 0xe8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f770:	bf00      	nop
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f7b0:	bf00      	nop
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f7c0:	b094      	sub	sp, #80	@ 0x50
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800f7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	4b9b      	ldr	r3, [pc, #620]	@ (800fa40 <UART_SetConfig+0x284>)
 800f7d2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d6:	689a      	ldr	r2, [r3, #8]
 800f7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7da:	691b      	ldr	r3, [r3, #16]
 800f7dc:	431a      	orrs	r2, r3
 800f7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e0:	695b      	ldr	r3, [r3, #20]
 800f7e2:	431a      	orrs	r2, r3
 800f7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e6:	69db      	ldr	r3, [r3, #28]
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4994      	ldr	r1, [pc, #592]	@ (800fa44 <UART_SetConfig+0x288>)
 800f7f4:	4019      	ands	r1, r3
 800f7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7fc:	430b      	orrs	r3, r1
 800f7fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800f80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f80c:	68d9      	ldr	r1, [r3, #12]
 800f80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	ea40 0301 	orr.w	r3, r0, r1
 800f816:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	4b87      	ldr	r3, [pc, #540]	@ (800fa40 <UART_SetConfig+0x284>)
 800f824:	429a      	cmp	r2, r3
 800f826:	d009      	beq.n	800f83c <UART_SetConfig+0x80>
 800f828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	4b86      	ldr	r3, [pc, #536]	@ (800fa48 <UART_SetConfig+0x28c>)
 800f82e:	429a      	cmp	r2, r3
 800f830:	d004      	beq.n	800f83c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f834:	6a1a      	ldr	r2, [r3, #32]
 800f836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f838:	4313      	orrs	r3, r2
 800f83a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800f846:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800f84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f850:	430b      	orrs	r3, r1
 800f852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f85a:	f023 000f 	bic.w	r0, r3, #15
 800f85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f860:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	ea40 0301 	orr.w	r3, r0, r1
 800f86a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	4b76      	ldr	r3, [pc, #472]	@ (800fa4c <UART_SetConfig+0x290>)
 800f872:	429a      	cmp	r2, r3
 800f874:	d102      	bne.n	800f87c <UART_SetConfig+0xc0>
 800f876:	2301      	movs	r3, #1
 800f878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f87a:	e021      	b.n	800f8c0 <UART_SetConfig+0x104>
 800f87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	4b73      	ldr	r3, [pc, #460]	@ (800fa50 <UART_SetConfig+0x294>)
 800f882:	429a      	cmp	r2, r3
 800f884:	d102      	bne.n	800f88c <UART_SetConfig+0xd0>
 800f886:	2304      	movs	r3, #4
 800f888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f88a:	e019      	b.n	800f8c0 <UART_SetConfig+0x104>
 800f88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	4b70      	ldr	r3, [pc, #448]	@ (800fa54 <UART_SetConfig+0x298>)
 800f892:	429a      	cmp	r2, r3
 800f894:	d102      	bne.n	800f89c <UART_SetConfig+0xe0>
 800f896:	2308      	movs	r3, #8
 800f898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f89a:	e011      	b.n	800f8c0 <UART_SetConfig+0x104>
 800f89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	4b6d      	ldr	r3, [pc, #436]	@ (800fa58 <UART_SetConfig+0x29c>)
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d102      	bne.n	800f8ac <UART_SetConfig+0xf0>
 800f8a6:	2310      	movs	r3, #16
 800f8a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8aa:	e009      	b.n	800f8c0 <UART_SetConfig+0x104>
 800f8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	4b63      	ldr	r3, [pc, #396]	@ (800fa40 <UART_SetConfig+0x284>)
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d102      	bne.n	800f8bc <UART_SetConfig+0x100>
 800f8b6:	2320      	movs	r3, #32
 800f8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8ba:	e001      	b.n	800f8c0 <UART_SetConfig+0x104>
 800f8bc:	2300      	movs	r3, #0
 800f8be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	4b5e      	ldr	r3, [pc, #376]	@ (800fa40 <UART_SetConfig+0x284>)
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d004      	beq.n	800f8d4 <UART_SetConfig+0x118>
 800f8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	4b5e      	ldr	r3, [pc, #376]	@ (800fa48 <UART_SetConfig+0x28c>)
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d172      	bne.n	800f9ba <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f8d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	623b      	str	r3, [r7, #32]
 800f8da:	627a      	str	r2, [r7, #36]	@ 0x24
 800f8dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f8e0:	f7fa fed4 	bl	800a68c <HAL_RCCEx_GetPeriphCLKFreq>
 800f8e4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800f8e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f000 80e7 	beq.w	800fabc <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8f2:	4a5a      	ldr	r2, [pc, #360]	@ (800fa5c <UART_SetConfig+0x2a0>)
 800f8f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f900:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f904:	685a      	ldr	r2, [r3, #4]
 800f906:	4613      	mov	r3, r2
 800f908:	005b      	lsls	r3, r3, #1
 800f90a:	4413      	add	r3, r2
 800f90c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f90e:	429a      	cmp	r2, r3
 800f910:	d305      	bcc.n	800f91e <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d903      	bls.n	800f926 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800f91e:	2301      	movs	r3, #1
 800f920:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f924:	e048      	b.n	800f9b8 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f928:	2200      	movs	r2, #0
 800f92a:	61bb      	str	r3, [r7, #24]
 800f92c:	61fa      	str	r2, [r7, #28]
 800f92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f932:	4a4a      	ldr	r2, [pc, #296]	@ (800fa5c <UART_SetConfig+0x2a0>)
 800f934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	2200      	movs	r2, #0
 800f93c:	613b      	str	r3, [r7, #16]
 800f93e:	617a      	str	r2, [r7, #20]
 800f940:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f944:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f948:	f7f1 f9a2 	bl	8000c90 <__aeabi_uldivmod>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	4610      	mov	r0, r2
 800f952:	4619      	mov	r1, r3
 800f954:	f04f 0200 	mov.w	r2, #0
 800f958:	f04f 0300 	mov.w	r3, #0
 800f95c:	020b      	lsls	r3, r1, #8
 800f95e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f962:	0202      	lsls	r2, r0, #8
 800f964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f966:	6849      	ldr	r1, [r1, #4]
 800f968:	0849      	lsrs	r1, r1, #1
 800f96a:	2000      	movs	r0, #0
 800f96c:	460c      	mov	r4, r1
 800f96e:	4605      	mov	r5, r0
 800f970:	eb12 0804 	adds.w	r8, r2, r4
 800f974:	eb43 0905 	adc.w	r9, r3, r5
 800f978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	60bb      	str	r3, [r7, #8]
 800f980:	60fa      	str	r2, [r7, #12]
 800f982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f986:	4640      	mov	r0, r8
 800f988:	4649      	mov	r1, r9
 800f98a:	f7f1 f981 	bl	8000c90 <__aeabi_uldivmod>
 800f98e:	4602      	mov	r2, r0
 800f990:	460b      	mov	r3, r1
 800f992:	4613      	mov	r3, r2
 800f994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f998:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f99c:	d308      	bcc.n	800f9b0 <UART_SetConfig+0x1f4>
 800f99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f9a4:	d204      	bcs.n	800f9b0 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800f9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f9ac:	60da      	str	r2, [r3, #12]
 800f9ae:	e003      	b.n	800f9b8 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800f9b6:	e081      	b.n	800fabc <UART_SetConfig+0x300>
 800f9b8:	e080      	b.n	800fabc <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9bc:	69db      	ldr	r3, [r3, #28]
 800f9be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9c2:	d14d      	bne.n	800fa60 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f9c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	603b      	str	r3, [r7, #0]
 800f9ca:	607a      	str	r2, [r7, #4]
 800f9cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9d0:	f7fa fe5c 	bl	800a68c <HAL_RCCEx_GetPeriphCLKFreq>
 800f9d4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f9d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d06f      	beq.n	800fabc <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e0:	4a1e      	ldr	r2, [pc, #120]	@ (800fa5c <UART_SetConfig+0x2a0>)
 800f9e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9ee:	005a      	lsls	r2, r3, #1
 800f9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	085b      	lsrs	r3, r3, #1
 800f9f6:	441a      	add	r2, r3
 800f9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa00:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa04:	2b0f      	cmp	r3, #15
 800fa06:	d916      	bls.n	800fa36 <UART_SetConfig+0x27a>
 800fa08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa0e:	d212      	bcs.n	800fa36 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	f023 030f 	bic.w	r3, r3, #15
 800fa18:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa1c:	085b      	lsrs	r3, r3, #1
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	f003 0307 	and.w	r3, r3, #7
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800fa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800fa32:	60da      	str	r2, [r3, #12]
 800fa34:	e042      	b.n	800fabc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fa3c:	e03e      	b.n	800fabc <UART_SetConfig+0x300>
 800fa3e:	bf00      	nop
 800fa40:	46002400 	.word	0x46002400
 800fa44:	cfff69f3 	.word	0xcfff69f3
 800fa48:	56002400 	.word	0x56002400
 800fa4c:	40013800 	.word	0x40013800
 800fa50:	40004800 	.word	0x40004800
 800fa54:	40004c00 	.word	0x40004c00
 800fa58:	40005000 	.word	0x40005000
 800fa5c:	08015ab4 	.word	0x08015ab4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fa60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa62:	2200      	movs	r2, #0
 800fa64:	469a      	mov	sl, r3
 800fa66:	4693      	mov	fp, r2
 800fa68:	4650      	mov	r0, sl
 800fa6a:	4659      	mov	r1, fp
 800fa6c:	f7fa fe0e 	bl	800a68c <HAL_RCCEx_GetPeriphCLKFreq>
 800fa70:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800fa72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d021      	beq.n	800fabc <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa7c:	4a1a      	ldr	r2, [pc, #104]	@ (800fae8 <UART_SetConfig+0x32c>)
 800fa7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa82:	461a      	mov	r2, r3
 800fa84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa86:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	085b      	lsrs	r3, r3, #1
 800fa90:	441a      	add	r2, r3
 800fa92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa9e:	2b0f      	cmp	r3, #15
 800faa0:	d909      	bls.n	800fab6 <UART_SetConfig+0x2fa>
 800faa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800faa8:	d205      	bcs.n	800fab6 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800faaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faac:	b29a      	uxth	r2, r3
 800faae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	60da      	str	r2, [r3, #12]
 800fab4:	e002      	b.n	800fabc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800fab6:	2301      	movs	r3, #1
 800fab8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fabe:	2201      	movs	r2, #1
 800fac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac6:	2201      	movs	r2, #1
 800fac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800facc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800face:	2200      	movs	r2, #0
 800fad0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad4:	2200      	movs	r2, #0
 800fad6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fad8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3750      	adds	r7, #80	@ 0x50
 800fae0:	46bd      	mov	sp, r7
 800fae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fae6:	bf00      	nop
 800fae8:	08015ab4 	.word	0x08015ab4

0800faec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faf8:	f003 0308 	and.w	r3, r3, #8
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00a      	beq.n	800fb16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	430a      	orrs	r2, r1
 800fb14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb1a:	f003 0301 	and.w	r3, r3, #1
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00a      	beq.n	800fb38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	430a      	orrs	r2, r1
 800fb36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb3c:	f003 0302 	and.w	r3, r3, #2
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00a      	beq.n	800fb5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	430a      	orrs	r2, r1
 800fb58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb5e:	f003 0304 	and.w	r3, r3, #4
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00a      	beq.n	800fb7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	430a      	orrs	r2, r1
 800fb7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb80:	f003 0310 	and.w	r3, r3, #16
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00a      	beq.n	800fb9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	430a      	orrs	r2, r1
 800fb9c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fba2:	f003 0320 	and.w	r3, r3, #32
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00a      	beq.n	800fbc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d01a      	beq.n	800fc02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	430a      	orrs	r2, r1
 800fbe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fbea:	d10a      	bne.n	800fc02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	430a      	orrs	r2, r1
 800fc00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00a      	beq.n	800fc24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	430a      	orrs	r2, r1
 800fc22:	605a      	str	r2, [r3, #4]
  }
}
 800fc24:	bf00      	nop
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b098      	sub	sp, #96	@ 0x60
 800fc34:	af02      	add	r7, sp, #8
 800fc36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc40:	f7f3 f9ca 	bl	8002fd8 <HAL_GetTick>
 800fc44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f003 0308 	and.w	r3, r3, #8
 800fc50:	2b08      	cmp	r3, #8
 800fc52:	d12f      	bne.n	800fcb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 f88e 	bl	800fd84 <UART_WaitOnFlagUntilTimeout>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d022      	beq.n	800fcb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc76:	e853 3f00 	ldrex	r3, [r3]
 800fc7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc82:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	461a      	mov	r2, r3
 800fc8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc94:	e841 2300 	strex	r3, r2, [r1]
 800fc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e6      	bne.n	800fc6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2220      	movs	r2, #32
 800fca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcb0:	2303      	movs	r3, #3
 800fcb2:	e063      	b.n	800fd7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f003 0304 	and.w	r3, r3, #4
 800fcbe:	2b04      	cmp	r3, #4
 800fcc0:	d149      	bne.n	800fd56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcca:	2200      	movs	r2, #0
 800fccc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 f857 	bl	800fd84 <UART_WaitOnFlagUntilTimeout>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d03c      	beq.n	800fd56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce4:	e853 3f00 	ldrex	r3, [r3]
 800fce8:	623b      	str	r3, [r7, #32]
   return(result);
 800fcea:	6a3b      	ldr	r3, [r7, #32]
 800fcec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd02:	e841 2300 	strex	r3, r2, [r1]
 800fd06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1e6      	bne.n	800fcdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	3308      	adds	r3, #8
 800fd14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	e853 3f00 	ldrex	r3, [r3]
 800fd1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	f023 0301 	bic.w	r3, r3, #1
 800fd24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3308      	adds	r3, #8
 800fd2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd2e:	61fa      	str	r2, [r7, #28]
 800fd30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd32:	69b9      	ldr	r1, [r7, #24]
 800fd34:	69fa      	ldr	r2, [r7, #28]
 800fd36:	e841 2300 	strex	r3, r2, [r1]
 800fd3a:	617b      	str	r3, [r7, #20]
   return(result);
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1e5      	bne.n	800fd0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2220      	movs	r2, #32
 800fd46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd52:	2303      	movs	r3, #3
 800fd54:	e012      	b.n	800fd7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2220      	movs	r2, #32
 800fd5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2220      	movs	r2, #32
 800fd62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd7a:	2300      	movs	r3, #0
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3758      	adds	r7, #88	@ 0x58
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	603b      	str	r3, [r7, #0]
 800fd90:	4613      	mov	r3, r2
 800fd92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd94:	e04f      	b.n	800fe36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd9c:	d04b      	beq.n	800fe36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd9e:	f7f3 f91b 	bl	8002fd8 <HAL_GetTick>
 800fda2:	4602      	mov	r2, r0
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d302      	bcc.n	800fdb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fdb4:	2303      	movs	r3, #3
 800fdb6:	e04e      	b.n	800fe56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 0304 	and.w	r3, r3, #4
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d037      	beq.n	800fe36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	2b80      	cmp	r3, #128	@ 0x80
 800fdca:	d034      	beq.n	800fe36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	2b40      	cmp	r3, #64	@ 0x40
 800fdd0:	d031      	beq.n	800fe36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	69db      	ldr	r3, [r3, #28]
 800fdd8:	f003 0308 	and.w	r3, r3, #8
 800fddc:	2b08      	cmp	r3, #8
 800fdde:	d110      	bne.n	800fe02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2208      	movs	r2, #8
 800fde6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f000 f972 	bl	80100d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2208      	movs	r2, #8
 800fdf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e029      	b.n	800fe56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	69db      	ldr	r3, [r3, #28]
 800fe08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe10:	d111      	bne.n	800fe36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fe1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f000 f958 	bl	80100d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2220      	movs	r2, #32
 800fe26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fe32:	2303      	movs	r3, #3
 800fe34:	e00f      	b.n	800fe56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	69da      	ldr	r2, [r3, #28]
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	4013      	ands	r3, r2
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	bf0c      	ite	eq
 800fe46:	2301      	moveq	r3, #1
 800fe48:	2300      	movne	r3, #0
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	79fb      	ldrb	r3, [r7, #7]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d0a0      	beq.n	800fd96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b098      	sub	sp, #96	@ 0x60
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800fe6e:	88fb      	ldrh	r3, [r7, #6]
 800fe70:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	88fa      	ldrh	r2, [r7, #6]
 800fe7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2222      	movs	r2, #34	@ 0x22
 800fe8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d07c      	beq.n	800ff96 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fea2:	4a68      	ldr	r2, [pc, #416]	@ (8010044 <UART_Start_Receive_DMA+0x1e4>)
 800fea4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800feac:	4a66      	ldr	r2, [pc, #408]	@ (8010048 <UART_Start_Receive_DMA+0x1e8>)
 800feae:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800feb6:	4a65      	ldr	r2, [pc, #404]	@ (801004c <UART_Start_Receive_DMA+0x1ec>)
 800feb8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fec0:	2200      	movs	r2, #0
 800fec2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fecc:	d107      	bne.n	800fede <UART_Start_Receive_DMA+0x7e>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	691b      	ldr	r3, [r3, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d103      	bne.n	800fede <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800fed6:	88fb      	ldrh	r3, [r7, #6]
 800fed8:	005b      	lsls	r3, r3, #1
 800feda:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800feea:	2b00      	cmp	r3, #0
 800feec:	d034      	beq.n	800ff58 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d02a      	beq.n	800ff50 <UART_Start_Receive_DMA+0xf0>
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d023      	beq.n	800ff50 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800ff16:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7f6 fb1a 	bl	800657c <HAL_DMAEx_List_Start_IT>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ff4e:	e014      	b.n	800ff7a <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800ff50:	2301      	movs	r3, #1
 800ff52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ff56:	e010      	b.n	800ff7a <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	3324      	adds	r3, #36	@ 0x24
 800ff64:	4619      	mov	r1, r3
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800ff70:	f7f5 fc84 	bl	800587c <HAL_DMA_Start_IT>
 800ff74:	4603      	mov	r3, r0
 800ff76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800ff7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d009      	beq.n	800ff96 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2210      	movs	r2, #16
 800ff86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2220      	movs	r2, #32
 800ff8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ff92:	2301      	movs	r3, #1
 800ff94:	e051      	b.n	801003a <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d018      	beq.n	800ffd0 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffa6:	e853 3f00 	ldrex	r3, [r3]
 800ffaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ffac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ffb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	461a      	mov	r2, r3
 800ffba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ffbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ffbe:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ffc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ffc4:	e841 2300 	strex	r3, r2, [r1]
 800ffc8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ffca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e6      	bne.n	800ff9e <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffda:	e853 3f00 	ldrex	r3, [r3]
 800ffde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ffe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe2:	f043 0301 	orr.w	r3, r3, #1
 800ffe6:	657b      	str	r3, [r7, #84]	@ 0x54
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3308      	adds	r3, #8
 800ffee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fff0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800fff2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fff6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fff8:	e841 2300 	strex	r3, r2, [r1]
 800fffc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1e5      	bne.n	800ffd0 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	3308      	adds	r3, #8
 801000a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	e853 3f00 	ldrex	r3, [r3]
 8010012:	617b      	str	r3, [r7, #20]
   return(result);
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801001a:	653b      	str	r3, [r7, #80]	@ 0x50
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	3308      	adds	r3, #8
 8010022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010024:	627a      	str	r2, [r7, #36]	@ 0x24
 8010026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010028:	6a39      	ldr	r1, [r7, #32]
 801002a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801002c:	e841 2300 	strex	r3, r2, [r1]
 8010030:	61fb      	str	r3, [r7, #28]
   return(result);
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e5      	bne.n	8010004 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3760      	adds	r7, #96	@ 0x60
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	0801024f 	.word	0x0801024f
 8010048:	08010375 	.word	0x08010375
 801004c:	080103b3 	.word	0x080103b3

08010050 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010050:	b480      	push	{r7}
 8010052:	b08f      	sub	sp, #60	@ 0x3c
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005e:	6a3b      	ldr	r3, [r7, #32]
 8010060:	e853 3f00 	ldrex	r3, [r3]
 8010064:	61fb      	str	r3, [r7, #28]
   return(result);
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801006c:	637b      	str	r3, [r7, #52]	@ 0x34
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	461a      	mov	r2, r3
 8010074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010078:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801007c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801007e:	e841 2300 	strex	r3, r2, [r1]
 8010082:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1e6      	bne.n	8010058 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	3308      	adds	r3, #8
 8010090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	60bb      	str	r3, [r7, #8]
   return(result);
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80100a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3308      	adds	r3, #8
 80100a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100aa:	61ba      	str	r2, [r7, #24]
 80100ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	6979      	ldr	r1, [r7, #20]
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	e841 2300 	strex	r3, r2, [r1]
 80100b6:	613b      	str	r3, [r7, #16]
   return(result);
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1e5      	bne.n	801008a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2220      	movs	r2, #32
 80100c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80100c6:	bf00      	nop
 80100c8:	373c      	adds	r7, #60	@ 0x3c
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80100d2:	b480      	push	{r7}
 80100d4:	b095      	sub	sp, #84	@ 0x54
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100e2:	e853 3f00 	ldrex	r3, [r3]
 80100e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80100e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	461a      	mov	r2, r3
 80100f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80100fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80100fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010100:	e841 2300 	strex	r3, r2, [r1]
 8010104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010108:	2b00      	cmp	r3, #0
 801010a:	d1e6      	bne.n	80100da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	3308      	adds	r3, #8
 8010112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010114:	6a3b      	ldr	r3, [r7, #32]
 8010116:	e853 3f00 	ldrex	r3, [r3]
 801011a:	61fb      	str	r3, [r7, #28]
   return(result);
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010122:	f023 0301 	bic.w	r3, r3, #1
 8010126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3308      	adds	r3, #8
 801012e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010130:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010138:	e841 2300 	strex	r3, r2, [r1]
 801013c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801013e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1e3      	bne.n	801010c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010148:	2b01      	cmp	r3, #1
 801014a:	d118      	bne.n	801017e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	e853 3f00 	ldrex	r3, [r3]
 8010158:	60bb      	str	r3, [r7, #8]
   return(result);
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	f023 0310 	bic.w	r3, r3, #16
 8010160:	647b      	str	r3, [r7, #68]	@ 0x44
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	461a      	mov	r2, r3
 8010168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801016a:	61bb      	str	r3, [r7, #24]
 801016c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016e:	6979      	ldr	r1, [r7, #20]
 8010170:	69ba      	ldr	r2, [r7, #24]
 8010172:	e841 2300 	strex	r3, r2, [r1]
 8010176:	613b      	str	r3, [r7, #16]
   return(result);
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1e6      	bne.n	801014c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2220      	movs	r2, #32
 8010182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010192:	bf00      	nop
 8010194:	3754      	adds	r7, #84	@ 0x54
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b090      	sub	sp, #64	@ 0x40
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101b0:	2b81      	cmp	r3, #129	@ 0x81
 80101b2:	d037      	beq.n	8010224 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80101b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101b6:	2200      	movs	r2, #0
 80101b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80101bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	3308      	adds	r3, #8
 80101c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c6:	e853 3f00 	ldrex	r3, [r3]
 80101ca:	623b      	str	r3, [r7, #32]
   return(result);
 80101cc:	6a3b      	ldr	r3, [r7, #32]
 80101ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80101d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3308      	adds	r3, #8
 80101da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80101de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101e4:	e841 2300 	strex	r3, r2, [r1]
 80101e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e5      	bne.n	80101bc <UART_DMATransmitCplt+0x1e>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80101f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	e853 3f00 	ldrex	r3, [r3]
 80101fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010204:	637b      	str	r3, [r7, #52]	@ 0x34
 8010206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	461a      	mov	r2, r3
 801020c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801020e:	61fb      	str	r3, [r7, #28]
 8010210:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010212:	69b9      	ldr	r1, [r7, #24]
 8010214:	69fa      	ldr	r2, [r7, #28]
 8010216:	e841 2300 	strex	r3, r2, [r1]
 801021a:	617b      	str	r3, [r7, #20]
   return(result);
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1e6      	bne.n	80101f0 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010222:	e002      	b.n	801022a <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8010224:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010226:	f000 fb29 	bl	801087c <HAL_UART_TxCpltCallback>
}
 801022a:	bf00      	nop
 801022c:	3740      	adds	r7, #64	@ 0x40
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b084      	sub	sp, #16
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801023e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f7ff fa91 	bl	800f768 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010246:	bf00      	nop
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b09c      	sub	sp, #112	@ 0x70
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801025a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010260:	2b81      	cmp	r3, #129	@ 0x81
 8010262:	d071      	beq.n	8010348 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8010264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010266:	2200      	movs	r2, #0
 8010268:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801026c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010274:	e853 3f00 	ldrex	r3, [r3]
 8010278:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801027a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801027c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010280:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	461a      	mov	r2, r3
 8010288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801028a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801028c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010290:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010292:	e841 2300 	strex	r3, r2, [r1]
 8010296:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1e6      	bne.n	801026c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801029e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3308      	adds	r3, #8
 80102a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a8:	e853 3f00 	ldrex	r3, [r3]
 80102ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80102ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102b0:	f023 0301 	bic.w	r3, r3, #1
 80102b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80102b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	3308      	adds	r3, #8
 80102bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80102be:	647a      	str	r2, [r7, #68]	@ 0x44
 80102c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80102c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102c6:	e841 2300 	strex	r3, r2, [r1]
 80102ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80102cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d1e5      	bne.n	801029e <UART_DMAReceiveCplt+0x50>

#if !defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	3308      	adds	r3, #8
 80102d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102dc:	e853 3f00 	ldrex	r3, [r3]
 80102e0:	623b      	str	r3, [r7, #32]
   return(result);
 80102e2:	6a3b      	ldr	r3, [r7, #32]
 80102e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80102ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	3308      	adds	r3, #8
 80102f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80102f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80102f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102fa:	e841 2300 	strex	r3, r2, [r1]
 80102fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010302:	2b00      	cmp	r3, #0
 8010304:	d1e5      	bne.n	80102d2 <UART_DMAReceiveCplt+0x84>

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010308:	2220      	movs	r2, #32
 801030a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801030e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010312:	2b01      	cmp	r3, #1
 8010314:	d118      	bne.n	8010348 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	e853 3f00 	ldrex	r3, [r3]
 8010322:	60fb      	str	r3, [r7, #12]
   return(result);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f023 0310 	bic.w	r3, r3, #16
 801032a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801032c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	461a      	mov	r2, r3
 8010332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010334:	61fb      	str	r3, [r7, #28]
 8010336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010338:	69b9      	ldr	r1, [r7, #24]
 801033a:	69fa      	ldr	r2, [r7, #28]
 801033c:	e841 2300 	strex	r3, r2, [r1]
 8010340:	617b      	str	r3, [r7, #20]
   return(result);
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1e6      	bne.n	8010316 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801034a:	2200      	movs	r2, #0
 801034c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801034e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010352:	2b01      	cmp	r3, #1
 8010354:	d107      	bne.n	8010366 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801035c:	4619      	mov	r1, r3
 801035e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010360:	f7ff fa20 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010364:	e002      	b.n	801036c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010366:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010368:	f000 fa76 	bl	8010858 <HAL_UART_RxCpltCallback>
}
 801036c:	bf00      	nop
 801036e:	3770      	adds	r7, #112	@ 0x70
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010380:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2201      	movs	r2, #1
 8010386:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801038c:	2b01      	cmp	r3, #1
 801038e:	d109      	bne.n	80103a4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010396:	085b      	lsrs	r3, r3, #1
 8010398:	b29b      	uxth	r3, r3
 801039a:	4619      	mov	r1, r3
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f7ff fa01 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80103a2:	e002      	b.n	80103aa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80103a4:	68f8      	ldr	r0, [r7, #12]
 80103a6:	f7ff f9e9 	bl	800f77c <HAL_UART_RxHalfCpltCallback>
}
 80103aa:	bf00      	nop
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b086      	sub	sp, #24
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80103be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80103c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80103ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103da:	2b80      	cmp	r3, #128	@ 0x80
 80103dc:	d109      	bne.n	80103f2 <UART_DMAError+0x40>
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	2b21      	cmp	r3, #33	@ 0x21
 80103e2:	d106      	bne.n	80103f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80103ec:	6978      	ldr	r0, [r7, #20]
 80103ee:	f7ff fe2f 	bl	8010050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	689b      	ldr	r3, [r3, #8]
 80103f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103fc:	2b40      	cmp	r3, #64	@ 0x40
 80103fe:	d109      	bne.n	8010414 <UART_DMAError+0x62>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2b22      	cmp	r3, #34	@ 0x22
 8010404:	d106      	bne.n	8010414 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	2200      	movs	r2, #0
 801040a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801040e:	6978      	ldr	r0, [r7, #20]
 8010410:	f7ff fe5f 	bl	80100d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801041a:	f043 0210 	orr.w	r2, r3, #16
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010424:	6978      	ldr	r0, [r7, #20]
 8010426:	f7ff f9b3 	bl	800f790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801042a:	bf00      	nop
 801042c:	3718      	adds	r7, #24
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b084      	sub	sp, #16
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801043e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2200      	movs	r2, #0
 8010444:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010448:	68f8      	ldr	r0, [r7, #12]
 801044a:	f7ff f9a1 	bl	800f790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801044e:	bf00      	nop
 8010450:	3710      	adds	r7, #16
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}

08010456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b088      	sub	sp, #32
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	e853 3f00 	ldrex	r3, [r3]
 801046a:	60bb      	str	r3, [r7, #8]
   return(result);
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010472:	61fb      	str	r3, [r7, #28]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	461a      	mov	r2, r3
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	61bb      	str	r3, [r7, #24]
 801047e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010480:	6979      	ldr	r1, [r7, #20]
 8010482:	69ba      	ldr	r2, [r7, #24]
 8010484:	e841 2300 	strex	r3, r2, [r1]
 8010488:	613b      	str	r3, [r7, #16]
   return(result);
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1e6      	bne.n	801045e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2220      	movs	r2, #32
 8010494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 f9ec 	bl	801087c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80104a4:	bf00      	nop
 80104a6:	3720      	adds	r7, #32
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80104b4:	bf00      	nop
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b085      	sub	sp, #20
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d101      	bne.n	80104ea <HAL_UARTEx_DisableFifoMode+0x16>
 80104e6:	2302      	movs	r3, #2
 80104e8:	e027      	b.n	801053a <HAL_UARTEx_DisableFifoMode+0x66>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2201      	movs	r2, #1
 80104ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2224      	movs	r2, #36	@ 0x24
 80104f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f022 0201 	bic.w	r2, r2, #1
 8010510:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2220      	movs	r2, #32
 801052c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3714      	adds	r7, #20
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr

08010546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b084      	sub	sp, #16
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
 801054e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010556:	2b01      	cmp	r3, #1
 8010558:	d101      	bne.n	801055e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801055a:	2302      	movs	r3, #2
 801055c:	e02d      	b.n	80105ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2224      	movs	r2, #36	@ 0x24
 801056a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f022 0201 	bic.w	r2, r2, #1
 8010584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	430a      	orrs	r2, r1
 8010598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 f850 	bl	8010640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	68fa      	ldr	r2, [r7, #12]
 80105a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2220      	movs	r2, #32
 80105ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105b8:	2300      	movs	r3, #0
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3710      	adds	r7, #16
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}

080105c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105c2:	b580      	push	{r7, lr}
 80105c4:	b084      	sub	sp, #16
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
 80105ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d101      	bne.n	80105da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80105d6:	2302      	movs	r3, #2
 80105d8:	e02d      	b.n	8010636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2201      	movs	r2, #1
 80105de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2224      	movs	r2, #36	@ 0x24
 80105e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f022 0201 	bic.w	r2, r2, #1
 8010600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	683a      	ldr	r2, [r7, #0]
 8010612:	430a      	orrs	r2, r1
 8010614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 f812 	bl	8010640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2220      	movs	r2, #32
 8010628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	3710      	adds	r7, #16
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
	...

08010640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801064c:	2b00      	cmp	r3, #0
 801064e:	d108      	bne.n	8010662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2201      	movs	r2, #1
 8010654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2201      	movs	r2, #1
 801065c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010660:	e031      	b.n	80106c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010662:	2308      	movs	r3, #8
 8010664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010666:	2308      	movs	r3, #8
 8010668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	0e5b      	lsrs	r3, r3, #25
 8010672:	b2db      	uxtb	r3, r3
 8010674:	f003 0307 	and.w	r3, r3, #7
 8010678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	689b      	ldr	r3, [r3, #8]
 8010680:	0f5b      	lsrs	r3, r3, #29
 8010682:	b2db      	uxtb	r3, r3
 8010684:	f003 0307 	and.w	r3, r3, #7
 8010688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801068a:	7bbb      	ldrb	r3, [r7, #14]
 801068c:	7b3a      	ldrb	r2, [r7, #12]
 801068e:	4911      	ldr	r1, [pc, #68]	@ (80106d4 <UARTEx_SetNbDataToProcess+0x94>)
 8010690:	5c8a      	ldrb	r2, [r1, r2]
 8010692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010696:	7b3a      	ldrb	r2, [r7, #12]
 8010698:	490f      	ldr	r1, [pc, #60]	@ (80106d8 <UARTEx_SetNbDataToProcess+0x98>)
 801069a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801069c:	fb93 f3f2 	sdiv	r3, r3, r2
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106a8:	7bfb      	ldrb	r3, [r7, #15]
 80106aa:	7b7a      	ldrb	r2, [r7, #13]
 80106ac:	4909      	ldr	r1, [pc, #36]	@ (80106d4 <UARTEx_SetNbDataToProcess+0x94>)
 80106ae:	5c8a      	ldrb	r2, [r1, r2]
 80106b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80106b4:	7b7a      	ldrb	r2, [r7, #13]
 80106b6:	4908      	ldr	r1, [pc, #32]	@ (80106d8 <UARTEx_SetNbDataToProcess+0x98>)
 80106b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80106be:	b29a      	uxth	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80106c6:	bf00      	nop
 80106c8:	3714      	adds	r7, #20
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	08015acc 	.word	0x08015acc
 80106d8:	08015ad4 	.word	0x08015ad4

080106dc <Communicate_RxPushData>:
	return (*data);
}


void Communicate_RxPushData( void )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	af00      	add	r7, sp, #0
// head（DMACが受信データを書き込む位置）に新しく受信データが蓄積される．
// tailから読み出せばいい
// headがtailに追いつくとバッファオーバーフローとなり正しく読み出せない

	if(rx_buffer.queue_length() >= TRX_BUFFER_SIZE)
 80106e0:	480a      	ldr	r0, [pc, #40]	@ (801070c <Communicate_RxPushData+0x30>)
 80106e2:	f000 f922 	bl	801092a <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80106ea:	bfcc      	ite	gt
 80106ec:	2301      	movgt	r3, #1
 80106ee:	2300      	movle	r3, #0
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d107      	bne.n	8010706 <Communicate_RxPushData+0x2a>
	{
		return;
	}

	rx_buffer.push(rx_data);					// 書き込みポインタにデータを格納
 80106f6:	4b06      	ldr	r3, [pc, #24]	@ (8010710 <Communicate_RxPushData+0x34>)
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	4619      	mov	r1, r3
 80106fe:	4803      	ldr	r0, [pc, #12]	@ (801070c <Communicate_RxPushData+0x30>)
 8010700:	f000 f920 	bl	8010944 <_ZN10ring_queueILj128EVhE4pushEh>
 8010704:	e000      	b.n	8010708 <Communicate_RxPushData+0x2c>
		return;
 8010706:	bf00      	nop

}
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	20000a84 	.word	0x20000a84
 8010710:	20000b0d 	.word	0x20000b0d

08010714 <Communicate_RxPopData>:

uint8_t Communicate_RxPopData( void )
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 801071a:	b672      	cpsid	i
}
 801071c:	bf00      	nop

	// この関数は多重に実行されるとまずいので割り込みを禁止する
	__disable_irq();

	// データがない場合
	if(rx_buffer.queue_length() == 0){
 801071e:	4816      	ldr	r0, [pc, #88]	@ (8010778 <Communicate_RxPopData+0x64>)
 8010720:	f000 f903 	bl	801092a <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 8010724:	4603      	mov	r3, r0
 8010726:	2b00      	cmp	r3, #0
 8010728:	bf0c      	ite	eq
 801072a:	2301      	moveq	r3, #1
 801072c:	2300      	movne	r3, #0
 801072e:	b2db      	uxtb	r3, r3
 8010730:	2b00      	cmp	r3, #0
 8010732:	d014      	beq.n	801075e <Communicate_RxPopData+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8010734:	b662      	cpsie	i
}
 8010736:	bf00      	nop
		// 割り込み許可
		__enable_irq();

		// データを受信するまで待機
		while(rx_buffer.queue_length() == 0)
 8010738:	e004      	b.n	8010744 <Communicate_RxPopData+0x30>
		{
			HAL_UART_Receive_DMA( &huart1, (uint8_t*)(&rx_data), 1 );
 801073a:	2201      	movs	r2, #1
 801073c:	490f      	ldr	r1, [pc, #60]	@ (801077c <Communicate_RxPopData+0x68>)
 801073e:	4810      	ldr	r0, [pc, #64]	@ (8010780 <Communicate_RxPopData+0x6c>)
 8010740:	f7fe fc04 	bl	800ef4c <HAL_UART_Receive_DMA>
		while(rx_buffer.queue_length() == 0)
 8010744:	480c      	ldr	r0, [pc, #48]	@ (8010778 <Communicate_RxPopData+0x64>)
 8010746:	f000 f8f0 	bl	801092a <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	bf0c      	ite	eq
 8010750:	2301      	moveq	r3, #1
 8010752:	2300      	movne	r3, #0
 8010754:	b2db      	uxtb	r3, r3
 8010756:	2b00      	cmp	r3, #0
 8010758:	d1ef      	bne.n	801073a <Communicate_RxPopData+0x26>
  __ASM volatile ("cpsid i" : : : "memory");
 801075a:	b672      	cpsid	i
}
 801075c:	bf00      	nop
		}
		__disable_irq();
	} else;

	ch = rx_buffer.pop();	// 読み出しデータの取り出し
 801075e:	4806      	ldr	r0, [pc, #24]	@ (8010778 <Communicate_RxPopData+0x64>)
 8010760:	f000 f926 	bl	80109b0 <_ZN10ring_queueILj128EVhE3popEv>
 8010764:	4603      	mov	r3, r0
 8010766:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8010768:	b662      	cpsie	i
}
 801076a:	bf00      	nop


	// 割り込み許可
	__enable_irq();
	return ch;
 801076c:	79fb      	ldrb	r3, [r7, #7]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	20000a84 	.word	0x20000a84
 801077c:	20000b0d 	.word	0x20000b0d
 8010780:	20000874 	.word	0x20000874

08010784 <Communicate_TxPushData>:

/* ---------------------------------------------------------------
	UART1で1文字送信する関数
--------------------------------------------------------------- */
void Communicate_TxPushData( int8_t data )
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 801078e:	b672      	cpsid	i
}
 8010790:	bf00      	nop
	while(1) {
		// この関数は多重に実行されるとまずいので割り込みを禁止する
		__disable_irq();

		// DMAを一時的に停止
		HAL_DMA_Abort(huart1.hdmatx);
 8010792:	4b1a      	ldr	r3, [pc, #104]	@ (80107fc <Communicate_TxPushData+0x78>)
 8010794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010796:	4618      	mov	r0, r3
 8010798:	f7f5 f8d0 	bl	800593c <HAL_DMA_Abort>

		// バッファに空きがあればループから抜ける
		if( tx_buffer.queue_length() < TRX_BUFFER_SIZE ) {
 801079c:	4818      	ldr	r0, [pc, #96]	@ (8010800 <Communicate_TxPushData+0x7c>)
 801079e:	f000 f8c4 	bl	801092a <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80107a6:	bfd4      	ite	le
 80107a8:	2301      	movle	r3, #1
 80107aa:	2300      	movgt	r3, #0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d113      	bne.n	80107da <Communicate_TxPushData+0x56>
				break;
		} else;

		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
 80107b2:	2201      	movs	r2, #1
 80107b4:	4913      	ldr	r1, [pc, #76]	@ (8010804 <Communicate_TxPushData+0x80>)
 80107b6:	4811      	ldr	r0, [pc, #68]	@ (80107fc <Communicate_TxPushData+0x78>)
 80107b8:	f7fe fb00 	bl	800edbc <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 80107bc:	b662      	cpsie	i
}
 80107be:	bf00      	nop

		// 割り込み許可
		__enable_irq();

		// バッファに空きができるまで待機（この間割り込みが発生してもよい）
		while(tx_buffer.queue_length() == TRX_BUFFER_SIZE);
 80107c0:	bf00      	nop
 80107c2:	480f      	ldr	r0, [pc, #60]	@ (8010800 <Communicate_TxPushData+0x7c>)
 80107c4:	f000 f8b1 	bl	801092a <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b80      	cmp	r3, #128	@ 0x80
 80107cc:	bf0c      	ite	eq
 80107ce:	2301      	moveq	r3, #1
 80107d0:	2300      	movne	r3, #0
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1f4      	bne.n	80107c2 <Communicate_TxPushData+0x3e>
		__disable_irq();
 80107d8:	e7d9      	b.n	801078e <Communicate_TxPushData+0xa>
				break;
 80107da:	bf00      	nop
	}
	// ここの時点でDMACは停止，割り込みは禁止されている

	// 書き込みポインタにデータを格納
	tx_buffer.push((uint8_t)data);
 80107dc:	79fb      	ldrb	r3, [r7, #7]
 80107de:	4619      	mov	r1, r3
 80107e0:	4807      	ldr	r0, [pc, #28]	@ (8010800 <Communicate_TxPushData+0x7c>)
 80107e2:	f000 f8af 	bl	8010944 <_ZN10ring_queueILj128EVhE4pushEh>

	// DMA動作再開
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
 80107e6:	2201      	movs	r2, #1
 80107e8:	4906      	ldr	r1, [pc, #24]	@ (8010804 <Communicate_TxPushData+0x80>)
 80107ea:	4804      	ldr	r0, [pc, #16]	@ (80107fc <Communicate_TxPushData+0x78>)
 80107ec:	f7fe fae6 	bl	800edbc <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 80107f0:	b662      	cpsie	i
}
 80107f2:	bf00      	nop

	// 割り込み許可
	__enable_irq();
}
 80107f4:	bf00      	nop
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	20000874 	.word	0x20000874
 8010800:	200009fc 	.word	0x200009fc
 8010804:	20000b0c 	.word	0x20000b0c

08010808 <Communicate_TxPopData>:

void Communicate_TxPopData( void )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	af00      	add	r7, sp, #0
	// データがない場合
	if(tx_buffer.queue_length() == 0)
 801080c:	480f      	ldr	r0, [pc, #60]	@ (801084c <Communicate_TxPopData+0x44>)
 801080e:	f000 f88c 	bl	801092a <_ZN10ring_queueILj128EVhE12queue_lengthEv>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	bf0c      	ite	eq
 8010818:	2301      	moveq	r3, #1
 801081a:	2300      	movne	r3, #0
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2b00      	cmp	r3, #0
 8010820:	d006      	beq.n	8010830 <Communicate_TxPopData+0x28>
	{
		tx_data = '\0';
 8010822:	4b0b      	ldr	r3, [pc, #44]	@ (8010850 <Communicate_TxPopData+0x48>)
 8010824:	2200      	movs	r2, #0
 8010826:	701a      	strb	r2, [r3, #0]
		// DMAを停止
		HAL_UART_DMAStop(&huart1);
 8010828:	480a      	ldr	r0, [pc, #40]	@ (8010854 <Communicate_TxPopData+0x4c>)
 801082a:	f7fe fbe1 	bl	800eff0 <HAL_UART_DMAStop>
		// 読み出しデータの取り出し
		tx_data = tx_buffer.pop();
		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
	}
}
 801082e:	e00b      	b.n	8010848 <Communicate_TxPopData+0x40>
		tx_data = tx_buffer.pop();
 8010830:	4806      	ldr	r0, [pc, #24]	@ (801084c <Communicate_TxPopData+0x44>)
 8010832:	f000 f8bd 	bl	80109b0 <_ZN10ring_queueILj128EVhE3popEv>
 8010836:	4603      	mov	r3, r0
 8010838:	461a      	mov	r2, r3
 801083a:	4b05      	ldr	r3, [pc, #20]	@ (8010850 <Communicate_TxPopData+0x48>)
 801083c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)(&tx_data), 1);
 801083e:	2201      	movs	r2, #1
 8010840:	4903      	ldr	r1, [pc, #12]	@ (8010850 <Communicate_TxPopData+0x48>)
 8010842:	4804      	ldr	r0, [pc, #16]	@ (8010854 <Communicate_TxPopData+0x4c>)
 8010844:	f7fe faba 	bl	800edbc <HAL_UART_Transmit_DMA>
}
 8010848:	bf00      	nop
 801084a:	bd80      	pop	{r7, pc}
 801084c:	200009fc 	.word	0x200009fc
 8010850:	20000b0c 	.word	0x20000b0c
 8010854:	20000874 	.word	0x20000874

08010858 <HAL_UART_RxCpltCallback>:

/* ---------------------------------------------------------------
	受信・送信完了時のコールバック関数
--------------------------------------------------------------- */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART1 ) {
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a04      	ldr	r2, [pc, #16]	@ (8010878 <HAL_UART_RxCpltCallback+0x20>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d101      	bne.n	801086e <HAL_UART_RxCpltCallback+0x16>
        Communicate_RxPushData();
 801086a:	f7ff ff37 	bl	80106dc <Communicate_RxPushData>
    } else;
}
 801086e:	bf00      	nop
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	40013800 	.word	0x40013800

0801087c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART1 ) {
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a04      	ldr	r2, [pc, #16]	@ (801089c <HAL_UART_TxCpltCallback+0x20>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d101      	bne.n	8010892 <HAL_UART_TxCpltCallback+0x16>
        Communicate_TxPopData();
 801088e:	f7ff ffbb 	bl	8010808 <Communicate_TxPopData>
    } else;
}
 8010892:	bf00      	nop
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	40013800 	.word	0x40013800

080108a0 <Communicate_Initialize>:

/* ---------------------------------------------------------------
	printfとscanfを使用するための設定
--------------------------------------------------------------- */
void Communicate_Initialize( void )
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	af00      	add	r7, sp, #0
	setbuf(stdout, NULL);
 80108a4:	4b07      	ldr	r3, [pc, #28]	@ (80108c4 <Communicate_Initialize+0x24>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	689b      	ldr	r3, [r3, #8]
 80108aa:	2100      	movs	r1, #0
 80108ac:	4618      	mov	r0, r3
 80108ae:	f001 fb4f 	bl	8011f50 <setbuf>
	setbuf(stdin, NULL);
 80108b2:	4b04      	ldr	r3, [pc, #16]	@ (80108c4 <Communicate_Initialize+0x24>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	2100      	movs	r1, #0
 80108ba:	4618      	mov	r0, r3
 80108bc:	f001 fb48 	bl	8011f50 <setbuf>
}
 80108c0:	bf00      	nop
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	20000018 	.word	0x20000018

080108c8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
extern "C" PUTCHAR_PROTOTYPE
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
	Communicate_TxPushData(ch);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	b25b      	sxtb	r3, r3
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7ff ff55 	bl	8010784 <Communicate_TxPushData>
	return 1;
 80108da:	2301      	movs	r3, #1
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <__io_getchar>:
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
extern "C" GETCHAR_PROTOTYPE
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	af00      	add	r7, sp, #0
	//return Communicate_TerminalRecv();
	return Communicate_RxPopData();
 80108e8:	f7ff ff14 	bl	8010714 <Communicate_RxPopData>
 80108ec:	4603      	mov	r3, r0

}
 80108ee:	4618      	mov	r0, r3
 80108f0:	bd80      	pop	{r7, pc}

080108f2 <_ZN10ring_queueILj128EVhEC1Ev>:
		int16_t tail;
		int16_t head;
		int16_t length;
		const uint16_t cap = SIZE;
	public:
		ring_queue()
 80108f2:	b480      	push	{r7}
 80108f4:	b083      	sub	sp, #12
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
		{
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2280      	movs	r2, #128	@ 0x80
 80108fe:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
			tail = -1;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010908:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
			head = 0;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
			length = 0;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
		}
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	4618      	mov	r0, r3
 8010920:	370c      	adds	r7, #12
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <_ZN10ring_queueILj128EVhE12queue_lengthEv>:
		{
			buff[(tail + 1)%cap] = push_data;
			tail = (tail + 1)%cap;
			length = length + 1;
		}
		int queue_length()
 801092a:	b480      	push	{r7}
 801092c:	b083      	sub	sp, #12
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
		{
			return length;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	@ 0x84
		}
 8010938:	4618      	mov	r0, r3
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <_ZN10ring_queueILj128EVhE4pushEh>:
		void push(T push_data)
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	460b      	mov	r3, r1
 801094e:	70fb      	strb	r3, [r7, #3]
			buff[(tail + 1)%cap] = push_data;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8010956:	3301      	adds	r3, #1
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	f8b2 2086 	ldrh.w	r2, [r2, #134]	@ 0x86
 801095e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010962:	fb01 f202 	mul.w	r2, r1, r2
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	78fa      	ldrb	r2, [r7, #3]
 801096a:	b2d1      	uxtb	r1, r2
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	54d1      	strb	r1, [r2, r3]
			tail = (tail + 1)%cap;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8010976:	3301      	adds	r3, #1
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	f8b2 2086 	ldrh.w	r2, [r2, #134]	@ 0x86
 801097e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010982:	fb01 f202 	mul.w	r2, r1, r2
 8010986:	1a9b      	subs	r3, r3, r2
 8010988:	b21a      	sxth	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
			length = length + 1;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	@ 0x84
 8010996:	b29b      	uxth	r3, r3
 8010998:	3301      	adds	r3, #1
 801099a:	b29b      	uxth	r3, r3
 801099c:	b21a      	sxth	r2, r3
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
		}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <_ZN10ring_queueILj128EVhE3popEv>:
		T pop()
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
			T pop_data = buff[head];
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 80109be:	461a      	mov	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	5c9b      	ldrb	r3, [r3, r2]
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	73fb      	strb	r3, [r7, #15]
			head = (head + 1)%cap;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 80109ce:	3301      	adds	r3, #1
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	f8b2 2086 	ldrh.w	r2, [r2, #134]	@ 0x86
 80109d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80109da:	fb01 f202 	mul.w	r2, r1, r2
 80109de:	1a9b      	subs	r3, r3, r2
 80109e0:	b21a      	sxth	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
			length = length - 1;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	@ 0x84
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	3b01      	subs	r3, #1
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	b21a      	sxth	r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
			return pop_data;
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	b2db      	uxtb	r3, r3
		}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3714      	adds	r7, #20
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr

08010a0c <_Z41__static_initialization_and_destruction_0v>:
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	af00      	add	r7, sp, #0
ring_queue<TRX_BUFFER_SIZE,volatile uint8_t> tx_buffer;
 8010a10:	4803      	ldr	r0, [pc, #12]	@ (8010a20 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8010a12:	f7ff ff6e 	bl	80108f2 <_ZN10ring_queueILj128EVhEC1Ev>
ring_queue<TRX_BUFFER_SIZE,volatile uint8_t> rx_buffer;
 8010a16:	4803      	ldr	r0, [pc, #12]	@ (8010a24 <_Z41__static_initialization_and_destruction_0v+0x18>)
 8010a18:	f7ff ff6b 	bl	80108f2 <_ZN10ring_queueILj128EVhEC1Ev>
}
 8010a1c:	bf00      	nop
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	200009fc 	.word	0x200009fc
 8010a24:	20000a84 	.word	0x20000a84

08010a28 <_GLOBAL__sub_I_tx_buffer>:
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	f7ff ffee 	bl	8010a0c <_Z41__static_initialization_and_destruction_0v>
 8010a30:	bd80      	pop	{r7, pc}
	...

08010a34 <Encoder_Initialize>:
void set_ms_dt(float _m_dt)
{
	m_dt = _m_dt;
}

void Encoder_Initialize(){
 8010a34:	b580      	push	{r7, lr}
 8010a36:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8010a38:	213c      	movs	r1, #60	@ 0x3c
 8010a3a:	4806      	ldr	r0, [pc, #24]	@ (8010a54 <Encoder_Initialize+0x20>)
 8010a3c:	f7fc ffd6 	bl	800d9ec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8010a40:	213c      	movs	r1, #60	@ 0x3c
 8010a42:	4805      	ldr	r0, [pc, #20]	@ (8010a58 <Encoder_Initialize+0x24>)
 8010a44:	f7fc ffd2 	bl	800d9ec <HAL_TIM_Encoder_Start>
	Encoder_ResetPosition_Left();
 8010a48:	f000 f808 	bl	8010a5c <Encoder_ResetPosition_Left>
	Encoder_ResetPosition_Right();
 8010a4c:	f000 f812 	bl	8010a74 <Encoder_ResetPosition_Right>
}
 8010a50:	bf00      	nop
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	20000744 	.word	0x20000744
 8010a58:	20000790 	.word	0x20000790

08010a5c <Encoder_ResetPosition_Left>:

void Encoder_ResetPosition_Left(){
 8010a5c:	b480      	push	{r7}
 8010a5e:	af00      	add	r7, sp, #0
	ENC_CNT_L = ENC_ZERO;
 8010a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010a64:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8010a68:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8010a6a:	bf00      	nop
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <Encoder_ResetPosition_Right>:

void Encoder_ResetPosition_Right(){
 8010a74:	b480      	push	{r7}
 8010a76:	af00      	add	r7, sp, #0
	ENC_CNT_R = ENC_ZERO;
 8010a78:	4b04      	ldr	r3, [pc, #16]	@ (8010a8c <Encoder_ResetPosition_Right+0x18>)
 8010a7a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8010a7e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8010a80:	bf00      	nop
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop
 8010a8c:	40000400 	.word	0x40000400

08010a90 <work_ram_read>:
    if (position < USER_DATA_SIZE) {
        store_ram[position] = data;
    }
}

uint8_t work_ram_read(uint32_t position) {
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
    if (position < USER_DATA_SIZE) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a9e:	d204      	bcs.n	8010aaa <work_ram_read+0x1a>
        return store_ram[position];
 8010aa0:	4a05      	ldr	r2, [pc, #20]	@ (8010ab8 <work_ram_read+0x28>)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	e000      	b.n	8010aac <work_ram_read+0x1c>
    }
    return 0xFF; // エラー値
 8010aaa:	23ff      	movs	r3, #255	@ 0xff
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr
 8010ab8:	20000b10 	.word	0x20000b10

08010abc <read_byte>:
uint8_t imu_value[13];

int16_t accel_data[3];
int16_t gyro_data[3];

uint8_t read_byte(uint8_t reg){
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b086      	sub	sp, #24
 8010ac0:	af02      	add	r7, sp, #8
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0x00;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	73fb      	strb	r3, [r7, #15]
	uint8_t dammy = 0x00;
 8010aca:	2300      	movs	r3, #0
 8010acc:	73bb      	strb	r3, [r7, #14]
	reg = reg | 0x80; //mask
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010ade:	480f      	ldr	r0, [pc, #60]	@ (8010b1c <read_byte+0x60>)
 8010ae0:	f7f6 fe9a 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &reg, 1 , 100);
 8010ae4:	1df9      	adds	r1, r7, #7
 8010ae6:	2364      	movs	r3, #100	@ 0x64
 8010ae8:	2201      	movs	r2, #1
 8010aea:	480d      	ldr	r0, [pc, #52]	@ (8010b20 <read_byte+0x64>)
 8010aec:	f7fb f928 	bl	800bd40 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi2, &dammy, &val, 1, 100);
 8010af0:	f107 020f 	add.w	r2, r7, #15
 8010af4:	f107 010e 	add.w	r1, r7, #14
 8010af8:	2364      	movs	r3, #100	@ 0x64
 8010afa:	9300      	str	r3, [sp, #0]
 8010afc:	2301      	movs	r3, #1
 8010afe:	4808      	ldr	r0, [pc, #32]	@ (8010b20 <read_byte+0x64>)
 8010b00:	f7fb fb32 	bl	800c168 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);
 8010b04:	2201      	movs	r2, #1
 8010b06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010b0a:	4804      	ldr	r0, [pc, #16]	@ (8010b1c <read_byte+0x60>)
 8010b0c:	f7f6 fe84 	bl	8007818 <HAL_GPIO_WritePin>

	return val;
 8010b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	42020400 	.word	0x42020400
 8010b20:	20000574 	.word	0x20000574

08010b24 <write_byte>:

void write_byte(uint8_t reg, uint8_t data){
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	460a      	mov	r2, r1
 8010b2e:	71fb      	strb	r3, [r7, #7]
 8010b30:	4613      	mov	r3, r2
 8010b32:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 8010b34:	79fb      	ldrb	r3, [r7, #7]
 8010b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
 8010b3e:	2200      	movs	r2, #0
 8010b40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010b44:	480c      	ldr	r0, [pc, #48]	@ (8010b78 <write_byte+0x54>)
 8010b46:	f7f6 fe67 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &reg, 1 , 100);
 8010b4a:	1df9      	adds	r1, r7, #7
 8010b4c:	2364      	movs	r3, #100	@ 0x64
 8010b4e:	2201      	movs	r2, #1
 8010b50:	480a      	ldr	r0, [pc, #40]	@ (8010b7c <write_byte+0x58>)
 8010b52:	f7fb f8f5 	bl	800bd40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1 , 100);
 8010b56:	1db9      	adds	r1, r7, #6
 8010b58:	2364      	movs	r3, #100	@ 0x64
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	4807      	ldr	r0, [pc, #28]	@ (8010b7c <write_byte+0x58>)
 8010b5e:	f7fb f8ef 	bl	800bd40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);
 8010b62:	2201      	movs	r2, #1
 8010b64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010b68:	4803      	ldr	r0, [pc, #12]	@ (8010b78 <write_byte+0x54>)
 8010b6a:	f7f6 fe55 	bl	8007818 <HAL_GPIO_WritePin>
}
 8010b6e:	bf00      	nop
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	42020400 	.word	0x42020400
 8010b7c:	20000574 	.word	0x20000574

08010b80 <IMU_initialize>:

void IMU_initialize()
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8010b84:	2032      	movs	r0, #50	@ 0x32
 8010b86:	f7f2 fa33 	bl	8002ff0 <HAL_Delay>
	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010b90:	4814      	ldr	r0, [pc, #80]	@ (8010be4 <IMU_initialize+0x64>)
 8010b92:	f7f6 fe41 	bl	8007818 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8010b96:	2032      	movs	r0, #50	@ 0x32
 8010b98:	f7f2 fa2a 	bl	8002ff0 <HAL_Delay>
	  read_byte(WHO_AM_I);
 8010b9c:	200f      	movs	r0, #15
 8010b9e:	f7ff ff8d 	bl	8010abc <read_byte>
	  HAL_Delay(50);
 8010ba2:	2032      	movs	r0, #50	@ 0x32
 8010ba4:	f7f2 fa24 	bl	8002ff0 <HAL_Delay>
	  write_byte(CTRL1_XL, ACCEL_ODR_SET|ACCEL_8G);
 8010ba8:	218e      	movs	r1, #142	@ 0x8e
 8010baa:	2010      	movs	r0, #16
 8010bac:	f7ff ffba 	bl	8010b24 <write_byte>
	  HAL_Delay(50);
 8010bb0:	2032      	movs	r0, #50	@ 0x32
 8010bb2:	f7f2 fa1d 	bl	8002ff0 <HAL_Delay>
	  write_byte(0x17, 0x29);
 8010bb6:	2129      	movs	r1, #41	@ 0x29
 8010bb8:	2017      	movs	r0, #23
 8010bba:	f7ff ffb3 	bl	8010b24 <write_byte>
	  HAL_Delay(50);
 8010bbe:	2032      	movs	r0, #50	@ 0x32
 8010bc0:	f7f2 fa16 	bl	8002ff0 <HAL_Delay>
	  write_byte(CTRL2_G, GYRO_ODR_SET|GYRO_4000_DPS);
 8010bc4:	2181      	movs	r1, #129	@ 0x81
 8010bc6:	2011      	movs	r0, #17
 8010bc8:	f7ff ffac 	bl	8010b24 <write_byte>
	  HAL_Delay(50);
 8010bcc:	2032      	movs	r0, #50	@ 0x32
 8010bce:	f7f2 fa0f 	bl	8002ff0 <HAL_Delay>
	  write_byte(0x15,0x00);
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	2015      	movs	r0, #21
 8010bd6:	f7ff ffa5 	bl	8010b24 <write_byte>
	  HAL_Delay(50);
 8010bda:	2032      	movs	r0, #50	@ 0x32
 8010bdc:	f7f2 fa08 	bl	8002ff0 <HAL_Delay>

}
 8010be0:	bf00      	nop
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	42020400 	.word	0x42020400

08010be8 <IMU_read_DMA_Start>:


void IMU_read_DMA_Start(){
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
 8010bec:	2200      	movs	r2, #0
 8010bee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010bf2:	4805      	ldr	r0, [pc, #20]	@ (8010c08 <IMU_read_DMA_Start+0x20>)
 8010bf4:	f7f6 fe10 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi2, &imu_address, imu_value, sizeof(imu_value)/sizeof(uint8_t));
 8010bf8:	230d      	movs	r3, #13
 8010bfa:	4a04      	ldr	r2, [pc, #16]	@ (8010c0c <IMU_read_DMA_Start+0x24>)
 8010bfc:	4904      	ldr	r1, [pc, #16]	@ (8010c10 <IMU_read_DMA_Start+0x28>)
 8010bfe:	4805      	ldr	r0, [pc, #20]	@ (8010c14 <IMU_read_DMA_Start+0x2c>)
 8010c00:	f7fb fe12 	bl	800c828 <HAL_SPI_TransmitReceive_DMA>
}
 8010c04:	bf00      	nop
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	42020400 	.word	0x42020400
 8010c0c:	20002b10 	.word	0x20002b10
 8010c10:	20000009 	.word	0x20000009
 8010c14:	20000574 	.word	0x20000574

08010c18 <HAL_SPI_TxRxCpltCallback>:
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_RESET);
	HAL_SPI_DMAStop(&hspi2);
}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi){
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
	    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,GPIO_PIN_SET);
 8010c20:	2201      	movs	r2, #1
 8010c22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010c26:	4827      	ldr	r0, [pc, #156]	@ (8010cc4 <HAL_SPI_TxRxCpltCallback+0xac>)
 8010c28:	f7f6 fdf6 	bl	8007818 <HAL_GPIO_WritePin>

		gyro_data[x_axis] = (((int16_t)imu_value[2]<<8 ) | ( (int16_t)imu_value[1]&0x00ff ) );
 8010c2c:	4b26      	ldr	r3, [pc, #152]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c2e:	789b      	ldrb	r3, [r3, #2]
 8010c30:	b21b      	sxth	r3, r3
 8010c32:	021b      	lsls	r3, r3, #8
 8010c34:	b21a      	sxth	r2, r3
 8010c36:	4b24      	ldr	r3, [pc, #144]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c38:	785b      	ldrb	r3, [r3, #1]
 8010c3a:	b21b      	sxth	r3, r3
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	b21a      	sxth	r2, r3
 8010c40:	4b22      	ldr	r3, [pc, #136]	@ (8010ccc <HAL_SPI_TxRxCpltCallback+0xb4>)
 8010c42:	801a      	strh	r2, [r3, #0]
		gyro_data[y_axis] = (((int16_t)imu_value[4]<<8 ) | ( (int16_t)imu_value[3]&0x00ff ) );
 8010c44:	4b20      	ldr	r3, [pc, #128]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c46:	791b      	ldrb	r3, [r3, #4]
 8010c48:	b21b      	sxth	r3, r3
 8010c4a:	021b      	lsls	r3, r3, #8
 8010c4c:	b21a      	sxth	r2, r3
 8010c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c50:	78db      	ldrb	r3, [r3, #3]
 8010c52:	b21b      	sxth	r3, r3
 8010c54:	4313      	orrs	r3, r2
 8010c56:	b21a      	sxth	r2, r3
 8010c58:	4b1c      	ldr	r3, [pc, #112]	@ (8010ccc <HAL_SPI_TxRxCpltCallback+0xb4>)
 8010c5a:	805a      	strh	r2, [r3, #2]
		gyro_data[z_axis] = (((int16_t)imu_value[6]<<8 ) | ( (int16_t)imu_value[5]&0x00ff ) );
 8010c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c5e:	799b      	ldrb	r3, [r3, #6]
 8010c60:	b21b      	sxth	r3, r3
 8010c62:	021b      	lsls	r3, r3, #8
 8010c64:	b21a      	sxth	r2, r3
 8010c66:	4b18      	ldr	r3, [pc, #96]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c68:	795b      	ldrb	r3, [r3, #5]
 8010c6a:	b21b      	sxth	r3, r3
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	b21a      	sxth	r2, r3
 8010c70:	4b16      	ldr	r3, [pc, #88]	@ (8010ccc <HAL_SPI_TxRxCpltCallback+0xb4>)
 8010c72:	809a      	strh	r2, [r3, #4]
		accel_data[x_axis] = (((int16_t)imu_value[8]<<8 ) | ( (int16_t)imu_value[7]&0x00ff ) );
 8010c74:	4b14      	ldr	r3, [pc, #80]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c76:	7a1b      	ldrb	r3, [r3, #8]
 8010c78:	b21b      	sxth	r3, r3
 8010c7a:	021b      	lsls	r3, r3, #8
 8010c7c:	b21a      	sxth	r2, r3
 8010c7e:	4b12      	ldr	r3, [pc, #72]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c80:	79db      	ldrb	r3, [r3, #7]
 8010c82:	b21b      	sxth	r3, r3
 8010c84:	4313      	orrs	r3, r2
 8010c86:	b21a      	sxth	r2, r3
 8010c88:	4b11      	ldr	r3, [pc, #68]	@ (8010cd0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8010c8a:	801a      	strh	r2, [r3, #0]
		accel_data[y_axis] = (((int16_t)imu_value[10]<<8 ) | ( (int16_t)imu_value[9]&0x00ff ) );
 8010c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c8e:	7a9b      	ldrb	r3, [r3, #10]
 8010c90:	b21b      	sxth	r3, r3
 8010c92:	021b      	lsls	r3, r3, #8
 8010c94:	b21a      	sxth	r2, r3
 8010c96:	4b0c      	ldr	r3, [pc, #48]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010c98:	7a5b      	ldrb	r3, [r3, #9]
 8010c9a:	b21b      	sxth	r3, r3
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	b21a      	sxth	r2, r3
 8010ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8010cd0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8010ca2:	805a      	strh	r2, [r3, #2]
		accel_data[z_axis] = (((int16_t)imu_value[12]<<8 ) | ( (int16_t)imu_value[11]&0x00ff ) );
 8010ca4:	4b08      	ldr	r3, [pc, #32]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010ca6:	7b1b      	ldrb	r3, [r3, #12]
 8010ca8:	b21b      	sxth	r3, r3
 8010caa:	021b      	lsls	r3, r3, #8
 8010cac:	b21a      	sxth	r2, r3
 8010cae:	4b06      	ldr	r3, [pc, #24]	@ (8010cc8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8010cb0:	7adb      	ldrb	r3, [r3, #11]
 8010cb2:	b21b      	sxth	r3, r3
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	b21a      	sxth	r2, r3
 8010cb8:	4b05      	ldr	r3, [pc, #20]	@ (8010cd0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8010cba:	809a      	strh	r2, [r3, #4]

		//IMU_read_DMA_Start();
}
 8010cbc:	bf00      	nop
 8010cbe:	3708      	adds	r7, #8
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	42020400 	.word	0x42020400
 8010cc8:	20002b10 	.word	0x20002b10
 8010ccc:	20002b28 	.word	0x20002b28
 8010cd0:	20002b20 	.word	0x20002b20

08010cd4 <read_gyro_z_axis>:

float read_gyro_y_axis(){
	return  (float)gyro_data[y_axis]*(1.0f) *140.0f/1000.0f;
}

float read_gyro_z_axis(){
 8010cd4:	b480      	push	{r7}
 8010cd6:	af00      	add	r7, sp, #0
	return  (float)gyro_data[z_axis]*(1.0f) *140.0f/1000.0f;
 8010cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8010d08 <read_gyro_z_axis+0x34>)
 8010cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010cde:	ee07 3a90 	vmov	s15, r3
 8010ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ce6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8010d0c <read_gyro_z_axis+0x38>
 8010cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010cee:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8010d10 <read_gyro_z_axis+0x3c>
 8010cf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010cf6:	eef0 7a66 	vmov.f32	s15, s13
}
 8010cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	20002b28 	.word	0x20002b28
 8010d0c:	430c0000 	.word	0x430c0000
 8010d10:	447a0000 	.word	0x447a0000

08010d14 <Indicate_LED>:
#include "gpio.h"
#include "interface.h"


void Indicate_LED(uint8_t led_num)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, (led_num >> 5)&0x01);
 8010d1e:	79fb      	ldrb	r3, [r7, #7]
 8010d20:	095b      	lsrs	r3, r3, #5
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	f003 0301 	and.w	r3, r3, #1
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010d30:	481f      	ldr	r0, [pc, #124]	@ (8010db0 <Indicate_LED+0x9c>)
 8010d32:	f7f6 fd71 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, (led_num >> 0)&0x01);
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	f003 0301 	and.w	r3, r3, #1
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	461a      	mov	r2, r3
 8010d40:	2102      	movs	r1, #2
 8010d42:	481c      	ldr	r0, [pc, #112]	@ (8010db4 <Indicate_LED+0xa0>)
 8010d44:	f7f6 fd68 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, (led_num >> 1)&0x01);
 8010d48:	79fb      	ldrb	r3, [r7, #7]
 8010d4a:	085b      	lsrs	r3, r3, #1
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	f003 0301 	and.w	r3, r3, #1
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	461a      	mov	r2, r3
 8010d56:	2101      	movs	r1, #1
 8010d58:	4816      	ldr	r0, [pc, #88]	@ (8010db4 <Indicate_LED+0xa0>)
 8010d5a:	f7f6 fd5d 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, (led_num >> 2)&0x01);
 8010d5e:	79fb      	ldrb	r3, [r7, #7]
 8010d60:	089b      	lsrs	r3, r3, #2
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	f003 0301 	and.w	r3, r3, #1
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010d70:	4811      	ldr	r0, [pc, #68]	@ (8010db8 <Indicate_LED+0xa4>)
 8010d72:	f7f6 fd51 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, (led_num >> 3)&0x01);
 8010d76:	79fb      	ldrb	r3, [r7, #7]
 8010d78:	08db      	lsrs	r3, r3, #3
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	f003 0301 	and.w	r3, r3, #1
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	461a      	mov	r2, r3
 8010d84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010d88:	480b      	ldr	r0, [pc, #44]	@ (8010db8 <Indicate_LED+0xa4>)
 8010d8a:	f7f6 fd45 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, (led_num >> 4)&0x01);
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
 8010d90:	091b      	lsrs	r3, r3, #4
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	f003 0301 	and.w	r3, r3, #1
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010da0:	4805      	ldr	r0, [pc, #20]	@ (8010db8 <Indicate_LED+0xa4>)
 8010da2:	f7f6 fd39 	bl	8007818 <HAL_GPIO_WritePin>
}
 8010da6:	bf00      	nop
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	42020400 	.word	0x42020400
 8010db4:	42021c00 	.word	0x42021c00
 8010db8:	42020800 	.word	0x42020800

08010dbc <Sensor_TurnOffLED>:
										 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

static uint16_t		adc_value[NUM_ADC];		// AD変換値

void Sensor_TurnOffLED()
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	71fb      	strb	r3, [r7, #7]
 8010dc6:	e012      	b.n	8010dee <Sensor_TurnOffLED+0x32>
		led_on_pattern[i] = 0x00000000;
 8010dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8010e04 <Sensor_TurnOffLED+0x48>)
 8010dce:	2100      	movs	r1, #0
 8010dd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		led_off_pattern[i] = (uint32_t)SENSOR_ALL_PATTERN << 16;
 8010dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8010e08 <Sensor_TurnOffLED+0x4c>)
 8010dda:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 8010dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 8010de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010de6:	b2db      	uxtb	r3, r3
 8010de8:	3301      	adds	r3, #1
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	71fb      	strb	r3, [r7, #7]
 8010dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010df2:	2b09      	cmp	r3, #9
 8010df4:	dde8      	ble.n	8010dc8 <Sensor_TurnOffLED+0xc>
	}
}
 8010df6:	bf00      	nop
 8010df8:	bf00      	nop
 8010dfa:	370c      	adds	r7, #12
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr
 8010e04:	20002b30 	.word	0x20002b30
 8010e08:	20002b58 	.word	0x20002b58

08010e0c <Sensor_TurnOnLED>:

void Sensor_TurnOnLED()
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
	Sensor_TurnOffLED();
 8010e10:	f7ff ffd4 	bl	8010dbc <Sensor_TurnOffLED>
	led_on_pattern[LED_FR_ON] = IR1_Pin;
 8010e14:	4b06      	ldr	r3, [pc, #24]	@ (8010e30 <Sensor_TurnOnLED+0x24>)
 8010e16:	2201      	movs	r2, #1
 8010e18:	601a      	str	r2, [r3, #0]
	led_on_pattern[LED_SR_ON] = IR2_Pin;
 8010e1a:	4b05      	ldr	r3, [pc, #20]	@ (8010e30 <Sensor_TurnOnLED+0x24>)
 8010e1c:	2202      	movs	r2, #2
 8010e1e:	609a      	str	r2, [r3, #8]
	led_on_pattern[LED_SL_ON] = IR3_Pin;
 8010e20:	4b03      	ldr	r3, [pc, #12]	@ (8010e30 <Sensor_TurnOnLED+0x24>)
 8010e22:	2204      	movs	r2, #4
 8010e24:	611a      	str	r2, [r3, #16]
	led_on_pattern[LED_FL_ON] = IR4_Pin;
 8010e26:	4b02      	ldr	r3, [pc, #8]	@ (8010e30 <Sensor_TurnOnLED+0x24>)
 8010e28:	2208      	movs	r2, #8
 8010e2a:	619a      	str	r2, [r3, #24]
}
 8010e2c:	bf00      	nop
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	20002b30 	.word	0x20002b30

08010e34 <Sensor_Initialize>:

void Sensor_Initialize()
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b0b6      	sub	sp, #216	@ 0xd8
 8010e38:	af00      	add	r7, sp, #0

	  Sensor_TurnOnLED();
 8010e3a:	f7ff ffe7 	bl	8010e0c <Sensor_TurnOnLED>
	  DMA_NodeConfTypeDef nodeConf1,nodeConf2;
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf1, &Node_GPDMA1_Channel0);
 8010e3e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010e42:	493e      	ldr	r1, [pc, #248]	@ (8010f3c <Sensor_Initialize+0x108>)
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7f5 fc43 	bl	80066d0 <HAL_DMAEx_List_GetNodeConfig>
	  HAL_DMAEx_List_GetNodeConfig(&nodeConf2, &Node_GPDMA1_Channel1);
 8010e4a:	463b      	mov	r3, r7
 8010e4c:	493c      	ldr	r1, [pc, #240]	@ (8010f40 <Sensor_Initialize+0x10c>)
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f5 fc3e 	bl	80066d0 <HAL_DMAEx_List_GetNodeConfig>
	  // 書き換えたい部分だけ変更
	  nodeConf1.SrcAddress = (uint32_t)led_on_pattern;
 8010e54:	4b3b      	ldr	r3, [pc, #236]	@ (8010f44 <Sensor_Initialize+0x110>)
 8010e56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  nodeConf1.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 8010e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8010f48 <Sensor_Initialize+0x114>)
 8010e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	  nodeConf1.DataSize   = 4*NUM_ADC;
 8010e60:	2328      	movs	r3, #40	@ 0x28
 8010e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	  nodeConf2.SrcAddress = (uint32_t)led_off_pattern;
 8010e66:	4b39      	ldr	r3, [pc, #228]	@ (8010f4c <Sensor_Initialize+0x118>)
 8010e68:	663b      	str	r3, [r7, #96]	@ 0x60
	  nodeConf2.DstAddress = (uint32_t)(&(GPIOA->BSRR));
 8010e6a:	4b37      	ldr	r3, [pc, #220]	@ (8010f48 <Sensor_Initialize+0x114>)
 8010e6c:	667b      	str	r3, [r7, #100]	@ 0x64
	  nodeConf2.DataSize   = 4*NUM_ADC;
 8010e6e:	2328      	movs	r3, #40	@ 0x28
 8010e70:	66bb      	str	r3, [r7, #104]	@ 0x68

	  // ノードを再構築（再設定）
	  if (HAL_DMAEx_List_BuildNode(&nodeConf1, &Node_GPDMA1_Channel0) != HAL_OK)
 8010e72:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010e76:	4931      	ldr	r1, [pc, #196]	@ (8010f3c <Sensor_Initialize+0x108>)
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7f5 fc13 	bl	80066a4 <HAL_DMAEx_List_BuildNode>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d001      	beq.n	8010e88 <Sensor_Initialize+0x54>
	      Error_Handler();
 8010e84:	f7f0 ffba 	bl	8001dfc <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8010e88:	4a2c      	ldr	r2, [pc, #176]	@ (8010f3c <Sensor_Initialize+0x108>)
 8010e8a:	2100      	movs	r1, #0
 8010e8c:	4830      	ldr	r0, [pc, #192]	@ (8010f50 <Sensor_Initialize+0x11c>)
 8010e8e:	f7f5 fc35 	bl	80066fc <HAL_DMAEx_List_InsertNode>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <Sensor_Initialize+0x68>
	      Error_Handler();
 8010e98:	f7f0 ffb0 	bl	8001dfc <Error_Handler>
	  //Circularモードに
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8010e9c:	482c      	ldr	r0, [pc, #176]	@ (8010f50 <Sensor_Initialize+0x11c>)
 8010e9e:	f7f5 fcf6 	bl	800688e <HAL_DMAEx_List_SetCircularMode>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d001      	beq.n	8010eac <Sensor_Initialize+0x78>
	      Error_Handler();
 8010ea8:	f7f0 ffa8 	bl	8001dfc <Error_Handler>


	  if (HAL_DMAEx_List_BuildNode(&nodeConf2, &Node_GPDMA1_Channel1) != HAL_OK)
 8010eac:	463b      	mov	r3, r7
 8010eae:	4924      	ldr	r1, [pc, #144]	@ (8010f40 <Sensor_Initialize+0x10c>)
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7f5 fbf7 	bl	80066a4 <HAL_DMAEx_List_BuildNode>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d001      	beq.n	8010ec0 <Sensor_Initialize+0x8c>
	      Error_Handler();
 8010ebc:	f7f0 ff9e 	bl	8001dfc <Error_Handler>
	  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8010ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8010f40 <Sensor_Initialize+0x10c>)
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	4823      	ldr	r0, [pc, #140]	@ (8010f54 <Sensor_Initialize+0x120>)
 8010ec6:	f7f5 fc19 	bl	80066fc <HAL_DMAEx_List_InsertNode>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d001      	beq.n	8010ed4 <Sensor_Initialize+0xa0>
	        Error_Handler();
 8010ed0:	f7f0 ff94 	bl	8001dfc <Error_Handler>
	  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8010ed4:	481f      	ldr	r0, [pc, #124]	@ (8010f54 <Sensor_Initialize+0x120>)
 8010ed6:	f7f5 fcda 	bl	800688e <HAL_DMAEx_List_SetCircularMode>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <Sensor_Initialize+0xb0>
	        Error_Handler();
 8010ee0:	f7f0 ff8c 	bl	8001dfc <Error_Handler>

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_value, NUM_ADC);
 8010ee4:	220a      	movs	r2, #10
 8010ee6:	491c      	ldr	r1, [pc, #112]	@ (8010f58 <Sensor_Initialize+0x124>)
 8010ee8:	481c      	ldr	r0, [pc, #112]	@ (8010f5c <Sensor_Initialize+0x128>)
 8010eea:	f7f2 fec9 	bl	8003c80 <HAL_ADC_Start_DMA>

	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel0) != HAL_OK)
 8010eee:	481c      	ldr	r0, [pc, #112]	@ (8010f60 <Sensor_Initialize+0x12c>)
 8010ef0:	f7f5 fb44 	bl	800657c <HAL_DMAEx_List_Start_IT>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <Sensor_Initialize+0xca>
	  {
		Error_Handler();
 8010efa:	f7f0 ff7f 	bl	8001dfc <Error_Handler>
	  }

	  if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel1) != HAL_OK)
 8010efe:	4819      	ldr	r0, [pc, #100]	@ (8010f64 <Sensor_Initialize+0x130>)
 8010f00:	f7f5 fb3c 	bl	800657c <HAL_DMAEx_List_Start_IT>
 8010f04:	4603      	mov	r3, r0
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d001      	beq.n	8010f0e <Sensor_Initialize+0xda>
	  {
	  	Error_Handler();
 8010f0a:	f7f0 ff77 	bl	8001dfc <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_1) != HAL_OK)
 8010f0e:	2100      	movs	r1, #0
 8010f10:	4815      	ldr	r0, [pc, #84]	@ (8010f68 <Sensor_Initialize+0x134>)
 8010f12:	f7f6 fdc9 	bl	8007aa8 <HAL_LPTIM_IC_Start>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d001      	beq.n	8010f20 <Sensor_Initialize+0xec>
	  {
	      Error_Handler();
 8010f1c:	f7f0 ff6e 	bl	8001dfc <Error_Handler>
	  }

	  if (HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_2) != HAL_OK)
 8010f20:	2101      	movs	r1, #1
 8010f22:	4811      	ldr	r0, [pc, #68]	@ (8010f68 <Sensor_Initialize+0x134>)
 8010f24:	f7f6 fdc0 	bl	8007aa8 <HAL_LPTIM_IC_Start>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d001      	beq.n	8010f32 <Sensor_Initialize+0xfe>
	  {
	      Error_Handler();
 8010f2e:	f7f0 ff65 	bl	8001dfc <Error_Handler>
	  }

}
 8010f32:	bf00      	nop
 8010f34:	37d8      	adds	r7, #216	@ 0xd8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	20000470 	.word	0x20000470
 8010f40:	200003bc 	.word	0x200003bc
 8010f44:	20002b30 	.word	0x20002b30
 8010f48:	42020018 	.word	0x42020018
 8010f4c:	20002b58 	.word	0x20002b58
 8010f50:	20000494 	.word	0x20000494
 8010f54:	200003e0 	.word	0x200003e0
 8010f58:	20002b80 	.word	0x20002b80
 8010f5c:	200001f0 	.word	0x200001f0
 8010f60:	200004ac 	.word	0x200004ac
 8010f64:	200003f8 	.word	0x200003f8
 8010f68:	20000524 	.word	0x20000524

08010f6c <ADC_get_value>:
	HAL_ADC_Stop_DMA(&hadc1);
}


int16_t ADC_get_value(int num)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
	return adc_value[num];
 8010f74:	4a05      	ldr	r2, [pc, #20]	@ (8010f8c <ADC_get_value+0x20>)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f7c:	b21b      	sxth	r3, r3
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	370c      	adds	r7, #12
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	20002b80 	.word	0x20002b80

08010f90 <Motor_Initialize>:
#define MOT_SET_COMPARE_R_REVERSE(x)	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, x)
#define MOT_SET_COMPARE_L_FORWARD(x)	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, x)
#define MOT_SET_COMPARE_L_REVERSE(x)	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, x)

void Motor_Initialize()
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8010f94:	2100      	movs	r1, #0
 8010f96:	4812      	ldr	r0, [pc, #72]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010f98:	f7fc fb30 	bl	800d5fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8010f9c:	2104      	movs	r1, #4
 8010f9e:	4810      	ldr	r0, [pc, #64]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010fa0:	f7fc fb2c 	bl	800d5fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8010fa4:	2108      	movs	r1, #8
 8010fa6:	480e      	ldr	r0, [pc, #56]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010fa8:	f7fc fb28 	bl	800d5fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8010fac:	210c      	movs	r1, #12
 8010fae:	480c      	ldr	r0, [pc, #48]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010fb0:	f7fc fb24 	bl	800d5fc <HAL_TIM_PWM_Start>
	MOT_SET_COMPARE_L_FORWARD( 0 );
 8010fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	639a      	str	r2, [r3, #56]	@ 0x38
	MOT_SET_COMPARE_L_REVERSE( 0 );
 8010fbc:	4b08      	ldr	r3, [pc, #32]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	635a      	str	r2, [r3, #52]	@ 0x34
	MOT_SET_COMPARE_R_FORWARD( 0 );
 8010fc4:	4b06      	ldr	r3, [pc, #24]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	641a      	str	r2, [r3, #64]	@ 0x40
	MOT_SET_COMPARE_R_REVERSE( 0 );
 8010fcc:	4b04      	ldr	r3, [pc, #16]	@ (8010fe0 <Motor_Initialize+0x50>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(200);
 8010fd4:	20c8      	movs	r0, #200	@ 0xc8
 8010fd6:	f7f2 f80b 	bl	8002ff0 <HAL_Delay>
}
 8010fda:	bf00      	nop
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	200007dc 	.word	0x200007dc

08010fe4 <FAN_Motor_Initialize>:
	}
}


void FAN_Motor_Initialize()
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fn1_GPIO_Port, fn1_Pin, 1);
 8010fe8:	2201      	movs	r2, #1
 8010fea:	2104      	movs	r1, #4
 8010fec:	4805      	ldr	r0, [pc, #20]	@ (8011004 <FAN_Motor_Initialize+0x20>)
 8010fee:	f7f6 fc13 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	4804      	ldr	r0, [pc, #16]	@ (8011008 <FAN_Motor_Initialize+0x24>)
 8010ff6:	f7fc fb01 	bl	800d5fc <HAL_TIM_PWM_Start>
	HAL_Delay(200);
 8010ffa:	20c8      	movs	r0, #200	@ 0xc8
 8010ffc:	f7f1 fff8 	bl	8002ff0 <HAL_Delay>
}
 8011000:	bf00      	nop
 8011002:	bd80      	pop	{r7, pc}
 8011004:	42020400 	.word	0x42020400
 8011008:	200006f8 	.word	0x200006f8
 801100c:	00000000 	.word	0x00000000

08011010 <nan>:
 8011010:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011018 <nan+0x8>
 8011014:	4770      	bx	lr
 8011016:	bf00      	nop
 8011018:	00000000 	.word	0x00000000
 801101c:	7ff80000 	.word	0x7ff80000

08011020 <__cvt>:
 8011020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011024:	ec57 6b10 	vmov	r6, r7, d0
 8011028:	2f00      	cmp	r7, #0
 801102a:	460c      	mov	r4, r1
 801102c:	4619      	mov	r1, r3
 801102e:	463b      	mov	r3, r7
 8011030:	bfb4      	ite	lt
 8011032:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011036:	2300      	movge	r3, #0
 8011038:	4691      	mov	r9, r2
 801103a:	bfbf      	itttt	lt
 801103c:	4632      	movlt	r2, r6
 801103e:	461f      	movlt	r7, r3
 8011040:	232d      	movlt	r3, #45	@ 0x2d
 8011042:	4616      	movlt	r6, r2
 8011044:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011048:	700b      	strb	r3, [r1, #0]
 801104a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801104c:	f023 0820 	bic.w	r8, r3, #32
 8011050:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011054:	d005      	beq.n	8011062 <__cvt+0x42>
 8011056:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801105a:	d100      	bne.n	801105e <__cvt+0x3e>
 801105c:	3401      	adds	r4, #1
 801105e:	2102      	movs	r1, #2
 8011060:	e000      	b.n	8011064 <__cvt+0x44>
 8011062:	2103      	movs	r1, #3
 8011064:	ab03      	add	r3, sp, #12
 8011066:	4622      	mov	r2, r4
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	ab02      	add	r3, sp, #8
 801106c:	ec47 6b10 	vmov	d0, r6, r7
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	4653      	mov	r3, sl
 8011074:	f001 fa50 	bl	8012518 <_dtoa_r>
 8011078:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801107c:	4605      	mov	r5, r0
 801107e:	d119      	bne.n	80110b4 <__cvt+0x94>
 8011080:	f019 0f01 	tst.w	r9, #1
 8011084:	d00e      	beq.n	80110a4 <__cvt+0x84>
 8011086:	eb00 0904 	add.w	r9, r0, r4
 801108a:	2200      	movs	r2, #0
 801108c:	2300      	movs	r3, #0
 801108e:	4630      	mov	r0, r6
 8011090:	4639      	mov	r1, r7
 8011092:	f7ef fd1d 	bl	8000ad0 <__aeabi_dcmpeq>
 8011096:	b108      	cbz	r0, 801109c <__cvt+0x7c>
 8011098:	f8cd 900c 	str.w	r9, [sp, #12]
 801109c:	2230      	movs	r2, #48	@ 0x30
 801109e:	9b03      	ldr	r3, [sp, #12]
 80110a0:	454b      	cmp	r3, r9
 80110a2:	d31e      	bcc.n	80110e2 <__cvt+0xc2>
 80110a4:	9b03      	ldr	r3, [sp, #12]
 80110a6:	4628      	mov	r0, r5
 80110a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110aa:	1b5b      	subs	r3, r3, r5
 80110ac:	6013      	str	r3, [r2, #0]
 80110ae:	b004      	add	sp, #16
 80110b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80110b8:	eb00 0904 	add.w	r9, r0, r4
 80110bc:	d1e5      	bne.n	801108a <__cvt+0x6a>
 80110be:	7803      	ldrb	r3, [r0, #0]
 80110c0:	2b30      	cmp	r3, #48	@ 0x30
 80110c2:	d10a      	bne.n	80110da <__cvt+0xba>
 80110c4:	2200      	movs	r2, #0
 80110c6:	2300      	movs	r3, #0
 80110c8:	4630      	mov	r0, r6
 80110ca:	4639      	mov	r1, r7
 80110cc:	f7ef fd00 	bl	8000ad0 <__aeabi_dcmpeq>
 80110d0:	b918      	cbnz	r0, 80110da <__cvt+0xba>
 80110d2:	f1c4 0401 	rsb	r4, r4, #1
 80110d6:	f8ca 4000 	str.w	r4, [sl]
 80110da:	f8da 3000 	ldr.w	r3, [sl]
 80110de:	4499      	add	r9, r3
 80110e0:	e7d3      	b.n	801108a <__cvt+0x6a>
 80110e2:	1c59      	adds	r1, r3, #1
 80110e4:	9103      	str	r1, [sp, #12]
 80110e6:	701a      	strb	r2, [r3, #0]
 80110e8:	e7d9      	b.n	801109e <__cvt+0x7e>

080110ea <__exponent>:
 80110ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110ec:	2900      	cmp	r1, #0
 80110ee:	7002      	strb	r2, [r0, #0]
 80110f0:	bfba      	itte	lt
 80110f2:	4249      	neglt	r1, r1
 80110f4:	232d      	movlt	r3, #45	@ 0x2d
 80110f6:	232b      	movge	r3, #43	@ 0x2b
 80110f8:	2909      	cmp	r1, #9
 80110fa:	7043      	strb	r3, [r0, #1]
 80110fc:	dd28      	ble.n	8011150 <__exponent+0x66>
 80110fe:	f10d 0307 	add.w	r3, sp, #7
 8011102:	270a      	movs	r7, #10
 8011104:	461d      	mov	r5, r3
 8011106:	461a      	mov	r2, r3
 8011108:	3b01      	subs	r3, #1
 801110a:	fbb1 f6f7 	udiv	r6, r1, r7
 801110e:	fb07 1416 	mls	r4, r7, r6, r1
 8011112:	3430      	adds	r4, #48	@ 0x30
 8011114:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011118:	460c      	mov	r4, r1
 801111a:	4631      	mov	r1, r6
 801111c:	2c63      	cmp	r4, #99	@ 0x63
 801111e:	dcf2      	bgt.n	8011106 <__exponent+0x1c>
 8011120:	3130      	adds	r1, #48	@ 0x30
 8011122:	1e94      	subs	r4, r2, #2
 8011124:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011128:	1c41      	adds	r1, r0, #1
 801112a:	4623      	mov	r3, r4
 801112c:	42ab      	cmp	r3, r5
 801112e:	d30a      	bcc.n	8011146 <__exponent+0x5c>
 8011130:	f10d 0309 	add.w	r3, sp, #9
 8011134:	1a9b      	subs	r3, r3, r2
 8011136:	42ac      	cmp	r4, r5
 8011138:	bf88      	it	hi
 801113a:	2300      	movhi	r3, #0
 801113c:	3302      	adds	r3, #2
 801113e:	4403      	add	r3, r0
 8011140:	1a18      	subs	r0, r3, r0
 8011142:	b003      	add	sp, #12
 8011144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011146:	f813 6b01 	ldrb.w	r6, [r3], #1
 801114a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801114e:	e7ed      	b.n	801112c <__exponent+0x42>
 8011150:	2330      	movs	r3, #48	@ 0x30
 8011152:	3130      	adds	r1, #48	@ 0x30
 8011154:	7083      	strb	r3, [r0, #2]
 8011156:	1d03      	adds	r3, r0, #4
 8011158:	70c1      	strb	r1, [r0, #3]
 801115a:	e7f1      	b.n	8011140 <__exponent+0x56>

0801115c <_printf_float>:
 801115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011160:	b08d      	sub	sp, #52	@ 0x34
 8011162:	460c      	mov	r4, r1
 8011164:	4616      	mov	r6, r2
 8011166:	461f      	mov	r7, r3
 8011168:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801116c:	4605      	mov	r5, r0
 801116e:	f001 f8ad 	bl	80122cc <_localeconv_r>
 8011172:	6803      	ldr	r3, [r0, #0]
 8011174:	4618      	mov	r0, r3
 8011176:	9304      	str	r3, [sp, #16]
 8011178:	f7ef f87e 	bl	8000278 <strlen>
 801117c:	2300      	movs	r3, #0
 801117e:	9005      	str	r0, [sp, #20]
 8011180:	930a      	str	r3, [sp, #40]	@ 0x28
 8011182:	f8d8 3000 	ldr.w	r3, [r8]
 8011186:	f894 a018 	ldrb.w	sl, [r4, #24]
 801118a:	3307      	adds	r3, #7
 801118c:	f8d4 b000 	ldr.w	fp, [r4]
 8011190:	f023 0307 	bic.w	r3, r3, #7
 8011194:	f103 0208 	add.w	r2, r3, #8
 8011198:	f8c8 2000 	str.w	r2, [r8]
 801119c:	f04f 32ff 	mov.w	r2, #4294967295
 80111a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80111a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80111a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80111ac:	9307      	str	r3, [sp, #28]
 80111ae:	4b9d      	ldr	r3, [pc, #628]	@ (8011424 <_printf_float+0x2c8>)
 80111b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80111b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80111b8:	f7ef fcbc 	bl	8000b34 <__aeabi_dcmpun>
 80111bc:	bb70      	cbnz	r0, 801121c <_printf_float+0xc0>
 80111be:	f04f 32ff 	mov.w	r2, #4294967295
 80111c2:	4b98      	ldr	r3, [pc, #608]	@ (8011424 <_printf_float+0x2c8>)
 80111c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80111c8:	f7ef fc96 	bl	8000af8 <__aeabi_dcmple>
 80111cc:	bb30      	cbnz	r0, 801121c <_printf_float+0xc0>
 80111ce:	2200      	movs	r2, #0
 80111d0:	2300      	movs	r3, #0
 80111d2:	4640      	mov	r0, r8
 80111d4:	4649      	mov	r1, r9
 80111d6:	f7ef fc85 	bl	8000ae4 <__aeabi_dcmplt>
 80111da:	b110      	cbz	r0, 80111e2 <_printf_float+0x86>
 80111dc:	232d      	movs	r3, #45	@ 0x2d
 80111de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111e2:	4a91      	ldr	r2, [pc, #580]	@ (8011428 <_printf_float+0x2cc>)
 80111e4:	4b91      	ldr	r3, [pc, #580]	@ (801142c <_printf_float+0x2d0>)
 80111e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80111ea:	bf8c      	ite	hi
 80111ec:	4690      	movhi	r8, r2
 80111ee:	4698      	movls	r8, r3
 80111f0:	2303      	movs	r3, #3
 80111f2:	f04f 0900 	mov.w	r9, #0
 80111f6:	6123      	str	r3, [r4, #16]
 80111f8:	f02b 0304 	bic.w	r3, fp, #4
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	4633      	mov	r3, r6
 8011200:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011202:	4621      	mov	r1, r4
 8011204:	4628      	mov	r0, r5
 8011206:	9700      	str	r7, [sp, #0]
 8011208:	f000 f9d2 	bl	80115b0 <_printf_common>
 801120c:	3001      	adds	r0, #1
 801120e:	f040 808d 	bne.w	801132c <_printf_float+0x1d0>
 8011212:	f04f 30ff 	mov.w	r0, #4294967295
 8011216:	b00d      	add	sp, #52	@ 0x34
 8011218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801121c:	4642      	mov	r2, r8
 801121e:	464b      	mov	r3, r9
 8011220:	4640      	mov	r0, r8
 8011222:	4649      	mov	r1, r9
 8011224:	f7ef fc86 	bl	8000b34 <__aeabi_dcmpun>
 8011228:	b140      	cbz	r0, 801123c <_printf_float+0xe0>
 801122a:	464b      	mov	r3, r9
 801122c:	4a80      	ldr	r2, [pc, #512]	@ (8011430 <_printf_float+0x2d4>)
 801122e:	2b00      	cmp	r3, #0
 8011230:	bfbc      	itt	lt
 8011232:	232d      	movlt	r3, #45	@ 0x2d
 8011234:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011238:	4b7e      	ldr	r3, [pc, #504]	@ (8011434 <_printf_float+0x2d8>)
 801123a:	e7d4      	b.n	80111e6 <_printf_float+0x8a>
 801123c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011240:	6863      	ldr	r3, [r4, #4]
 8011242:	9206      	str	r2, [sp, #24]
 8011244:	1c5a      	adds	r2, r3, #1
 8011246:	d13b      	bne.n	80112c0 <_printf_float+0x164>
 8011248:	2306      	movs	r3, #6
 801124a:	6063      	str	r3, [r4, #4]
 801124c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011250:	2300      	movs	r3, #0
 8011252:	4628      	mov	r0, r5
 8011254:	6022      	str	r2, [r4, #0]
 8011256:	9303      	str	r3, [sp, #12]
 8011258:	ab0a      	add	r3, sp, #40	@ 0x28
 801125a:	e9cd a301 	strd	sl, r3, [sp, #4]
 801125e:	ab09      	add	r3, sp, #36	@ 0x24
 8011260:	ec49 8b10 	vmov	d0, r8, r9
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801126a:	6861      	ldr	r1, [r4, #4]
 801126c:	f7ff fed8 	bl	8011020 <__cvt>
 8011270:	9b06      	ldr	r3, [sp, #24]
 8011272:	4680      	mov	r8, r0
 8011274:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011276:	2b47      	cmp	r3, #71	@ 0x47
 8011278:	d129      	bne.n	80112ce <_printf_float+0x172>
 801127a:	1cc8      	adds	r0, r1, #3
 801127c:	db02      	blt.n	8011284 <_printf_float+0x128>
 801127e:	6863      	ldr	r3, [r4, #4]
 8011280:	4299      	cmp	r1, r3
 8011282:	dd41      	ble.n	8011308 <_printf_float+0x1ac>
 8011284:	f1aa 0a02 	sub.w	sl, sl, #2
 8011288:	fa5f fa8a 	uxtb.w	sl, sl
 801128c:	3901      	subs	r1, #1
 801128e:	4652      	mov	r2, sl
 8011290:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011294:	9109      	str	r1, [sp, #36]	@ 0x24
 8011296:	f7ff ff28 	bl	80110ea <__exponent>
 801129a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801129c:	4681      	mov	r9, r0
 801129e:	1813      	adds	r3, r2, r0
 80112a0:	2a01      	cmp	r2, #1
 80112a2:	6123      	str	r3, [r4, #16]
 80112a4:	dc02      	bgt.n	80112ac <_printf_float+0x150>
 80112a6:	6822      	ldr	r2, [r4, #0]
 80112a8:	07d2      	lsls	r2, r2, #31
 80112aa:	d501      	bpl.n	80112b0 <_printf_float+0x154>
 80112ac:	3301      	adds	r3, #1
 80112ae:	6123      	str	r3, [r4, #16]
 80112b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d0a2      	beq.n	80111fe <_printf_float+0xa2>
 80112b8:	232d      	movs	r3, #45	@ 0x2d
 80112ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112be:	e79e      	b.n	80111fe <_printf_float+0xa2>
 80112c0:	9a06      	ldr	r2, [sp, #24]
 80112c2:	2a47      	cmp	r2, #71	@ 0x47
 80112c4:	d1c2      	bne.n	801124c <_printf_float+0xf0>
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1c0      	bne.n	801124c <_printf_float+0xf0>
 80112ca:	2301      	movs	r3, #1
 80112cc:	e7bd      	b.n	801124a <_printf_float+0xee>
 80112ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80112d2:	d9db      	bls.n	801128c <_printf_float+0x130>
 80112d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80112d8:	d118      	bne.n	801130c <_printf_float+0x1b0>
 80112da:	2900      	cmp	r1, #0
 80112dc:	6863      	ldr	r3, [r4, #4]
 80112de:	dd0b      	ble.n	80112f8 <_printf_float+0x19c>
 80112e0:	6121      	str	r1, [r4, #16]
 80112e2:	b913      	cbnz	r3, 80112ea <_printf_float+0x18e>
 80112e4:	6822      	ldr	r2, [r4, #0]
 80112e6:	07d0      	lsls	r0, r2, #31
 80112e8:	d502      	bpl.n	80112f0 <_printf_float+0x194>
 80112ea:	3301      	adds	r3, #1
 80112ec:	440b      	add	r3, r1
 80112ee:	6123      	str	r3, [r4, #16]
 80112f0:	f04f 0900 	mov.w	r9, #0
 80112f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80112f6:	e7db      	b.n	80112b0 <_printf_float+0x154>
 80112f8:	b913      	cbnz	r3, 8011300 <_printf_float+0x1a4>
 80112fa:	6822      	ldr	r2, [r4, #0]
 80112fc:	07d2      	lsls	r2, r2, #31
 80112fe:	d501      	bpl.n	8011304 <_printf_float+0x1a8>
 8011300:	3302      	adds	r3, #2
 8011302:	e7f4      	b.n	80112ee <_printf_float+0x192>
 8011304:	2301      	movs	r3, #1
 8011306:	e7f2      	b.n	80112ee <_printf_float+0x192>
 8011308:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801130c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801130e:	4299      	cmp	r1, r3
 8011310:	db05      	blt.n	801131e <_printf_float+0x1c2>
 8011312:	6823      	ldr	r3, [r4, #0]
 8011314:	6121      	str	r1, [r4, #16]
 8011316:	07d8      	lsls	r0, r3, #31
 8011318:	d5ea      	bpl.n	80112f0 <_printf_float+0x194>
 801131a:	1c4b      	adds	r3, r1, #1
 801131c:	e7e7      	b.n	80112ee <_printf_float+0x192>
 801131e:	2900      	cmp	r1, #0
 8011320:	bfd4      	ite	le
 8011322:	f1c1 0202 	rsble	r2, r1, #2
 8011326:	2201      	movgt	r2, #1
 8011328:	4413      	add	r3, r2
 801132a:	e7e0      	b.n	80112ee <_printf_float+0x192>
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	055a      	lsls	r2, r3, #21
 8011330:	d407      	bmi.n	8011342 <_printf_float+0x1e6>
 8011332:	6923      	ldr	r3, [r4, #16]
 8011334:	4642      	mov	r2, r8
 8011336:	4631      	mov	r1, r6
 8011338:	4628      	mov	r0, r5
 801133a:	47b8      	blx	r7
 801133c:	3001      	adds	r0, #1
 801133e:	d12b      	bne.n	8011398 <_printf_float+0x23c>
 8011340:	e767      	b.n	8011212 <_printf_float+0xb6>
 8011342:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011346:	f240 80dd 	bls.w	8011504 <_printf_float+0x3a8>
 801134a:	2200      	movs	r2, #0
 801134c:	2300      	movs	r3, #0
 801134e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011352:	f7ef fbbd 	bl	8000ad0 <__aeabi_dcmpeq>
 8011356:	2800      	cmp	r0, #0
 8011358:	d033      	beq.n	80113c2 <_printf_float+0x266>
 801135a:	2301      	movs	r3, #1
 801135c:	4a36      	ldr	r2, [pc, #216]	@ (8011438 <_printf_float+0x2dc>)
 801135e:	4631      	mov	r1, r6
 8011360:	4628      	mov	r0, r5
 8011362:	47b8      	blx	r7
 8011364:	3001      	adds	r0, #1
 8011366:	f43f af54 	beq.w	8011212 <_printf_float+0xb6>
 801136a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801136e:	4543      	cmp	r3, r8
 8011370:	db02      	blt.n	8011378 <_printf_float+0x21c>
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	07d8      	lsls	r0, r3, #31
 8011376:	d50f      	bpl.n	8011398 <_printf_float+0x23c>
 8011378:	4631      	mov	r1, r6
 801137a:	4628      	mov	r0, r5
 801137c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011380:	47b8      	blx	r7
 8011382:	3001      	adds	r0, #1
 8011384:	f43f af45 	beq.w	8011212 <_printf_float+0xb6>
 8011388:	f04f 0900 	mov.w	r9, #0
 801138c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011390:	f104 0a1a 	add.w	sl, r4, #26
 8011394:	45c8      	cmp	r8, r9
 8011396:	dc09      	bgt.n	80113ac <_printf_float+0x250>
 8011398:	6823      	ldr	r3, [r4, #0]
 801139a:	079b      	lsls	r3, r3, #30
 801139c:	f100 8103 	bmi.w	80115a6 <_printf_float+0x44a>
 80113a0:	68e0      	ldr	r0, [r4, #12]
 80113a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113a4:	4298      	cmp	r0, r3
 80113a6:	bfb8      	it	lt
 80113a8:	4618      	movlt	r0, r3
 80113aa:	e734      	b.n	8011216 <_printf_float+0xba>
 80113ac:	2301      	movs	r3, #1
 80113ae:	4652      	mov	r2, sl
 80113b0:	4631      	mov	r1, r6
 80113b2:	4628      	mov	r0, r5
 80113b4:	47b8      	blx	r7
 80113b6:	3001      	adds	r0, #1
 80113b8:	f43f af2b 	beq.w	8011212 <_printf_float+0xb6>
 80113bc:	f109 0901 	add.w	r9, r9, #1
 80113c0:	e7e8      	b.n	8011394 <_printf_float+0x238>
 80113c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	dc39      	bgt.n	801143c <_printf_float+0x2e0>
 80113c8:	2301      	movs	r3, #1
 80113ca:	4a1b      	ldr	r2, [pc, #108]	@ (8011438 <_printf_float+0x2dc>)
 80113cc:	4631      	mov	r1, r6
 80113ce:	4628      	mov	r0, r5
 80113d0:	47b8      	blx	r7
 80113d2:	3001      	adds	r0, #1
 80113d4:	f43f af1d 	beq.w	8011212 <_printf_float+0xb6>
 80113d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80113dc:	ea59 0303 	orrs.w	r3, r9, r3
 80113e0:	d102      	bne.n	80113e8 <_printf_float+0x28c>
 80113e2:	6823      	ldr	r3, [r4, #0]
 80113e4:	07d9      	lsls	r1, r3, #31
 80113e6:	d5d7      	bpl.n	8011398 <_printf_float+0x23c>
 80113e8:	4631      	mov	r1, r6
 80113ea:	4628      	mov	r0, r5
 80113ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113f0:	47b8      	blx	r7
 80113f2:	3001      	adds	r0, #1
 80113f4:	f43f af0d 	beq.w	8011212 <_printf_float+0xb6>
 80113f8:	f04f 0a00 	mov.w	sl, #0
 80113fc:	f104 0b1a 	add.w	fp, r4, #26
 8011400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011402:	425b      	negs	r3, r3
 8011404:	4553      	cmp	r3, sl
 8011406:	dc01      	bgt.n	801140c <_printf_float+0x2b0>
 8011408:	464b      	mov	r3, r9
 801140a:	e793      	b.n	8011334 <_printf_float+0x1d8>
 801140c:	2301      	movs	r3, #1
 801140e:	465a      	mov	r2, fp
 8011410:	4631      	mov	r1, r6
 8011412:	4628      	mov	r0, r5
 8011414:	47b8      	blx	r7
 8011416:	3001      	adds	r0, #1
 8011418:	f43f aefb 	beq.w	8011212 <_printf_float+0xb6>
 801141c:	f10a 0a01 	add.w	sl, sl, #1
 8011420:	e7ee      	b.n	8011400 <_printf_float+0x2a4>
 8011422:	bf00      	nop
 8011424:	7fefffff 	.word	0x7fefffff
 8011428:	08015ae0 	.word	0x08015ae0
 801142c:	08015adc 	.word	0x08015adc
 8011430:	08015ae8 	.word	0x08015ae8
 8011434:	08015ae4 	.word	0x08015ae4
 8011438:	08015aec 	.word	0x08015aec
 801143c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801143e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011442:	4553      	cmp	r3, sl
 8011444:	bfa8      	it	ge
 8011446:	4653      	movge	r3, sl
 8011448:	2b00      	cmp	r3, #0
 801144a:	4699      	mov	r9, r3
 801144c:	dc36      	bgt.n	80114bc <_printf_float+0x360>
 801144e:	f04f 0b00 	mov.w	fp, #0
 8011452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011456:	f104 021a 	add.w	r2, r4, #26
 801145a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801145c:	9306      	str	r3, [sp, #24]
 801145e:	eba3 0309 	sub.w	r3, r3, r9
 8011462:	455b      	cmp	r3, fp
 8011464:	dc31      	bgt.n	80114ca <_printf_float+0x36e>
 8011466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011468:	459a      	cmp	sl, r3
 801146a:	dc3a      	bgt.n	80114e2 <_printf_float+0x386>
 801146c:	6823      	ldr	r3, [r4, #0]
 801146e:	07da      	lsls	r2, r3, #31
 8011470:	d437      	bmi.n	80114e2 <_printf_float+0x386>
 8011472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011474:	ebaa 0903 	sub.w	r9, sl, r3
 8011478:	9b06      	ldr	r3, [sp, #24]
 801147a:	ebaa 0303 	sub.w	r3, sl, r3
 801147e:	4599      	cmp	r9, r3
 8011480:	bfa8      	it	ge
 8011482:	4699      	movge	r9, r3
 8011484:	f1b9 0f00 	cmp.w	r9, #0
 8011488:	dc33      	bgt.n	80114f2 <_printf_float+0x396>
 801148a:	f04f 0800 	mov.w	r8, #0
 801148e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011492:	f104 0b1a 	add.w	fp, r4, #26
 8011496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011498:	ebaa 0303 	sub.w	r3, sl, r3
 801149c:	eba3 0309 	sub.w	r3, r3, r9
 80114a0:	4543      	cmp	r3, r8
 80114a2:	f77f af79 	ble.w	8011398 <_printf_float+0x23c>
 80114a6:	2301      	movs	r3, #1
 80114a8:	465a      	mov	r2, fp
 80114aa:	4631      	mov	r1, r6
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b8      	blx	r7
 80114b0:	3001      	adds	r0, #1
 80114b2:	f43f aeae 	beq.w	8011212 <_printf_float+0xb6>
 80114b6:	f108 0801 	add.w	r8, r8, #1
 80114ba:	e7ec      	b.n	8011496 <_printf_float+0x33a>
 80114bc:	4642      	mov	r2, r8
 80114be:	4631      	mov	r1, r6
 80114c0:	4628      	mov	r0, r5
 80114c2:	47b8      	blx	r7
 80114c4:	3001      	adds	r0, #1
 80114c6:	d1c2      	bne.n	801144e <_printf_float+0x2f2>
 80114c8:	e6a3      	b.n	8011212 <_printf_float+0xb6>
 80114ca:	2301      	movs	r3, #1
 80114cc:	4631      	mov	r1, r6
 80114ce:	4628      	mov	r0, r5
 80114d0:	9206      	str	r2, [sp, #24]
 80114d2:	47b8      	blx	r7
 80114d4:	3001      	adds	r0, #1
 80114d6:	f43f ae9c 	beq.w	8011212 <_printf_float+0xb6>
 80114da:	f10b 0b01 	add.w	fp, fp, #1
 80114de:	9a06      	ldr	r2, [sp, #24]
 80114e0:	e7bb      	b.n	801145a <_printf_float+0x2fe>
 80114e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114e6:	4631      	mov	r1, r6
 80114e8:	4628      	mov	r0, r5
 80114ea:	47b8      	blx	r7
 80114ec:	3001      	adds	r0, #1
 80114ee:	d1c0      	bne.n	8011472 <_printf_float+0x316>
 80114f0:	e68f      	b.n	8011212 <_printf_float+0xb6>
 80114f2:	9a06      	ldr	r2, [sp, #24]
 80114f4:	464b      	mov	r3, r9
 80114f6:	4631      	mov	r1, r6
 80114f8:	4628      	mov	r0, r5
 80114fa:	4442      	add	r2, r8
 80114fc:	47b8      	blx	r7
 80114fe:	3001      	adds	r0, #1
 8011500:	d1c3      	bne.n	801148a <_printf_float+0x32e>
 8011502:	e686      	b.n	8011212 <_printf_float+0xb6>
 8011504:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011508:	f1ba 0f01 	cmp.w	sl, #1
 801150c:	dc01      	bgt.n	8011512 <_printf_float+0x3b6>
 801150e:	07db      	lsls	r3, r3, #31
 8011510:	d536      	bpl.n	8011580 <_printf_float+0x424>
 8011512:	2301      	movs	r3, #1
 8011514:	4642      	mov	r2, r8
 8011516:	4631      	mov	r1, r6
 8011518:	4628      	mov	r0, r5
 801151a:	47b8      	blx	r7
 801151c:	3001      	adds	r0, #1
 801151e:	f43f ae78 	beq.w	8011212 <_printf_float+0xb6>
 8011522:	4631      	mov	r1, r6
 8011524:	4628      	mov	r0, r5
 8011526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801152a:	47b8      	blx	r7
 801152c:	3001      	adds	r0, #1
 801152e:	f43f ae70 	beq.w	8011212 <_printf_float+0xb6>
 8011532:	2200      	movs	r2, #0
 8011534:	2300      	movs	r3, #0
 8011536:	f10a 3aff 	add.w	sl, sl, #4294967295
 801153a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801153e:	f7ef fac7 	bl	8000ad0 <__aeabi_dcmpeq>
 8011542:	b9c0      	cbnz	r0, 8011576 <_printf_float+0x41a>
 8011544:	4653      	mov	r3, sl
 8011546:	f108 0201 	add.w	r2, r8, #1
 801154a:	4631      	mov	r1, r6
 801154c:	4628      	mov	r0, r5
 801154e:	47b8      	blx	r7
 8011550:	3001      	adds	r0, #1
 8011552:	d10c      	bne.n	801156e <_printf_float+0x412>
 8011554:	e65d      	b.n	8011212 <_printf_float+0xb6>
 8011556:	2301      	movs	r3, #1
 8011558:	465a      	mov	r2, fp
 801155a:	4631      	mov	r1, r6
 801155c:	4628      	mov	r0, r5
 801155e:	47b8      	blx	r7
 8011560:	3001      	adds	r0, #1
 8011562:	f43f ae56 	beq.w	8011212 <_printf_float+0xb6>
 8011566:	f108 0801 	add.w	r8, r8, #1
 801156a:	45d0      	cmp	r8, sl
 801156c:	dbf3      	blt.n	8011556 <_printf_float+0x3fa>
 801156e:	464b      	mov	r3, r9
 8011570:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011574:	e6df      	b.n	8011336 <_printf_float+0x1da>
 8011576:	f04f 0800 	mov.w	r8, #0
 801157a:	f104 0b1a 	add.w	fp, r4, #26
 801157e:	e7f4      	b.n	801156a <_printf_float+0x40e>
 8011580:	2301      	movs	r3, #1
 8011582:	4642      	mov	r2, r8
 8011584:	e7e1      	b.n	801154a <_printf_float+0x3ee>
 8011586:	2301      	movs	r3, #1
 8011588:	464a      	mov	r2, r9
 801158a:	4631      	mov	r1, r6
 801158c:	4628      	mov	r0, r5
 801158e:	47b8      	blx	r7
 8011590:	3001      	adds	r0, #1
 8011592:	f43f ae3e 	beq.w	8011212 <_printf_float+0xb6>
 8011596:	f108 0801 	add.w	r8, r8, #1
 801159a:	68e3      	ldr	r3, [r4, #12]
 801159c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801159e:	1a5b      	subs	r3, r3, r1
 80115a0:	4543      	cmp	r3, r8
 80115a2:	dcf0      	bgt.n	8011586 <_printf_float+0x42a>
 80115a4:	e6fc      	b.n	80113a0 <_printf_float+0x244>
 80115a6:	f04f 0800 	mov.w	r8, #0
 80115aa:	f104 0919 	add.w	r9, r4, #25
 80115ae:	e7f4      	b.n	801159a <_printf_float+0x43e>

080115b0 <_printf_common>:
 80115b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115b4:	4616      	mov	r6, r2
 80115b6:	4698      	mov	r8, r3
 80115b8:	688a      	ldr	r2, [r1, #8]
 80115ba:	4607      	mov	r7, r0
 80115bc:	690b      	ldr	r3, [r1, #16]
 80115be:	460c      	mov	r4, r1
 80115c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80115c4:	4293      	cmp	r3, r2
 80115c6:	bfb8      	it	lt
 80115c8:	4613      	movlt	r3, r2
 80115ca:	6033      	str	r3, [r6, #0]
 80115cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80115d0:	b10a      	cbz	r2, 80115d6 <_printf_common+0x26>
 80115d2:	3301      	adds	r3, #1
 80115d4:	6033      	str	r3, [r6, #0]
 80115d6:	6823      	ldr	r3, [r4, #0]
 80115d8:	0699      	lsls	r1, r3, #26
 80115da:	bf42      	ittt	mi
 80115dc:	6833      	ldrmi	r3, [r6, #0]
 80115de:	3302      	addmi	r3, #2
 80115e0:	6033      	strmi	r3, [r6, #0]
 80115e2:	6825      	ldr	r5, [r4, #0]
 80115e4:	f015 0506 	ands.w	r5, r5, #6
 80115e8:	d106      	bne.n	80115f8 <_printf_common+0x48>
 80115ea:	f104 0a19 	add.w	sl, r4, #25
 80115ee:	68e3      	ldr	r3, [r4, #12]
 80115f0:	6832      	ldr	r2, [r6, #0]
 80115f2:	1a9b      	subs	r3, r3, r2
 80115f4:	42ab      	cmp	r3, r5
 80115f6:	dc2b      	bgt.n	8011650 <_printf_common+0xa0>
 80115f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80115fc:	6822      	ldr	r2, [r4, #0]
 80115fe:	3b00      	subs	r3, #0
 8011600:	bf18      	it	ne
 8011602:	2301      	movne	r3, #1
 8011604:	0692      	lsls	r2, r2, #26
 8011606:	d430      	bmi.n	801166a <_printf_common+0xba>
 8011608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801160c:	4641      	mov	r1, r8
 801160e:	4638      	mov	r0, r7
 8011610:	47c8      	blx	r9
 8011612:	3001      	adds	r0, #1
 8011614:	d023      	beq.n	801165e <_printf_common+0xae>
 8011616:	6823      	ldr	r3, [r4, #0]
 8011618:	341a      	adds	r4, #26
 801161a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801161e:	f003 0306 	and.w	r3, r3, #6
 8011622:	2b04      	cmp	r3, #4
 8011624:	bf0a      	itet	eq
 8011626:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801162a:	2500      	movne	r5, #0
 801162c:	6833      	ldreq	r3, [r6, #0]
 801162e:	f04f 0600 	mov.w	r6, #0
 8011632:	bf08      	it	eq
 8011634:	1aed      	subeq	r5, r5, r3
 8011636:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801163a:	bf08      	it	eq
 801163c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011640:	4293      	cmp	r3, r2
 8011642:	bfc4      	itt	gt
 8011644:	1a9b      	subgt	r3, r3, r2
 8011646:	18ed      	addgt	r5, r5, r3
 8011648:	42b5      	cmp	r5, r6
 801164a:	d11a      	bne.n	8011682 <_printf_common+0xd2>
 801164c:	2000      	movs	r0, #0
 801164e:	e008      	b.n	8011662 <_printf_common+0xb2>
 8011650:	2301      	movs	r3, #1
 8011652:	4652      	mov	r2, sl
 8011654:	4641      	mov	r1, r8
 8011656:	4638      	mov	r0, r7
 8011658:	47c8      	blx	r9
 801165a:	3001      	adds	r0, #1
 801165c:	d103      	bne.n	8011666 <_printf_common+0xb6>
 801165e:	f04f 30ff 	mov.w	r0, #4294967295
 8011662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011666:	3501      	adds	r5, #1
 8011668:	e7c1      	b.n	80115ee <_printf_common+0x3e>
 801166a:	18e1      	adds	r1, r4, r3
 801166c:	1c5a      	adds	r2, r3, #1
 801166e:	2030      	movs	r0, #48	@ 0x30
 8011670:	3302      	adds	r3, #2
 8011672:	4422      	add	r2, r4
 8011674:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801167c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011680:	e7c2      	b.n	8011608 <_printf_common+0x58>
 8011682:	2301      	movs	r3, #1
 8011684:	4622      	mov	r2, r4
 8011686:	4641      	mov	r1, r8
 8011688:	4638      	mov	r0, r7
 801168a:	47c8      	blx	r9
 801168c:	3001      	adds	r0, #1
 801168e:	d0e6      	beq.n	801165e <_printf_common+0xae>
 8011690:	3601      	adds	r6, #1
 8011692:	e7d9      	b.n	8011648 <_printf_common+0x98>

08011694 <_printf_i>:
 8011694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011698:	7e0f      	ldrb	r7, [r1, #24]
 801169a:	4691      	mov	r9, r2
 801169c:	4680      	mov	r8, r0
 801169e:	460c      	mov	r4, r1
 80116a0:	2f78      	cmp	r7, #120	@ 0x78
 80116a2:	469a      	mov	sl, r3
 80116a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116aa:	d807      	bhi.n	80116bc <_printf_i+0x28>
 80116ac:	2f62      	cmp	r7, #98	@ 0x62
 80116ae:	d80a      	bhi.n	80116c6 <_printf_i+0x32>
 80116b0:	2f00      	cmp	r7, #0
 80116b2:	f000 80d1 	beq.w	8011858 <_printf_i+0x1c4>
 80116b6:	2f58      	cmp	r7, #88	@ 0x58
 80116b8:	f000 80b8 	beq.w	801182c <_printf_i+0x198>
 80116bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80116c4:	e03a      	b.n	801173c <_printf_i+0xa8>
 80116c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80116ca:	2b15      	cmp	r3, #21
 80116cc:	d8f6      	bhi.n	80116bc <_printf_i+0x28>
 80116ce:	a101      	add	r1, pc, #4	@ (adr r1, 80116d4 <_printf_i+0x40>)
 80116d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80116d4:	0801172d 	.word	0x0801172d
 80116d8:	08011741 	.word	0x08011741
 80116dc:	080116bd 	.word	0x080116bd
 80116e0:	080116bd 	.word	0x080116bd
 80116e4:	080116bd 	.word	0x080116bd
 80116e8:	080116bd 	.word	0x080116bd
 80116ec:	08011741 	.word	0x08011741
 80116f0:	080116bd 	.word	0x080116bd
 80116f4:	080116bd 	.word	0x080116bd
 80116f8:	080116bd 	.word	0x080116bd
 80116fc:	080116bd 	.word	0x080116bd
 8011700:	0801183f 	.word	0x0801183f
 8011704:	0801176b 	.word	0x0801176b
 8011708:	080117f9 	.word	0x080117f9
 801170c:	080116bd 	.word	0x080116bd
 8011710:	080116bd 	.word	0x080116bd
 8011714:	08011861 	.word	0x08011861
 8011718:	080116bd 	.word	0x080116bd
 801171c:	0801176b 	.word	0x0801176b
 8011720:	080116bd 	.word	0x080116bd
 8011724:	080116bd 	.word	0x080116bd
 8011728:	08011801 	.word	0x08011801
 801172c:	6833      	ldr	r3, [r6, #0]
 801172e:	1d1a      	adds	r2, r3, #4
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	6032      	str	r2, [r6, #0]
 8011734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801173c:	2301      	movs	r3, #1
 801173e:	e09c      	b.n	801187a <_printf_i+0x1e6>
 8011740:	6833      	ldr	r3, [r6, #0]
 8011742:	6820      	ldr	r0, [r4, #0]
 8011744:	1d19      	adds	r1, r3, #4
 8011746:	6031      	str	r1, [r6, #0]
 8011748:	0606      	lsls	r6, r0, #24
 801174a:	d501      	bpl.n	8011750 <_printf_i+0xbc>
 801174c:	681d      	ldr	r5, [r3, #0]
 801174e:	e003      	b.n	8011758 <_printf_i+0xc4>
 8011750:	0645      	lsls	r5, r0, #25
 8011752:	d5fb      	bpl.n	801174c <_printf_i+0xb8>
 8011754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011758:	2d00      	cmp	r5, #0
 801175a:	da03      	bge.n	8011764 <_printf_i+0xd0>
 801175c:	232d      	movs	r3, #45	@ 0x2d
 801175e:	426d      	negs	r5, r5
 8011760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011764:	4858      	ldr	r0, [pc, #352]	@ (80118c8 <_printf_i+0x234>)
 8011766:	230a      	movs	r3, #10
 8011768:	e011      	b.n	801178e <_printf_i+0xfa>
 801176a:	6821      	ldr	r1, [r4, #0]
 801176c:	6833      	ldr	r3, [r6, #0]
 801176e:	0608      	lsls	r0, r1, #24
 8011770:	f853 5b04 	ldr.w	r5, [r3], #4
 8011774:	d402      	bmi.n	801177c <_printf_i+0xe8>
 8011776:	0649      	lsls	r1, r1, #25
 8011778:	bf48      	it	mi
 801177a:	b2ad      	uxthmi	r5, r5
 801177c:	2f6f      	cmp	r7, #111	@ 0x6f
 801177e:	6033      	str	r3, [r6, #0]
 8011780:	4851      	ldr	r0, [pc, #324]	@ (80118c8 <_printf_i+0x234>)
 8011782:	bf14      	ite	ne
 8011784:	230a      	movne	r3, #10
 8011786:	2308      	moveq	r3, #8
 8011788:	2100      	movs	r1, #0
 801178a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801178e:	6866      	ldr	r6, [r4, #4]
 8011790:	2e00      	cmp	r6, #0
 8011792:	60a6      	str	r6, [r4, #8]
 8011794:	db05      	blt.n	80117a2 <_printf_i+0x10e>
 8011796:	6821      	ldr	r1, [r4, #0]
 8011798:	432e      	orrs	r6, r5
 801179a:	f021 0104 	bic.w	r1, r1, #4
 801179e:	6021      	str	r1, [r4, #0]
 80117a0:	d04b      	beq.n	801183a <_printf_i+0x1a6>
 80117a2:	4616      	mov	r6, r2
 80117a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80117a8:	fb03 5711 	mls	r7, r3, r1, r5
 80117ac:	5dc7      	ldrb	r7, [r0, r7]
 80117ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80117b2:	462f      	mov	r7, r5
 80117b4:	460d      	mov	r5, r1
 80117b6:	42bb      	cmp	r3, r7
 80117b8:	d9f4      	bls.n	80117a4 <_printf_i+0x110>
 80117ba:	2b08      	cmp	r3, #8
 80117bc:	d10b      	bne.n	80117d6 <_printf_i+0x142>
 80117be:	6823      	ldr	r3, [r4, #0]
 80117c0:	07df      	lsls	r7, r3, #31
 80117c2:	d508      	bpl.n	80117d6 <_printf_i+0x142>
 80117c4:	6923      	ldr	r3, [r4, #16]
 80117c6:	6861      	ldr	r1, [r4, #4]
 80117c8:	4299      	cmp	r1, r3
 80117ca:	bfde      	ittt	le
 80117cc:	2330      	movle	r3, #48	@ 0x30
 80117ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80117d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80117d6:	1b92      	subs	r2, r2, r6
 80117d8:	6122      	str	r2, [r4, #16]
 80117da:	464b      	mov	r3, r9
 80117dc:	aa03      	add	r2, sp, #12
 80117de:	4621      	mov	r1, r4
 80117e0:	4640      	mov	r0, r8
 80117e2:	f8cd a000 	str.w	sl, [sp]
 80117e6:	f7ff fee3 	bl	80115b0 <_printf_common>
 80117ea:	3001      	adds	r0, #1
 80117ec:	d14a      	bne.n	8011884 <_printf_i+0x1f0>
 80117ee:	f04f 30ff 	mov.w	r0, #4294967295
 80117f2:	b004      	add	sp, #16
 80117f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117f8:	6823      	ldr	r3, [r4, #0]
 80117fa:	f043 0320 	orr.w	r3, r3, #32
 80117fe:	6023      	str	r3, [r4, #0]
 8011800:	2778      	movs	r7, #120	@ 0x78
 8011802:	4832      	ldr	r0, [pc, #200]	@ (80118cc <_printf_i+0x238>)
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801180a:	061f      	lsls	r7, r3, #24
 801180c:	6831      	ldr	r1, [r6, #0]
 801180e:	f851 5b04 	ldr.w	r5, [r1], #4
 8011812:	d402      	bmi.n	801181a <_printf_i+0x186>
 8011814:	065f      	lsls	r7, r3, #25
 8011816:	bf48      	it	mi
 8011818:	b2ad      	uxthmi	r5, r5
 801181a:	6031      	str	r1, [r6, #0]
 801181c:	07d9      	lsls	r1, r3, #31
 801181e:	bf44      	itt	mi
 8011820:	f043 0320 	orrmi.w	r3, r3, #32
 8011824:	6023      	strmi	r3, [r4, #0]
 8011826:	b11d      	cbz	r5, 8011830 <_printf_i+0x19c>
 8011828:	2310      	movs	r3, #16
 801182a:	e7ad      	b.n	8011788 <_printf_i+0xf4>
 801182c:	4826      	ldr	r0, [pc, #152]	@ (80118c8 <_printf_i+0x234>)
 801182e:	e7e9      	b.n	8011804 <_printf_i+0x170>
 8011830:	6823      	ldr	r3, [r4, #0]
 8011832:	f023 0320 	bic.w	r3, r3, #32
 8011836:	6023      	str	r3, [r4, #0]
 8011838:	e7f6      	b.n	8011828 <_printf_i+0x194>
 801183a:	4616      	mov	r6, r2
 801183c:	e7bd      	b.n	80117ba <_printf_i+0x126>
 801183e:	6833      	ldr	r3, [r6, #0]
 8011840:	6825      	ldr	r5, [r4, #0]
 8011842:	1d18      	adds	r0, r3, #4
 8011844:	6961      	ldr	r1, [r4, #20]
 8011846:	6030      	str	r0, [r6, #0]
 8011848:	062e      	lsls	r6, r5, #24
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	d501      	bpl.n	8011852 <_printf_i+0x1be>
 801184e:	6019      	str	r1, [r3, #0]
 8011850:	e002      	b.n	8011858 <_printf_i+0x1c4>
 8011852:	0668      	lsls	r0, r5, #25
 8011854:	d5fb      	bpl.n	801184e <_printf_i+0x1ba>
 8011856:	8019      	strh	r1, [r3, #0]
 8011858:	2300      	movs	r3, #0
 801185a:	4616      	mov	r6, r2
 801185c:	6123      	str	r3, [r4, #16]
 801185e:	e7bc      	b.n	80117da <_printf_i+0x146>
 8011860:	6833      	ldr	r3, [r6, #0]
 8011862:	2100      	movs	r1, #0
 8011864:	1d1a      	adds	r2, r3, #4
 8011866:	6032      	str	r2, [r6, #0]
 8011868:	681e      	ldr	r6, [r3, #0]
 801186a:	6862      	ldr	r2, [r4, #4]
 801186c:	4630      	mov	r0, r6
 801186e:	f000 fda4 	bl	80123ba <memchr>
 8011872:	b108      	cbz	r0, 8011878 <_printf_i+0x1e4>
 8011874:	1b80      	subs	r0, r0, r6
 8011876:	6060      	str	r0, [r4, #4]
 8011878:	6863      	ldr	r3, [r4, #4]
 801187a:	6123      	str	r3, [r4, #16]
 801187c:	2300      	movs	r3, #0
 801187e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011882:	e7aa      	b.n	80117da <_printf_i+0x146>
 8011884:	6923      	ldr	r3, [r4, #16]
 8011886:	4632      	mov	r2, r6
 8011888:	4649      	mov	r1, r9
 801188a:	4640      	mov	r0, r8
 801188c:	47d0      	blx	sl
 801188e:	3001      	adds	r0, #1
 8011890:	d0ad      	beq.n	80117ee <_printf_i+0x15a>
 8011892:	6823      	ldr	r3, [r4, #0]
 8011894:	079b      	lsls	r3, r3, #30
 8011896:	d413      	bmi.n	80118c0 <_printf_i+0x22c>
 8011898:	68e0      	ldr	r0, [r4, #12]
 801189a:	9b03      	ldr	r3, [sp, #12]
 801189c:	4298      	cmp	r0, r3
 801189e:	bfb8      	it	lt
 80118a0:	4618      	movlt	r0, r3
 80118a2:	e7a6      	b.n	80117f2 <_printf_i+0x15e>
 80118a4:	2301      	movs	r3, #1
 80118a6:	4632      	mov	r2, r6
 80118a8:	4649      	mov	r1, r9
 80118aa:	4640      	mov	r0, r8
 80118ac:	47d0      	blx	sl
 80118ae:	3001      	adds	r0, #1
 80118b0:	d09d      	beq.n	80117ee <_printf_i+0x15a>
 80118b2:	3501      	adds	r5, #1
 80118b4:	68e3      	ldr	r3, [r4, #12]
 80118b6:	9903      	ldr	r1, [sp, #12]
 80118b8:	1a5b      	subs	r3, r3, r1
 80118ba:	42ab      	cmp	r3, r5
 80118bc:	dcf2      	bgt.n	80118a4 <_printf_i+0x210>
 80118be:	e7eb      	b.n	8011898 <_printf_i+0x204>
 80118c0:	2500      	movs	r5, #0
 80118c2:	f104 0619 	add.w	r6, r4, #25
 80118c6:	e7f5      	b.n	80118b4 <_printf_i+0x220>
 80118c8:	08015aee 	.word	0x08015aee
 80118cc:	08015aff 	.word	0x08015aff

080118d0 <_scanf_float>:
 80118d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118d4:	b087      	sub	sp, #28
 80118d6:	4691      	mov	r9, r2
 80118d8:	4680      	mov	r8, r0
 80118da:	460c      	mov	r4, r1
 80118dc:	9303      	str	r3, [sp, #12]
 80118de:	688b      	ldr	r3, [r1, #8]
 80118e0:	1e5a      	subs	r2, r3, #1
 80118e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80118e6:	460a      	mov	r2, r1
 80118e8:	bf89      	itett	hi
 80118ea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80118ee:	f04f 0b00 	movls.w	fp, #0
 80118f2:	eb03 0b05 	addhi.w	fp, r3, r5
 80118f6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80118fa:	f04f 0500 	mov.w	r5, #0
 80118fe:	bf88      	it	hi
 8011900:	608b      	strhi	r3, [r1, #8]
 8011902:	680b      	ldr	r3, [r1, #0]
 8011904:	46aa      	mov	sl, r5
 8011906:	462f      	mov	r7, r5
 8011908:	9502      	str	r5, [sp, #8]
 801190a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801190e:	f842 3b1c 	str.w	r3, [r2], #28
 8011912:	4616      	mov	r6, r2
 8011914:	9201      	str	r2, [sp, #4]
 8011916:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801191a:	68a2      	ldr	r2, [r4, #8]
 801191c:	b15a      	cbz	r2, 8011936 <_scanf_float+0x66>
 801191e:	f8d9 3000 	ldr.w	r3, [r9]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	2b4e      	cmp	r3, #78	@ 0x4e
 8011926:	d863      	bhi.n	80119f0 <_scanf_float+0x120>
 8011928:	2b40      	cmp	r3, #64	@ 0x40
 801192a:	d83b      	bhi.n	80119a4 <_scanf_float+0xd4>
 801192c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011930:	b2c8      	uxtb	r0, r1
 8011932:	280e      	cmp	r0, #14
 8011934:	d939      	bls.n	80119aa <_scanf_float+0xda>
 8011936:	b11f      	cbz	r7, 8011940 <_scanf_float+0x70>
 8011938:	6823      	ldr	r3, [r4, #0]
 801193a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801193e:	6023      	str	r3, [r4, #0]
 8011940:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011944:	f1ba 0f01 	cmp.w	sl, #1
 8011948:	f200 8115 	bhi.w	8011b76 <_scanf_float+0x2a6>
 801194c:	9b01      	ldr	r3, [sp, #4]
 801194e:	429e      	cmp	r6, r3
 8011950:	f200 8106 	bhi.w	8011b60 <_scanf_float+0x290>
 8011954:	2001      	movs	r0, #1
 8011956:	b007      	add	sp, #28
 8011958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011960:	2a0d      	cmp	r2, #13
 8011962:	d8e8      	bhi.n	8011936 <_scanf_float+0x66>
 8011964:	a101      	add	r1, pc, #4	@ (adr r1, 801196c <_scanf_float+0x9c>)
 8011966:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801196a:	bf00      	nop
 801196c:	08011ab5 	.word	0x08011ab5
 8011970:	08011937 	.word	0x08011937
 8011974:	08011937 	.word	0x08011937
 8011978:	08011937 	.word	0x08011937
 801197c:	08011b11 	.word	0x08011b11
 8011980:	08011aeb 	.word	0x08011aeb
 8011984:	08011937 	.word	0x08011937
 8011988:	08011937 	.word	0x08011937
 801198c:	08011ac3 	.word	0x08011ac3
 8011990:	08011937 	.word	0x08011937
 8011994:	08011937 	.word	0x08011937
 8011998:	08011937 	.word	0x08011937
 801199c:	08011937 	.word	0x08011937
 80119a0:	08011a7f 	.word	0x08011a7f
 80119a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80119a8:	e7da      	b.n	8011960 <_scanf_float+0x90>
 80119aa:	290e      	cmp	r1, #14
 80119ac:	d8c3      	bhi.n	8011936 <_scanf_float+0x66>
 80119ae:	a001      	add	r0, pc, #4	@ (adr r0, 80119b4 <_scanf_float+0xe4>)
 80119b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80119b4:	08011a6f 	.word	0x08011a6f
 80119b8:	08011937 	.word	0x08011937
 80119bc:	08011a6f 	.word	0x08011a6f
 80119c0:	08011aff 	.word	0x08011aff
 80119c4:	08011937 	.word	0x08011937
 80119c8:	08011a11 	.word	0x08011a11
 80119cc:	08011a55 	.word	0x08011a55
 80119d0:	08011a55 	.word	0x08011a55
 80119d4:	08011a55 	.word	0x08011a55
 80119d8:	08011a55 	.word	0x08011a55
 80119dc:	08011a55 	.word	0x08011a55
 80119e0:	08011a55 	.word	0x08011a55
 80119e4:	08011a55 	.word	0x08011a55
 80119e8:	08011a55 	.word	0x08011a55
 80119ec:	08011a55 	.word	0x08011a55
 80119f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80119f2:	d809      	bhi.n	8011a08 <_scanf_float+0x138>
 80119f4:	2b60      	cmp	r3, #96	@ 0x60
 80119f6:	d8b1      	bhi.n	801195c <_scanf_float+0x8c>
 80119f8:	2b54      	cmp	r3, #84	@ 0x54
 80119fa:	d07b      	beq.n	8011af4 <_scanf_float+0x224>
 80119fc:	2b59      	cmp	r3, #89	@ 0x59
 80119fe:	d19a      	bne.n	8011936 <_scanf_float+0x66>
 8011a00:	2d07      	cmp	r5, #7
 8011a02:	d198      	bne.n	8011936 <_scanf_float+0x66>
 8011a04:	2508      	movs	r5, #8
 8011a06:	e02f      	b.n	8011a68 <_scanf_float+0x198>
 8011a08:	2b74      	cmp	r3, #116	@ 0x74
 8011a0a:	d073      	beq.n	8011af4 <_scanf_float+0x224>
 8011a0c:	2b79      	cmp	r3, #121	@ 0x79
 8011a0e:	e7f6      	b.n	80119fe <_scanf_float+0x12e>
 8011a10:	6821      	ldr	r1, [r4, #0]
 8011a12:	05c8      	lsls	r0, r1, #23
 8011a14:	d51e      	bpl.n	8011a54 <_scanf_float+0x184>
 8011a16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011a1a:	3701      	adds	r7, #1
 8011a1c:	6021      	str	r1, [r4, #0]
 8011a1e:	f1bb 0f00 	cmp.w	fp, #0
 8011a22:	d003      	beq.n	8011a2c <_scanf_float+0x15c>
 8011a24:	3201      	adds	r2, #1
 8011a26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a2a:	60a2      	str	r2, [r4, #8]
 8011a2c:	68a3      	ldr	r3, [r4, #8]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	60a3      	str	r3, [r4, #8]
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	3301      	adds	r3, #1
 8011a36:	6123      	str	r3, [r4, #16]
 8011a38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011a3c:	3b01      	subs	r3, #1
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f8c9 3004 	str.w	r3, [r9, #4]
 8011a44:	f340 8083 	ble.w	8011b4e <_scanf_float+0x27e>
 8011a48:	f8d9 3000 	ldr.w	r3, [r9]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	f8c9 3000 	str.w	r3, [r9]
 8011a52:	e762      	b.n	801191a <_scanf_float+0x4a>
 8011a54:	eb1a 0105 	adds.w	r1, sl, r5
 8011a58:	f47f af6d 	bne.w	8011936 <_scanf_float+0x66>
 8011a5c:	6822      	ldr	r2, [r4, #0]
 8011a5e:	460d      	mov	r5, r1
 8011a60:	468a      	mov	sl, r1
 8011a62:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011a66:	6022      	str	r2, [r4, #0]
 8011a68:	f806 3b01 	strb.w	r3, [r6], #1
 8011a6c:	e7de      	b.n	8011a2c <_scanf_float+0x15c>
 8011a6e:	6822      	ldr	r2, [r4, #0]
 8011a70:	0610      	lsls	r0, r2, #24
 8011a72:	f57f af60 	bpl.w	8011936 <_scanf_float+0x66>
 8011a76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011a7a:	6022      	str	r2, [r4, #0]
 8011a7c:	e7f4      	b.n	8011a68 <_scanf_float+0x198>
 8011a7e:	f1ba 0f00 	cmp.w	sl, #0
 8011a82:	d10c      	bne.n	8011a9e <_scanf_float+0x1ce>
 8011a84:	b977      	cbnz	r7, 8011aa4 <_scanf_float+0x1d4>
 8011a86:	6822      	ldr	r2, [r4, #0]
 8011a88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011a8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011a90:	d108      	bne.n	8011aa4 <_scanf_float+0x1d4>
 8011a92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a96:	f04f 0a01 	mov.w	sl, #1
 8011a9a:	6022      	str	r2, [r4, #0]
 8011a9c:	e7e4      	b.n	8011a68 <_scanf_float+0x198>
 8011a9e:	f1ba 0f02 	cmp.w	sl, #2
 8011aa2:	d051      	beq.n	8011b48 <_scanf_float+0x278>
 8011aa4:	2d01      	cmp	r5, #1
 8011aa6:	d002      	beq.n	8011aae <_scanf_float+0x1de>
 8011aa8:	2d04      	cmp	r5, #4
 8011aaa:	f47f af44 	bne.w	8011936 <_scanf_float+0x66>
 8011aae:	3501      	adds	r5, #1
 8011ab0:	b2ed      	uxtb	r5, r5
 8011ab2:	e7d9      	b.n	8011a68 <_scanf_float+0x198>
 8011ab4:	f1ba 0f01 	cmp.w	sl, #1
 8011ab8:	f47f af3d 	bne.w	8011936 <_scanf_float+0x66>
 8011abc:	f04f 0a02 	mov.w	sl, #2
 8011ac0:	e7d2      	b.n	8011a68 <_scanf_float+0x198>
 8011ac2:	b975      	cbnz	r5, 8011ae2 <_scanf_float+0x212>
 8011ac4:	2f00      	cmp	r7, #0
 8011ac6:	f47f af37 	bne.w	8011938 <_scanf_float+0x68>
 8011aca:	6822      	ldr	r2, [r4, #0]
 8011acc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011ad0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011ad4:	f040 8103 	bne.w	8011cde <_scanf_float+0x40e>
 8011ad8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011adc:	2501      	movs	r5, #1
 8011ade:	6022      	str	r2, [r4, #0]
 8011ae0:	e7c2      	b.n	8011a68 <_scanf_float+0x198>
 8011ae2:	2d03      	cmp	r5, #3
 8011ae4:	d0e3      	beq.n	8011aae <_scanf_float+0x1de>
 8011ae6:	2d05      	cmp	r5, #5
 8011ae8:	e7df      	b.n	8011aaa <_scanf_float+0x1da>
 8011aea:	2d02      	cmp	r5, #2
 8011aec:	f47f af23 	bne.w	8011936 <_scanf_float+0x66>
 8011af0:	2503      	movs	r5, #3
 8011af2:	e7b9      	b.n	8011a68 <_scanf_float+0x198>
 8011af4:	2d06      	cmp	r5, #6
 8011af6:	f47f af1e 	bne.w	8011936 <_scanf_float+0x66>
 8011afa:	2507      	movs	r5, #7
 8011afc:	e7b4      	b.n	8011a68 <_scanf_float+0x198>
 8011afe:	6822      	ldr	r2, [r4, #0]
 8011b00:	0591      	lsls	r1, r2, #22
 8011b02:	f57f af18 	bpl.w	8011936 <_scanf_float+0x66>
 8011b06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011b0a:	9702      	str	r7, [sp, #8]
 8011b0c:	6022      	str	r2, [r4, #0]
 8011b0e:	e7ab      	b.n	8011a68 <_scanf_float+0x198>
 8011b10:	6822      	ldr	r2, [r4, #0]
 8011b12:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011b16:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011b1a:	d005      	beq.n	8011b28 <_scanf_float+0x258>
 8011b1c:	0550      	lsls	r0, r2, #21
 8011b1e:	f57f af0a 	bpl.w	8011936 <_scanf_float+0x66>
 8011b22:	2f00      	cmp	r7, #0
 8011b24:	f000 80db 	beq.w	8011cde <_scanf_float+0x40e>
 8011b28:	0591      	lsls	r1, r2, #22
 8011b2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011b2e:	bf58      	it	pl
 8011b30:	9902      	ldrpl	r1, [sp, #8]
 8011b32:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011b36:	bf58      	it	pl
 8011b38:	1a79      	subpl	r1, r7, r1
 8011b3a:	6022      	str	r2, [r4, #0]
 8011b3c:	f04f 0700 	mov.w	r7, #0
 8011b40:	bf58      	it	pl
 8011b42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011b46:	e78f      	b.n	8011a68 <_scanf_float+0x198>
 8011b48:	f04f 0a03 	mov.w	sl, #3
 8011b4c:	e78c      	b.n	8011a68 <_scanf_float+0x198>
 8011b4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011b52:	4649      	mov	r1, r9
 8011b54:	4640      	mov	r0, r8
 8011b56:	4798      	blx	r3
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	f43f aede 	beq.w	801191a <_scanf_float+0x4a>
 8011b5e:	e6ea      	b.n	8011936 <_scanf_float+0x66>
 8011b60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b64:	464a      	mov	r2, r9
 8011b66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b6a:	4640      	mov	r0, r8
 8011b6c:	4798      	blx	r3
 8011b6e:	6923      	ldr	r3, [r4, #16]
 8011b70:	3b01      	subs	r3, #1
 8011b72:	6123      	str	r3, [r4, #16]
 8011b74:	e6ea      	b.n	801194c <_scanf_float+0x7c>
 8011b76:	1e6b      	subs	r3, r5, #1
 8011b78:	2b06      	cmp	r3, #6
 8011b7a:	d824      	bhi.n	8011bc6 <_scanf_float+0x2f6>
 8011b7c:	2d02      	cmp	r5, #2
 8011b7e:	d836      	bhi.n	8011bee <_scanf_float+0x31e>
 8011b80:	9b01      	ldr	r3, [sp, #4]
 8011b82:	429e      	cmp	r6, r3
 8011b84:	f67f aee6 	bls.w	8011954 <_scanf_float+0x84>
 8011b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b8c:	464a      	mov	r2, r9
 8011b8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b92:	4640      	mov	r0, r8
 8011b94:	4798      	blx	r3
 8011b96:	6923      	ldr	r3, [r4, #16]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	6123      	str	r3, [r4, #16]
 8011b9c:	e7f0      	b.n	8011b80 <_scanf_float+0x2b0>
 8011b9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ba2:	464a      	mov	r2, r9
 8011ba4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011ba8:	4640      	mov	r0, r8
 8011baa:	4798      	blx	r3
 8011bac:	6923      	ldr	r3, [r4, #16]
 8011bae:	3b01      	subs	r3, #1
 8011bb0:	6123      	str	r3, [r4, #16]
 8011bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011bb6:	fa5f fa8a 	uxtb.w	sl, sl
 8011bba:	f1ba 0f02 	cmp.w	sl, #2
 8011bbe:	d1ee      	bne.n	8011b9e <_scanf_float+0x2ce>
 8011bc0:	3d03      	subs	r5, #3
 8011bc2:	b2ed      	uxtb	r5, r5
 8011bc4:	1b76      	subs	r6, r6, r5
 8011bc6:	6823      	ldr	r3, [r4, #0]
 8011bc8:	05da      	lsls	r2, r3, #23
 8011bca:	d52f      	bpl.n	8011c2c <_scanf_float+0x35c>
 8011bcc:	055b      	lsls	r3, r3, #21
 8011bce:	d511      	bpl.n	8011bf4 <_scanf_float+0x324>
 8011bd0:	9b01      	ldr	r3, [sp, #4]
 8011bd2:	429e      	cmp	r6, r3
 8011bd4:	f67f aebe 	bls.w	8011954 <_scanf_float+0x84>
 8011bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bdc:	464a      	mov	r2, r9
 8011bde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011be2:	4640      	mov	r0, r8
 8011be4:	4798      	blx	r3
 8011be6:	6923      	ldr	r3, [r4, #16]
 8011be8:	3b01      	subs	r3, #1
 8011bea:	6123      	str	r3, [r4, #16]
 8011bec:	e7f0      	b.n	8011bd0 <_scanf_float+0x300>
 8011bee:	46aa      	mov	sl, r5
 8011bf0:	46b3      	mov	fp, r6
 8011bf2:	e7de      	b.n	8011bb2 <_scanf_float+0x2e2>
 8011bf4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011bf8:	1e75      	subs	r5, r6, #1
 8011bfa:	6923      	ldr	r3, [r4, #16]
 8011bfc:	2965      	cmp	r1, #101	@ 0x65
 8011bfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8011c02:	6123      	str	r3, [r4, #16]
 8011c04:	d00c      	beq.n	8011c20 <_scanf_float+0x350>
 8011c06:	2945      	cmp	r1, #69	@ 0x45
 8011c08:	d00a      	beq.n	8011c20 <_scanf_float+0x350>
 8011c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011c0e:	464a      	mov	r2, r9
 8011c10:	4640      	mov	r0, r8
 8011c12:	1eb5      	subs	r5, r6, #2
 8011c14:	4798      	blx	r3
 8011c16:	6923      	ldr	r3, [r4, #16]
 8011c18:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	6123      	str	r3, [r4, #16]
 8011c20:	462e      	mov	r6, r5
 8011c22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011c26:	464a      	mov	r2, r9
 8011c28:	4640      	mov	r0, r8
 8011c2a:	4798      	blx	r3
 8011c2c:	6822      	ldr	r2, [r4, #0]
 8011c2e:	f012 0210 	ands.w	r2, r2, #16
 8011c32:	d001      	beq.n	8011c38 <_scanf_float+0x368>
 8011c34:	2000      	movs	r0, #0
 8011c36:	e68e      	b.n	8011956 <_scanf_float+0x86>
 8011c38:	7032      	strb	r2, [r6, #0]
 8011c3a:	6823      	ldr	r3, [r4, #0]
 8011c3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011c44:	d125      	bne.n	8011c92 <_scanf_float+0x3c2>
 8011c46:	9b02      	ldr	r3, [sp, #8]
 8011c48:	429f      	cmp	r7, r3
 8011c4a:	d00a      	beq.n	8011c62 <_scanf_float+0x392>
 8011c4c:	1bda      	subs	r2, r3, r7
 8011c4e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011c52:	4924      	ldr	r1, [pc, #144]	@ (8011ce4 <_scanf_float+0x414>)
 8011c54:	429e      	cmp	r6, r3
 8011c56:	bf28      	it	cs
 8011c58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	f000 fa33 	bl	80120c8 <siprintf>
 8011c62:	2200      	movs	r2, #0
 8011c64:	9901      	ldr	r1, [sp, #4]
 8011c66:	4640      	mov	r0, r8
 8011c68:	f002 fde2 	bl	8014830 <_strtod_r>
 8011c6c:	6821      	ldr	r1, [r4, #0]
 8011c6e:	9b03      	ldr	r3, [sp, #12]
 8011c70:	f011 0f02 	tst.w	r1, #2
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	ec57 6b10 	vmov	r6, r7, d0
 8011c7a:	f103 0204 	add.w	r2, r3, #4
 8011c7e:	d015      	beq.n	8011cac <_scanf_float+0x3dc>
 8011c80:	9903      	ldr	r1, [sp, #12]
 8011c82:	600a      	str	r2, [r1, #0]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	e9c3 6700 	strd	r6, r7, [r3]
 8011c8a:	68e3      	ldr	r3, [r4, #12]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	60e3      	str	r3, [r4, #12]
 8011c90:	e7d0      	b.n	8011c34 <_scanf_float+0x364>
 8011c92:	9b04      	ldr	r3, [sp, #16]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d0e4      	beq.n	8011c62 <_scanf_float+0x392>
 8011c98:	9905      	ldr	r1, [sp, #20]
 8011c9a:	230a      	movs	r3, #10
 8011c9c:	4640      	mov	r0, r8
 8011c9e:	3101      	adds	r1, #1
 8011ca0:	f002 fe46 	bl	8014930 <_strtol_r>
 8011ca4:	9b04      	ldr	r3, [sp, #16]
 8011ca6:	9e05      	ldr	r6, [sp, #20]
 8011ca8:	1ac2      	subs	r2, r0, r3
 8011caa:	e7d0      	b.n	8011c4e <_scanf_float+0x37e>
 8011cac:	f011 0f04 	tst.w	r1, #4
 8011cb0:	9903      	ldr	r1, [sp, #12]
 8011cb2:	600a      	str	r2, [r1, #0]
 8011cb4:	d1e6      	bne.n	8011c84 <_scanf_float+0x3b4>
 8011cb6:	681d      	ldr	r5, [r3, #0]
 8011cb8:	4632      	mov	r2, r6
 8011cba:	463b      	mov	r3, r7
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	4639      	mov	r1, r7
 8011cc0:	f7ee ff38 	bl	8000b34 <__aeabi_dcmpun>
 8011cc4:	b128      	cbz	r0, 8011cd2 <_scanf_float+0x402>
 8011cc6:	4808      	ldr	r0, [pc, #32]	@ (8011ce8 <_scanf_float+0x418>)
 8011cc8:	f000 fb92 	bl	80123f0 <nanf>
 8011ccc:	ed85 0a00 	vstr	s0, [r5]
 8011cd0:	e7db      	b.n	8011c8a <_scanf_float+0x3ba>
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	4639      	mov	r1, r7
 8011cd6:	f7ee ff8b 	bl	8000bf0 <__aeabi_d2f>
 8011cda:	6028      	str	r0, [r5, #0]
 8011cdc:	e7d5      	b.n	8011c8a <_scanf_float+0x3ba>
 8011cde:	2700      	movs	r7, #0
 8011ce0:	e62e      	b.n	8011940 <_scanf_float+0x70>
 8011ce2:	bf00      	nop
 8011ce4:	08015b10 	.word	0x08015b10
 8011ce8:	08015c51 	.word	0x08015c51

08011cec <std>:
 8011cec:	2300      	movs	r3, #0
 8011cee:	b510      	push	{r4, lr}
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	6083      	str	r3, [r0, #8]
 8011cf4:	8181      	strh	r1, [r0, #12]
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	6643      	str	r3, [r0, #100]	@ 0x64
 8011cfa:	81c2      	strh	r2, [r0, #14]
 8011cfc:	2208      	movs	r2, #8
 8011cfe:	6183      	str	r3, [r0, #24]
 8011d00:	e9c0 3300 	strd	r3, r3, [r0]
 8011d04:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d08:	305c      	adds	r0, #92	@ 0x5c
 8011d0a:	f000 fad7 	bl	80122bc <memset>
 8011d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d44 <std+0x58>)
 8011d10:	6224      	str	r4, [r4, #32]
 8011d12:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d14:	4b0c      	ldr	r3, [pc, #48]	@ (8011d48 <std+0x5c>)
 8011d16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d18:	4b0c      	ldr	r3, [pc, #48]	@ (8011d4c <std+0x60>)
 8011d1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8011d50 <std+0x64>)
 8011d1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8011d20:	4b0c      	ldr	r3, [pc, #48]	@ (8011d54 <std+0x68>)
 8011d22:	429c      	cmp	r4, r3
 8011d24:	d006      	beq.n	8011d34 <std+0x48>
 8011d26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011d2a:	4294      	cmp	r4, r2
 8011d2c:	d002      	beq.n	8011d34 <std+0x48>
 8011d2e:	33d0      	adds	r3, #208	@ 0xd0
 8011d30:	429c      	cmp	r4, r3
 8011d32:	d105      	bne.n	8011d40 <std+0x54>
 8011d34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d3c:	f000 bb3a 	b.w	80123b4 <__retarget_lock_init_recursive>
 8011d40:	bd10      	pop	{r4, pc}
 8011d42:	bf00      	nop
 8011d44:	0801210d 	.word	0x0801210d
 8011d48:	0801212f 	.word	0x0801212f
 8011d4c:	08012167 	.word	0x08012167
 8011d50:	0801218b 	.word	0x0801218b
 8011d54:	20002b94 	.word	0x20002b94

08011d58 <stdio_exit_handler>:
 8011d58:	4a02      	ldr	r2, [pc, #8]	@ (8011d64 <stdio_exit_handler+0xc>)
 8011d5a:	4903      	ldr	r1, [pc, #12]	@ (8011d68 <stdio_exit_handler+0x10>)
 8011d5c:	4803      	ldr	r0, [pc, #12]	@ (8011d6c <stdio_exit_handler+0x14>)
 8011d5e:	f000 b869 	b.w	8011e34 <_fwalk_sglue>
 8011d62:	bf00      	nop
 8011d64:	2000000c 	.word	0x2000000c
 8011d68:	08014f71 	.word	0x08014f71
 8011d6c:	2000001c 	.word	0x2000001c

08011d70 <cleanup_stdio>:
 8011d70:	6841      	ldr	r1, [r0, #4]
 8011d72:	4b0c      	ldr	r3, [pc, #48]	@ (8011da4 <cleanup_stdio+0x34>)
 8011d74:	4299      	cmp	r1, r3
 8011d76:	b510      	push	{r4, lr}
 8011d78:	4604      	mov	r4, r0
 8011d7a:	d001      	beq.n	8011d80 <cleanup_stdio+0x10>
 8011d7c:	f003 f8f8 	bl	8014f70 <_fflush_r>
 8011d80:	68a1      	ldr	r1, [r4, #8]
 8011d82:	4b09      	ldr	r3, [pc, #36]	@ (8011da8 <cleanup_stdio+0x38>)
 8011d84:	4299      	cmp	r1, r3
 8011d86:	d002      	beq.n	8011d8e <cleanup_stdio+0x1e>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f003 f8f1 	bl	8014f70 <_fflush_r>
 8011d8e:	68e1      	ldr	r1, [r4, #12]
 8011d90:	4b06      	ldr	r3, [pc, #24]	@ (8011dac <cleanup_stdio+0x3c>)
 8011d92:	4299      	cmp	r1, r3
 8011d94:	d004      	beq.n	8011da0 <cleanup_stdio+0x30>
 8011d96:	4620      	mov	r0, r4
 8011d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d9c:	f003 b8e8 	b.w	8014f70 <_fflush_r>
 8011da0:	bd10      	pop	{r4, pc}
 8011da2:	bf00      	nop
 8011da4:	20002b94 	.word	0x20002b94
 8011da8:	20002bfc 	.word	0x20002bfc
 8011dac:	20002c64 	.word	0x20002c64

08011db0 <global_stdio_init.part.0>:
 8011db0:	b510      	push	{r4, lr}
 8011db2:	4b0b      	ldr	r3, [pc, #44]	@ (8011de0 <global_stdio_init.part.0+0x30>)
 8011db4:	2104      	movs	r1, #4
 8011db6:	4c0b      	ldr	r4, [pc, #44]	@ (8011de4 <global_stdio_init.part.0+0x34>)
 8011db8:	4a0b      	ldr	r2, [pc, #44]	@ (8011de8 <global_stdio_init.part.0+0x38>)
 8011dba:	4620      	mov	r0, r4
 8011dbc:	601a      	str	r2, [r3, #0]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f7ff ff94 	bl	8011cec <std>
 8011dc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011dc8:	2201      	movs	r2, #1
 8011dca:	2109      	movs	r1, #9
 8011dcc:	f7ff ff8e 	bl	8011cec <std>
 8011dd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011dd4:	2202      	movs	r2, #2
 8011dd6:	2112      	movs	r1, #18
 8011dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ddc:	f7ff bf86 	b.w	8011cec <std>
 8011de0:	20002ccc 	.word	0x20002ccc
 8011de4:	20002b94 	.word	0x20002b94
 8011de8:	08011d59 	.word	0x08011d59

08011dec <__sfp_lock_acquire>:
 8011dec:	4801      	ldr	r0, [pc, #4]	@ (8011df4 <__sfp_lock_acquire+0x8>)
 8011dee:	f000 bae2 	b.w	80123b6 <__retarget_lock_acquire_recursive>
 8011df2:	bf00      	nop
 8011df4:	20002cd5 	.word	0x20002cd5

08011df8 <__sfp_lock_release>:
 8011df8:	4801      	ldr	r0, [pc, #4]	@ (8011e00 <__sfp_lock_release+0x8>)
 8011dfa:	f000 badd 	b.w	80123b8 <__retarget_lock_release_recursive>
 8011dfe:	bf00      	nop
 8011e00:	20002cd5 	.word	0x20002cd5

08011e04 <__sinit>:
 8011e04:	b510      	push	{r4, lr}
 8011e06:	4604      	mov	r4, r0
 8011e08:	f7ff fff0 	bl	8011dec <__sfp_lock_acquire>
 8011e0c:	6a23      	ldr	r3, [r4, #32]
 8011e0e:	b11b      	cbz	r3, 8011e18 <__sinit+0x14>
 8011e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e14:	f7ff bff0 	b.w	8011df8 <__sfp_lock_release>
 8011e18:	4b04      	ldr	r3, [pc, #16]	@ (8011e2c <__sinit+0x28>)
 8011e1a:	6223      	str	r3, [r4, #32]
 8011e1c:	4b04      	ldr	r3, [pc, #16]	@ (8011e30 <__sinit+0x2c>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1f5      	bne.n	8011e10 <__sinit+0xc>
 8011e24:	f7ff ffc4 	bl	8011db0 <global_stdio_init.part.0>
 8011e28:	e7f2      	b.n	8011e10 <__sinit+0xc>
 8011e2a:	bf00      	nop
 8011e2c:	08011d71 	.word	0x08011d71
 8011e30:	20002ccc 	.word	0x20002ccc

08011e34 <_fwalk_sglue>:
 8011e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e38:	4607      	mov	r7, r0
 8011e3a:	4688      	mov	r8, r1
 8011e3c:	4614      	mov	r4, r2
 8011e3e:	2600      	movs	r6, #0
 8011e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e44:	f1b9 0901 	subs.w	r9, r9, #1
 8011e48:	d505      	bpl.n	8011e56 <_fwalk_sglue+0x22>
 8011e4a:	6824      	ldr	r4, [r4, #0]
 8011e4c:	2c00      	cmp	r4, #0
 8011e4e:	d1f7      	bne.n	8011e40 <_fwalk_sglue+0xc>
 8011e50:	4630      	mov	r0, r6
 8011e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e56:	89ab      	ldrh	r3, [r5, #12]
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	d907      	bls.n	8011e6c <_fwalk_sglue+0x38>
 8011e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e60:	3301      	adds	r3, #1
 8011e62:	d003      	beq.n	8011e6c <_fwalk_sglue+0x38>
 8011e64:	4629      	mov	r1, r5
 8011e66:	4638      	mov	r0, r7
 8011e68:	47c0      	blx	r8
 8011e6a:	4306      	orrs	r6, r0
 8011e6c:	3568      	adds	r5, #104	@ 0x68
 8011e6e:	e7e9      	b.n	8011e44 <_fwalk_sglue+0x10>

08011e70 <iprintf>:
 8011e70:	b40f      	push	{r0, r1, r2, r3}
 8011e72:	b507      	push	{r0, r1, r2, lr}
 8011e74:	4906      	ldr	r1, [pc, #24]	@ (8011e90 <iprintf+0x20>)
 8011e76:	ab04      	add	r3, sp, #16
 8011e78:	6808      	ldr	r0, [r1, #0]
 8011e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e7e:	6881      	ldr	r1, [r0, #8]
 8011e80:	9301      	str	r3, [sp, #4]
 8011e82:	f002 fed9 	bl	8014c38 <_vfiprintf_r>
 8011e86:	b003      	add	sp, #12
 8011e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e8c:	b004      	add	sp, #16
 8011e8e:	4770      	bx	lr
 8011e90:	20000018 	.word	0x20000018

08011e94 <_puts_r>:
 8011e94:	6a03      	ldr	r3, [r0, #32]
 8011e96:	b570      	push	{r4, r5, r6, lr}
 8011e98:	4605      	mov	r5, r0
 8011e9a:	460e      	mov	r6, r1
 8011e9c:	6884      	ldr	r4, [r0, #8]
 8011e9e:	b90b      	cbnz	r3, 8011ea4 <_puts_r+0x10>
 8011ea0:	f7ff ffb0 	bl	8011e04 <__sinit>
 8011ea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ea6:	07db      	lsls	r3, r3, #31
 8011ea8:	d405      	bmi.n	8011eb6 <_puts_r+0x22>
 8011eaa:	89a3      	ldrh	r3, [r4, #12]
 8011eac:	0598      	lsls	r0, r3, #22
 8011eae:	d402      	bmi.n	8011eb6 <_puts_r+0x22>
 8011eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eb2:	f000 fa80 	bl	80123b6 <__retarget_lock_acquire_recursive>
 8011eb6:	89a3      	ldrh	r3, [r4, #12]
 8011eb8:	0719      	lsls	r1, r3, #28
 8011eba:	d502      	bpl.n	8011ec2 <_puts_r+0x2e>
 8011ebc:	6923      	ldr	r3, [r4, #16]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d135      	bne.n	8011f2e <_puts_r+0x9a>
 8011ec2:	4621      	mov	r1, r4
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	f000 f9a3 	bl	8012210 <__swsetup_r>
 8011eca:	b380      	cbz	r0, 8011f2e <_puts_r+0x9a>
 8011ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8011ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ed2:	07da      	lsls	r2, r3, #31
 8011ed4:	d405      	bmi.n	8011ee2 <_puts_r+0x4e>
 8011ed6:	89a3      	ldrh	r3, [r4, #12]
 8011ed8:	059b      	lsls	r3, r3, #22
 8011eda:	d402      	bmi.n	8011ee2 <_puts_r+0x4e>
 8011edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ede:	f000 fa6b 	bl	80123b8 <__retarget_lock_release_recursive>
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	bd70      	pop	{r4, r5, r6, pc}
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	da04      	bge.n	8011ef4 <_puts_r+0x60>
 8011eea:	69a2      	ldr	r2, [r4, #24]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	dc17      	bgt.n	8011f20 <_puts_r+0x8c>
 8011ef0:	290a      	cmp	r1, #10
 8011ef2:	d015      	beq.n	8011f20 <_puts_r+0x8c>
 8011ef4:	6823      	ldr	r3, [r4, #0]
 8011ef6:	1c5a      	adds	r2, r3, #1
 8011ef8:	6022      	str	r2, [r4, #0]
 8011efa:	7019      	strb	r1, [r3, #0]
 8011efc:	68a3      	ldr	r3, [r4, #8]
 8011efe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011f02:	3b01      	subs	r3, #1
 8011f04:	60a3      	str	r3, [r4, #8]
 8011f06:	2900      	cmp	r1, #0
 8011f08:	d1ed      	bne.n	8011ee6 <_puts_r+0x52>
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	da11      	bge.n	8011f32 <_puts_r+0x9e>
 8011f0e:	4622      	mov	r2, r4
 8011f10:	210a      	movs	r1, #10
 8011f12:	4628      	mov	r0, r5
 8011f14:	f000 f93d 	bl	8012192 <__swbuf_r>
 8011f18:	3001      	adds	r0, #1
 8011f1a:	d0d7      	beq.n	8011ecc <_puts_r+0x38>
 8011f1c:	250a      	movs	r5, #10
 8011f1e:	e7d7      	b.n	8011ed0 <_puts_r+0x3c>
 8011f20:	4622      	mov	r2, r4
 8011f22:	4628      	mov	r0, r5
 8011f24:	f000 f935 	bl	8012192 <__swbuf_r>
 8011f28:	3001      	adds	r0, #1
 8011f2a:	d1e7      	bne.n	8011efc <_puts_r+0x68>
 8011f2c:	e7ce      	b.n	8011ecc <_puts_r+0x38>
 8011f2e:	3e01      	subs	r6, #1
 8011f30:	e7e4      	b.n	8011efc <_puts_r+0x68>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	6022      	str	r2, [r4, #0]
 8011f38:	220a      	movs	r2, #10
 8011f3a:	701a      	strb	r2, [r3, #0]
 8011f3c:	e7ee      	b.n	8011f1c <_puts_r+0x88>
	...

08011f40 <puts>:
 8011f40:	4b02      	ldr	r3, [pc, #8]	@ (8011f4c <puts+0xc>)
 8011f42:	4601      	mov	r1, r0
 8011f44:	6818      	ldr	r0, [r3, #0]
 8011f46:	f7ff bfa5 	b.w	8011e94 <_puts_r>
 8011f4a:	bf00      	nop
 8011f4c:	20000018 	.word	0x20000018

08011f50 <setbuf>:
 8011f50:	fab1 f281 	clz	r2, r1
 8011f54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f58:	0952      	lsrs	r2, r2, #5
 8011f5a:	0052      	lsls	r2, r2, #1
 8011f5c:	f000 b800 	b.w	8011f60 <setvbuf>

08011f60 <setvbuf>:
 8011f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f64:	461d      	mov	r5, r3
 8011f66:	4b57      	ldr	r3, [pc, #348]	@ (80120c4 <setvbuf+0x164>)
 8011f68:	4604      	mov	r4, r0
 8011f6a:	460e      	mov	r6, r1
 8011f6c:	681f      	ldr	r7, [r3, #0]
 8011f6e:	4690      	mov	r8, r2
 8011f70:	b127      	cbz	r7, 8011f7c <setvbuf+0x1c>
 8011f72:	6a3b      	ldr	r3, [r7, #32]
 8011f74:	b913      	cbnz	r3, 8011f7c <setvbuf+0x1c>
 8011f76:	4638      	mov	r0, r7
 8011f78:	f7ff ff44 	bl	8011e04 <__sinit>
 8011f7c:	f1b8 0f02 	cmp.w	r8, #2
 8011f80:	d006      	beq.n	8011f90 <setvbuf+0x30>
 8011f82:	f1b8 0f01 	cmp.w	r8, #1
 8011f86:	f200 8099 	bhi.w	80120bc <setvbuf+0x15c>
 8011f8a:	2d00      	cmp	r5, #0
 8011f8c:	f2c0 8096 	blt.w	80120bc <setvbuf+0x15c>
 8011f90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f92:	07d9      	lsls	r1, r3, #31
 8011f94:	d405      	bmi.n	8011fa2 <setvbuf+0x42>
 8011f96:	89a3      	ldrh	r3, [r4, #12]
 8011f98:	059a      	lsls	r2, r3, #22
 8011f9a:	d402      	bmi.n	8011fa2 <setvbuf+0x42>
 8011f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f9e:	f000 fa0a 	bl	80123b6 <__retarget_lock_acquire_recursive>
 8011fa2:	4621      	mov	r1, r4
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	f002 ffe3 	bl	8014f70 <_fflush_r>
 8011faa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fac:	b141      	cbz	r1, 8011fc0 <setvbuf+0x60>
 8011fae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fb2:	4299      	cmp	r1, r3
 8011fb4:	d002      	beq.n	8011fbc <setvbuf+0x5c>
 8011fb6:	4638      	mov	r0, r7
 8011fb8:	f001 f880 	bl	80130bc <_free_r>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	61a3      	str	r3, [r4, #24]
 8011fc4:	6063      	str	r3, [r4, #4]
 8011fc6:	89a3      	ldrh	r3, [r4, #12]
 8011fc8:	061b      	lsls	r3, r3, #24
 8011fca:	d503      	bpl.n	8011fd4 <setvbuf+0x74>
 8011fcc:	6921      	ldr	r1, [r4, #16]
 8011fce:	4638      	mov	r0, r7
 8011fd0:	f001 f874 	bl	80130bc <_free_r>
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	f1b8 0f02 	cmp.w	r8, #2
 8011fda:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8011fde:	f023 0303 	bic.w	r3, r3, #3
 8011fe2:	81a3      	strh	r3, [r4, #12]
 8011fe4:	d060      	beq.n	80120a8 <setvbuf+0x148>
 8011fe6:	ab01      	add	r3, sp, #4
 8011fe8:	466a      	mov	r2, sp
 8011fea:	4621      	mov	r1, r4
 8011fec:	4638      	mov	r0, r7
 8011fee:	f002 ffe7 	bl	8014fc0 <__swhatbuf_r>
 8011ff2:	89a3      	ldrh	r3, [r4, #12]
 8011ff4:	4318      	orrs	r0, r3
 8011ff6:	81a0      	strh	r0, [r4, #12]
 8011ff8:	bb2d      	cbnz	r5, 8012046 <setvbuf+0xe6>
 8011ffa:	9d00      	ldr	r5, [sp, #0]
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f001 f8a7 	bl	8013150 <malloc>
 8012002:	4606      	mov	r6, r0
 8012004:	2800      	cmp	r0, #0
 8012006:	d151      	bne.n	80120ac <setvbuf+0x14c>
 8012008:	f8dd 9000 	ldr.w	r9, [sp]
 801200c:	45a9      	cmp	r9, r5
 801200e:	d13f      	bne.n	8012090 <setvbuf+0x130>
 8012010:	f04f 35ff 	mov.w	r5, #4294967295
 8012014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012018:	f043 0202 	orr.w	r2, r3, #2
 801201c:	81a2      	strh	r2, [r4, #12]
 801201e:	2200      	movs	r2, #0
 8012020:	60a2      	str	r2, [r4, #8]
 8012022:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8012026:	6022      	str	r2, [r4, #0]
 8012028:	6122      	str	r2, [r4, #16]
 801202a:	2201      	movs	r2, #1
 801202c:	6162      	str	r2, [r4, #20]
 801202e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012030:	07d6      	lsls	r6, r2, #31
 8012032:	d404      	bmi.n	801203e <setvbuf+0xde>
 8012034:	0598      	lsls	r0, r3, #22
 8012036:	d402      	bmi.n	801203e <setvbuf+0xde>
 8012038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801203a:	f000 f9bd 	bl	80123b8 <__retarget_lock_release_recursive>
 801203e:	4628      	mov	r0, r5
 8012040:	b003      	add	sp, #12
 8012042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012046:	2e00      	cmp	r6, #0
 8012048:	d0d8      	beq.n	8011ffc <setvbuf+0x9c>
 801204a:	6a3b      	ldr	r3, [r7, #32]
 801204c:	b913      	cbnz	r3, 8012054 <setvbuf+0xf4>
 801204e:	4638      	mov	r0, r7
 8012050:	f7ff fed8 	bl	8011e04 <__sinit>
 8012054:	f1b8 0f01 	cmp.w	r8, #1
 8012058:	6026      	str	r6, [r4, #0]
 801205a:	bf02      	ittt	eq
 801205c:	89a3      	ldrheq	r3, [r4, #12]
 801205e:	f043 0301 	orreq.w	r3, r3, #1
 8012062:	81a3      	strheq	r3, [r4, #12]
 8012064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012068:	f013 0208 	ands.w	r2, r3, #8
 801206c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8012070:	d01e      	beq.n	80120b0 <setvbuf+0x150>
 8012072:	07d9      	lsls	r1, r3, #31
 8012074:	bf45      	ittet	mi
 8012076:	2200      	movmi	r2, #0
 8012078:	426d      	negmi	r5, r5
 801207a:	60a5      	strpl	r5, [r4, #8]
 801207c:	60a2      	strmi	r2, [r4, #8]
 801207e:	bf48      	it	mi
 8012080:	61a5      	strmi	r5, [r4, #24]
 8012082:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012084:	07d2      	lsls	r2, r2, #31
 8012086:	d401      	bmi.n	801208c <setvbuf+0x12c>
 8012088:	059b      	lsls	r3, r3, #22
 801208a:	d513      	bpl.n	80120b4 <setvbuf+0x154>
 801208c:	2500      	movs	r5, #0
 801208e:	e7d6      	b.n	801203e <setvbuf+0xde>
 8012090:	4648      	mov	r0, r9
 8012092:	f001 f85d 	bl	8013150 <malloc>
 8012096:	4606      	mov	r6, r0
 8012098:	2800      	cmp	r0, #0
 801209a:	d0b9      	beq.n	8012010 <setvbuf+0xb0>
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	464d      	mov	r5, r9
 80120a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120a4:	81a3      	strh	r3, [r4, #12]
 80120a6:	e7d0      	b.n	801204a <setvbuf+0xea>
 80120a8:	2500      	movs	r5, #0
 80120aa:	e7b3      	b.n	8012014 <setvbuf+0xb4>
 80120ac:	46a9      	mov	r9, r5
 80120ae:	e7f5      	b.n	801209c <setvbuf+0x13c>
 80120b0:	60a2      	str	r2, [r4, #8]
 80120b2:	e7e6      	b.n	8012082 <setvbuf+0x122>
 80120b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120b6:	f000 f97f 	bl	80123b8 <__retarget_lock_release_recursive>
 80120ba:	e7e7      	b.n	801208c <setvbuf+0x12c>
 80120bc:	f04f 35ff 	mov.w	r5, #4294967295
 80120c0:	e7bd      	b.n	801203e <setvbuf+0xde>
 80120c2:	bf00      	nop
 80120c4:	20000018 	.word	0x20000018

080120c8 <siprintf>:
 80120c8:	b40e      	push	{r1, r2, r3}
 80120ca:	b510      	push	{r4, lr}
 80120cc:	b09d      	sub	sp, #116	@ 0x74
 80120ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80120d2:	2400      	movs	r4, #0
 80120d4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80120d6:	9002      	str	r0, [sp, #8]
 80120d8:	9006      	str	r0, [sp, #24]
 80120da:	9107      	str	r1, [sp, #28]
 80120dc:	9104      	str	r1, [sp, #16]
 80120de:	4809      	ldr	r0, [pc, #36]	@ (8012104 <siprintf+0x3c>)
 80120e0:	4909      	ldr	r1, [pc, #36]	@ (8012108 <siprintf+0x40>)
 80120e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80120e6:	9105      	str	r1, [sp, #20]
 80120e8:	a902      	add	r1, sp, #8
 80120ea:	6800      	ldr	r0, [r0, #0]
 80120ec:	9301      	str	r3, [sp, #4]
 80120ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80120f0:	f002 fc7c 	bl	80149ec <_svfiprintf_r>
 80120f4:	9b02      	ldr	r3, [sp, #8]
 80120f6:	701c      	strb	r4, [r3, #0]
 80120f8:	b01d      	add	sp, #116	@ 0x74
 80120fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120fe:	b003      	add	sp, #12
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop
 8012104:	20000018 	.word	0x20000018
 8012108:	ffff0208 	.word	0xffff0208

0801210c <__sread>:
 801210c:	b510      	push	{r4, lr}
 801210e:	460c      	mov	r4, r1
 8012110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012114:	f000 f900 	bl	8012318 <_read_r>
 8012118:	2800      	cmp	r0, #0
 801211a:	bfab      	itete	ge
 801211c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801211e:	89a3      	ldrhlt	r3, [r4, #12]
 8012120:	181b      	addge	r3, r3, r0
 8012122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012126:	bfac      	ite	ge
 8012128:	6563      	strge	r3, [r4, #84]	@ 0x54
 801212a:	81a3      	strhlt	r3, [r4, #12]
 801212c:	bd10      	pop	{r4, pc}

0801212e <__swrite>:
 801212e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012132:	461f      	mov	r7, r3
 8012134:	898b      	ldrh	r3, [r1, #12]
 8012136:	4605      	mov	r5, r0
 8012138:	460c      	mov	r4, r1
 801213a:	05db      	lsls	r3, r3, #23
 801213c:	4616      	mov	r6, r2
 801213e:	d505      	bpl.n	801214c <__swrite+0x1e>
 8012140:	2302      	movs	r3, #2
 8012142:	2200      	movs	r2, #0
 8012144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012148:	f000 f8d4 	bl	80122f4 <_lseek_r>
 801214c:	89a3      	ldrh	r3, [r4, #12]
 801214e:	4632      	mov	r2, r6
 8012150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012154:	4628      	mov	r0, r5
 8012156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801215a:	81a3      	strh	r3, [r4, #12]
 801215c:	463b      	mov	r3, r7
 801215e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012162:	f000 b8eb 	b.w	801233c <_write_r>

08012166 <__sseek>:
 8012166:	b510      	push	{r4, lr}
 8012168:	460c      	mov	r4, r1
 801216a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801216e:	f000 f8c1 	bl	80122f4 <_lseek_r>
 8012172:	1c43      	adds	r3, r0, #1
 8012174:	89a3      	ldrh	r3, [r4, #12]
 8012176:	bf15      	itete	ne
 8012178:	6560      	strne	r0, [r4, #84]	@ 0x54
 801217a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801217e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012182:	81a3      	strheq	r3, [r4, #12]
 8012184:	bf18      	it	ne
 8012186:	81a3      	strhne	r3, [r4, #12]
 8012188:	bd10      	pop	{r4, pc}

0801218a <__sclose>:
 801218a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801218e:	f000 b8a1 	b.w	80122d4 <_close_r>

08012192 <__swbuf_r>:
 8012192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012194:	460e      	mov	r6, r1
 8012196:	4614      	mov	r4, r2
 8012198:	4605      	mov	r5, r0
 801219a:	b118      	cbz	r0, 80121a4 <__swbuf_r+0x12>
 801219c:	6a03      	ldr	r3, [r0, #32]
 801219e:	b90b      	cbnz	r3, 80121a4 <__swbuf_r+0x12>
 80121a0:	f7ff fe30 	bl	8011e04 <__sinit>
 80121a4:	69a3      	ldr	r3, [r4, #24]
 80121a6:	60a3      	str	r3, [r4, #8]
 80121a8:	89a3      	ldrh	r3, [r4, #12]
 80121aa:	071a      	lsls	r2, r3, #28
 80121ac:	d501      	bpl.n	80121b2 <__swbuf_r+0x20>
 80121ae:	6923      	ldr	r3, [r4, #16]
 80121b0:	b943      	cbnz	r3, 80121c4 <__swbuf_r+0x32>
 80121b2:	4621      	mov	r1, r4
 80121b4:	4628      	mov	r0, r5
 80121b6:	f000 f82b 	bl	8012210 <__swsetup_r>
 80121ba:	b118      	cbz	r0, 80121c4 <__swbuf_r+0x32>
 80121bc:	f04f 37ff 	mov.w	r7, #4294967295
 80121c0:	4638      	mov	r0, r7
 80121c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	b2f6      	uxtb	r6, r6
 80121c8:	6922      	ldr	r2, [r4, #16]
 80121ca:	4637      	mov	r7, r6
 80121cc:	1a98      	subs	r0, r3, r2
 80121ce:	6963      	ldr	r3, [r4, #20]
 80121d0:	4283      	cmp	r3, r0
 80121d2:	dc05      	bgt.n	80121e0 <__swbuf_r+0x4e>
 80121d4:	4621      	mov	r1, r4
 80121d6:	4628      	mov	r0, r5
 80121d8:	f002 feca 	bl	8014f70 <_fflush_r>
 80121dc:	2800      	cmp	r0, #0
 80121de:	d1ed      	bne.n	80121bc <__swbuf_r+0x2a>
 80121e0:	68a3      	ldr	r3, [r4, #8]
 80121e2:	3b01      	subs	r3, #1
 80121e4:	60a3      	str	r3, [r4, #8]
 80121e6:	6823      	ldr	r3, [r4, #0]
 80121e8:	1c5a      	adds	r2, r3, #1
 80121ea:	6022      	str	r2, [r4, #0]
 80121ec:	701e      	strb	r6, [r3, #0]
 80121ee:	1c43      	adds	r3, r0, #1
 80121f0:	6962      	ldr	r2, [r4, #20]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d004      	beq.n	8012200 <__swbuf_r+0x6e>
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	07db      	lsls	r3, r3, #31
 80121fa:	d5e1      	bpl.n	80121c0 <__swbuf_r+0x2e>
 80121fc:	2e0a      	cmp	r6, #10
 80121fe:	d1df      	bne.n	80121c0 <__swbuf_r+0x2e>
 8012200:	4621      	mov	r1, r4
 8012202:	4628      	mov	r0, r5
 8012204:	f002 feb4 	bl	8014f70 <_fflush_r>
 8012208:	2800      	cmp	r0, #0
 801220a:	d0d9      	beq.n	80121c0 <__swbuf_r+0x2e>
 801220c:	e7d6      	b.n	80121bc <__swbuf_r+0x2a>
	...

08012210 <__swsetup_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4b29      	ldr	r3, [pc, #164]	@ (80122b8 <__swsetup_r+0xa8>)
 8012214:	4605      	mov	r5, r0
 8012216:	460c      	mov	r4, r1
 8012218:	6818      	ldr	r0, [r3, #0]
 801221a:	b118      	cbz	r0, 8012224 <__swsetup_r+0x14>
 801221c:	6a03      	ldr	r3, [r0, #32]
 801221e:	b90b      	cbnz	r3, 8012224 <__swsetup_r+0x14>
 8012220:	f7ff fdf0 	bl	8011e04 <__sinit>
 8012224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012228:	0719      	lsls	r1, r3, #28
 801222a:	d422      	bmi.n	8012272 <__swsetup_r+0x62>
 801222c:	06da      	lsls	r2, r3, #27
 801222e:	d407      	bmi.n	8012240 <__swsetup_r+0x30>
 8012230:	2209      	movs	r2, #9
 8012232:	602a      	str	r2, [r5, #0]
 8012234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012238:	f04f 30ff 	mov.w	r0, #4294967295
 801223c:	81a3      	strh	r3, [r4, #12]
 801223e:	e033      	b.n	80122a8 <__swsetup_r+0x98>
 8012240:	0758      	lsls	r0, r3, #29
 8012242:	d512      	bpl.n	801226a <__swsetup_r+0x5a>
 8012244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012246:	b141      	cbz	r1, 801225a <__swsetup_r+0x4a>
 8012248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801224c:	4299      	cmp	r1, r3
 801224e:	d002      	beq.n	8012256 <__swsetup_r+0x46>
 8012250:	4628      	mov	r0, r5
 8012252:	f000 ff33 	bl	80130bc <_free_r>
 8012256:	2300      	movs	r3, #0
 8012258:	6363      	str	r3, [r4, #52]	@ 0x34
 801225a:	89a3      	ldrh	r3, [r4, #12]
 801225c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012260:	81a3      	strh	r3, [r4, #12]
 8012262:	2300      	movs	r3, #0
 8012264:	6063      	str	r3, [r4, #4]
 8012266:	6923      	ldr	r3, [r4, #16]
 8012268:	6023      	str	r3, [r4, #0]
 801226a:	89a3      	ldrh	r3, [r4, #12]
 801226c:	f043 0308 	orr.w	r3, r3, #8
 8012270:	81a3      	strh	r3, [r4, #12]
 8012272:	6923      	ldr	r3, [r4, #16]
 8012274:	b94b      	cbnz	r3, 801228a <__swsetup_r+0x7a>
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801227c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012280:	d003      	beq.n	801228a <__swsetup_r+0x7a>
 8012282:	4621      	mov	r1, r4
 8012284:	4628      	mov	r0, r5
 8012286:	f002 fec0 	bl	801500a <__smakebuf_r>
 801228a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801228e:	f013 0201 	ands.w	r2, r3, #1
 8012292:	d00a      	beq.n	80122aa <__swsetup_r+0x9a>
 8012294:	2200      	movs	r2, #0
 8012296:	60a2      	str	r2, [r4, #8]
 8012298:	6962      	ldr	r2, [r4, #20]
 801229a:	4252      	negs	r2, r2
 801229c:	61a2      	str	r2, [r4, #24]
 801229e:	6922      	ldr	r2, [r4, #16]
 80122a0:	b942      	cbnz	r2, 80122b4 <__swsetup_r+0xa4>
 80122a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80122a6:	d1c5      	bne.n	8012234 <__swsetup_r+0x24>
 80122a8:	bd38      	pop	{r3, r4, r5, pc}
 80122aa:	0799      	lsls	r1, r3, #30
 80122ac:	bf58      	it	pl
 80122ae:	6962      	ldrpl	r2, [r4, #20]
 80122b0:	60a2      	str	r2, [r4, #8]
 80122b2:	e7f4      	b.n	801229e <__swsetup_r+0x8e>
 80122b4:	2000      	movs	r0, #0
 80122b6:	e7f7      	b.n	80122a8 <__swsetup_r+0x98>
 80122b8:	20000018 	.word	0x20000018

080122bc <memset>:
 80122bc:	4402      	add	r2, r0
 80122be:	4603      	mov	r3, r0
 80122c0:	4293      	cmp	r3, r2
 80122c2:	d100      	bne.n	80122c6 <memset+0xa>
 80122c4:	4770      	bx	lr
 80122c6:	f803 1b01 	strb.w	r1, [r3], #1
 80122ca:	e7f9      	b.n	80122c0 <memset+0x4>

080122cc <_localeconv_r>:
 80122cc:	4800      	ldr	r0, [pc, #0]	@ (80122d0 <_localeconv_r+0x4>)
 80122ce:	4770      	bx	lr
 80122d0:	20000158 	.word	0x20000158

080122d4 <_close_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	2300      	movs	r3, #0
 80122d8:	4d05      	ldr	r5, [pc, #20]	@ (80122f0 <_close_r+0x1c>)
 80122da:	4604      	mov	r4, r0
 80122dc:	4608      	mov	r0, r1
 80122de:	602b      	str	r3, [r5, #0]
 80122e0:	f7f0 f80e 	bl	8002300 <_close>
 80122e4:	1c43      	adds	r3, r0, #1
 80122e6:	d102      	bne.n	80122ee <_close_r+0x1a>
 80122e8:	682b      	ldr	r3, [r5, #0]
 80122ea:	b103      	cbz	r3, 80122ee <_close_r+0x1a>
 80122ec:	6023      	str	r3, [r4, #0]
 80122ee:	bd38      	pop	{r3, r4, r5, pc}
 80122f0:	20002cd0 	.word	0x20002cd0

080122f4 <_lseek_r>:
 80122f4:	b538      	push	{r3, r4, r5, lr}
 80122f6:	4604      	mov	r4, r0
 80122f8:	4d06      	ldr	r5, [pc, #24]	@ (8012314 <_lseek_r+0x20>)
 80122fa:	4608      	mov	r0, r1
 80122fc:	4611      	mov	r1, r2
 80122fe:	2200      	movs	r2, #0
 8012300:	602a      	str	r2, [r5, #0]
 8012302:	461a      	mov	r2, r3
 8012304:	f7f0 f823 	bl	800234e <_lseek>
 8012308:	1c43      	adds	r3, r0, #1
 801230a:	d102      	bne.n	8012312 <_lseek_r+0x1e>
 801230c:	682b      	ldr	r3, [r5, #0]
 801230e:	b103      	cbz	r3, 8012312 <_lseek_r+0x1e>
 8012310:	6023      	str	r3, [r4, #0]
 8012312:	bd38      	pop	{r3, r4, r5, pc}
 8012314:	20002cd0 	.word	0x20002cd0

08012318 <_read_r>:
 8012318:	b538      	push	{r3, r4, r5, lr}
 801231a:	4604      	mov	r4, r0
 801231c:	4d06      	ldr	r5, [pc, #24]	@ (8012338 <_read_r+0x20>)
 801231e:	4608      	mov	r0, r1
 8012320:	4611      	mov	r1, r2
 8012322:	2200      	movs	r2, #0
 8012324:	602a      	str	r2, [r5, #0]
 8012326:	461a      	mov	r2, r3
 8012328:	f7ef ffb1 	bl	800228e <_read>
 801232c:	1c43      	adds	r3, r0, #1
 801232e:	d102      	bne.n	8012336 <_read_r+0x1e>
 8012330:	682b      	ldr	r3, [r5, #0]
 8012332:	b103      	cbz	r3, 8012336 <_read_r+0x1e>
 8012334:	6023      	str	r3, [r4, #0]
 8012336:	bd38      	pop	{r3, r4, r5, pc}
 8012338:	20002cd0 	.word	0x20002cd0

0801233c <_write_r>:
 801233c:	b538      	push	{r3, r4, r5, lr}
 801233e:	4604      	mov	r4, r0
 8012340:	4d06      	ldr	r5, [pc, #24]	@ (801235c <_write_r+0x20>)
 8012342:	4608      	mov	r0, r1
 8012344:	4611      	mov	r1, r2
 8012346:	2200      	movs	r2, #0
 8012348:	602a      	str	r2, [r5, #0]
 801234a:	461a      	mov	r2, r3
 801234c:	f7ef ffbc 	bl	80022c8 <_write>
 8012350:	1c43      	adds	r3, r0, #1
 8012352:	d102      	bne.n	801235a <_write_r+0x1e>
 8012354:	682b      	ldr	r3, [r5, #0]
 8012356:	b103      	cbz	r3, 801235a <_write_r+0x1e>
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	bd38      	pop	{r3, r4, r5, pc}
 801235c:	20002cd0 	.word	0x20002cd0

08012360 <__errno>:
 8012360:	4b01      	ldr	r3, [pc, #4]	@ (8012368 <__errno+0x8>)
 8012362:	6818      	ldr	r0, [r3, #0]
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	20000018 	.word	0x20000018

0801236c <__libc_init_array>:
 801236c:	b570      	push	{r4, r5, r6, lr}
 801236e:	4d0d      	ldr	r5, [pc, #52]	@ (80123a4 <__libc_init_array+0x38>)
 8012370:	2600      	movs	r6, #0
 8012372:	4c0d      	ldr	r4, [pc, #52]	@ (80123a8 <__libc_init_array+0x3c>)
 8012374:	1b64      	subs	r4, r4, r5
 8012376:	10a4      	asrs	r4, r4, #2
 8012378:	42a6      	cmp	r6, r4
 801237a:	d109      	bne.n	8012390 <__libc_init_array+0x24>
 801237c:	4d0b      	ldr	r5, [pc, #44]	@ (80123ac <__libc_init_array+0x40>)
 801237e:	2600      	movs	r6, #0
 8012380:	4c0b      	ldr	r4, [pc, #44]	@ (80123b0 <__libc_init_array+0x44>)
 8012382:	f003 faf7 	bl	8015974 <_init>
 8012386:	1b64      	subs	r4, r4, r5
 8012388:	10a4      	asrs	r4, r4, #2
 801238a:	42a6      	cmp	r6, r4
 801238c:	d105      	bne.n	801239a <__libc_init_array+0x2e>
 801238e:	bd70      	pop	{r4, r5, r6, pc}
 8012390:	f855 3b04 	ldr.w	r3, [r5], #4
 8012394:	3601      	adds	r6, #1
 8012396:	4798      	blx	r3
 8012398:	e7ee      	b.n	8012378 <__libc_init_array+0xc>
 801239a:	f855 3b04 	ldr.w	r3, [r5], #4
 801239e:	3601      	adds	r6, #1
 80123a0:	4798      	blx	r3
 80123a2:	e7f2      	b.n	801238a <__libc_init_array+0x1e>
 80123a4:	08015f0c 	.word	0x08015f0c
 80123a8:	08015f0c 	.word	0x08015f0c
 80123ac:	08015f0c 	.word	0x08015f0c
 80123b0:	08015f14 	.word	0x08015f14

080123b4 <__retarget_lock_init_recursive>:
 80123b4:	4770      	bx	lr

080123b6 <__retarget_lock_acquire_recursive>:
 80123b6:	4770      	bx	lr

080123b8 <__retarget_lock_release_recursive>:
 80123b8:	4770      	bx	lr

080123ba <memchr>:
 80123ba:	b2c9      	uxtb	r1, r1
 80123bc:	4603      	mov	r3, r0
 80123be:	4402      	add	r2, r0
 80123c0:	b510      	push	{r4, lr}
 80123c2:	4293      	cmp	r3, r2
 80123c4:	4618      	mov	r0, r3
 80123c6:	d101      	bne.n	80123cc <memchr+0x12>
 80123c8:	2000      	movs	r0, #0
 80123ca:	e003      	b.n	80123d4 <memchr+0x1a>
 80123cc:	7804      	ldrb	r4, [r0, #0]
 80123ce:	3301      	adds	r3, #1
 80123d0:	428c      	cmp	r4, r1
 80123d2:	d1f6      	bne.n	80123c2 <memchr+0x8>
 80123d4:	bd10      	pop	{r4, pc}

080123d6 <memcpy>:
 80123d6:	440a      	add	r2, r1
 80123d8:	1e43      	subs	r3, r0, #1
 80123da:	4291      	cmp	r1, r2
 80123dc:	d100      	bne.n	80123e0 <memcpy+0xa>
 80123de:	4770      	bx	lr
 80123e0:	b510      	push	{r4, lr}
 80123e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123e6:	4291      	cmp	r1, r2
 80123e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123ec:	d1f9      	bne.n	80123e2 <memcpy+0xc>
 80123ee:	bd10      	pop	{r4, pc}

080123f0 <nanf>:
 80123f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80123f8 <nanf+0x8>
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	7fc00000 	.word	0x7fc00000

080123fc <quorem>:
 80123fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012400:	6903      	ldr	r3, [r0, #16]
 8012402:	4607      	mov	r7, r0
 8012404:	690c      	ldr	r4, [r1, #16]
 8012406:	42a3      	cmp	r3, r4
 8012408:	f2c0 8083 	blt.w	8012512 <quorem+0x116>
 801240c:	3c01      	subs	r4, #1
 801240e:	f100 0514 	add.w	r5, r0, #20
 8012412:	f101 0814 	add.w	r8, r1, #20
 8012416:	00a3      	lsls	r3, r4, #2
 8012418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801241c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012420:	9300      	str	r3, [sp, #0]
 8012422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012426:	9301      	str	r3, [sp, #4]
 8012428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801242c:	3301      	adds	r3, #1
 801242e:	429a      	cmp	r2, r3
 8012430:	fbb2 f6f3 	udiv	r6, r2, r3
 8012434:	d331      	bcc.n	801249a <quorem+0x9e>
 8012436:	f04f 0a00 	mov.w	sl, #0
 801243a:	46c4      	mov	ip, r8
 801243c:	46ae      	mov	lr, r5
 801243e:	46d3      	mov	fp, sl
 8012440:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012444:	b298      	uxth	r0, r3
 8012446:	45e1      	cmp	r9, ip
 8012448:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801244c:	fb06 a000 	mla	r0, r6, r0, sl
 8012450:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012454:	b280      	uxth	r0, r0
 8012456:	fb06 2303 	mla	r3, r6, r3, r2
 801245a:	f8de 2000 	ldr.w	r2, [lr]
 801245e:	b292      	uxth	r2, r2
 8012460:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012464:	eba2 0200 	sub.w	r2, r2, r0
 8012468:	b29b      	uxth	r3, r3
 801246a:	f8de 0000 	ldr.w	r0, [lr]
 801246e:	445a      	add	r2, fp
 8012470:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012474:	b292      	uxth	r2, r2
 8012476:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801247a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801247e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012482:	f84e 2b04 	str.w	r2, [lr], #4
 8012486:	d2db      	bcs.n	8012440 <quorem+0x44>
 8012488:	9b00      	ldr	r3, [sp, #0]
 801248a:	58eb      	ldr	r3, [r5, r3]
 801248c:	b92b      	cbnz	r3, 801249a <quorem+0x9e>
 801248e:	9b01      	ldr	r3, [sp, #4]
 8012490:	3b04      	subs	r3, #4
 8012492:	429d      	cmp	r5, r3
 8012494:	461a      	mov	r2, r3
 8012496:	d330      	bcc.n	80124fa <quorem+0xfe>
 8012498:	613c      	str	r4, [r7, #16]
 801249a:	4638      	mov	r0, r7
 801249c:	f001 f9ce 	bl	801383c <__mcmp>
 80124a0:	2800      	cmp	r0, #0
 80124a2:	db26      	blt.n	80124f2 <quorem+0xf6>
 80124a4:	4629      	mov	r1, r5
 80124a6:	2000      	movs	r0, #0
 80124a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80124ac:	f8d1 c000 	ldr.w	ip, [r1]
 80124b0:	fa1f fe82 	uxth.w	lr, r2
 80124b4:	45c1      	cmp	r9, r8
 80124b6:	fa1f f38c 	uxth.w	r3, ip
 80124ba:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80124be:	eba3 030e 	sub.w	r3, r3, lr
 80124c2:	4403      	add	r3, r0
 80124c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80124ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80124d6:	f841 3b04 	str.w	r3, [r1], #4
 80124da:	d2e5      	bcs.n	80124a8 <quorem+0xac>
 80124dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124e4:	b922      	cbnz	r2, 80124f0 <quorem+0xf4>
 80124e6:	3b04      	subs	r3, #4
 80124e8:	429d      	cmp	r5, r3
 80124ea:	461a      	mov	r2, r3
 80124ec:	d30b      	bcc.n	8012506 <quorem+0x10a>
 80124ee:	613c      	str	r4, [r7, #16]
 80124f0:	3601      	adds	r6, #1
 80124f2:	4630      	mov	r0, r6
 80124f4:	b003      	add	sp, #12
 80124f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124fa:	6812      	ldr	r2, [r2, #0]
 80124fc:	3b04      	subs	r3, #4
 80124fe:	2a00      	cmp	r2, #0
 8012500:	d1ca      	bne.n	8012498 <quorem+0x9c>
 8012502:	3c01      	subs	r4, #1
 8012504:	e7c5      	b.n	8012492 <quorem+0x96>
 8012506:	6812      	ldr	r2, [r2, #0]
 8012508:	3b04      	subs	r3, #4
 801250a:	2a00      	cmp	r2, #0
 801250c:	d1ef      	bne.n	80124ee <quorem+0xf2>
 801250e:	3c01      	subs	r4, #1
 8012510:	e7ea      	b.n	80124e8 <quorem+0xec>
 8012512:	2000      	movs	r0, #0
 8012514:	e7ee      	b.n	80124f4 <quorem+0xf8>
	...

08012518 <_dtoa_r>:
 8012518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251c:	69c7      	ldr	r7, [r0, #28]
 801251e:	b097      	sub	sp, #92	@ 0x5c
 8012520:	4681      	mov	r9, r0
 8012522:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8012524:	9107      	str	r1, [sp, #28]
 8012526:	920c      	str	r2, [sp, #48]	@ 0x30
 8012528:	9311      	str	r3, [sp, #68]	@ 0x44
 801252a:	ec55 4b10 	vmov	r4, r5, d0
 801252e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8012532:	b97f      	cbnz	r7, 8012554 <_dtoa_r+0x3c>
 8012534:	2010      	movs	r0, #16
 8012536:	f000 fe0b 	bl	8013150 <malloc>
 801253a:	4602      	mov	r2, r0
 801253c:	f8c9 001c 	str.w	r0, [r9, #28]
 8012540:	b920      	cbnz	r0, 801254c <_dtoa_r+0x34>
 8012542:	4ba9      	ldr	r3, [pc, #676]	@ (80127e8 <_dtoa_r+0x2d0>)
 8012544:	21ef      	movs	r1, #239	@ 0xef
 8012546:	48a9      	ldr	r0, [pc, #676]	@ (80127ec <_dtoa_r+0x2d4>)
 8012548:	f002 fdfa 	bl	8015140 <__assert_func>
 801254c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012550:	6007      	str	r7, [r0, #0]
 8012552:	60c7      	str	r7, [r0, #12]
 8012554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012558:	6819      	ldr	r1, [r3, #0]
 801255a:	b159      	cbz	r1, 8012574 <_dtoa_r+0x5c>
 801255c:	685a      	ldr	r2, [r3, #4]
 801255e:	2301      	movs	r3, #1
 8012560:	4648      	mov	r0, r9
 8012562:	4093      	lsls	r3, r2
 8012564:	604a      	str	r2, [r1, #4]
 8012566:	608b      	str	r3, [r1, #8]
 8012568:	f000 fee8 	bl	801333c <_Bfree>
 801256c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012570:	2200      	movs	r2, #0
 8012572:	601a      	str	r2, [r3, #0]
 8012574:	1e2b      	subs	r3, r5, #0
 8012576:	bfb7      	itett	lt
 8012578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801257c:	2300      	movge	r3, #0
 801257e:	2201      	movlt	r2, #1
 8012580:	9305      	strlt	r3, [sp, #20]
 8012582:	bfa8      	it	ge
 8012584:	6033      	strge	r3, [r6, #0]
 8012586:	9f05      	ldr	r7, [sp, #20]
 8012588:	4b99      	ldr	r3, [pc, #612]	@ (80127f0 <_dtoa_r+0x2d8>)
 801258a:	bfb8      	it	lt
 801258c:	6032      	strlt	r2, [r6, #0]
 801258e:	43bb      	bics	r3, r7
 8012590:	d112      	bne.n	80125b8 <_dtoa_r+0xa0>
 8012592:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012596:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012598:	6013      	str	r3, [r2, #0]
 801259a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801259e:	4323      	orrs	r3, r4
 80125a0:	f000 855a 	beq.w	8013058 <_dtoa_r+0xb40>
 80125a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80125a6:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8012804 <_dtoa_r+0x2ec>
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	f000 855c 	beq.w	8013068 <_dtoa_r+0xb50>
 80125b0:	f10a 0303 	add.w	r3, sl, #3
 80125b4:	f000 bd56 	b.w	8013064 <_dtoa_r+0xb4c>
 80125b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80125bc:	2200      	movs	r2, #0
 80125be:	2300      	movs	r3, #0
 80125c0:	ec51 0b17 	vmov	r0, r1, d7
 80125c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80125c8:	f7ee fa82 	bl	8000ad0 <__aeabi_dcmpeq>
 80125cc:	4680      	mov	r8, r0
 80125ce:	b158      	cbz	r0, 80125e8 <_dtoa_r+0xd0>
 80125d0:	2301      	movs	r3, #1
 80125d2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80125d4:	6013      	str	r3, [r2, #0]
 80125d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80125d8:	b113      	cbz	r3, 80125e0 <_dtoa_r+0xc8>
 80125da:	4b86      	ldr	r3, [pc, #536]	@ (80127f4 <_dtoa_r+0x2dc>)
 80125dc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80125de:	6013      	str	r3, [r2, #0]
 80125e0:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8012808 <_dtoa_r+0x2f0>
 80125e4:	f000 bd40 	b.w	8013068 <_dtoa_r+0xb50>
 80125e8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80125ec:	aa14      	add	r2, sp, #80	@ 0x50
 80125ee:	a915      	add	r1, sp, #84	@ 0x54
 80125f0:	4648      	mov	r0, r9
 80125f2:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80125f6:	f001 fa49 	bl	8013a8c <__d2b>
 80125fa:	9002      	str	r0, [sp, #8]
 80125fc:	2e00      	cmp	r6, #0
 80125fe:	d076      	beq.n	80126ee <_dtoa_r+0x1d6>
 8012600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012602:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012606:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801260a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801260e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012616:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801261a:	4619      	mov	r1, r3
 801261c:	2200      	movs	r2, #0
 801261e:	4b76      	ldr	r3, [pc, #472]	@ (80127f8 <_dtoa_r+0x2e0>)
 8012620:	f7ed fe36 	bl	8000290 <__aeabi_dsub>
 8012624:	a36a      	add	r3, pc, #424	@ (adr r3, 80127d0 <_dtoa_r+0x2b8>)
 8012626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262a:	f7ed ffe9 	bl	8000600 <__aeabi_dmul>
 801262e:	a36a      	add	r3, pc, #424	@ (adr r3, 80127d8 <_dtoa_r+0x2c0>)
 8012630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012634:	f7ed fe2e 	bl	8000294 <__adddf3>
 8012638:	4604      	mov	r4, r0
 801263a:	460d      	mov	r5, r1
 801263c:	4630      	mov	r0, r6
 801263e:	f7ed ff75 	bl	800052c <__aeabi_i2d>
 8012642:	a367      	add	r3, pc, #412	@ (adr r3, 80127e0 <_dtoa_r+0x2c8>)
 8012644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012648:	f7ed ffda 	bl	8000600 <__aeabi_dmul>
 801264c:	4602      	mov	r2, r0
 801264e:	460b      	mov	r3, r1
 8012650:	4620      	mov	r0, r4
 8012652:	4629      	mov	r1, r5
 8012654:	f7ed fe1e 	bl	8000294 <__adddf3>
 8012658:	4604      	mov	r4, r0
 801265a:	460d      	mov	r5, r1
 801265c:	f7ee fa80 	bl	8000b60 <__aeabi_d2iz>
 8012660:	2200      	movs	r2, #0
 8012662:	4607      	mov	r7, r0
 8012664:	2300      	movs	r3, #0
 8012666:	4620      	mov	r0, r4
 8012668:	4629      	mov	r1, r5
 801266a:	f7ee fa3b 	bl	8000ae4 <__aeabi_dcmplt>
 801266e:	b140      	cbz	r0, 8012682 <_dtoa_r+0x16a>
 8012670:	4638      	mov	r0, r7
 8012672:	f7ed ff5b 	bl	800052c <__aeabi_i2d>
 8012676:	4622      	mov	r2, r4
 8012678:	462b      	mov	r3, r5
 801267a:	f7ee fa29 	bl	8000ad0 <__aeabi_dcmpeq>
 801267e:	b900      	cbnz	r0, 8012682 <_dtoa_r+0x16a>
 8012680:	3f01      	subs	r7, #1
 8012682:	2f16      	cmp	r7, #22
 8012684:	d852      	bhi.n	801272c <_dtoa_r+0x214>
 8012686:	4b5d      	ldr	r3, [pc, #372]	@ (80127fc <_dtoa_r+0x2e4>)
 8012688:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801268c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012694:	f7ee fa26 	bl	8000ae4 <__aeabi_dcmplt>
 8012698:	2800      	cmp	r0, #0
 801269a:	d049      	beq.n	8012730 <_dtoa_r+0x218>
 801269c:	3f01      	subs	r7, #1
 801269e:	2300      	movs	r3, #0
 80126a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80126a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80126a4:	1b9b      	subs	r3, r3, r6
 80126a6:	1e5a      	subs	r2, r3, #1
 80126a8:	bf4c      	ite	mi
 80126aa:	f1c3 0301 	rsbmi	r3, r3, #1
 80126ae:	2300      	movpl	r3, #0
 80126b0:	9206      	str	r2, [sp, #24]
 80126b2:	bf45      	ittet	mi
 80126b4:	9300      	strmi	r3, [sp, #0]
 80126b6:	2300      	movmi	r3, #0
 80126b8:	9300      	strpl	r3, [sp, #0]
 80126ba:	9306      	strmi	r3, [sp, #24]
 80126bc:	2f00      	cmp	r7, #0
 80126be:	db39      	blt.n	8012734 <_dtoa_r+0x21c>
 80126c0:	9b06      	ldr	r3, [sp, #24]
 80126c2:	970d      	str	r7, [sp, #52]	@ 0x34
 80126c4:	443b      	add	r3, r7
 80126c6:	9306      	str	r3, [sp, #24]
 80126c8:	2300      	movs	r3, #0
 80126ca:	9308      	str	r3, [sp, #32]
 80126cc:	9b07      	ldr	r3, [sp, #28]
 80126ce:	2b09      	cmp	r3, #9
 80126d0:	d863      	bhi.n	801279a <_dtoa_r+0x282>
 80126d2:	2b05      	cmp	r3, #5
 80126d4:	bfc5      	ittet	gt
 80126d6:	3b04      	subgt	r3, #4
 80126d8:	2400      	movgt	r4, #0
 80126da:	2401      	movle	r4, #1
 80126dc:	9307      	strgt	r3, [sp, #28]
 80126de:	9b07      	ldr	r3, [sp, #28]
 80126e0:	3b02      	subs	r3, #2
 80126e2:	2b03      	cmp	r3, #3
 80126e4:	d865      	bhi.n	80127b2 <_dtoa_r+0x29a>
 80126e6:	e8df f003 	tbb	[pc, r3]
 80126ea:	5654      	.short	0x5654
 80126ec:	2d39      	.short	0x2d39
 80126ee:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80126f2:	441e      	add	r6, r3
 80126f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80126f8:	2b20      	cmp	r3, #32
 80126fa:	bfc9      	itett	gt
 80126fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012700:	f1c3 0320 	rsble	r3, r3, #32
 8012704:	409f      	lslgt	r7, r3
 8012706:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801270a:	bfd8      	it	le
 801270c:	fa04 f003 	lslle.w	r0, r4, r3
 8012710:	f106 36ff 	add.w	r6, r6, #4294967295
 8012714:	bfc4      	itt	gt
 8012716:	fa24 f303 	lsrgt.w	r3, r4, r3
 801271a:	ea47 0003 	orrgt.w	r0, r7, r3
 801271e:	f7ed fef5 	bl	800050c <__aeabi_ui2d>
 8012722:	2201      	movs	r2, #1
 8012724:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012728:	9212      	str	r2, [sp, #72]	@ 0x48
 801272a:	e776      	b.n	801261a <_dtoa_r+0x102>
 801272c:	2301      	movs	r3, #1
 801272e:	e7b7      	b.n	80126a0 <_dtoa_r+0x188>
 8012730:	9010      	str	r0, [sp, #64]	@ 0x40
 8012732:	e7b6      	b.n	80126a2 <_dtoa_r+0x18a>
 8012734:	9b00      	ldr	r3, [sp, #0]
 8012736:	1bdb      	subs	r3, r3, r7
 8012738:	9300      	str	r3, [sp, #0]
 801273a:	427b      	negs	r3, r7
 801273c:	9308      	str	r3, [sp, #32]
 801273e:	2300      	movs	r3, #0
 8012740:	930d      	str	r3, [sp, #52]	@ 0x34
 8012742:	e7c3      	b.n	80126cc <_dtoa_r+0x1b4>
 8012744:	2301      	movs	r3, #1
 8012746:	9309      	str	r3, [sp, #36]	@ 0x24
 8012748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801274a:	eb07 0b03 	add.w	fp, r7, r3
 801274e:	f10b 0301 	add.w	r3, fp, #1
 8012752:	2b01      	cmp	r3, #1
 8012754:	9303      	str	r3, [sp, #12]
 8012756:	bfb8      	it	lt
 8012758:	2301      	movlt	r3, #1
 801275a:	e006      	b.n	801276a <_dtoa_r+0x252>
 801275c:	2301      	movs	r3, #1
 801275e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012760:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012762:	2b00      	cmp	r3, #0
 8012764:	dd28      	ble.n	80127b8 <_dtoa_r+0x2a0>
 8012766:	469b      	mov	fp, r3
 8012768:	9303      	str	r3, [sp, #12]
 801276a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801276e:	2100      	movs	r1, #0
 8012770:	2204      	movs	r2, #4
 8012772:	f102 0514 	add.w	r5, r2, #20
 8012776:	429d      	cmp	r5, r3
 8012778:	d926      	bls.n	80127c8 <_dtoa_r+0x2b0>
 801277a:	6041      	str	r1, [r0, #4]
 801277c:	4648      	mov	r0, r9
 801277e:	f000 fd9d 	bl	80132bc <_Balloc>
 8012782:	4682      	mov	sl, r0
 8012784:	2800      	cmp	r0, #0
 8012786:	d141      	bne.n	801280c <_dtoa_r+0x2f4>
 8012788:	4b1d      	ldr	r3, [pc, #116]	@ (8012800 <_dtoa_r+0x2e8>)
 801278a:	4602      	mov	r2, r0
 801278c:	f240 11af 	movw	r1, #431	@ 0x1af
 8012790:	e6d9      	b.n	8012546 <_dtoa_r+0x2e>
 8012792:	2300      	movs	r3, #0
 8012794:	e7e3      	b.n	801275e <_dtoa_r+0x246>
 8012796:	2300      	movs	r3, #0
 8012798:	e7d5      	b.n	8012746 <_dtoa_r+0x22e>
 801279a:	2401      	movs	r4, #1
 801279c:	2300      	movs	r3, #0
 801279e:	9409      	str	r4, [sp, #36]	@ 0x24
 80127a0:	9307      	str	r3, [sp, #28]
 80127a2:	f04f 3bff 	mov.w	fp, #4294967295
 80127a6:	2200      	movs	r2, #0
 80127a8:	2312      	movs	r3, #18
 80127aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80127ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80127b0:	e7db      	b.n	801276a <_dtoa_r+0x252>
 80127b2:	2301      	movs	r3, #1
 80127b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80127b6:	e7f4      	b.n	80127a2 <_dtoa_r+0x28a>
 80127b8:	f04f 0b01 	mov.w	fp, #1
 80127bc:	465b      	mov	r3, fp
 80127be:	f8cd b00c 	str.w	fp, [sp, #12]
 80127c2:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80127c6:	e7d0      	b.n	801276a <_dtoa_r+0x252>
 80127c8:	3101      	adds	r1, #1
 80127ca:	0052      	lsls	r2, r2, #1
 80127cc:	e7d1      	b.n	8012772 <_dtoa_r+0x25a>
 80127ce:	bf00      	nop
 80127d0:	636f4361 	.word	0x636f4361
 80127d4:	3fd287a7 	.word	0x3fd287a7
 80127d8:	8b60c8b3 	.word	0x8b60c8b3
 80127dc:	3fc68a28 	.word	0x3fc68a28
 80127e0:	509f79fb 	.word	0x509f79fb
 80127e4:	3fd34413 	.word	0x3fd34413
 80127e8:	08015b22 	.word	0x08015b22
 80127ec:	08015b39 	.word	0x08015b39
 80127f0:	7ff00000 	.word	0x7ff00000
 80127f4:	08015aed 	.word	0x08015aed
 80127f8:	3ff80000 	.word	0x3ff80000
 80127fc:	08015ce8 	.word	0x08015ce8
 8012800:	08015b91 	.word	0x08015b91
 8012804:	08015b1e 	.word	0x08015b1e
 8012808:	08015aec 	.word	0x08015aec
 801280c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012810:	6018      	str	r0, [r3, #0]
 8012812:	9b03      	ldr	r3, [sp, #12]
 8012814:	2b0e      	cmp	r3, #14
 8012816:	f200 80a1 	bhi.w	801295c <_dtoa_r+0x444>
 801281a:	2c00      	cmp	r4, #0
 801281c:	f000 809e 	beq.w	801295c <_dtoa_r+0x444>
 8012820:	2f00      	cmp	r7, #0
 8012822:	dd33      	ble.n	801288c <_dtoa_r+0x374>
 8012824:	f007 020f 	and.w	r2, r7, #15
 8012828:	4b9b      	ldr	r3, [pc, #620]	@ (8012a98 <_dtoa_r+0x580>)
 801282a:	05f8      	lsls	r0, r7, #23
 801282c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012834:	ed93 7b00 	vldr	d7, [r3]
 8012838:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801283c:	d516      	bpl.n	801286c <_dtoa_r+0x354>
 801283e:	4b97      	ldr	r3, [pc, #604]	@ (8012a9c <_dtoa_r+0x584>)
 8012840:	f004 040f 	and.w	r4, r4, #15
 8012844:	2603      	movs	r6, #3
 8012846:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801284a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801284e:	f7ee f801 	bl	8000854 <__aeabi_ddiv>
 8012852:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012856:	4d91      	ldr	r5, [pc, #580]	@ (8012a9c <_dtoa_r+0x584>)
 8012858:	b954      	cbnz	r4, 8012870 <_dtoa_r+0x358>
 801285a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801285e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012862:	f7ed fff7 	bl	8000854 <__aeabi_ddiv>
 8012866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801286a:	e028      	b.n	80128be <_dtoa_r+0x3a6>
 801286c:	2602      	movs	r6, #2
 801286e:	e7f2      	b.n	8012856 <_dtoa_r+0x33e>
 8012870:	07e1      	lsls	r1, r4, #31
 8012872:	d508      	bpl.n	8012886 <_dtoa_r+0x36e>
 8012874:	3601      	adds	r6, #1
 8012876:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801287a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801287e:	f7ed febf 	bl	8000600 <__aeabi_dmul>
 8012882:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012886:	1064      	asrs	r4, r4, #1
 8012888:	3508      	adds	r5, #8
 801288a:	e7e5      	b.n	8012858 <_dtoa_r+0x340>
 801288c:	f000 80af 	beq.w	80129ee <_dtoa_r+0x4d6>
 8012890:	427c      	negs	r4, r7
 8012892:	4b81      	ldr	r3, [pc, #516]	@ (8012a98 <_dtoa_r+0x580>)
 8012894:	4d81      	ldr	r5, [pc, #516]	@ (8012a9c <_dtoa_r+0x584>)
 8012896:	2602      	movs	r6, #2
 8012898:	f004 020f 	and.w	r2, r4, #15
 801289c:	1124      	asrs	r4, r4, #4
 801289e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80128a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128aa:	f7ed fea9 	bl	8000600 <__aeabi_dmul>
 80128ae:	2300      	movs	r3, #0
 80128b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128b4:	2c00      	cmp	r4, #0
 80128b6:	f040 808f 	bne.w	80129d8 <_dtoa_r+0x4c0>
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1d3      	bne.n	8012866 <_dtoa_r+0x34e>
 80128be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80128c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f000 8094 	beq.w	80129f2 <_dtoa_r+0x4da>
 80128ca:	2200      	movs	r2, #0
 80128cc:	4b74      	ldr	r3, [pc, #464]	@ (8012aa0 <_dtoa_r+0x588>)
 80128ce:	4620      	mov	r0, r4
 80128d0:	4629      	mov	r1, r5
 80128d2:	f7ee f907 	bl	8000ae4 <__aeabi_dcmplt>
 80128d6:	2800      	cmp	r0, #0
 80128d8:	f000 808b 	beq.w	80129f2 <_dtoa_r+0x4da>
 80128dc:	9b03      	ldr	r3, [sp, #12]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f000 8087 	beq.w	80129f2 <_dtoa_r+0x4da>
 80128e4:	f1bb 0f00 	cmp.w	fp, #0
 80128e8:	dd34      	ble.n	8012954 <_dtoa_r+0x43c>
 80128ea:	4620      	mov	r0, r4
 80128ec:	f107 38ff 	add.w	r8, r7, #4294967295
 80128f0:	3601      	adds	r6, #1
 80128f2:	465c      	mov	r4, fp
 80128f4:	2200      	movs	r2, #0
 80128f6:	4b6b      	ldr	r3, [pc, #428]	@ (8012aa4 <_dtoa_r+0x58c>)
 80128f8:	4629      	mov	r1, r5
 80128fa:	f7ed fe81 	bl	8000600 <__aeabi_dmul>
 80128fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012902:	4630      	mov	r0, r6
 8012904:	f7ed fe12 	bl	800052c <__aeabi_i2d>
 8012908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801290c:	f7ed fe78 	bl	8000600 <__aeabi_dmul>
 8012910:	2200      	movs	r2, #0
 8012912:	4b65      	ldr	r3, [pc, #404]	@ (8012aa8 <_dtoa_r+0x590>)
 8012914:	f7ed fcbe 	bl	8000294 <__adddf3>
 8012918:	4605      	mov	r5, r0
 801291a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801291e:	2c00      	cmp	r4, #0
 8012920:	d16a      	bne.n	80129f8 <_dtoa_r+0x4e0>
 8012922:	2200      	movs	r2, #0
 8012924:	4b61      	ldr	r3, [pc, #388]	@ (8012aac <_dtoa_r+0x594>)
 8012926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801292a:	f7ed fcb1 	bl	8000290 <__aeabi_dsub>
 801292e:	4602      	mov	r2, r0
 8012930:	460b      	mov	r3, r1
 8012932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012936:	462a      	mov	r2, r5
 8012938:	4633      	mov	r3, r6
 801293a:	f7ee f8f1 	bl	8000b20 <__aeabi_dcmpgt>
 801293e:	2800      	cmp	r0, #0
 8012940:	f040 8298 	bne.w	8012e74 <_dtoa_r+0x95c>
 8012944:	462a      	mov	r2, r5
 8012946:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801294a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801294e:	f7ee f8c9 	bl	8000ae4 <__aeabi_dcmplt>
 8012952:	bb38      	cbnz	r0, 80129a4 <_dtoa_r+0x48c>
 8012954:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8012958:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801295c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801295e:	2b00      	cmp	r3, #0
 8012960:	f2c0 8157 	blt.w	8012c12 <_dtoa_r+0x6fa>
 8012964:	2f0e      	cmp	r7, #14
 8012966:	f300 8154 	bgt.w	8012c12 <_dtoa_r+0x6fa>
 801296a:	4b4b      	ldr	r3, [pc, #300]	@ (8012a98 <_dtoa_r+0x580>)
 801296c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012970:	ed93 7b00 	vldr	d7, [r3]
 8012974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012976:	2b00      	cmp	r3, #0
 8012978:	ed8d 7b00 	vstr	d7, [sp]
 801297c:	f280 80e5 	bge.w	8012b4a <_dtoa_r+0x632>
 8012980:	9b03      	ldr	r3, [sp, #12]
 8012982:	2b00      	cmp	r3, #0
 8012984:	f300 80e1 	bgt.w	8012b4a <_dtoa_r+0x632>
 8012988:	d10c      	bne.n	80129a4 <_dtoa_r+0x48c>
 801298a:	2200      	movs	r2, #0
 801298c:	4b47      	ldr	r3, [pc, #284]	@ (8012aac <_dtoa_r+0x594>)
 801298e:	ec51 0b17 	vmov	r0, r1, d7
 8012992:	f7ed fe35 	bl	8000600 <__aeabi_dmul>
 8012996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801299a:	f7ee f8b7 	bl	8000b0c <__aeabi_dcmpge>
 801299e:	2800      	cmp	r0, #0
 80129a0:	f000 8266 	beq.w	8012e70 <_dtoa_r+0x958>
 80129a4:	2400      	movs	r4, #0
 80129a6:	4625      	mov	r5, r4
 80129a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129aa:	4656      	mov	r6, sl
 80129ac:	ea6f 0803 	mvn.w	r8, r3
 80129b0:	2700      	movs	r7, #0
 80129b2:	4621      	mov	r1, r4
 80129b4:	4648      	mov	r0, r9
 80129b6:	f000 fcc1 	bl	801333c <_Bfree>
 80129ba:	2d00      	cmp	r5, #0
 80129bc:	f000 80bd 	beq.w	8012b3a <_dtoa_r+0x622>
 80129c0:	b12f      	cbz	r7, 80129ce <_dtoa_r+0x4b6>
 80129c2:	42af      	cmp	r7, r5
 80129c4:	d003      	beq.n	80129ce <_dtoa_r+0x4b6>
 80129c6:	4639      	mov	r1, r7
 80129c8:	4648      	mov	r0, r9
 80129ca:	f000 fcb7 	bl	801333c <_Bfree>
 80129ce:	4629      	mov	r1, r5
 80129d0:	4648      	mov	r0, r9
 80129d2:	f000 fcb3 	bl	801333c <_Bfree>
 80129d6:	e0b0      	b.n	8012b3a <_dtoa_r+0x622>
 80129d8:	07e2      	lsls	r2, r4, #31
 80129da:	d505      	bpl.n	80129e8 <_dtoa_r+0x4d0>
 80129dc:	3601      	adds	r6, #1
 80129de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80129e2:	f7ed fe0d 	bl	8000600 <__aeabi_dmul>
 80129e6:	2301      	movs	r3, #1
 80129e8:	1064      	asrs	r4, r4, #1
 80129ea:	3508      	adds	r5, #8
 80129ec:	e762      	b.n	80128b4 <_dtoa_r+0x39c>
 80129ee:	2602      	movs	r6, #2
 80129f0:	e765      	b.n	80128be <_dtoa_r+0x3a6>
 80129f2:	46b8      	mov	r8, r7
 80129f4:	9c03      	ldr	r4, [sp, #12]
 80129f6:	e784      	b.n	8012902 <_dtoa_r+0x3ea>
 80129f8:	4b27      	ldr	r3, [pc, #156]	@ (8012a98 <_dtoa_r+0x580>)
 80129fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80129fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a00:	4454      	add	r4, sl
 8012a02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012a06:	2900      	cmp	r1, #0
 8012a08:	d054      	beq.n	8012ab4 <_dtoa_r+0x59c>
 8012a0a:	2000      	movs	r0, #0
 8012a0c:	4928      	ldr	r1, [pc, #160]	@ (8012ab0 <_dtoa_r+0x598>)
 8012a0e:	f7ed ff21 	bl	8000854 <__aeabi_ddiv>
 8012a12:	4633      	mov	r3, r6
 8012a14:	4656      	mov	r6, sl
 8012a16:	462a      	mov	r2, r5
 8012a18:	f7ed fc3a 	bl	8000290 <__aeabi_dsub>
 8012a1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a24:	f7ee f89c 	bl	8000b60 <__aeabi_d2iz>
 8012a28:	4605      	mov	r5, r0
 8012a2a:	f7ed fd7f 	bl	800052c <__aeabi_i2d>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	460b      	mov	r3, r1
 8012a32:	3530      	adds	r5, #48	@ 0x30
 8012a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a38:	f7ed fc2a 	bl	8000290 <__aeabi_dsub>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	460b      	mov	r3, r1
 8012a40:	f806 5b01 	strb.w	r5, [r6], #1
 8012a44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012a48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012a4c:	f7ee f84a 	bl	8000ae4 <__aeabi_dcmplt>
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d172      	bne.n	8012b3a <_dtoa_r+0x622>
 8012a54:	2000      	movs	r0, #0
 8012a56:	4912      	ldr	r1, [pc, #72]	@ (8012aa0 <_dtoa_r+0x588>)
 8012a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a5c:	f7ed fc18 	bl	8000290 <__aeabi_dsub>
 8012a60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012a64:	f7ee f83e 	bl	8000ae4 <__aeabi_dcmplt>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	f040 80b4 	bne.w	8012bd6 <_dtoa_r+0x6be>
 8012a6e:	42a6      	cmp	r6, r4
 8012a70:	f43f af70 	beq.w	8012954 <_dtoa_r+0x43c>
 8012a74:	2200      	movs	r2, #0
 8012a76:	4b0b      	ldr	r3, [pc, #44]	@ (8012aa4 <_dtoa_r+0x58c>)
 8012a78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012a7c:	f7ed fdc0 	bl	8000600 <__aeabi_dmul>
 8012a80:	2200      	movs	r2, #0
 8012a82:	4b08      	ldr	r3, [pc, #32]	@ (8012aa4 <_dtoa_r+0x58c>)
 8012a84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a8c:	f7ed fdb8 	bl	8000600 <__aeabi_dmul>
 8012a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a94:	e7c4      	b.n	8012a20 <_dtoa_r+0x508>
 8012a96:	bf00      	nop
 8012a98:	08015ce8 	.word	0x08015ce8
 8012a9c:	08015cc0 	.word	0x08015cc0
 8012aa0:	3ff00000 	.word	0x3ff00000
 8012aa4:	40240000 	.word	0x40240000
 8012aa8:	401c0000 	.word	0x401c0000
 8012aac:	40140000 	.word	0x40140000
 8012ab0:	3fe00000 	.word	0x3fe00000
 8012ab4:	4631      	mov	r1, r6
 8012ab6:	4656      	mov	r6, sl
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f7ed fda1 	bl	8000600 <__aeabi_dmul>
 8012abe:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012ac0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ac8:	f7ee f84a 	bl	8000b60 <__aeabi_d2iz>
 8012acc:	4605      	mov	r5, r0
 8012ace:	f7ed fd2d 	bl	800052c <__aeabi_i2d>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	3530      	adds	r5, #48	@ 0x30
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012adc:	f7ed fbd8 	bl	8000290 <__aeabi_dsub>
 8012ae0:	f806 5b01 	strb.w	r5, [r6], #1
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	42a6      	cmp	r6, r4
 8012aea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012aee:	f04f 0200 	mov.w	r2, #0
 8012af2:	d124      	bne.n	8012b3e <_dtoa_r+0x626>
 8012af4:	4baf      	ldr	r3, [pc, #700]	@ (8012db4 <_dtoa_r+0x89c>)
 8012af6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012afa:	f7ed fbcb 	bl	8000294 <__adddf3>
 8012afe:	4602      	mov	r2, r0
 8012b00:	460b      	mov	r3, r1
 8012b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b06:	f7ee f80b 	bl	8000b20 <__aeabi_dcmpgt>
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d163      	bne.n	8012bd6 <_dtoa_r+0x6be>
 8012b0e:	2000      	movs	r0, #0
 8012b10:	49a8      	ldr	r1, [pc, #672]	@ (8012db4 <_dtoa_r+0x89c>)
 8012b12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012b16:	f7ed fbbb 	bl	8000290 <__aeabi_dsub>
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b22:	f7ed ffdf 	bl	8000ae4 <__aeabi_dcmplt>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	f43f af14 	beq.w	8012954 <_dtoa_r+0x43c>
 8012b2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012b2e:	1e73      	subs	r3, r6, #1
 8012b30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012b32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012b36:	2b30      	cmp	r3, #48	@ 0x30
 8012b38:	d0f8      	beq.n	8012b2c <_dtoa_r+0x614>
 8012b3a:	4647      	mov	r7, r8
 8012b3c:	e03b      	b.n	8012bb6 <_dtoa_r+0x69e>
 8012b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8012db8 <_dtoa_r+0x8a0>)
 8012b40:	f7ed fd5e 	bl	8000600 <__aeabi_dmul>
 8012b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b48:	e7bc      	b.n	8012ac4 <_dtoa_r+0x5ac>
 8012b4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012b4e:	4656      	mov	r6, sl
 8012b50:	4620      	mov	r0, r4
 8012b52:	4629      	mov	r1, r5
 8012b54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b58:	f7ed fe7c 	bl	8000854 <__aeabi_ddiv>
 8012b5c:	f7ee f800 	bl	8000b60 <__aeabi_d2iz>
 8012b60:	4680      	mov	r8, r0
 8012b62:	f7ed fce3 	bl	800052c <__aeabi_i2d>
 8012b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b6a:	f7ed fd49 	bl	8000600 <__aeabi_dmul>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	4620      	mov	r0, r4
 8012b72:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012b76:	460b      	mov	r3, r1
 8012b78:	4629      	mov	r1, r5
 8012b7a:	f7ed fb89 	bl	8000290 <__aeabi_dsub>
 8012b7e:	9d03      	ldr	r5, [sp, #12]
 8012b80:	f806 4b01 	strb.w	r4, [r6], #1
 8012b84:	eba6 040a 	sub.w	r4, r6, sl
 8012b88:	4602      	mov	r2, r0
 8012b8a:	460b      	mov	r3, r1
 8012b8c:	42a5      	cmp	r5, r4
 8012b8e:	d133      	bne.n	8012bf8 <_dtoa_r+0x6e0>
 8012b90:	f7ed fb80 	bl	8000294 <__adddf3>
 8012b94:	4604      	mov	r4, r0
 8012b96:	460d      	mov	r5, r1
 8012b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b9c:	f7ed ffc0 	bl	8000b20 <__aeabi_dcmpgt>
 8012ba0:	b9c0      	cbnz	r0, 8012bd4 <_dtoa_r+0x6bc>
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	4629      	mov	r1, r5
 8012ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012baa:	f7ed ff91 	bl	8000ad0 <__aeabi_dcmpeq>
 8012bae:	b110      	cbz	r0, 8012bb6 <_dtoa_r+0x69e>
 8012bb0:	f018 0f01 	tst.w	r8, #1
 8012bb4:	d10e      	bne.n	8012bd4 <_dtoa_r+0x6bc>
 8012bb6:	9902      	ldr	r1, [sp, #8]
 8012bb8:	4648      	mov	r0, r9
 8012bba:	f000 fbbf 	bl	801333c <_Bfree>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	3701      	adds	r7, #1
 8012bc2:	7033      	strb	r3, [r6, #0]
 8012bc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012bc6:	601f      	str	r7, [r3, #0]
 8012bc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	f000 824c 	beq.w	8013068 <_dtoa_r+0xb50>
 8012bd0:	601e      	str	r6, [r3, #0]
 8012bd2:	e249      	b.n	8013068 <_dtoa_r+0xb50>
 8012bd4:	46b8      	mov	r8, r7
 8012bd6:	4633      	mov	r3, r6
 8012bd8:	461e      	mov	r6, r3
 8012bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bde:	2a39      	cmp	r2, #57	@ 0x39
 8012be0:	d106      	bne.n	8012bf0 <_dtoa_r+0x6d8>
 8012be2:	459a      	cmp	sl, r3
 8012be4:	d1f8      	bne.n	8012bd8 <_dtoa_r+0x6c0>
 8012be6:	2230      	movs	r2, #48	@ 0x30
 8012be8:	f108 0801 	add.w	r8, r8, #1
 8012bec:	f88a 2000 	strb.w	r2, [sl]
 8012bf0:	781a      	ldrb	r2, [r3, #0]
 8012bf2:	3201      	adds	r2, #1
 8012bf4:	701a      	strb	r2, [r3, #0]
 8012bf6:	e7a0      	b.n	8012b3a <_dtoa_r+0x622>
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8012db8 <_dtoa_r+0x8a0>)
 8012bfc:	f7ed fd00 	bl	8000600 <__aeabi_dmul>
 8012c00:	2200      	movs	r2, #0
 8012c02:	2300      	movs	r3, #0
 8012c04:	4604      	mov	r4, r0
 8012c06:	460d      	mov	r5, r1
 8012c08:	f7ed ff62 	bl	8000ad0 <__aeabi_dcmpeq>
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d09f      	beq.n	8012b50 <_dtoa_r+0x638>
 8012c10:	e7d1      	b.n	8012bb6 <_dtoa_r+0x69e>
 8012c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c14:	2a00      	cmp	r2, #0
 8012c16:	f000 80ea 	beq.w	8012dee <_dtoa_r+0x8d6>
 8012c1a:	9a07      	ldr	r2, [sp, #28]
 8012c1c:	2a01      	cmp	r2, #1
 8012c1e:	f300 80cd 	bgt.w	8012dbc <_dtoa_r+0x8a4>
 8012c22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012c24:	2a00      	cmp	r2, #0
 8012c26:	f000 80c1 	beq.w	8012dac <_dtoa_r+0x894>
 8012c2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012c2e:	9c08      	ldr	r4, [sp, #32]
 8012c30:	9e00      	ldr	r6, [sp, #0]
 8012c32:	9a00      	ldr	r2, [sp, #0]
 8012c34:	2101      	movs	r1, #1
 8012c36:	4648      	mov	r0, r9
 8012c38:	441a      	add	r2, r3
 8012c3a:	9200      	str	r2, [sp, #0]
 8012c3c:	9a06      	ldr	r2, [sp, #24]
 8012c3e:	441a      	add	r2, r3
 8012c40:	9206      	str	r2, [sp, #24]
 8012c42:	f000 fc7b 	bl	801353c <__i2b>
 8012c46:	4605      	mov	r5, r0
 8012c48:	b166      	cbz	r6, 8012c64 <_dtoa_r+0x74c>
 8012c4a:	9b06      	ldr	r3, [sp, #24]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	dd09      	ble.n	8012c64 <_dtoa_r+0x74c>
 8012c50:	42b3      	cmp	r3, r6
 8012c52:	9a00      	ldr	r2, [sp, #0]
 8012c54:	bfa8      	it	ge
 8012c56:	4633      	movge	r3, r6
 8012c58:	1ad2      	subs	r2, r2, r3
 8012c5a:	1af6      	subs	r6, r6, r3
 8012c5c:	9200      	str	r2, [sp, #0]
 8012c5e:	9a06      	ldr	r2, [sp, #24]
 8012c60:	1ad3      	subs	r3, r2, r3
 8012c62:	9306      	str	r3, [sp, #24]
 8012c64:	9b08      	ldr	r3, [sp, #32]
 8012c66:	b30b      	cbz	r3, 8012cac <_dtoa_r+0x794>
 8012c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f000 80c6 	beq.w	8012dfc <_dtoa_r+0x8e4>
 8012c70:	2c00      	cmp	r4, #0
 8012c72:	f000 80c0 	beq.w	8012df6 <_dtoa_r+0x8de>
 8012c76:	4629      	mov	r1, r5
 8012c78:	4622      	mov	r2, r4
 8012c7a:	4648      	mov	r0, r9
 8012c7c:	f000 fd18 	bl	80136b0 <__pow5mult>
 8012c80:	9a02      	ldr	r2, [sp, #8]
 8012c82:	4601      	mov	r1, r0
 8012c84:	4605      	mov	r5, r0
 8012c86:	4648      	mov	r0, r9
 8012c88:	f000 fc6e 	bl	8013568 <__multiply>
 8012c8c:	9902      	ldr	r1, [sp, #8]
 8012c8e:	4680      	mov	r8, r0
 8012c90:	4648      	mov	r0, r9
 8012c92:	f000 fb53 	bl	801333c <_Bfree>
 8012c96:	9b08      	ldr	r3, [sp, #32]
 8012c98:	1b1b      	subs	r3, r3, r4
 8012c9a:	9308      	str	r3, [sp, #32]
 8012c9c:	f000 80b1 	beq.w	8012e02 <_dtoa_r+0x8ea>
 8012ca0:	9a08      	ldr	r2, [sp, #32]
 8012ca2:	4641      	mov	r1, r8
 8012ca4:	4648      	mov	r0, r9
 8012ca6:	f000 fd03 	bl	80136b0 <__pow5mult>
 8012caa:	9002      	str	r0, [sp, #8]
 8012cac:	2101      	movs	r1, #1
 8012cae:	4648      	mov	r0, r9
 8012cb0:	f000 fc44 	bl	801353c <__i2b>
 8012cb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	f000 81d9 	beq.w	8013070 <_dtoa_r+0xb58>
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	4601      	mov	r1, r0
 8012cc2:	4648      	mov	r0, r9
 8012cc4:	f000 fcf4 	bl	80136b0 <__pow5mult>
 8012cc8:	9b07      	ldr	r3, [sp, #28]
 8012cca:	4604      	mov	r4, r0
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	f300 809f 	bgt.w	8012e10 <_dtoa_r+0x8f8>
 8012cd2:	9b04      	ldr	r3, [sp, #16]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f040 8097 	bne.w	8012e08 <_dtoa_r+0x8f0>
 8012cda:	9b05      	ldr	r3, [sp, #20]
 8012cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f040 8093 	bne.w	8012e0c <_dtoa_r+0x8f4>
 8012ce6:	9b05      	ldr	r3, [sp, #20]
 8012ce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012cec:	0d1b      	lsrs	r3, r3, #20
 8012cee:	051b      	lsls	r3, r3, #20
 8012cf0:	b133      	cbz	r3, 8012d00 <_dtoa_r+0x7e8>
 8012cf2:	9b00      	ldr	r3, [sp, #0]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	9300      	str	r3, [sp, #0]
 8012cf8:	9b06      	ldr	r3, [sp, #24]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	9306      	str	r3, [sp, #24]
 8012cfe:	2301      	movs	r3, #1
 8012d00:	9308      	str	r3, [sp, #32]
 8012d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	f000 81b9 	beq.w	801307c <_dtoa_r+0xb64>
 8012d0a:	6923      	ldr	r3, [r4, #16]
 8012d0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012d10:	6918      	ldr	r0, [r3, #16]
 8012d12:	f000 fbc7 	bl	80134a4 <__hi0bits>
 8012d16:	f1c0 0020 	rsb	r0, r0, #32
 8012d1a:	9b06      	ldr	r3, [sp, #24]
 8012d1c:	4418      	add	r0, r3
 8012d1e:	f010 001f 	ands.w	r0, r0, #31
 8012d22:	f000 8082 	beq.w	8012e2a <_dtoa_r+0x912>
 8012d26:	f1c0 0320 	rsb	r3, r0, #32
 8012d2a:	2b04      	cmp	r3, #4
 8012d2c:	dd73      	ble.n	8012e16 <_dtoa_r+0x8fe>
 8012d2e:	f1c0 001c 	rsb	r0, r0, #28
 8012d32:	9b00      	ldr	r3, [sp, #0]
 8012d34:	4403      	add	r3, r0
 8012d36:	4406      	add	r6, r0
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	9b06      	ldr	r3, [sp, #24]
 8012d3c:	4403      	add	r3, r0
 8012d3e:	9306      	str	r3, [sp, #24]
 8012d40:	9b00      	ldr	r3, [sp, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	dd05      	ble.n	8012d52 <_dtoa_r+0x83a>
 8012d46:	461a      	mov	r2, r3
 8012d48:	9902      	ldr	r1, [sp, #8]
 8012d4a:	4648      	mov	r0, r9
 8012d4c:	f000 fd0a 	bl	8013764 <__lshift>
 8012d50:	9002      	str	r0, [sp, #8]
 8012d52:	9b06      	ldr	r3, [sp, #24]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	dd05      	ble.n	8012d64 <_dtoa_r+0x84c>
 8012d58:	4621      	mov	r1, r4
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	4648      	mov	r0, r9
 8012d5e:	f000 fd01 	bl	8013764 <__lshift>
 8012d62:	4604      	mov	r4, r0
 8012d64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d061      	beq.n	8012e2e <_dtoa_r+0x916>
 8012d6a:	4621      	mov	r1, r4
 8012d6c:	9802      	ldr	r0, [sp, #8]
 8012d6e:	f000 fd65 	bl	801383c <__mcmp>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	da5b      	bge.n	8012e2e <_dtoa_r+0x916>
 8012d76:	2300      	movs	r3, #0
 8012d78:	220a      	movs	r2, #10
 8012d7a:	9902      	ldr	r1, [sp, #8]
 8012d7c:	4648      	mov	r0, r9
 8012d7e:	f000 faff 	bl	8013380 <__multadd>
 8012d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d84:	f107 38ff 	add.w	r8, r7, #4294967295
 8012d88:	9002      	str	r0, [sp, #8]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	f000 8178 	beq.w	8013080 <_dtoa_r+0xb68>
 8012d90:	4629      	mov	r1, r5
 8012d92:	2300      	movs	r3, #0
 8012d94:	220a      	movs	r2, #10
 8012d96:	4648      	mov	r0, r9
 8012d98:	f000 faf2 	bl	8013380 <__multadd>
 8012d9c:	f1bb 0f00 	cmp.w	fp, #0
 8012da0:	4605      	mov	r5, r0
 8012da2:	dc6f      	bgt.n	8012e84 <_dtoa_r+0x96c>
 8012da4:	9b07      	ldr	r3, [sp, #28]
 8012da6:	2b02      	cmp	r3, #2
 8012da8:	dc49      	bgt.n	8012e3e <_dtoa_r+0x926>
 8012daa:	e06b      	b.n	8012e84 <_dtoa_r+0x96c>
 8012dac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012dae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012db2:	e73c      	b.n	8012c2e <_dtoa_r+0x716>
 8012db4:	3fe00000 	.word	0x3fe00000
 8012db8:	40240000 	.word	0x40240000
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	1e5c      	subs	r4, r3, #1
 8012dc0:	9b08      	ldr	r3, [sp, #32]
 8012dc2:	42a3      	cmp	r3, r4
 8012dc4:	db09      	blt.n	8012dda <_dtoa_r+0x8c2>
 8012dc6:	1b1c      	subs	r4, r3, r4
 8012dc8:	9b03      	ldr	r3, [sp, #12]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	f6bf af30 	bge.w	8012c30 <_dtoa_r+0x718>
 8012dd0:	9b00      	ldr	r3, [sp, #0]
 8012dd2:	9a03      	ldr	r2, [sp, #12]
 8012dd4:	1a9e      	subs	r6, r3, r2
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e72b      	b.n	8012c32 <_dtoa_r+0x71a>
 8012dda:	9b08      	ldr	r3, [sp, #32]
 8012ddc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012dde:	1ae3      	subs	r3, r4, r3
 8012de0:	9408      	str	r4, [sp, #32]
 8012de2:	9e00      	ldr	r6, [sp, #0]
 8012de4:	2400      	movs	r4, #0
 8012de6:	441a      	add	r2, r3
 8012de8:	9b03      	ldr	r3, [sp, #12]
 8012dea:	920d      	str	r2, [sp, #52]	@ 0x34
 8012dec:	e721      	b.n	8012c32 <_dtoa_r+0x71a>
 8012dee:	9c08      	ldr	r4, [sp, #32]
 8012df0:	9e00      	ldr	r6, [sp, #0]
 8012df2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012df4:	e728      	b.n	8012c48 <_dtoa_r+0x730>
 8012df6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012dfa:	e751      	b.n	8012ca0 <_dtoa_r+0x788>
 8012dfc:	9a08      	ldr	r2, [sp, #32]
 8012dfe:	9902      	ldr	r1, [sp, #8]
 8012e00:	e750      	b.n	8012ca4 <_dtoa_r+0x78c>
 8012e02:	f8cd 8008 	str.w	r8, [sp, #8]
 8012e06:	e751      	b.n	8012cac <_dtoa_r+0x794>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	e779      	b.n	8012d00 <_dtoa_r+0x7e8>
 8012e0c:	9b04      	ldr	r3, [sp, #16]
 8012e0e:	e777      	b.n	8012d00 <_dtoa_r+0x7e8>
 8012e10:	2300      	movs	r3, #0
 8012e12:	9308      	str	r3, [sp, #32]
 8012e14:	e779      	b.n	8012d0a <_dtoa_r+0x7f2>
 8012e16:	d093      	beq.n	8012d40 <_dtoa_r+0x828>
 8012e18:	331c      	adds	r3, #28
 8012e1a:	9a00      	ldr	r2, [sp, #0]
 8012e1c:	441a      	add	r2, r3
 8012e1e:	441e      	add	r6, r3
 8012e20:	9200      	str	r2, [sp, #0]
 8012e22:	9a06      	ldr	r2, [sp, #24]
 8012e24:	441a      	add	r2, r3
 8012e26:	9206      	str	r2, [sp, #24]
 8012e28:	e78a      	b.n	8012d40 <_dtoa_r+0x828>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	e7f4      	b.n	8012e18 <_dtoa_r+0x900>
 8012e2e:	9b03      	ldr	r3, [sp, #12]
 8012e30:	46b8      	mov	r8, r7
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	dc20      	bgt.n	8012e78 <_dtoa_r+0x960>
 8012e36:	469b      	mov	fp, r3
 8012e38:	9b07      	ldr	r3, [sp, #28]
 8012e3a:	2b02      	cmp	r3, #2
 8012e3c:	dd1e      	ble.n	8012e7c <_dtoa_r+0x964>
 8012e3e:	f1bb 0f00 	cmp.w	fp, #0
 8012e42:	f47f adb1 	bne.w	80129a8 <_dtoa_r+0x490>
 8012e46:	4621      	mov	r1, r4
 8012e48:	465b      	mov	r3, fp
 8012e4a:	2205      	movs	r2, #5
 8012e4c:	4648      	mov	r0, r9
 8012e4e:	f000 fa97 	bl	8013380 <__multadd>
 8012e52:	4601      	mov	r1, r0
 8012e54:	4604      	mov	r4, r0
 8012e56:	9802      	ldr	r0, [sp, #8]
 8012e58:	f000 fcf0 	bl	801383c <__mcmp>
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	f77f ada3 	ble.w	80129a8 <_dtoa_r+0x490>
 8012e62:	4656      	mov	r6, sl
 8012e64:	2331      	movs	r3, #49	@ 0x31
 8012e66:	f108 0801 	add.w	r8, r8, #1
 8012e6a:	f806 3b01 	strb.w	r3, [r6], #1
 8012e6e:	e59f      	b.n	80129b0 <_dtoa_r+0x498>
 8012e70:	46b8      	mov	r8, r7
 8012e72:	9c03      	ldr	r4, [sp, #12]
 8012e74:	4625      	mov	r5, r4
 8012e76:	e7f4      	b.n	8012e62 <_dtoa_r+0x94a>
 8012e78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	f000 8102 	beq.w	8013088 <_dtoa_r+0xb70>
 8012e84:	2e00      	cmp	r6, #0
 8012e86:	dd05      	ble.n	8012e94 <_dtoa_r+0x97c>
 8012e88:	4629      	mov	r1, r5
 8012e8a:	4632      	mov	r2, r6
 8012e8c:	4648      	mov	r0, r9
 8012e8e:	f000 fc69 	bl	8013764 <__lshift>
 8012e92:	4605      	mov	r5, r0
 8012e94:	9b08      	ldr	r3, [sp, #32]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d05c      	beq.n	8012f54 <_dtoa_r+0xa3c>
 8012e9a:	6869      	ldr	r1, [r5, #4]
 8012e9c:	4648      	mov	r0, r9
 8012e9e:	f000 fa0d 	bl	80132bc <_Balloc>
 8012ea2:	4606      	mov	r6, r0
 8012ea4:	b928      	cbnz	r0, 8012eb2 <_dtoa_r+0x99a>
 8012ea6:	4b83      	ldr	r3, [pc, #524]	@ (80130b4 <_dtoa_r+0xb9c>)
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012eae:	f7ff bb4a 	b.w	8012546 <_dtoa_r+0x2e>
 8012eb2:	692a      	ldr	r2, [r5, #16]
 8012eb4:	f105 010c 	add.w	r1, r5, #12
 8012eb8:	300c      	adds	r0, #12
 8012eba:	3202      	adds	r2, #2
 8012ebc:	0092      	lsls	r2, r2, #2
 8012ebe:	f7ff fa8a 	bl	80123d6 <memcpy>
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	4631      	mov	r1, r6
 8012ec6:	4648      	mov	r0, r9
 8012ec8:	f000 fc4c 	bl	8013764 <__lshift>
 8012ecc:	f10a 0301 	add.w	r3, sl, #1
 8012ed0:	462f      	mov	r7, r5
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	eb0a 030b 	add.w	r3, sl, fp
 8012eda:	9308      	str	r3, [sp, #32]
 8012edc:	9b04      	ldr	r3, [sp, #16]
 8012ede:	f003 0301 	and.w	r3, r3, #1
 8012ee2:	9306      	str	r3, [sp, #24]
 8012ee4:	9b00      	ldr	r3, [sp, #0]
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	9802      	ldr	r0, [sp, #8]
 8012eea:	f103 3bff 	add.w	fp, r3, #4294967295
 8012eee:	f7ff fa85 	bl	80123fc <quorem>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	4639      	mov	r1, r7
 8012ef6:	9003      	str	r0, [sp, #12]
 8012ef8:	3330      	adds	r3, #48	@ 0x30
 8012efa:	9802      	ldr	r0, [sp, #8]
 8012efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8012efe:	f000 fc9d 	bl	801383c <__mcmp>
 8012f02:	462a      	mov	r2, r5
 8012f04:	9004      	str	r0, [sp, #16]
 8012f06:	4621      	mov	r1, r4
 8012f08:	4648      	mov	r0, r9
 8012f0a:	f000 fcb3 	bl	8013874 <__mdiff>
 8012f0e:	68c2      	ldr	r2, [r0, #12]
 8012f10:	4606      	mov	r6, r0
 8012f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f14:	bb02      	cbnz	r2, 8012f58 <_dtoa_r+0xa40>
 8012f16:	4601      	mov	r1, r0
 8012f18:	9802      	ldr	r0, [sp, #8]
 8012f1a:	f000 fc8f 	bl	801383c <__mcmp>
 8012f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f20:	4602      	mov	r2, r0
 8012f22:	4631      	mov	r1, r6
 8012f24:	4648      	mov	r0, r9
 8012f26:	920c      	str	r2, [sp, #48]	@ 0x30
 8012f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f2a:	f000 fa07 	bl	801333c <_Bfree>
 8012f2e:	9b07      	ldr	r3, [sp, #28]
 8012f30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012f32:	9e00      	ldr	r6, [sp, #0]
 8012f34:	ea42 0103 	orr.w	r1, r2, r3
 8012f38:	9b06      	ldr	r3, [sp, #24]
 8012f3a:	4319      	orrs	r1, r3
 8012f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f3e:	d10d      	bne.n	8012f5c <_dtoa_r+0xa44>
 8012f40:	2b39      	cmp	r3, #57	@ 0x39
 8012f42:	d027      	beq.n	8012f94 <_dtoa_r+0xa7c>
 8012f44:	9a04      	ldr	r2, [sp, #16]
 8012f46:	2a00      	cmp	r2, #0
 8012f48:	dd01      	ble.n	8012f4e <_dtoa_r+0xa36>
 8012f4a:	9b03      	ldr	r3, [sp, #12]
 8012f4c:	3331      	adds	r3, #49	@ 0x31
 8012f4e:	f88b 3000 	strb.w	r3, [fp]
 8012f52:	e52e      	b.n	80129b2 <_dtoa_r+0x49a>
 8012f54:	4628      	mov	r0, r5
 8012f56:	e7b9      	b.n	8012ecc <_dtoa_r+0x9b4>
 8012f58:	2201      	movs	r2, #1
 8012f5a:	e7e2      	b.n	8012f22 <_dtoa_r+0xa0a>
 8012f5c:	9904      	ldr	r1, [sp, #16]
 8012f5e:	2900      	cmp	r1, #0
 8012f60:	db04      	blt.n	8012f6c <_dtoa_r+0xa54>
 8012f62:	9807      	ldr	r0, [sp, #28]
 8012f64:	4301      	orrs	r1, r0
 8012f66:	9806      	ldr	r0, [sp, #24]
 8012f68:	4301      	orrs	r1, r0
 8012f6a:	d120      	bne.n	8012fae <_dtoa_r+0xa96>
 8012f6c:	2a00      	cmp	r2, #0
 8012f6e:	ddee      	ble.n	8012f4e <_dtoa_r+0xa36>
 8012f70:	2201      	movs	r2, #1
 8012f72:	9902      	ldr	r1, [sp, #8]
 8012f74:	4648      	mov	r0, r9
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	f000 fbf4 	bl	8013764 <__lshift>
 8012f7c:	4621      	mov	r1, r4
 8012f7e:	9002      	str	r0, [sp, #8]
 8012f80:	f000 fc5c 	bl	801383c <__mcmp>
 8012f84:	2800      	cmp	r0, #0
 8012f86:	9b00      	ldr	r3, [sp, #0]
 8012f88:	dc02      	bgt.n	8012f90 <_dtoa_r+0xa78>
 8012f8a:	d1e0      	bne.n	8012f4e <_dtoa_r+0xa36>
 8012f8c:	07da      	lsls	r2, r3, #31
 8012f8e:	d5de      	bpl.n	8012f4e <_dtoa_r+0xa36>
 8012f90:	2b39      	cmp	r3, #57	@ 0x39
 8012f92:	d1da      	bne.n	8012f4a <_dtoa_r+0xa32>
 8012f94:	2339      	movs	r3, #57	@ 0x39
 8012f96:	f88b 3000 	strb.w	r3, [fp]
 8012f9a:	4633      	mov	r3, r6
 8012f9c:	461e      	mov	r6, r3
 8012f9e:	3b01      	subs	r3, #1
 8012fa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012fa4:	2a39      	cmp	r2, #57	@ 0x39
 8012fa6:	d04f      	beq.n	8013048 <_dtoa_r+0xb30>
 8012fa8:	3201      	adds	r2, #1
 8012faa:	701a      	strb	r2, [r3, #0]
 8012fac:	e501      	b.n	80129b2 <_dtoa_r+0x49a>
 8012fae:	2a00      	cmp	r2, #0
 8012fb0:	dd03      	ble.n	8012fba <_dtoa_r+0xaa2>
 8012fb2:	2b39      	cmp	r3, #57	@ 0x39
 8012fb4:	d0ee      	beq.n	8012f94 <_dtoa_r+0xa7c>
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	e7c9      	b.n	8012f4e <_dtoa_r+0xa36>
 8012fba:	9a00      	ldr	r2, [sp, #0]
 8012fbc:	9908      	ldr	r1, [sp, #32]
 8012fbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012fc2:	428a      	cmp	r2, r1
 8012fc4:	d029      	beq.n	801301a <_dtoa_r+0xb02>
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	220a      	movs	r2, #10
 8012fca:	9902      	ldr	r1, [sp, #8]
 8012fcc:	4648      	mov	r0, r9
 8012fce:	f000 f9d7 	bl	8013380 <__multadd>
 8012fd2:	42af      	cmp	r7, r5
 8012fd4:	9002      	str	r0, [sp, #8]
 8012fd6:	f04f 0300 	mov.w	r3, #0
 8012fda:	f04f 020a 	mov.w	r2, #10
 8012fde:	4639      	mov	r1, r7
 8012fe0:	4648      	mov	r0, r9
 8012fe2:	d107      	bne.n	8012ff4 <_dtoa_r+0xadc>
 8012fe4:	f000 f9cc 	bl	8013380 <__multadd>
 8012fe8:	4607      	mov	r7, r0
 8012fea:	4605      	mov	r5, r0
 8012fec:	9b00      	ldr	r3, [sp, #0]
 8012fee:	3301      	adds	r3, #1
 8012ff0:	9300      	str	r3, [sp, #0]
 8012ff2:	e777      	b.n	8012ee4 <_dtoa_r+0x9cc>
 8012ff4:	f000 f9c4 	bl	8013380 <__multadd>
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	4607      	mov	r7, r0
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	220a      	movs	r2, #10
 8013000:	4648      	mov	r0, r9
 8013002:	f000 f9bd 	bl	8013380 <__multadd>
 8013006:	4605      	mov	r5, r0
 8013008:	e7f0      	b.n	8012fec <_dtoa_r+0xad4>
 801300a:	f1bb 0f00 	cmp.w	fp, #0
 801300e:	f04f 0700 	mov.w	r7, #0
 8013012:	bfcc      	ite	gt
 8013014:	465e      	movgt	r6, fp
 8013016:	2601      	movle	r6, #1
 8013018:	4456      	add	r6, sl
 801301a:	2201      	movs	r2, #1
 801301c:	9902      	ldr	r1, [sp, #8]
 801301e:	4648      	mov	r0, r9
 8013020:	9300      	str	r3, [sp, #0]
 8013022:	f000 fb9f 	bl	8013764 <__lshift>
 8013026:	4621      	mov	r1, r4
 8013028:	9002      	str	r0, [sp, #8]
 801302a:	f000 fc07 	bl	801383c <__mcmp>
 801302e:	2800      	cmp	r0, #0
 8013030:	dcb3      	bgt.n	8012f9a <_dtoa_r+0xa82>
 8013032:	d102      	bne.n	801303a <_dtoa_r+0xb22>
 8013034:	9b00      	ldr	r3, [sp, #0]
 8013036:	07db      	lsls	r3, r3, #31
 8013038:	d4af      	bmi.n	8012f9a <_dtoa_r+0xa82>
 801303a:	4633      	mov	r3, r6
 801303c:	461e      	mov	r6, r3
 801303e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013042:	2a30      	cmp	r2, #48	@ 0x30
 8013044:	d0fa      	beq.n	801303c <_dtoa_r+0xb24>
 8013046:	e4b4      	b.n	80129b2 <_dtoa_r+0x49a>
 8013048:	459a      	cmp	sl, r3
 801304a:	d1a7      	bne.n	8012f9c <_dtoa_r+0xa84>
 801304c:	2331      	movs	r3, #49	@ 0x31
 801304e:	f108 0801 	add.w	r8, r8, #1
 8013052:	f88a 3000 	strb.w	r3, [sl]
 8013056:	e4ac      	b.n	80129b2 <_dtoa_r+0x49a>
 8013058:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801305a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80130b8 <_dtoa_r+0xba0>
 801305e:	b11b      	cbz	r3, 8013068 <_dtoa_r+0xb50>
 8013060:	f10a 0308 	add.w	r3, sl, #8
 8013064:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013066:	6013      	str	r3, [r2, #0]
 8013068:	4650      	mov	r0, sl
 801306a:	b017      	add	sp, #92	@ 0x5c
 801306c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013070:	9b07      	ldr	r3, [sp, #28]
 8013072:	2b01      	cmp	r3, #1
 8013074:	f77f ae2d 	ble.w	8012cd2 <_dtoa_r+0x7ba>
 8013078:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801307a:	9308      	str	r3, [sp, #32]
 801307c:	2001      	movs	r0, #1
 801307e:	e64c      	b.n	8012d1a <_dtoa_r+0x802>
 8013080:	f1bb 0f00 	cmp.w	fp, #0
 8013084:	f77f aed8 	ble.w	8012e38 <_dtoa_r+0x920>
 8013088:	4656      	mov	r6, sl
 801308a:	4621      	mov	r1, r4
 801308c:	9802      	ldr	r0, [sp, #8]
 801308e:	f7ff f9b5 	bl	80123fc <quorem>
 8013092:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8013096:	f806 3b01 	strb.w	r3, [r6], #1
 801309a:	eba6 020a 	sub.w	r2, r6, sl
 801309e:	4593      	cmp	fp, r2
 80130a0:	ddb3      	ble.n	801300a <_dtoa_r+0xaf2>
 80130a2:	2300      	movs	r3, #0
 80130a4:	220a      	movs	r2, #10
 80130a6:	9902      	ldr	r1, [sp, #8]
 80130a8:	4648      	mov	r0, r9
 80130aa:	f000 f969 	bl	8013380 <__multadd>
 80130ae:	9002      	str	r0, [sp, #8]
 80130b0:	e7eb      	b.n	801308a <_dtoa_r+0xb72>
 80130b2:	bf00      	nop
 80130b4:	08015b91 	.word	0x08015b91
 80130b8:	08015b15 	.word	0x08015b15

080130bc <_free_r>:
 80130bc:	b538      	push	{r3, r4, r5, lr}
 80130be:	4605      	mov	r5, r0
 80130c0:	2900      	cmp	r1, #0
 80130c2:	d041      	beq.n	8013148 <_free_r+0x8c>
 80130c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130c8:	1f0c      	subs	r4, r1, #4
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	bfb8      	it	lt
 80130ce:	18e4      	addlt	r4, r4, r3
 80130d0:	f000 f8e8 	bl	80132a4 <__malloc_lock>
 80130d4:	4a1d      	ldr	r2, [pc, #116]	@ (801314c <_free_r+0x90>)
 80130d6:	6813      	ldr	r3, [r2, #0]
 80130d8:	b933      	cbnz	r3, 80130e8 <_free_r+0x2c>
 80130da:	6063      	str	r3, [r4, #4]
 80130dc:	6014      	str	r4, [r2, #0]
 80130de:	4628      	mov	r0, r5
 80130e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130e4:	f000 b8e4 	b.w	80132b0 <__malloc_unlock>
 80130e8:	42a3      	cmp	r3, r4
 80130ea:	d908      	bls.n	80130fe <_free_r+0x42>
 80130ec:	6820      	ldr	r0, [r4, #0]
 80130ee:	1821      	adds	r1, r4, r0
 80130f0:	428b      	cmp	r3, r1
 80130f2:	bf01      	itttt	eq
 80130f4:	6819      	ldreq	r1, [r3, #0]
 80130f6:	685b      	ldreq	r3, [r3, #4]
 80130f8:	1809      	addeq	r1, r1, r0
 80130fa:	6021      	streq	r1, [r4, #0]
 80130fc:	e7ed      	b.n	80130da <_free_r+0x1e>
 80130fe:	461a      	mov	r2, r3
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	b10b      	cbz	r3, 8013108 <_free_r+0x4c>
 8013104:	42a3      	cmp	r3, r4
 8013106:	d9fa      	bls.n	80130fe <_free_r+0x42>
 8013108:	6811      	ldr	r1, [r2, #0]
 801310a:	1850      	adds	r0, r2, r1
 801310c:	42a0      	cmp	r0, r4
 801310e:	d10b      	bne.n	8013128 <_free_r+0x6c>
 8013110:	6820      	ldr	r0, [r4, #0]
 8013112:	4401      	add	r1, r0
 8013114:	1850      	adds	r0, r2, r1
 8013116:	6011      	str	r1, [r2, #0]
 8013118:	4283      	cmp	r3, r0
 801311a:	d1e0      	bne.n	80130de <_free_r+0x22>
 801311c:	6818      	ldr	r0, [r3, #0]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	4408      	add	r0, r1
 8013122:	6053      	str	r3, [r2, #4]
 8013124:	6010      	str	r0, [r2, #0]
 8013126:	e7da      	b.n	80130de <_free_r+0x22>
 8013128:	d902      	bls.n	8013130 <_free_r+0x74>
 801312a:	230c      	movs	r3, #12
 801312c:	602b      	str	r3, [r5, #0]
 801312e:	e7d6      	b.n	80130de <_free_r+0x22>
 8013130:	6820      	ldr	r0, [r4, #0]
 8013132:	1821      	adds	r1, r4, r0
 8013134:	428b      	cmp	r3, r1
 8013136:	bf02      	ittt	eq
 8013138:	6819      	ldreq	r1, [r3, #0]
 801313a:	685b      	ldreq	r3, [r3, #4]
 801313c:	1809      	addeq	r1, r1, r0
 801313e:	6063      	str	r3, [r4, #4]
 8013140:	bf08      	it	eq
 8013142:	6021      	streq	r1, [r4, #0]
 8013144:	6054      	str	r4, [r2, #4]
 8013146:	e7ca      	b.n	80130de <_free_r+0x22>
 8013148:	bd38      	pop	{r3, r4, r5, pc}
 801314a:	bf00      	nop
 801314c:	20002cdc 	.word	0x20002cdc

08013150 <malloc>:
 8013150:	4b02      	ldr	r3, [pc, #8]	@ (801315c <malloc+0xc>)
 8013152:	4601      	mov	r1, r0
 8013154:	6818      	ldr	r0, [r3, #0]
 8013156:	f000 b825 	b.w	80131a4 <_malloc_r>
 801315a:	bf00      	nop
 801315c:	20000018 	.word	0x20000018

08013160 <sbrk_aligned>:
 8013160:	b570      	push	{r4, r5, r6, lr}
 8013162:	4e0f      	ldr	r6, [pc, #60]	@ (80131a0 <sbrk_aligned+0x40>)
 8013164:	460c      	mov	r4, r1
 8013166:	4605      	mov	r5, r0
 8013168:	6831      	ldr	r1, [r6, #0]
 801316a:	b911      	cbnz	r1, 8013172 <sbrk_aligned+0x12>
 801316c:	f001 ffd8 	bl	8015120 <_sbrk_r>
 8013170:	6030      	str	r0, [r6, #0]
 8013172:	4621      	mov	r1, r4
 8013174:	4628      	mov	r0, r5
 8013176:	f001 ffd3 	bl	8015120 <_sbrk_r>
 801317a:	1c43      	adds	r3, r0, #1
 801317c:	d103      	bne.n	8013186 <sbrk_aligned+0x26>
 801317e:	f04f 34ff 	mov.w	r4, #4294967295
 8013182:	4620      	mov	r0, r4
 8013184:	bd70      	pop	{r4, r5, r6, pc}
 8013186:	1cc4      	adds	r4, r0, #3
 8013188:	f024 0403 	bic.w	r4, r4, #3
 801318c:	42a0      	cmp	r0, r4
 801318e:	d0f8      	beq.n	8013182 <sbrk_aligned+0x22>
 8013190:	1a21      	subs	r1, r4, r0
 8013192:	4628      	mov	r0, r5
 8013194:	f001 ffc4 	bl	8015120 <_sbrk_r>
 8013198:	3001      	adds	r0, #1
 801319a:	d1f2      	bne.n	8013182 <sbrk_aligned+0x22>
 801319c:	e7ef      	b.n	801317e <sbrk_aligned+0x1e>
 801319e:	bf00      	nop
 80131a0:	20002cd8 	.word	0x20002cd8

080131a4 <_malloc_r>:
 80131a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131a8:	1ccd      	adds	r5, r1, #3
 80131aa:	4606      	mov	r6, r0
 80131ac:	f025 0503 	bic.w	r5, r5, #3
 80131b0:	3508      	adds	r5, #8
 80131b2:	2d0c      	cmp	r5, #12
 80131b4:	bf38      	it	cc
 80131b6:	250c      	movcc	r5, #12
 80131b8:	2d00      	cmp	r5, #0
 80131ba:	db01      	blt.n	80131c0 <_malloc_r+0x1c>
 80131bc:	42a9      	cmp	r1, r5
 80131be:	d904      	bls.n	80131ca <_malloc_r+0x26>
 80131c0:	230c      	movs	r3, #12
 80131c2:	6033      	str	r3, [r6, #0]
 80131c4:	2000      	movs	r0, #0
 80131c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80132a0 <_malloc_r+0xfc>
 80131ce:	f000 f869 	bl	80132a4 <__malloc_lock>
 80131d2:	f8d8 3000 	ldr.w	r3, [r8]
 80131d6:	461c      	mov	r4, r3
 80131d8:	bb44      	cbnz	r4, 801322c <_malloc_r+0x88>
 80131da:	4629      	mov	r1, r5
 80131dc:	4630      	mov	r0, r6
 80131de:	f7ff ffbf 	bl	8013160 <sbrk_aligned>
 80131e2:	1c43      	adds	r3, r0, #1
 80131e4:	4604      	mov	r4, r0
 80131e6:	d158      	bne.n	801329a <_malloc_r+0xf6>
 80131e8:	f8d8 4000 	ldr.w	r4, [r8]
 80131ec:	4627      	mov	r7, r4
 80131ee:	2f00      	cmp	r7, #0
 80131f0:	d143      	bne.n	801327a <_malloc_r+0xd6>
 80131f2:	2c00      	cmp	r4, #0
 80131f4:	d04b      	beq.n	801328e <_malloc_r+0xea>
 80131f6:	6823      	ldr	r3, [r4, #0]
 80131f8:	4639      	mov	r1, r7
 80131fa:	4630      	mov	r0, r6
 80131fc:	eb04 0903 	add.w	r9, r4, r3
 8013200:	f001 ff8e 	bl	8015120 <_sbrk_r>
 8013204:	4581      	cmp	r9, r0
 8013206:	d142      	bne.n	801328e <_malloc_r+0xea>
 8013208:	6821      	ldr	r1, [r4, #0]
 801320a:	4630      	mov	r0, r6
 801320c:	1a6d      	subs	r5, r5, r1
 801320e:	4629      	mov	r1, r5
 8013210:	f7ff ffa6 	bl	8013160 <sbrk_aligned>
 8013214:	3001      	adds	r0, #1
 8013216:	d03a      	beq.n	801328e <_malloc_r+0xea>
 8013218:	6823      	ldr	r3, [r4, #0]
 801321a:	442b      	add	r3, r5
 801321c:	6023      	str	r3, [r4, #0]
 801321e:	f8d8 3000 	ldr.w	r3, [r8]
 8013222:	685a      	ldr	r2, [r3, #4]
 8013224:	bb62      	cbnz	r2, 8013280 <_malloc_r+0xdc>
 8013226:	f8c8 7000 	str.w	r7, [r8]
 801322a:	e00f      	b.n	801324c <_malloc_r+0xa8>
 801322c:	6822      	ldr	r2, [r4, #0]
 801322e:	1b52      	subs	r2, r2, r5
 8013230:	d420      	bmi.n	8013274 <_malloc_r+0xd0>
 8013232:	2a0b      	cmp	r2, #11
 8013234:	d917      	bls.n	8013266 <_malloc_r+0xc2>
 8013236:	1961      	adds	r1, r4, r5
 8013238:	42a3      	cmp	r3, r4
 801323a:	6025      	str	r5, [r4, #0]
 801323c:	bf18      	it	ne
 801323e:	6059      	strne	r1, [r3, #4]
 8013240:	6863      	ldr	r3, [r4, #4]
 8013242:	bf08      	it	eq
 8013244:	f8c8 1000 	streq.w	r1, [r8]
 8013248:	5162      	str	r2, [r4, r5]
 801324a:	604b      	str	r3, [r1, #4]
 801324c:	4630      	mov	r0, r6
 801324e:	f000 f82f 	bl	80132b0 <__malloc_unlock>
 8013252:	f104 000b 	add.w	r0, r4, #11
 8013256:	1d23      	adds	r3, r4, #4
 8013258:	f020 0007 	bic.w	r0, r0, #7
 801325c:	1ac2      	subs	r2, r0, r3
 801325e:	bf1c      	itt	ne
 8013260:	1a1b      	subne	r3, r3, r0
 8013262:	50a3      	strne	r3, [r4, r2]
 8013264:	e7af      	b.n	80131c6 <_malloc_r+0x22>
 8013266:	6862      	ldr	r2, [r4, #4]
 8013268:	42a3      	cmp	r3, r4
 801326a:	bf0c      	ite	eq
 801326c:	f8c8 2000 	streq.w	r2, [r8]
 8013270:	605a      	strne	r2, [r3, #4]
 8013272:	e7eb      	b.n	801324c <_malloc_r+0xa8>
 8013274:	4623      	mov	r3, r4
 8013276:	6864      	ldr	r4, [r4, #4]
 8013278:	e7ae      	b.n	80131d8 <_malloc_r+0x34>
 801327a:	463c      	mov	r4, r7
 801327c:	687f      	ldr	r7, [r7, #4]
 801327e:	e7b6      	b.n	80131ee <_malloc_r+0x4a>
 8013280:	461a      	mov	r2, r3
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	42a3      	cmp	r3, r4
 8013286:	d1fb      	bne.n	8013280 <_malloc_r+0xdc>
 8013288:	2300      	movs	r3, #0
 801328a:	6053      	str	r3, [r2, #4]
 801328c:	e7de      	b.n	801324c <_malloc_r+0xa8>
 801328e:	230c      	movs	r3, #12
 8013290:	4630      	mov	r0, r6
 8013292:	6033      	str	r3, [r6, #0]
 8013294:	f000 f80c 	bl	80132b0 <__malloc_unlock>
 8013298:	e794      	b.n	80131c4 <_malloc_r+0x20>
 801329a:	6005      	str	r5, [r0, #0]
 801329c:	e7d6      	b.n	801324c <_malloc_r+0xa8>
 801329e:	bf00      	nop
 80132a0:	20002cdc 	.word	0x20002cdc

080132a4 <__malloc_lock>:
 80132a4:	4801      	ldr	r0, [pc, #4]	@ (80132ac <__malloc_lock+0x8>)
 80132a6:	f7ff b886 	b.w	80123b6 <__retarget_lock_acquire_recursive>
 80132aa:	bf00      	nop
 80132ac:	20002cd4 	.word	0x20002cd4

080132b0 <__malloc_unlock>:
 80132b0:	4801      	ldr	r0, [pc, #4]	@ (80132b8 <__malloc_unlock+0x8>)
 80132b2:	f7ff b881 	b.w	80123b8 <__retarget_lock_release_recursive>
 80132b6:	bf00      	nop
 80132b8:	20002cd4 	.word	0x20002cd4

080132bc <_Balloc>:
 80132bc:	b570      	push	{r4, r5, r6, lr}
 80132be:	69c6      	ldr	r6, [r0, #28]
 80132c0:	4604      	mov	r4, r0
 80132c2:	460d      	mov	r5, r1
 80132c4:	b976      	cbnz	r6, 80132e4 <_Balloc+0x28>
 80132c6:	2010      	movs	r0, #16
 80132c8:	f7ff ff42 	bl	8013150 <malloc>
 80132cc:	4602      	mov	r2, r0
 80132ce:	61e0      	str	r0, [r4, #28]
 80132d0:	b920      	cbnz	r0, 80132dc <_Balloc+0x20>
 80132d2:	4b18      	ldr	r3, [pc, #96]	@ (8013334 <_Balloc+0x78>)
 80132d4:	216b      	movs	r1, #107	@ 0x6b
 80132d6:	4818      	ldr	r0, [pc, #96]	@ (8013338 <_Balloc+0x7c>)
 80132d8:	f001 ff32 	bl	8015140 <__assert_func>
 80132dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132e0:	6006      	str	r6, [r0, #0]
 80132e2:	60c6      	str	r6, [r0, #12]
 80132e4:	69e6      	ldr	r6, [r4, #28]
 80132e6:	68f3      	ldr	r3, [r6, #12]
 80132e8:	b183      	cbz	r3, 801330c <_Balloc+0x50>
 80132ea:	69e3      	ldr	r3, [r4, #28]
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132f2:	b9b8      	cbnz	r0, 8013324 <_Balloc+0x68>
 80132f4:	2101      	movs	r1, #1
 80132f6:	4620      	mov	r0, r4
 80132f8:	fa01 f605 	lsl.w	r6, r1, r5
 80132fc:	1d72      	adds	r2, r6, #5
 80132fe:	0092      	lsls	r2, r2, #2
 8013300:	f001 ff3c 	bl	801517c <_calloc_r>
 8013304:	b160      	cbz	r0, 8013320 <_Balloc+0x64>
 8013306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801330a:	e00e      	b.n	801332a <_Balloc+0x6e>
 801330c:	2221      	movs	r2, #33	@ 0x21
 801330e:	2104      	movs	r1, #4
 8013310:	4620      	mov	r0, r4
 8013312:	f001 ff33 	bl	801517c <_calloc_r>
 8013316:	69e3      	ldr	r3, [r4, #28]
 8013318:	60f0      	str	r0, [r6, #12]
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d1e4      	bne.n	80132ea <_Balloc+0x2e>
 8013320:	2000      	movs	r0, #0
 8013322:	bd70      	pop	{r4, r5, r6, pc}
 8013324:	6802      	ldr	r2, [r0, #0]
 8013326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801332a:	2300      	movs	r3, #0
 801332c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013330:	e7f7      	b.n	8013322 <_Balloc+0x66>
 8013332:	bf00      	nop
 8013334:	08015b22 	.word	0x08015b22
 8013338:	08015ba2 	.word	0x08015ba2

0801333c <_Bfree>:
 801333c:	b570      	push	{r4, r5, r6, lr}
 801333e:	69c6      	ldr	r6, [r0, #28]
 8013340:	4605      	mov	r5, r0
 8013342:	460c      	mov	r4, r1
 8013344:	b976      	cbnz	r6, 8013364 <_Bfree+0x28>
 8013346:	2010      	movs	r0, #16
 8013348:	f7ff ff02 	bl	8013150 <malloc>
 801334c:	4602      	mov	r2, r0
 801334e:	61e8      	str	r0, [r5, #28]
 8013350:	b920      	cbnz	r0, 801335c <_Bfree+0x20>
 8013352:	4b09      	ldr	r3, [pc, #36]	@ (8013378 <_Bfree+0x3c>)
 8013354:	218f      	movs	r1, #143	@ 0x8f
 8013356:	4809      	ldr	r0, [pc, #36]	@ (801337c <_Bfree+0x40>)
 8013358:	f001 fef2 	bl	8015140 <__assert_func>
 801335c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013360:	6006      	str	r6, [r0, #0]
 8013362:	60c6      	str	r6, [r0, #12]
 8013364:	b13c      	cbz	r4, 8013376 <_Bfree+0x3a>
 8013366:	69eb      	ldr	r3, [r5, #28]
 8013368:	6862      	ldr	r2, [r4, #4]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013370:	6021      	str	r1, [r4, #0]
 8013372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013376:	bd70      	pop	{r4, r5, r6, pc}
 8013378:	08015b22 	.word	0x08015b22
 801337c:	08015ba2 	.word	0x08015ba2

08013380 <__multadd>:
 8013380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013384:	f101 0c14 	add.w	ip, r1, #20
 8013388:	4607      	mov	r7, r0
 801338a:	460c      	mov	r4, r1
 801338c:	461e      	mov	r6, r3
 801338e:	690d      	ldr	r5, [r1, #16]
 8013390:	2000      	movs	r0, #0
 8013392:	f8dc 3000 	ldr.w	r3, [ip]
 8013396:	3001      	adds	r0, #1
 8013398:	b299      	uxth	r1, r3
 801339a:	4285      	cmp	r5, r0
 801339c:	fb02 6101 	mla	r1, r2, r1, r6
 80133a0:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80133a4:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80133a8:	b289      	uxth	r1, r1
 80133aa:	fb02 3306 	mla	r3, r2, r6, r3
 80133ae:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80133b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80133b6:	f84c 1b04 	str.w	r1, [ip], #4
 80133ba:	dcea      	bgt.n	8013392 <__multadd+0x12>
 80133bc:	b30e      	cbz	r6, 8013402 <__multadd+0x82>
 80133be:	68a3      	ldr	r3, [r4, #8]
 80133c0:	42ab      	cmp	r3, r5
 80133c2:	dc19      	bgt.n	80133f8 <__multadd+0x78>
 80133c4:	6861      	ldr	r1, [r4, #4]
 80133c6:	4638      	mov	r0, r7
 80133c8:	3101      	adds	r1, #1
 80133ca:	f7ff ff77 	bl	80132bc <_Balloc>
 80133ce:	4680      	mov	r8, r0
 80133d0:	b928      	cbnz	r0, 80133de <__multadd+0x5e>
 80133d2:	4602      	mov	r2, r0
 80133d4:	4b0c      	ldr	r3, [pc, #48]	@ (8013408 <__multadd+0x88>)
 80133d6:	21ba      	movs	r1, #186	@ 0xba
 80133d8:	480c      	ldr	r0, [pc, #48]	@ (801340c <__multadd+0x8c>)
 80133da:	f001 feb1 	bl	8015140 <__assert_func>
 80133de:	6922      	ldr	r2, [r4, #16]
 80133e0:	f104 010c 	add.w	r1, r4, #12
 80133e4:	300c      	adds	r0, #12
 80133e6:	3202      	adds	r2, #2
 80133e8:	0092      	lsls	r2, r2, #2
 80133ea:	f7fe fff4 	bl	80123d6 <memcpy>
 80133ee:	4621      	mov	r1, r4
 80133f0:	4644      	mov	r4, r8
 80133f2:	4638      	mov	r0, r7
 80133f4:	f7ff ffa2 	bl	801333c <_Bfree>
 80133f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133fc:	3501      	adds	r5, #1
 80133fe:	615e      	str	r6, [r3, #20]
 8013400:	6125      	str	r5, [r4, #16]
 8013402:	4620      	mov	r0, r4
 8013404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013408:	08015b91 	.word	0x08015b91
 801340c:	08015ba2 	.word	0x08015ba2

08013410 <__s2b>:
 8013410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013414:	4615      	mov	r5, r2
 8013416:	461f      	mov	r7, r3
 8013418:	2209      	movs	r2, #9
 801341a:	3308      	adds	r3, #8
 801341c:	460c      	mov	r4, r1
 801341e:	4606      	mov	r6, r0
 8013420:	2100      	movs	r1, #0
 8013422:	fb93 f3f2 	sdiv	r3, r3, r2
 8013426:	2201      	movs	r2, #1
 8013428:	429a      	cmp	r2, r3
 801342a:	db09      	blt.n	8013440 <__s2b+0x30>
 801342c:	4630      	mov	r0, r6
 801342e:	f7ff ff45 	bl	80132bc <_Balloc>
 8013432:	b940      	cbnz	r0, 8013446 <__s2b+0x36>
 8013434:	4602      	mov	r2, r0
 8013436:	4b19      	ldr	r3, [pc, #100]	@ (801349c <__s2b+0x8c>)
 8013438:	21d3      	movs	r1, #211	@ 0xd3
 801343a:	4819      	ldr	r0, [pc, #100]	@ (80134a0 <__s2b+0x90>)
 801343c:	f001 fe80 	bl	8015140 <__assert_func>
 8013440:	0052      	lsls	r2, r2, #1
 8013442:	3101      	adds	r1, #1
 8013444:	e7f0      	b.n	8013428 <__s2b+0x18>
 8013446:	9b08      	ldr	r3, [sp, #32]
 8013448:	2d09      	cmp	r5, #9
 801344a:	6143      	str	r3, [r0, #20]
 801344c:	f04f 0301 	mov.w	r3, #1
 8013450:	6103      	str	r3, [r0, #16]
 8013452:	dd16      	ble.n	8013482 <__s2b+0x72>
 8013454:	f104 0909 	add.w	r9, r4, #9
 8013458:	442c      	add	r4, r5
 801345a:	46c8      	mov	r8, r9
 801345c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013460:	4601      	mov	r1, r0
 8013462:	220a      	movs	r2, #10
 8013464:	4630      	mov	r0, r6
 8013466:	3b30      	subs	r3, #48	@ 0x30
 8013468:	f7ff ff8a 	bl	8013380 <__multadd>
 801346c:	45a0      	cmp	r8, r4
 801346e:	d1f5      	bne.n	801345c <__s2b+0x4c>
 8013470:	f1a5 0408 	sub.w	r4, r5, #8
 8013474:	444c      	add	r4, r9
 8013476:	1b2d      	subs	r5, r5, r4
 8013478:	1963      	adds	r3, r4, r5
 801347a:	42bb      	cmp	r3, r7
 801347c:	db04      	blt.n	8013488 <__s2b+0x78>
 801347e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013482:	340a      	adds	r4, #10
 8013484:	2509      	movs	r5, #9
 8013486:	e7f6      	b.n	8013476 <__s2b+0x66>
 8013488:	f814 3b01 	ldrb.w	r3, [r4], #1
 801348c:	4601      	mov	r1, r0
 801348e:	220a      	movs	r2, #10
 8013490:	4630      	mov	r0, r6
 8013492:	3b30      	subs	r3, #48	@ 0x30
 8013494:	f7ff ff74 	bl	8013380 <__multadd>
 8013498:	e7ee      	b.n	8013478 <__s2b+0x68>
 801349a:	bf00      	nop
 801349c:	08015b91 	.word	0x08015b91
 80134a0:	08015ba2 	.word	0x08015ba2

080134a4 <__hi0bits>:
 80134a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80134a8:	4603      	mov	r3, r0
 80134aa:	bf36      	itet	cc
 80134ac:	0403      	lslcc	r3, r0, #16
 80134ae:	2000      	movcs	r0, #0
 80134b0:	2010      	movcc	r0, #16
 80134b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80134b6:	bf3c      	itt	cc
 80134b8:	021b      	lslcc	r3, r3, #8
 80134ba:	3008      	addcc	r0, #8
 80134bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80134c0:	bf3c      	itt	cc
 80134c2:	011b      	lslcc	r3, r3, #4
 80134c4:	3004      	addcc	r0, #4
 80134c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80134ca:	bf3c      	itt	cc
 80134cc:	009b      	lslcc	r3, r3, #2
 80134ce:	3002      	addcc	r0, #2
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	db05      	blt.n	80134e0 <__hi0bits+0x3c>
 80134d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80134d8:	f100 0001 	add.w	r0, r0, #1
 80134dc:	bf08      	it	eq
 80134de:	2020      	moveq	r0, #32
 80134e0:	4770      	bx	lr

080134e2 <__lo0bits>:
 80134e2:	6803      	ldr	r3, [r0, #0]
 80134e4:	4602      	mov	r2, r0
 80134e6:	f013 0007 	ands.w	r0, r3, #7
 80134ea:	d00b      	beq.n	8013504 <__lo0bits+0x22>
 80134ec:	07d9      	lsls	r1, r3, #31
 80134ee:	d421      	bmi.n	8013534 <__lo0bits+0x52>
 80134f0:	0798      	lsls	r0, r3, #30
 80134f2:	bf47      	ittee	mi
 80134f4:	085b      	lsrmi	r3, r3, #1
 80134f6:	2001      	movmi	r0, #1
 80134f8:	089b      	lsrpl	r3, r3, #2
 80134fa:	2002      	movpl	r0, #2
 80134fc:	bf4c      	ite	mi
 80134fe:	6013      	strmi	r3, [r2, #0]
 8013500:	6013      	strpl	r3, [r2, #0]
 8013502:	4770      	bx	lr
 8013504:	b299      	uxth	r1, r3
 8013506:	b909      	cbnz	r1, 801350c <__lo0bits+0x2a>
 8013508:	0c1b      	lsrs	r3, r3, #16
 801350a:	2010      	movs	r0, #16
 801350c:	b2d9      	uxtb	r1, r3
 801350e:	b909      	cbnz	r1, 8013514 <__lo0bits+0x32>
 8013510:	3008      	adds	r0, #8
 8013512:	0a1b      	lsrs	r3, r3, #8
 8013514:	0719      	lsls	r1, r3, #28
 8013516:	bf04      	itt	eq
 8013518:	091b      	lsreq	r3, r3, #4
 801351a:	3004      	addeq	r0, #4
 801351c:	0799      	lsls	r1, r3, #30
 801351e:	bf04      	itt	eq
 8013520:	089b      	lsreq	r3, r3, #2
 8013522:	3002      	addeq	r0, #2
 8013524:	07d9      	lsls	r1, r3, #31
 8013526:	d403      	bmi.n	8013530 <__lo0bits+0x4e>
 8013528:	085b      	lsrs	r3, r3, #1
 801352a:	f100 0001 	add.w	r0, r0, #1
 801352e:	d003      	beq.n	8013538 <__lo0bits+0x56>
 8013530:	6013      	str	r3, [r2, #0]
 8013532:	4770      	bx	lr
 8013534:	2000      	movs	r0, #0
 8013536:	4770      	bx	lr
 8013538:	2020      	movs	r0, #32
 801353a:	4770      	bx	lr

0801353c <__i2b>:
 801353c:	b510      	push	{r4, lr}
 801353e:	460c      	mov	r4, r1
 8013540:	2101      	movs	r1, #1
 8013542:	f7ff febb 	bl	80132bc <_Balloc>
 8013546:	4602      	mov	r2, r0
 8013548:	b928      	cbnz	r0, 8013556 <__i2b+0x1a>
 801354a:	4b05      	ldr	r3, [pc, #20]	@ (8013560 <__i2b+0x24>)
 801354c:	f240 1145 	movw	r1, #325	@ 0x145
 8013550:	4804      	ldr	r0, [pc, #16]	@ (8013564 <__i2b+0x28>)
 8013552:	f001 fdf5 	bl	8015140 <__assert_func>
 8013556:	2301      	movs	r3, #1
 8013558:	6144      	str	r4, [r0, #20]
 801355a:	6103      	str	r3, [r0, #16]
 801355c:	bd10      	pop	{r4, pc}
 801355e:	bf00      	nop
 8013560:	08015b91 	.word	0x08015b91
 8013564:	08015ba2 	.word	0x08015ba2

08013568 <__multiply>:
 8013568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801356c:	4617      	mov	r7, r2
 801356e:	690a      	ldr	r2, [r1, #16]
 8013570:	4689      	mov	r9, r1
 8013572:	b085      	sub	sp, #20
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	429a      	cmp	r2, r3
 8013578:	bfa2      	ittt	ge
 801357a:	463b      	movge	r3, r7
 801357c:	460f      	movge	r7, r1
 801357e:	4699      	movge	r9, r3
 8013580:	693d      	ldr	r5, [r7, #16]
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013588:	6879      	ldr	r1, [r7, #4]
 801358a:	eb05 060a 	add.w	r6, r5, sl
 801358e:	42b3      	cmp	r3, r6
 8013590:	bfb8      	it	lt
 8013592:	3101      	addlt	r1, #1
 8013594:	f7ff fe92 	bl	80132bc <_Balloc>
 8013598:	b930      	cbnz	r0, 80135a8 <__multiply+0x40>
 801359a:	4602      	mov	r2, r0
 801359c:	4b42      	ldr	r3, [pc, #264]	@ (80136a8 <__multiply+0x140>)
 801359e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80135a2:	4842      	ldr	r0, [pc, #264]	@ (80136ac <__multiply+0x144>)
 80135a4:	f001 fdcc 	bl	8015140 <__assert_func>
 80135a8:	f100 0414 	add.w	r4, r0, #20
 80135ac:	2200      	movs	r2, #0
 80135ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80135b2:	4623      	mov	r3, r4
 80135b4:	4573      	cmp	r3, lr
 80135b6:	d320      	bcc.n	80135fa <__multiply+0x92>
 80135b8:	f107 0814 	add.w	r8, r7, #20
 80135bc:	f109 0114 	add.w	r1, r9, #20
 80135c0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80135c4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80135c8:	9302      	str	r3, [sp, #8]
 80135ca:	1beb      	subs	r3, r5, r7
 80135cc:	3715      	adds	r7, #21
 80135ce:	3b15      	subs	r3, #21
 80135d0:	f023 0303 	bic.w	r3, r3, #3
 80135d4:	3304      	adds	r3, #4
 80135d6:	42bd      	cmp	r5, r7
 80135d8:	bf38      	it	cc
 80135da:	2304      	movcc	r3, #4
 80135dc:	9301      	str	r3, [sp, #4]
 80135de:	9b02      	ldr	r3, [sp, #8]
 80135e0:	9103      	str	r1, [sp, #12]
 80135e2:	428b      	cmp	r3, r1
 80135e4:	d80c      	bhi.n	8013600 <__multiply+0x98>
 80135e6:	2e00      	cmp	r6, #0
 80135e8:	dd03      	ble.n	80135f2 <__multiply+0x8a>
 80135ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d057      	beq.n	80136a2 <__multiply+0x13a>
 80135f2:	6106      	str	r6, [r0, #16]
 80135f4:	b005      	add	sp, #20
 80135f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fa:	f843 2b04 	str.w	r2, [r3], #4
 80135fe:	e7d9      	b.n	80135b4 <__multiply+0x4c>
 8013600:	f8b1 a000 	ldrh.w	sl, [r1]
 8013604:	f1ba 0f00 	cmp.w	sl, #0
 8013608:	d021      	beq.n	801364e <__multiply+0xe6>
 801360a:	46c4      	mov	ip, r8
 801360c:	46a1      	mov	r9, r4
 801360e:	2700      	movs	r7, #0
 8013610:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013614:	f8d9 3000 	ldr.w	r3, [r9]
 8013618:	fa1f fb82 	uxth.w	fp, r2
 801361c:	4565      	cmp	r5, ip
 801361e:	b29b      	uxth	r3, r3
 8013620:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8013624:	fb0a 330b 	mla	r3, sl, fp, r3
 8013628:	443b      	add	r3, r7
 801362a:	f8d9 7000 	ldr.w	r7, [r9]
 801362e:	ea4f 4717 	mov.w	r7, r7, lsr #16
 8013632:	fb0a 7202 	mla	r2, sl, r2, r7
 8013636:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801363a:	b29b      	uxth	r3, r3
 801363c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013644:	f849 3b04 	str.w	r3, [r9], #4
 8013648:	d8e2      	bhi.n	8013610 <__multiply+0xa8>
 801364a:	9b01      	ldr	r3, [sp, #4]
 801364c:	50e7      	str	r7, [r4, r3]
 801364e:	9b03      	ldr	r3, [sp, #12]
 8013650:	3104      	adds	r1, #4
 8013652:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013656:	f1b9 0f00 	cmp.w	r9, #0
 801365a:	d020      	beq.n	801369e <__multiply+0x136>
 801365c:	6823      	ldr	r3, [r4, #0]
 801365e:	4647      	mov	r7, r8
 8013660:	46a4      	mov	ip, r4
 8013662:	f04f 0a00 	mov.w	sl, #0
 8013666:	f8b7 b000 	ldrh.w	fp, [r7]
 801366a:	b29b      	uxth	r3, r3
 801366c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013670:	fb09 220b 	mla	r2, r9, fp, r2
 8013674:	4452      	add	r2, sl
 8013676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801367a:	f84c 3b04 	str.w	r3, [ip], #4
 801367e:	f857 3b04 	ldr.w	r3, [r7], #4
 8013682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013686:	f8bc 3000 	ldrh.w	r3, [ip]
 801368a:	42bd      	cmp	r5, r7
 801368c:	fb09 330a 	mla	r3, r9, sl, r3
 8013690:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013698:	d8e5      	bhi.n	8013666 <__multiply+0xfe>
 801369a:	9a01      	ldr	r2, [sp, #4]
 801369c:	50a3      	str	r3, [r4, r2]
 801369e:	3404      	adds	r4, #4
 80136a0:	e79d      	b.n	80135de <__multiply+0x76>
 80136a2:	3e01      	subs	r6, #1
 80136a4:	e79f      	b.n	80135e6 <__multiply+0x7e>
 80136a6:	bf00      	nop
 80136a8:	08015b91 	.word	0x08015b91
 80136ac:	08015ba2 	.word	0x08015ba2

080136b0 <__pow5mult>:
 80136b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136b4:	4615      	mov	r5, r2
 80136b6:	f012 0203 	ands.w	r2, r2, #3
 80136ba:	4607      	mov	r7, r0
 80136bc:	460e      	mov	r6, r1
 80136be:	d007      	beq.n	80136d0 <__pow5mult+0x20>
 80136c0:	3a01      	subs	r2, #1
 80136c2:	4c25      	ldr	r4, [pc, #148]	@ (8013758 <__pow5mult+0xa8>)
 80136c4:	2300      	movs	r3, #0
 80136c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136ca:	f7ff fe59 	bl	8013380 <__multadd>
 80136ce:	4606      	mov	r6, r0
 80136d0:	10ad      	asrs	r5, r5, #2
 80136d2:	d03d      	beq.n	8013750 <__pow5mult+0xa0>
 80136d4:	69fc      	ldr	r4, [r7, #28]
 80136d6:	b97c      	cbnz	r4, 80136f8 <__pow5mult+0x48>
 80136d8:	2010      	movs	r0, #16
 80136da:	f7ff fd39 	bl	8013150 <malloc>
 80136de:	4602      	mov	r2, r0
 80136e0:	61f8      	str	r0, [r7, #28]
 80136e2:	b928      	cbnz	r0, 80136f0 <__pow5mult+0x40>
 80136e4:	4b1d      	ldr	r3, [pc, #116]	@ (801375c <__pow5mult+0xac>)
 80136e6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80136ea:	481d      	ldr	r0, [pc, #116]	@ (8013760 <__pow5mult+0xb0>)
 80136ec:	f001 fd28 	bl	8015140 <__assert_func>
 80136f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136f4:	6004      	str	r4, [r0, #0]
 80136f6:	60c4      	str	r4, [r0, #12]
 80136f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80136fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013700:	b94c      	cbnz	r4, 8013716 <__pow5mult+0x66>
 8013702:	f240 2171 	movw	r1, #625	@ 0x271
 8013706:	4638      	mov	r0, r7
 8013708:	f7ff ff18 	bl	801353c <__i2b>
 801370c:	2300      	movs	r3, #0
 801370e:	4604      	mov	r4, r0
 8013710:	f8c8 0008 	str.w	r0, [r8, #8]
 8013714:	6003      	str	r3, [r0, #0]
 8013716:	f04f 0900 	mov.w	r9, #0
 801371a:	07eb      	lsls	r3, r5, #31
 801371c:	d50a      	bpl.n	8013734 <__pow5mult+0x84>
 801371e:	4631      	mov	r1, r6
 8013720:	4622      	mov	r2, r4
 8013722:	4638      	mov	r0, r7
 8013724:	f7ff ff20 	bl	8013568 <__multiply>
 8013728:	4680      	mov	r8, r0
 801372a:	4631      	mov	r1, r6
 801372c:	4638      	mov	r0, r7
 801372e:	4646      	mov	r6, r8
 8013730:	f7ff fe04 	bl	801333c <_Bfree>
 8013734:	106d      	asrs	r5, r5, #1
 8013736:	d00b      	beq.n	8013750 <__pow5mult+0xa0>
 8013738:	6820      	ldr	r0, [r4, #0]
 801373a:	b938      	cbnz	r0, 801374c <__pow5mult+0x9c>
 801373c:	4622      	mov	r2, r4
 801373e:	4621      	mov	r1, r4
 8013740:	4638      	mov	r0, r7
 8013742:	f7ff ff11 	bl	8013568 <__multiply>
 8013746:	6020      	str	r0, [r4, #0]
 8013748:	f8c0 9000 	str.w	r9, [r0]
 801374c:	4604      	mov	r4, r0
 801374e:	e7e4      	b.n	801371a <__pow5mult+0x6a>
 8013750:	4630      	mov	r0, r6
 8013752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013756:	bf00      	nop
 8013758:	08015cb4 	.word	0x08015cb4
 801375c:	08015b22 	.word	0x08015b22
 8013760:	08015ba2 	.word	0x08015ba2

08013764 <__lshift>:
 8013764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013768:	460c      	mov	r4, r1
 801376a:	4607      	mov	r7, r0
 801376c:	4691      	mov	r9, r2
 801376e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013772:	6923      	ldr	r3, [r4, #16]
 8013774:	6849      	ldr	r1, [r1, #4]
 8013776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801377a:	68a3      	ldr	r3, [r4, #8]
 801377c:	f108 0601 	add.w	r6, r8, #1
 8013780:	42b3      	cmp	r3, r6
 8013782:	db0b      	blt.n	801379c <__lshift+0x38>
 8013784:	4638      	mov	r0, r7
 8013786:	f7ff fd99 	bl	80132bc <_Balloc>
 801378a:	4605      	mov	r5, r0
 801378c:	b948      	cbnz	r0, 80137a2 <__lshift+0x3e>
 801378e:	4602      	mov	r2, r0
 8013790:	4b28      	ldr	r3, [pc, #160]	@ (8013834 <__lshift+0xd0>)
 8013792:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013796:	4828      	ldr	r0, [pc, #160]	@ (8013838 <__lshift+0xd4>)
 8013798:	f001 fcd2 	bl	8015140 <__assert_func>
 801379c:	3101      	adds	r1, #1
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	e7ee      	b.n	8013780 <__lshift+0x1c>
 80137a2:	2300      	movs	r3, #0
 80137a4:	f100 0114 	add.w	r1, r0, #20
 80137a8:	f100 0210 	add.w	r2, r0, #16
 80137ac:	4618      	mov	r0, r3
 80137ae:	4553      	cmp	r3, sl
 80137b0:	db33      	blt.n	801381a <__lshift+0xb6>
 80137b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80137b6:	f104 0314 	add.w	r3, r4, #20
 80137ba:	6920      	ldr	r0, [r4, #16]
 80137bc:	f019 091f 	ands.w	r9, r9, #31
 80137c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137c8:	d02b      	beq.n	8013822 <__lshift+0xbe>
 80137ca:	f1c9 0e20 	rsb	lr, r9, #32
 80137ce:	468a      	mov	sl, r1
 80137d0:	2200      	movs	r2, #0
 80137d2:	6818      	ldr	r0, [r3, #0]
 80137d4:	fa00 f009 	lsl.w	r0, r0, r9
 80137d8:	4310      	orrs	r0, r2
 80137da:	f84a 0b04 	str.w	r0, [sl], #4
 80137de:	f853 2b04 	ldr.w	r2, [r3], #4
 80137e2:	459c      	cmp	ip, r3
 80137e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80137e8:	d8f3      	bhi.n	80137d2 <__lshift+0x6e>
 80137ea:	ebac 0304 	sub.w	r3, ip, r4
 80137ee:	f104 0015 	add.w	r0, r4, #21
 80137f2:	3b15      	subs	r3, #21
 80137f4:	f023 0303 	bic.w	r3, r3, #3
 80137f8:	3304      	adds	r3, #4
 80137fa:	4560      	cmp	r0, ip
 80137fc:	bf88      	it	hi
 80137fe:	2304      	movhi	r3, #4
 8013800:	50ca      	str	r2, [r1, r3]
 8013802:	b10a      	cbz	r2, 8013808 <__lshift+0xa4>
 8013804:	f108 0602 	add.w	r6, r8, #2
 8013808:	3e01      	subs	r6, #1
 801380a:	4638      	mov	r0, r7
 801380c:	4621      	mov	r1, r4
 801380e:	612e      	str	r6, [r5, #16]
 8013810:	f7ff fd94 	bl	801333c <_Bfree>
 8013814:	4628      	mov	r0, r5
 8013816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801381a:	3301      	adds	r3, #1
 801381c:	f842 0f04 	str.w	r0, [r2, #4]!
 8013820:	e7c5      	b.n	80137ae <__lshift+0x4a>
 8013822:	3904      	subs	r1, #4
 8013824:	f853 2b04 	ldr.w	r2, [r3], #4
 8013828:	459c      	cmp	ip, r3
 801382a:	f841 2f04 	str.w	r2, [r1, #4]!
 801382e:	d8f9      	bhi.n	8013824 <__lshift+0xc0>
 8013830:	e7ea      	b.n	8013808 <__lshift+0xa4>
 8013832:	bf00      	nop
 8013834:	08015b91 	.word	0x08015b91
 8013838:	08015ba2 	.word	0x08015ba2

0801383c <__mcmp>:
 801383c:	4603      	mov	r3, r0
 801383e:	690a      	ldr	r2, [r1, #16]
 8013840:	6900      	ldr	r0, [r0, #16]
 8013842:	1a80      	subs	r0, r0, r2
 8013844:	b530      	push	{r4, r5, lr}
 8013846:	d10e      	bne.n	8013866 <__mcmp+0x2a>
 8013848:	3314      	adds	r3, #20
 801384a:	3114      	adds	r1, #20
 801384c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013850:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013854:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013858:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801385c:	4295      	cmp	r5, r2
 801385e:	d003      	beq.n	8013868 <__mcmp+0x2c>
 8013860:	d205      	bcs.n	801386e <__mcmp+0x32>
 8013862:	f04f 30ff 	mov.w	r0, #4294967295
 8013866:	bd30      	pop	{r4, r5, pc}
 8013868:	42a3      	cmp	r3, r4
 801386a:	d3f3      	bcc.n	8013854 <__mcmp+0x18>
 801386c:	e7fb      	b.n	8013866 <__mcmp+0x2a>
 801386e:	2001      	movs	r0, #1
 8013870:	e7f9      	b.n	8013866 <__mcmp+0x2a>
	...

08013874 <__mdiff>:
 8013874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013878:	4689      	mov	r9, r1
 801387a:	4606      	mov	r6, r0
 801387c:	4611      	mov	r1, r2
 801387e:	4614      	mov	r4, r2
 8013880:	4648      	mov	r0, r9
 8013882:	f7ff ffdb 	bl	801383c <__mcmp>
 8013886:	1e05      	subs	r5, r0, #0
 8013888:	d112      	bne.n	80138b0 <__mdiff+0x3c>
 801388a:	4629      	mov	r1, r5
 801388c:	4630      	mov	r0, r6
 801388e:	f7ff fd15 	bl	80132bc <_Balloc>
 8013892:	4602      	mov	r2, r0
 8013894:	b928      	cbnz	r0, 80138a2 <__mdiff+0x2e>
 8013896:	4b41      	ldr	r3, [pc, #260]	@ (801399c <__mdiff+0x128>)
 8013898:	f240 2137 	movw	r1, #567	@ 0x237
 801389c:	4840      	ldr	r0, [pc, #256]	@ (80139a0 <__mdiff+0x12c>)
 801389e:	f001 fc4f 	bl	8015140 <__assert_func>
 80138a2:	2301      	movs	r3, #1
 80138a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80138a8:	4610      	mov	r0, r2
 80138aa:	b003      	add	sp, #12
 80138ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b0:	bfbc      	itt	lt
 80138b2:	464b      	movlt	r3, r9
 80138b4:	46a1      	movlt	r9, r4
 80138b6:	4630      	mov	r0, r6
 80138b8:	bfb8      	it	lt
 80138ba:	2501      	movlt	r5, #1
 80138bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80138c0:	bfb4      	ite	lt
 80138c2:	461c      	movlt	r4, r3
 80138c4:	2500      	movge	r5, #0
 80138c6:	f7ff fcf9 	bl	80132bc <_Balloc>
 80138ca:	4602      	mov	r2, r0
 80138cc:	b918      	cbnz	r0, 80138d6 <__mdiff+0x62>
 80138ce:	4b33      	ldr	r3, [pc, #204]	@ (801399c <__mdiff+0x128>)
 80138d0:	f240 2145 	movw	r1, #581	@ 0x245
 80138d4:	e7e2      	b.n	801389c <__mdiff+0x28>
 80138d6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80138da:	f104 0e14 	add.w	lr, r4, #20
 80138de:	6926      	ldr	r6, [r4, #16]
 80138e0:	f100 0b14 	add.w	fp, r0, #20
 80138e4:	60c5      	str	r5, [r0, #12]
 80138e6:	f109 0514 	add.w	r5, r9, #20
 80138ea:	f109 0310 	add.w	r3, r9, #16
 80138ee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80138f2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80138f6:	46d9      	mov	r9, fp
 80138f8:	f04f 0c00 	mov.w	ip, #0
 80138fc:	9301      	str	r3, [sp, #4]
 80138fe:	9b01      	ldr	r3, [sp, #4]
 8013900:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013904:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013908:	4576      	cmp	r6, lr
 801390a:	9301      	str	r3, [sp, #4]
 801390c:	fa1f f38a 	uxth.w	r3, sl
 8013910:	4619      	mov	r1, r3
 8013912:	b283      	uxth	r3, r0
 8013914:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8013918:	eba1 0303 	sub.w	r3, r1, r3
 801391c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013920:	4463      	add	r3, ip
 8013922:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013926:	b29b      	uxth	r3, r3
 8013928:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801392c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013930:	f849 3b04 	str.w	r3, [r9], #4
 8013934:	d8e3      	bhi.n	80138fe <__mdiff+0x8a>
 8013936:	1b33      	subs	r3, r6, r4
 8013938:	3415      	adds	r4, #21
 801393a:	3b15      	subs	r3, #21
 801393c:	f023 0303 	bic.w	r3, r3, #3
 8013940:	3304      	adds	r3, #4
 8013942:	42a6      	cmp	r6, r4
 8013944:	bf38      	it	cc
 8013946:	2304      	movcc	r3, #4
 8013948:	441d      	add	r5, r3
 801394a:	445b      	add	r3, fp
 801394c:	462c      	mov	r4, r5
 801394e:	461e      	mov	r6, r3
 8013950:	4544      	cmp	r4, r8
 8013952:	d30e      	bcc.n	8013972 <__mdiff+0xfe>
 8013954:	f108 0103 	add.w	r1, r8, #3
 8013958:	1b49      	subs	r1, r1, r5
 801395a:	3d03      	subs	r5, #3
 801395c:	f021 0103 	bic.w	r1, r1, #3
 8013960:	45a8      	cmp	r8, r5
 8013962:	bf38      	it	cc
 8013964:	2100      	movcc	r1, #0
 8013966:	440b      	add	r3, r1
 8013968:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801396c:	b199      	cbz	r1, 8013996 <__mdiff+0x122>
 801396e:	6117      	str	r7, [r2, #16]
 8013970:	e79a      	b.n	80138a8 <__mdiff+0x34>
 8013972:	f854 1b04 	ldr.w	r1, [r4], #4
 8013976:	46e6      	mov	lr, ip
 8013978:	fa1f fc81 	uxth.w	ip, r1
 801397c:	0c08      	lsrs	r0, r1, #16
 801397e:	4471      	add	r1, lr
 8013980:	44f4      	add	ip, lr
 8013982:	b289      	uxth	r1, r1
 8013984:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801398c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013990:	f846 1b04 	str.w	r1, [r6], #4
 8013994:	e7dc      	b.n	8013950 <__mdiff+0xdc>
 8013996:	3f01      	subs	r7, #1
 8013998:	e7e6      	b.n	8013968 <__mdiff+0xf4>
 801399a:	bf00      	nop
 801399c:	08015b91 	.word	0x08015b91
 80139a0:	08015ba2 	.word	0x08015ba2

080139a4 <__ulp>:
 80139a4:	b082      	sub	sp, #8
 80139a6:	4b11      	ldr	r3, [pc, #68]	@ (80139ec <__ulp+0x48>)
 80139a8:	ed8d 0b00 	vstr	d0, [sp]
 80139ac:	9a01      	ldr	r2, [sp, #4]
 80139ae:	4013      	ands	r3, r2
 80139b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	dc08      	bgt.n	80139ca <__ulp+0x26>
 80139b8:	425b      	negs	r3, r3
 80139ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80139be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80139c2:	da04      	bge.n	80139ce <__ulp+0x2a>
 80139c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80139c8:	4113      	asrs	r3, r2
 80139ca:	2200      	movs	r2, #0
 80139cc:	e008      	b.n	80139e0 <__ulp+0x3c>
 80139ce:	f1a2 0314 	sub.w	r3, r2, #20
 80139d2:	2b1e      	cmp	r3, #30
 80139d4:	bfd6      	itet	le
 80139d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80139da:	2201      	movgt	r2, #1
 80139dc:	40da      	lsrle	r2, r3
 80139de:	2300      	movs	r3, #0
 80139e0:	4619      	mov	r1, r3
 80139e2:	4610      	mov	r0, r2
 80139e4:	ec41 0b10 	vmov	d0, r0, r1
 80139e8:	b002      	add	sp, #8
 80139ea:	4770      	bx	lr
 80139ec:	7ff00000 	.word	0x7ff00000

080139f0 <__b2d>:
 80139f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139f4:	6906      	ldr	r6, [r0, #16]
 80139f6:	f100 0814 	add.w	r8, r0, #20
 80139fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80139fe:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013a02:	1f37      	subs	r7, r6, #4
 8013a04:	4610      	mov	r0, r2
 8013a06:	f7ff fd4d 	bl	80134a4 <__hi0bits>
 8013a0a:	f1c0 0320 	rsb	r3, r0, #32
 8013a0e:	280a      	cmp	r0, #10
 8013a10:	600b      	str	r3, [r1, #0]
 8013a12:	491d      	ldr	r1, [pc, #116]	@ (8013a88 <__b2d+0x98>)
 8013a14:	dc16      	bgt.n	8013a44 <__b2d+0x54>
 8013a16:	f1c0 0c0b 	rsb	ip, r0, #11
 8013a1a:	45b8      	cmp	r8, r7
 8013a1c:	f100 0015 	add.w	r0, r0, #21
 8013a20:	fa22 f30c 	lsr.w	r3, r2, ip
 8013a24:	fa02 f000 	lsl.w	r0, r2, r0
 8013a28:	ea43 0501 	orr.w	r5, r3, r1
 8013a2c:	bf34      	ite	cc
 8013a2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013a32:	2300      	movcs	r3, #0
 8013a34:	fa23 f30c 	lsr.w	r3, r3, ip
 8013a38:	4303      	orrs	r3, r0
 8013a3a:	461c      	mov	r4, r3
 8013a3c:	ec45 4b10 	vmov	d0, r4, r5
 8013a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a44:	45b8      	cmp	r8, r7
 8013a46:	bf3a      	itte	cc
 8013a48:	f1a6 0708 	subcc.w	r7, r6, #8
 8013a4c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013a50:	2300      	movcs	r3, #0
 8013a52:	380b      	subs	r0, #11
 8013a54:	d014      	beq.n	8013a80 <__b2d+0x90>
 8013a56:	f1c0 0120 	rsb	r1, r0, #32
 8013a5a:	4082      	lsls	r2, r0
 8013a5c:	4547      	cmp	r7, r8
 8013a5e:	fa23 f401 	lsr.w	r4, r3, r1
 8013a62:	fa03 f300 	lsl.w	r3, r3, r0
 8013a66:	ea42 0204 	orr.w	r2, r2, r4
 8013a6a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013a6e:	bf8c      	ite	hi
 8013a70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013a74:	2200      	movls	r2, #0
 8013a76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013a7a:	40ca      	lsrs	r2, r1
 8013a7c:	4313      	orrs	r3, r2
 8013a7e:	e7dc      	b.n	8013a3a <__b2d+0x4a>
 8013a80:	ea42 0501 	orr.w	r5, r2, r1
 8013a84:	e7d9      	b.n	8013a3a <__b2d+0x4a>
 8013a86:	bf00      	nop
 8013a88:	3ff00000 	.word	0x3ff00000

08013a8c <__d2b>:
 8013a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a90:	460f      	mov	r7, r1
 8013a92:	2101      	movs	r1, #1
 8013a94:	4616      	mov	r6, r2
 8013a96:	ec59 8b10 	vmov	r8, r9, d0
 8013a9a:	f7ff fc0f 	bl	80132bc <_Balloc>
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	b930      	cbnz	r0, 8013ab0 <__d2b+0x24>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	4b23      	ldr	r3, [pc, #140]	@ (8013b34 <__d2b+0xa8>)
 8013aa6:	f240 310f 	movw	r1, #783	@ 0x30f
 8013aaa:	4823      	ldr	r0, [pc, #140]	@ (8013b38 <__d2b+0xac>)
 8013aac:	f001 fb48 	bl	8015140 <__assert_func>
 8013ab0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013ab4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013ab8:	b10d      	cbz	r5, 8013abe <__d2b+0x32>
 8013aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013abe:	9301      	str	r3, [sp, #4]
 8013ac0:	f1b8 0300 	subs.w	r3, r8, #0
 8013ac4:	d023      	beq.n	8013b0e <__d2b+0x82>
 8013ac6:	4668      	mov	r0, sp
 8013ac8:	9300      	str	r3, [sp, #0]
 8013aca:	f7ff fd0a 	bl	80134e2 <__lo0bits>
 8013ace:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013ad2:	b1d0      	cbz	r0, 8013b0a <__d2b+0x7e>
 8013ad4:	f1c0 0320 	rsb	r3, r0, #32
 8013ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8013adc:	40c2      	lsrs	r2, r0
 8013ade:	430b      	orrs	r3, r1
 8013ae0:	9201      	str	r2, [sp, #4]
 8013ae2:	6163      	str	r3, [r4, #20]
 8013ae4:	9b01      	ldr	r3, [sp, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	61a3      	str	r3, [r4, #24]
 8013aea:	bf0c      	ite	eq
 8013aec:	2201      	moveq	r2, #1
 8013aee:	2202      	movne	r2, #2
 8013af0:	6122      	str	r2, [r4, #16]
 8013af2:	b1a5      	cbz	r5, 8013b1e <__d2b+0x92>
 8013af4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013af8:	4405      	add	r5, r0
 8013afa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013afe:	603d      	str	r5, [r7, #0]
 8013b00:	6030      	str	r0, [r6, #0]
 8013b02:	4620      	mov	r0, r4
 8013b04:	b003      	add	sp, #12
 8013b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b0a:	6161      	str	r1, [r4, #20]
 8013b0c:	e7ea      	b.n	8013ae4 <__d2b+0x58>
 8013b0e:	a801      	add	r0, sp, #4
 8013b10:	f7ff fce7 	bl	80134e2 <__lo0bits>
 8013b14:	9b01      	ldr	r3, [sp, #4]
 8013b16:	3020      	adds	r0, #32
 8013b18:	2201      	movs	r2, #1
 8013b1a:	6163      	str	r3, [r4, #20]
 8013b1c:	e7e8      	b.n	8013af0 <__d2b+0x64>
 8013b1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013b22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013b26:	6038      	str	r0, [r7, #0]
 8013b28:	6918      	ldr	r0, [r3, #16]
 8013b2a:	f7ff fcbb 	bl	80134a4 <__hi0bits>
 8013b2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013b32:	e7e5      	b.n	8013b00 <__d2b+0x74>
 8013b34:	08015b91 	.word	0x08015b91
 8013b38:	08015ba2 	.word	0x08015ba2

08013b3c <__ratio>:
 8013b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b40:	b085      	sub	sp, #20
 8013b42:	e9cd 1000 	strd	r1, r0, [sp]
 8013b46:	a902      	add	r1, sp, #8
 8013b48:	f7ff ff52 	bl	80139f0 <__b2d>
 8013b4c:	a903      	add	r1, sp, #12
 8013b4e:	9800      	ldr	r0, [sp, #0]
 8013b50:	ec55 4b10 	vmov	r4, r5, d0
 8013b54:	f7ff ff4c 	bl	80139f0 <__b2d>
 8013b58:	9b01      	ldr	r3, [sp, #4]
 8013b5a:	462f      	mov	r7, r5
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	6919      	ldr	r1, [r3, #16]
 8013b60:	9b00      	ldr	r3, [sp, #0]
 8013b62:	691b      	ldr	r3, [r3, #16]
 8013b64:	1ac9      	subs	r1, r1, r3
 8013b66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013b6a:	ec5b ab10 	vmov	sl, fp, d0
 8013b6e:	1a9b      	subs	r3, r3, r2
 8013b70:	46d9      	mov	r9, fp
 8013b72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	bfcd      	iteet	gt
 8013b7a:	462a      	movgt	r2, r5
 8013b7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b80:	465a      	movle	r2, fp
 8013b82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013b86:	bfd8      	it	le
 8013b88:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013b8c:	4652      	mov	r2, sl
 8013b8e:	4639      	mov	r1, r7
 8013b90:	464b      	mov	r3, r9
 8013b92:	f7ec fe5f 	bl	8000854 <__aeabi_ddiv>
 8013b96:	ec41 0b10 	vmov	d0, r0, r1
 8013b9a:	b005      	add	sp, #20
 8013b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ba0 <__copybits>:
 8013ba0:	3901      	subs	r1, #1
 8013ba2:	f102 0314 	add.w	r3, r2, #20
 8013ba6:	1149      	asrs	r1, r1, #5
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	3101      	adds	r1, #1
 8013bac:	6914      	ldr	r4, [r2, #16]
 8013bae:	1f05      	subs	r5, r0, #4
 8013bb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013bb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013bb8:	42a3      	cmp	r3, r4
 8013bba:	d30c      	bcc.n	8013bd6 <__copybits+0x36>
 8013bbc:	1aa3      	subs	r3, r4, r2
 8013bbe:	3211      	adds	r2, #17
 8013bc0:	3b11      	subs	r3, #17
 8013bc2:	f023 0303 	bic.w	r3, r3, #3
 8013bc6:	42a2      	cmp	r2, r4
 8013bc8:	bf88      	it	hi
 8013bca:	2300      	movhi	r3, #0
 8013bcc:	4418      	add	r0, r3
 8013bce:	2300      	movs	r3, #0
 8013bd0:	4288      	cmp	r0, r1
 8013bd2:	d305      	bcc.n	8013be0 <__copybits+0x40>
 8013bd4:	bd70      	pop	{r4, r5, r6, pc}
 8013bd6:	f853 6b04 	ldr.w	r6, [r3], #4
 8013bda:	f845 6f04 	str.w	r6, [r5, #4]!
 8013bde:	e7eb      	b.n	8013bb8 <__copybits+0x18>
 8013be0:	f840 3b04 	str.w	r3, [r0], #4
 8013be4:	e7f4      	b.n	8013bd0 <__copybits+0x30>

08013be6 <__any_on>:
 8013be6:	f100 0214 	add.w	r2, r0, #20
 8013bea:	114b      	asrs	r3, r1, #5
 8013bec:	6900      	ldr	r0, [r0, #16]
 8013bee:	4298      	cmp	r0, r3
 8013bf0:	b510      	push	{r4, lr}
 8013bf2:	db11      	blt.n	8013c18 <__any_on+0x32>
 8013bf4:	dd0a      	ble.n	8013c0c <__any_on+0x26>
 8013bf6:	f011 011f 	ands.w	r1, r1, #31
 8013bfa:	d007      	beq.n	8013c0c <__any_on+0x26>
 8013bfc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013c00:	fa24 f001 	lsr.w	r0, r4, r1
 8013c04:	fa00 f101 	lsl.w	r1, r0, r1
 8013c08:	428c      	cmp	r4, r1
 8013c0a:	d10b      	bne.n	8013c24 <__any_on+0x3e>
 8013c0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013c10:	4293      	cmp	r3, r2
 8013c12:	d803      	bhi.n	8013c1c <__any_on+0x36>
 8013c14:	2000      	movs	r0, #0
 8013c16:	bd10      	pop	{r4, pc}
 8013c18:	4603      	mov	r3, r0
 8013c1a:	e7f7      	b.n	8013c0c <__any_on+0x26>
 8013c1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c20:	2900      	cmp	r1, #0
 8013c22:	d0f5      	beq.n	8013c10 <__any_on+0x2a>
 8013c24:	2001      	movs	r0, #1
 8013c26:	e7f6      	b.n	8013c16 <__any_on+0x30>

08013c28 <sulp>:
 8013c28:	b570      	push	{r4, r5, r6, lr}
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	460d      	mov	r5, r1
 8013c2e:	4616      	mov	r6, r2
 8013c30:	ec45 4b10 	vmov	d0, r4, r5
 8013c34:	f7ff feb6 	bl	80139a4 <__ulp>
 8013c38:	ec51 0b10 	vmov	r0, r1, d0
 8013c3c:	b17e      	cbz	r6, 8013c5e <sulp+0x36>
 8013c3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013c42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	dd09      	ble.n	8013c5e <sulp+0x36>
 8013c4a:	051b      	lsls	r3, r3, #20
 8013c4c:	2400      	movs	r4, #0
 8013c4e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013c52:	4622      	mov	r2, r4
 8013c54:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013c58:	462b      	mov	r3, r5
 8013c5a:	f7ec fcd1 	bl	8000600 <__aeabi_dmul>
 8013c5e:	ec41 0b10 	vmov	d0, r0, r1
 8013c62:	bd70      	pop	{r4, r5, r6, pc}
 8013c64:	0000      	movs	r0, r0
	...

08013c68 <_strtod_l>:
 8013c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c6c:	b09f      	sub	sp, #124	@ 0x7c
 8013c6e:	460c      	mov	r4, r1
 8013c70:	f04f 0a00 	mov.w	sl, #0
 8013c74:	f04f 0b00 	mov.w	fp, #0
 8013c78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	9005      	str	r0, [sp, #20]
 8013c7e:	921a      	str	r2, [sp, #104]	@ 0x68
 8013c80:	460a      	mov	r2, r1
 8013c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8013c84:	7811      	ldrb	r1, [r2, #0]
 8013c86:	292b      	cmp	r1, #43	@ 0x2b
 8013c88:	d04a      	beq.n	8013d20 <_strtod_l+0xb8>
 8013c8a:	d838      	bhi.n	8013cfe <_strtod_l+0x96>
 8013c8c:	290d      	cmp	r1, #13
 8013c8e:	d832      	bhi.n	8013cf6 <_strtod_l+0x8e>
 8013c90:	2908      	cmp	r1, #8
 8013c92:	d832      	bhi.n	8013cfa <_strtod_l+0x92>
 8013c94:	2900      	cmp	r1, #0
 8013c96:	d03b      	beq.n	8013d10 <_strtod_l+0xa8>
 8013c98:	2200      	movs	r2, #0
 8013c9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8013c9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013c9e:	782a      	ldrb	r2, [r5, #0]
 8013ca0:	2a30      	cmp	r2, #48	@ 0x30
 8013ca2:	f040 80b2 	bne.w	8013e0a <_strtod_l+0x1a2>
 8013ca6:	786a      	ldrb	r2, [r5, #1]
 8013ca8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013cac:	2a58      	cmp	r2, #88	@ 0x58
 8013cae:	d16e      	bne.n	8013d8e <_strtod_l+0x126>
 8013cb0:	9302      	str	r3, [sp, #8]
 8013cb2:	a919      	add	r1, sp, #100	@ 0x64
 8013cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cb6:	4a90      	ldr	r2, [pc, #576]	@ (8013ef8 <_strtod_l+0x290>)
 8013cb8:	9301      	str	r3, [sp, #4]
 8013cba:	ab1a      	add	r3, sp, #104	@ 0x68
 8013cbc:	9805      	ldr	r0, [sp, #20]
 8013cbe:	9300      	str	r3, [sp, #0]
 8013cc0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013cc2:	f001 fad5 	bl	8015270 <__gethex>
 8013cc6:	f010 060f 	ands.w	r6, r0, #15
 8013cca:	4604      	mov	r4, r0
 8013ccc:	d005      	beq.n	8013cda <_strtod_l+0x72>
 8013cce:	2e06      	cmp	r6, #6
 8013cd0:	d128      	bne.n	8013d24 <_strtod_l+0xbc>
 8013cd2:	3501      	adds	r5, #1
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	9519      	str	r5, [sp, #100]	@ 0x64
 8013cd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8013cda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	f040 858e 	bne.w	80147fe <_strtod_l+0xb96>
 8013ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ce4:	b1cb      	cbz	r3, 8013d1a <_strtod_l+0xb2>
 8013ce6:	4652      	mov	r2, sl
 8013ce8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013cec:	ec43 2b10 	vmov	d0, r2, r3
 8013cf0:	b01f      	add	sp, #124	@ 0x7c
 8013cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf6:	2920      	cmp	r1, #32
 8013cf8:	d1ce      	bne.n	8013c98 <_strtod_l+0x30>
 8013cfa:	3201      	adds	r2, #1
 8013cfc:	e7c1      	b.n	8013c82 <_strtod_l+0x1a>
 8013cfe:	292d      	cmp	r1, #45	@ 0x2d
 8013d00:	d1ca      	bne.n	8013c98 <_strtod_l+0x30>
 8013d02:	2101      	movs	r1, #1
 8013d04:	910e      	str	r1, [sp, #56]	@ 0x38
 8013d06:	1c51      	adds	r1, r2, #1
 8013d08:	9119      	str	r1, [sp, #100]	@ 0x64
 8013d0a:	7852      	ldrb	r2, [r2, #1]
 8013d0c:	2a00      	cmp	r2, #0
 8013d0e:	d1c5      	bne.n	8013c9c <_strtod_l+0x34>
 8013d10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013d12:	9419      	str	r4, [sp, #100]	@ 0x64
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	f040 8570 	bne.w	80147fa <_strtod_l+0xb92>
 8013d1a:	4652      	mov	r2, sl
 8013d1c:	465b      	mov	r3, fp
 8013d1e:	e7e5      	b.n	8013cec <_strtod_l+0x84>
 8013d20:	2100      	movs	r1, #0
 8013d22:	e7ef      	b.n	8013d04 <_strtod_l+0x9c>
 8013d24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013d26:	b13a      	cbz	r2, 8013d38 <_strtod_l+0xd0>
 8013d28:	2135      	movs	r1, #53	@ 0x35
 8013d2a:	a81c      	add	r0, sp, #112	@ 0x70
 8013d2c:	f7ff ff38 	bl	8013ba0 <__copybits>
 8013d30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d32:	9805      	ldr	r0, [sp, #20]
 8013d34:	f7ff fb02 	bl	801333c <_Bfree>
 8013d38:	3e01      	subs	r6, #1
 8013d3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013d3c:	2e04      	cmp	r6, #4
 8013d3e:	d806      	bhi.n	8013d4e <_strtod_l+0xe6>
 8013d40:	e8df f006 	tbb	[pc, r6]
 8013d44:	201d0314 	.word	0x201d0314
 8013d48:	14          	.byte	0x14
 8013d49:	00          	.byte	0x00
 8013d4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013d4e:	05e1      	lsls	r1, r4, #23
 8013d50:	bf48      	it	mi
 8013d52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d5a:	0d1b      	lsrs	r3, r3, #20
 8013d5c:	051b      	lsls	r3, r3, #20
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d1bb      	bne.n	8013cda <_strtod_l+0x72>
 8013d62:	f7fe fafd 	bl	8012360 <__errno>
 8013d66:	2322      	movs	r3, #34	@ 0x22
 8013d68:	6003      	str	r3, [r0, #0]
 8013d6a:	e7b6      	b.n	8013cda <_strtod_l+0x72>
 8013d6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013d70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013d74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013d78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013d7c:	e7e7      	b.n	8013d4e <_strtod_l+0xe6>
 8013d7e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013f00 <_strtod_l+0x298>
 8013d82:	e7e4      	b.n	8013d4e <_strtod_l+0xe6>
 8013d84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013d88:	f04f 3aff 	mov.w	sl, #4294967295
 8013d8c:	e7df      	b.n	8013d4e <_strtod_l+0xe6>
 8013d8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013d90:	1c5a      	adds	r2, r3, #1
 8013d92:	9219      	str	r2, [sp, #100]	@ 0x64
 8013d94:	785b      	ldrb	r3, [r3, #1]
 8013d96:	2b30      	cmp	r3, #48	@ 0x30
 8013d98:	d0f9      	beq.n	8013d8e <_strtod_l+0x126>
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d09d      	beq.n	8013cda <_strtod_l+0x72>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	2700      	movs	r7, #0
 8013da2:	9308      	str	r3, [sp, #32]
 8013da4:	220a      	movs	r2, #10
 8013da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013da8:	46b9      	mov	r9, r7
 8013daa:	970b      	str	r7, [sp, #44]	@ 0x2c
 8013dac:	930c      	str	r3, [sp, #48]	@ 0x30
 8013dae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013db0:	7805      	ldrb	r5, [r0, #0]
 8013db2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013db6:	b2d9      	uxtb	r1, r3
 8013db8:	2909      	cmp	r1, #9
 8013dba:	d928      	bls.n	8013e0e <_strtod_l+0x1a6>
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	494f      	ldr	r1, [pc, #316]	@ (8013efc <_strtod_l+0x294>)
 8013dc0:	f001 f979 	bl	80150b6 <strncmp>
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	d032      	beq.n	8013e2e <_strtod_l+0x1c6>
 8013dc8:	2000      	movs	r0, #0
 8013dca:	462a      	mov	r2, r5
 8013dcc:	464d      	mov	r5, r9
 8013dce:	4603      	mov	r3, r0
 8013dd0:	900a      	str	r0, [sp, #40]	@ 0x28
 8013dd2:	2a65      	cmp	r2, #101	@ 0x65
 8013dd4:	d001      	beq.n	8013dda <_strtod_l+0x172>
 8013dd6:	2a45      	cmp	r2, #69	@ 0x45
 8013dd8:	d114      	bne.n	8013e04 <_strtod_l+0x19c>
 8013dda:	b91d      	cbnz	r5, 8013de4 <_strtod_l+0x17c>
 8013ddc:	9a08      	ldr	r2, [sp, #32]
 8013dde:	4302      	orrs	r2, r0
 8013de0:	d096      	beq.n	8013d10 <_strtod_l+0xa8>
 8013de2:	2500      	movs	r5, #0
 8013de4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013de6:	1c62      	adds	r2, r4, #1
 8013de8:	9219      	str	r2, [sp, #100]	@ 0x64
 8013dea:	7862      	ldrb	r2, [r4, #1]
 8013dec:	2a2b      	cmp	r2, #43	@ 0x2b
 8013dee:	d079      	beq.n	8013ee4 <_strtod_l+0x27c>
 8013df0:	2a2d      	cmp	r2, #45	@ 0x2d
 8013df2:	d07d      	beq.n	8013ef0 <_strtod_l+0x288>
 8013df4:	f04f 0c00 	mov.w	ip, #0
 8013df8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013dfc:	2909      	cmp	r1, #9
 8013dfe:	f240 8085 	bls.w	8013f0c <_strtod_l+0x2a4>
 8013e02:	9419      	str	r4, [sp, #100]	@ 0x64
 8013e04:	f04f 0800 	mov.w	r8, #0
 8013e08:	e0a5      	b.n	8013f56 <_strtod_l+0x2ee>
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	e7c8      	b.n	8013da0 <_strtod_l+0x138>
 8013e0e:	f1b9 0f08 	cmp.w	r9, #8
 8013e12:	f100 0001 	add.w	r0, r0, #1
 8013e16:	f109 0901 	add.w	r9, r9, #1
 8013e1a:	bfd4      	ite	le
 8013e1c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8013e1e:	fb02 3707 	mlagt	r7, r2, r7, r3
 8013e22:	9019      	str	r0, [sp, #100]	@ 0x64
 8013e24:	bfdc      	itt	le
 8013e26:	fb02 3301 	mlale	r3, r2, r1, r3
 8013e2a:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8013e2c:	e7bf      	b.n	8013dae <_strtod_l+0x146>
 8013e2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e30:	1c5a      	adds	r2, r3, #1
 8013e32:	9219      	str	r2, [sp, #100]	@ 0x64
 8013e34:	785a      	ldrb	r2, [r3, #1]
 8013e36:	f1b9 0f00 	cmp.w	r9, #0
 8013e3a:	d03a      	beq.n	8013eb2 <_strtod_l+0x24a>
 8013e3c:	464d      	mov	r5, r9
 8013e3e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e40:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013e44:	2b09      	cmp	r3, #9
 8013e46:	d912      	bls.n	8013e6e <_strtod_l+0x206>
 8013e48:	2301      	movs	r3, #1
 8013e4a:	e7c2      	b.n	8013dd2 <_strtod_l+0x16a>
 8013e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e4e:	3001      	adds	r0, #1
 8013e50:	1c5a      	adds	r2, r3, #1
 8013e52:	9219      	str	r2, [sp, #100]	@ 0x64
 8013e54:	785a      	ldrb	r2, [r3, #1]
 8013e56:	2a30      	cmp	r2, #48	@ 0x30
 8013e58:	d0f8      	beq.n	8013e4c <_strtod_l+0x1e4>
 8013e5a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013e5e:	2b08      	cmp	r3, #8
 8013e60:	f200 84d2 	bhi.w	8014808 <_strtod_l+0xba0>
 8013e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e66:	2000      	movs	r0, #0
 8013e68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8013e6e:	3a30      	subs	r2, #48	@ 0x30
 8013e70:	f100 0301 	add.w	r3, r0, #1
 8013e74:	d017      	beq.n	8013ea6 <_strtod_l+0x23e>
 8013e76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013e78:	462e      	mov	r6, r5
 8013e7a:	f04f 0e0a 	mov.w	lr, #10
 8013e7e:	4419      	add	r1, r3
 8013e80:	910a      	str	r1, [sp, #40]	@ 0x28
 8013e82:	1c71      	adds	r1, r6, #1
 8013e84:	eba1 0c05 	sub.w	ip, r1, r5
 8013e88:	4563      	cmp	r3, ip
 8013e8a:	dc14      	bgt.n	8013eb6 <_strtod_l+0x24e>
 8013e8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013e90:	182b      	adds	r3, r5, r0
 8013e92:	3501      	adds	r5, #1
 8013e94:	2b08      	cmp	r3, #8
 8013e96:	4405      	add	r5, r0
 8013e98:	dc1a      	bgt.n	8013ed0 <_strtod_l+0x268>
 8013e9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013e9c:	230a      	movs	r3, #10
 8013e9e:	fb03 2301 	mla	r3, r3, r1, r2
 8013ea2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	1c51      	adds	r1, r2, #1
 8013eac:	9119      	str	r1, [sp, #100]	@ 0x64
 8013eae:	7852      	ldrb	r2, [r2, #1]
 8013eb0:	e7c6      	b.n	8013e40 <_strtod_l+0x1d8>
 8013eb2:	4648      	mov	r0, r9
 8013eb4:	e7cf      	b.n	8013e56 <_strtod_l+0x1ee>
 8013eb6:	2e08      	cmp	r6, #8
 8013eb8:	dc05      	bgt.n	8013ec6 <_strtod_l+0x25e>
 8013eba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013ebc:	fb0e f606 	mul.w	r6, lr, r6
 8013ec0:	960b      	str	r6, [sp, #44]	@ 0x2c
 8013ec2:	460e      	mov	r6, r1
 8013ec4:	e7dd      	b.n	8013e82 <_strtod_l+0x21a>
 8013ec6:	2910      	cmp	r1, #16
 8013ec8:	bfd8      	it	le
 8013eca:	fb0e f707 	mulle.w	r7, lr, r7
 8013ece:	e7f8      	b.n	8013ec2 <_strtod_l+0x25a>
 8013ed0:	2b0f      	cmp	r3, #15
 8013ed2:	bfdc      	itt	le
 8013ed4:	230a      	movle	r3, #10
 8013ed6:	fb03 2707 	mlale	r7, r3, r7, r2
 8013eda:	e7e3      	b.n	8013ea4 <_strtod_l+0x23c>
 8013edc:	2300      	movs	r3, #0
 8013ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	e77b      	b.n	8013ddc <_strtod_l+0x174>
 8013ee4:	f04f 0c00 	mov.w	ip, #0
 8013ee8:	1ca2      	adds	r2, r4, #2
 8013eea:	9219      	str	r2, [sp, #100]	@ 0x64
 8013eec:	78a2      	ldrb	r2, [r4, #2]
 8013eee:	e783      	b.n	8013df8 <_strtod_l+0x190>
 8013ef0:	f04f 0c01 	mov.w	ip, #1
 8013ef4:	e7f8      	b.n	8013ee8 <_strtod_l+0x280>
 8013ef6:	bf00      	nop
 8013ef8:	08015dc4 	.word	0x08015dc4
 8013efc:	08015bfb 	.word	0x08015bfb
 8013f00:	7ff00000 	.word	0x7ff00000
 8013f04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013f06:	1c51      	adds	r1, r2, #1
 8013f08:	9119      	str	r1, [sp, #100]	@ 0x64
 8013f0a:	7852      	ldrb	r2, [r2, #1]
 8013f0c:	2a30      	cmp	r2, #48	@ 0x30
 8013f0e:	d0f9      	beq.n	8013f04 <_strtod_l+0x29c>
 8013f10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013f14:	2908      	cmp	r1, #8
 8013f16:	f63f af75 	bhi.w	8013e04 <_strtod_l+0x19c>
 8013f1a:	3a30      	subs	r2, #48	@ 0x30
 8013f1c:	f04f 080a 	mov.w	r8, #10
 8013f20:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013f24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013f26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013f28:	1c56      	adds	r6, r2, #1
 8013f2a:	9619      	str	r6, [sp, #100]	@ 0x64
 8013f2c:	7852      	ldrb	r2, [r2, #1]
 8013f2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013f32:	f1be 0f09 	cmp.w	lr, #9
 8013f36:	d939      	bls.n	8013fac <_strtod_l+0x344>
 8013f38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013f3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013f3e:	1a76      	subs	r6, r6, r1
 8013f40:	2e08      	cmp	r6, #8
 8013f42:	dc03      	bgt.n	8013f4c <_strtod_l+0x2e4>
 8013f44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013f46:	4588      	cmp	r8, r1
 8013f48:	bfa8      	it	ge
 8013f4a:	4688      	movge	r8, r1
 8013f4c:	f1bc 0f00 	cmp.w	ip, #0
 8013f50:	d001      	beq.n	8013f56 <_strtod_l+0x2ee>
 8013f52:	f1c8 0800 	rsb	r8, r8, #0
 8013f56:	2d00      	cmp	r5, #0
 8013f58:	d14e      	bne.n	8013ff8 <_strtod_l+0x390>
 8013f5a:	9908      	ldr	r1, [sp, #32]
 8013f5c:	4308      	orrs	r0, r1
 8013f5e:	f47f aebc 	bne.w	8013cda <_strtod_l+0x72>
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f47f aed4 	bne.w	8013d10 <_strtod_l+0xa8>
 8013f68:	2a69      	cmp	r2, #105	@ 0x69
 8013f6a:	d028      	beq.n	8013fbe <_strtod_l+0x356>
 8013f6c:	dc25      	bgt.n	8013fba <_strtod_l+0x352>
 8013f6e:	2a49      	cmp	r2, #73	@ 0x49
 8013f70:	d025      	beq.n	8013fbe <_strtod_l+0x356>
 8013f72:	2a4e      	cmp	r2, #78	@ 0x4e
 8013f74:	f47f aecc 	bne.w	8013d10 <_strtod_l+0xa8>
 8013f78:	499a      	ldr	r1, [pc, #616]	@ (80141e4 <_strtod_l+0x57c>)
 8013f7a:	a819      	add	r0, sp, #100	@ 0x64
 8013f7c:	f001 fb98 	bl	80156b0 <__match>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	f43f aec5 	beq.w	8013d10 <_strtod_l+0xa8>
 8013f86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	2b28      	cmp	r3, #40	@ 0x28
 8013f8c:	d12e      	bne.n	8013fec <_strtod_l+0x384>
 8013f8e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013f90:	4995      	ldr	r1, [pc, #596]	@ (80141e8 <_strtod_l+0x580>)
 8013f92:	a819      	add	r0, sp, #100	@ 0x64
 8013f94:	f001 fba0 	bl	80156d8 <__hexnan>
 8013f98:	2805      	cmp	r0, #5
 8013f9a:	d127      	bne.n	8013fec <_strtod_l+0x384>
 8013f9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013f9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013fa2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013fa6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013faa:	e696      	b.n	8013cda <_strtod_l+0x72>
 8013fac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013fae:	fb08 2101 	mla	r1, r8, r1, r2
 8013fb2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013fb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fb8:	e7b5      	b.n	8013f26 <_strtod_l+0x2be>
 8013fba:	2a6e      	cmp	r2, #110	@ 0x6e
 8013fbc:	e7da      	b.n	8013f74 <_strtod_l+0x30c>
 8013fbe:	498b      	ldr	r1, [pc, #556]	@ (80141ec <_strtod_l+0x584>)
 8013fc0:	a819      	add	r0, sp, #100	@ 0x64
 8013fc2:	f001 fb75 	bl	80156b0 <__match>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	f43f aea2 	beq.w	8013d10 <_strtod_l+0xa8>
 8013fcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013fce:	a819      	add	r0, sp, #100	@ 0x64
 8013fd0:	4987      	ldr	r1, [pc, #540]	@ (80141f0 <_strtod_l+0x588>)
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8013fd6:	f001 fb6b 	bl	80156b0 <__match>
 8013fda:	b910      	cbnz	r0, 8013fe2 <_strtod_l+0x37a>
 8013fdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013fde:	3301      	adds	r3, #1
 8013fe0:	9319      	str	r3, [sp, #100]	@ 0x64
 8013fe2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8014200 <_strtod_l+0x598>
 8013fe6:	f04f 0a00 	mov.w	sl, #0
 8013fea:	e676      	b.n	8013cda <_strtod_l+0x72>
 8013fec:	4881      	ldr	r0, [pc, #516]	@ (80141f4 <_strtod_l+0x58c>)
 8013fee:	f7fd f80f 	bl	8011010 <nan>
 8013ff2:	ec5b ab10 	vmov	sl, fp, d0
 8013ff6:	e670      	b.n	8013cda <_strtod_l+0x72>
 8013ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ffa:	f1b9 0f00 	cmp.w	r9, #0
 8013ffe:	bf08      	it	eq
 8014000:	46a9      	moveq	r9, r5
 8014002:	2d10      	cmp	r5, #16
 8014004:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014006:	eba8 0303 	sub.w	r3, r8, r3
 801400a:	462c      	mov	r4, r5
 801400c:	bfa8      	it	ge
 801400e:	2410      	movge	r4, #16
 8014010:	9309      	str	r3, [sp, #36]	@ 0x24
 8014012:	f7ec fa7b 	bl	800050c <__aeabi_ui2d>
 8014016:	2d09      	cmp	r5, #9
 8014018:	4682      	mov	sl, r0
 801401a:	468b      	mov	fp, r1
 801401c:	dc13      	bgt.n	8014046 <_strtod_l+0x3de>
 801401e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014020:	2b00      	cmp	r3, #0
 8014022:	f43f ae5a 	beq.w	8013cda <_strtod_l+0x72>
 8014026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014028:	dd78      	ble.n	801411c <_strtod_l+0x4b4>
 801402a:	2b16      	cmp	r3, #22
 801402c:	dc5f      	bgt.n	80140ee <_strtod_l+0x486>
 801402e:	4972      	ldr	r1, [pc, #456]	@ (80141f8 <_strtod_l+0x590>)
 8014030:	4652      	mov	r2, sl
 8014032:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014036:	465b      	mov	r3, fp
 8014038:	e9d1 0100 	ldrd	r0, r1, [r1]
 801403c:	f7ec fae0 	bl	8000600 <__aeabi_dmul>
 8014040:	4682      	mov	sl, r0
 8014042:	468b      	mov	fp, r1
 8014044:	e649      	b.n	8013cda <_strtod_l+0x72>
 8014046:	4b6c      	ldr	r3, [pc, #432]	@ (80141f8 <_strtod_l+0x590>)
 8014048:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801404c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8014050:	f7ec fad6 	bl	8000600 <__aeabi_dmul>
 8014054:	4682      	mov	sl, r0
 8014056:	468b      	mov	fp, r1
 8014058:	4638      	mov	r0, r7
 801405a:	f7ec fa57 	bl	800050c <__aeabi_ui2d>
 801405e:	4602      	mov	r2, r0
 8014060:	460b      	mov	r3, r1
 8014062:	4650      	mov	r0, sl
 8014064:	4659      	mov	r1, fp
 8014066:	f7ec f915 	bl	8000294 <__adddf3>
 801406a:	2d0f      	cmp	r5, #15
 801406c:	4682      	mov	sl, r0
 801406e:	468b      	mov	fp, r1
 8014070:	ddd5      	ble.n	801401e <_strtod_l+0x3b6>
 8014072:	1b2c      	subs	r4, r5, r4
 8014074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014076:	441c      	add	r4, r3
 8014078:	2c00      	cmp	r4, #0
 801407a:	f340 8093 	ble.w	80141a4 <_strtod_l+0x53c>
 801407e:	f014 030f 	ands.w	r3, r4, #15
 8014082:	d00a      	beq.n	801409a <_strtod_l+0x432>
 8014084:	495c      	ldr	r1, [pc, #368]	@ (80141f8 <_strtod_l+0x590>)
 8014086:	4652      	mov	r2, sl
 8014088:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801408c:	465b      	mov	r3, fp
 801408e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014092:	f7ec fab5 	bl	8000600 <__aeabi_dmul>
 8014096:	4682      	mov	sl, r0
 8014098:	468b      	mov	fp, r1
 801409a:	f034 040f 	bics.w	r4, r4, #15
 801409e:	d073      	beq.n	8014188 <_strtod_l+0x520>
 80140a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80140a4:	dd49      	ble.n	801413a <_strtod_l+0x4d2>
 80140a6:	2400      	movs	r4, #0
 80140a8:	46a0      	mov	r8, r4
 80140aa:	46a1      	mov	r9, r4
 80140ac:	940b      	str	r4, [sp, #44]	@ 0x2c
 80140ae:	2322      	movs	r3, #34	@ 0x22
 80140b0:	9a05      	ldr	r2, [sp, #20]
 80140b2:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8014200 <_strtod_l+0x598>
 80140b6:	f04f 0a00 	mov.w	sl, #0
 80140ba:	6013      	str	r3, [r2, #0]
 80140bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140be:	2b00      	cmp	r3, #0
 80140c0:	f43f ae0b 	beq.w	8013cda <_strtod_l+0x72>
 80140c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80140c6:	9805      	ldr	r0, [sp, #20]
 80140c8:	f7ff f938 	bl	801333c <_Bfree>
 80140cc:	4649      	mov	r1, r9
 80140ce:	9805      	ldr	r0, [sp, #20]
 80140d0:	f7ff f934 	bl	801333c <_Bfree>
 80140d4:	4641      	mov	r1, r8
 80140d6:	9805      	ldr	r0, [sp, #20]
 80140d8:	f7ff f930 	bl	801333c <_Bfree>
 80140dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80140de:	9805      	ldr	r0, [sp, #20]
 80140e0:	f7ff f92c 	bl	801333c <_Bfree>
 80140e4:	4621      	mov	r1, r4
 80140e6:	9805      	ldr	r0, [sp, #20]
 80140e8:	f7ff f928 	bl	801333c <_Bfree>
 80140ec:	e5f5      	b.n	8013cda <_strtod_l+0x72>
 80140ee:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80140f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140f4:	4293      	cmp	r3, r2
 80140f6:	dbbc      	blt.n	8014072 <_strtod_l+0x40a>
 80140f8:	f1c5 050f 	rsb	r5, r5, #15
 80140fc:	4c3e      	ldr	r4, [pc, #248]	@ (80141f8 <_strtod_l+0x590>)
 80140fe:	4652      	mov	r2, sl
 8014100:	465b      	mov	r3, fp
 8014102:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801410a:	f7ec fa79 	bl	8000600 <__aeabi_dmul>
 801410e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014110:	1b5d      	subs	r5, r3, r5
 8014112:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014116:	e9d4 2300 	ldrd	r2, r3, [r4]
 801411a:	e78f      	b.n	801403c <_strtod_l+0x3d4>
 801411c:	3316      	adds	r3, #22
 801411e:	dba8      	blt.n	8014072 <_strtod_l+0x40a>
 8014120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014122:	4650      	mov	r0, sl
 8014124:	4659      	mov	r1, fp
 8014126:	eba3 0808 	sub.w	r8, r3, r8
 801412a:	4b33      	ldr	r3, [pc, #204]	@ (80141f8 <_strtod_l+0x590>)
 801412c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8014130:	e9d8 2300 	ldrd	r2, r3, [r8]
 8014134:	f7ec fb8e 	bl	8000854 <__aeabi_ddiv>
 8014138:	e782      	b.n	8014040 <_strtod_l+0x3d8>
 801413a:	2300      	movs	r3, #0
 801413c:	1124      	asrs	r4, r4, #4
 801413e:	4650      	mov	r0, sl
 8014140:	4659      	mov	r1, fp
 8014142:	4f2e      	ldr	r7, [pc, #184]	@ (80141fc <_strtod_l+0x594>)
 8014144:	461e      	mov	r6, r3
 8014146:	2c01      	cmp	r4, #1
 8014148:	dc21      	bgt.n	801418e <_strtod_l+0x526>
 801414a:	b10b      	cbz	r3, 8014150 <_strtod_l+0x4e8>
 801414c:	4682      	mov	sl, r0
 801414e:	468b      	mov	fp, r1
 8014150:	492a      	ldr	r1, [pc, #168]	@ (80141fc <_strtod_l+0x594>)
 8014152:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014156:	4652      	mov	r2, sl
 8014158:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801415c:	465b      	mov	r3, fp
 801415e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014162:	f7ec fa4d 	bl	8000600 <__aeabi_dmul>
 8014166:	4b26      	ldr	r3, [pc, #152]	@ (8014200 <_strtod_l+0x598>)
 8014168:	460a      	mov	r2, r1
 801416a:	4682      	mov	sl, r0
 801416c:	400b      	ands	r3, r1
 801416e:	4925      	ldr	r1, [pc, #148]	@ (8014204 <_strtod_l+0x59c>)
 8014170:	428b      	cmp	r3, r1
 8014172:	d898      	bhi.n	80140a6 <_strtod_l+0x43e>
 8014174:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8014178:	428b      	cmp	r3, r1
 801417a:	bf86      	itte	hi
 801417c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8014208 <_strtod_l+0x5a0>
 8014180:	f04f 3aff 	movhi.w	sl, #4294967295
 8014184:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8014188:	2300      	movs	r3, #0
 801418a:	9308      	str	r3, [sp, #32]
 801418c:	e076      	b.n	801427c <_strtod_l+0x614>
 801418e:	07e2      	lsls	r2, r4, #31
 8014190:	d504      	bpl.n	801419c <_strtod_l+0x534>
 8014192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014196:	f7ec fa33 	bl	8000600 <__aeabi_dmul>
 801419a:	2301      	movs	r3, #1
 801419c:	3601      	adds	r6, #1
 801419e:	1064      	asrs	r4, r4, #1
 80141a0:	3708      	adds	r7, #8
 80141a2:	e7d0      	b.n	8014146 <_strtod_l+0x4de>
 80141a4:	d0f0      	beq.n	8014188 <_strtod_l+0x520>
 80141a6:	4264      	negs	r4, r4
 80141a8:	f014 020f 	ands.w	r2, r4, #15
 80141ac:	d00a      	beq.n	80141c4 <_strtod_l+0x55c>
 80141ae:	4b12      	ldr	r3, [pc, #72]	@ (80141f8 <_strtod_l+0x590>)
 80141b0:	4650      	mov	r0, sl
 80141b2:	4659      	mov	r1, fp
 80141b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80141b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141bc:	f7ec fb4a 	bl	8000854 <__aeabi_ddiv>
 80141c0:	4682      	mov	sl, r0
 80141c2:	468b      	mov	fp, r1
 80141c4:	1124      	asrs	r4, r4, #4
 80141c6:	d0df      	beq.n	8014188 <_strtod_l+0x520>
 80141c8:	2c1f      	cmp	r4, #31
 80141ca:	dd1f      	ble.n	801420c <_strtod_l+0x5a4>
 80141cc:	2400      	movs	r4, #0
 80141ce:	46a0      	mov	r8, r4
 80141d0:	46a1      	mov	r9, r4
 80141d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80141d4:	2322      	movs	r3, #34	@ 0x22
 80141d6:	9a05      	ldr	r2, [sp, #20]
 80141d8:	f04f 0a00 	mov.w	sl, #0
 80141dc:	f04f 0b00 	mov.w	fp, #0
 80141e0:	6013      	str	r3, [r2, #0]
 80141e2:	e76b      	b.n	80140bc <_strtod_l+0x454>
 80141e4:	08015ae9 	.word	0x08015ae9
 80141e8:	08015db0 	.word	0x08015db0
 80141ec:	08015ae1 	.word	0x08015ae1
 80141f0:	08015b18 	.word	0x08015b18
 80141f4:	08015c51 	.word	0x08015c51
 80141f8:	08015ce8 	.word	0x08015ce8
 80141fc:	08015cc0 	.word	0x08015cc0
 8014200:	7ff00000 	.word	0x7ff00000
 8014204:	7ca00000 	.word	0x7ca00000
 8014208:	7fefffff 	.word	0x7fefffff
 801420c:	f014 0310 	ands.w	r3, r4, #16
 8014210:	4650      	mov	r0, sl
 8014212:	4659      	mov	r1, fp
 8014214:	4ea9      	ldr	r6, [pc, #676]	@ (80144bc <_strtod_l+0x854>)
 8014216:	bf18      	it	ne
 8014218:	236a      	movne	r3, #106	@ 0x6a
 801421a:	9308      	str	r3, [sp, #32]
 801421c:	2300      	movs	r3, #0
 801421e:	07e7      	lsls	r7, r4, #31
 8014220:	d504      	bpl.n	801422c <_strtod_l+0x5c4>
 8014222:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014226:	f7ec f9eb 	bl	8000600 <__aeabi_dmul>
 801422a:	2301      	movs	r3, #1
 801422c:	1064      	asrs	r4, r4, #1
 801422e:	f106 0608 	add.w	r6, r6, #8
 8014232:	d1f4      	bne.n	801421e <_strtod_l+0x5b6>
 8014234:	b10b      	cbz	r3, 801423a <_strtod_l+0x5d2>
 8014236:	4682      	mov	sl, r0
 8014238:	468b      	mov	fp, r1
 801423a:	9b08      	ldr	r3, [sp, #32]
 801423c:	b1b3      	cbz	r3, 801426c <_strtod_l+0x604>
 801423e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014242:	4659      	mov	r1, fp
 8014244:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8014248:	2b00      	cmp	r3, #0
 801424a:	dd0f      	ble.n	801426c <_strtod_l+0x604>
 801424c:	2b1f      	cmp	r3, #31
 801424e:	dd56      	ble.n	80142fe <_strtod_l+0x696>
 8014250:	2b34      	cmp	r3, #52	@ 0x34
 8014252:	f04f 0a00 	mov.w	sl, #0
 8014256:	bfdb      	ittet	le
 8014258:	f04f 33ff 	movle.w	r3, #4294967295
 801425c:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8014260:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014264:	4093      	lslle	r3, r2
 8014266:	bfd8      	it	le
 8014268:	ea03 0b01 	andle.w	fp, r3, r1
 801426c:	2200      	movs	r2, #0
 801426e:	2300      	movs	r3, #0
 8014270:	4650      	mov	r0, sl
 8014272:	4659      	mov	r1, fp
 8014274:	f7ec fc2c 	bl	8000ad0 <__aeabi_dcmpeq>
 8014278:	2800      	cmp	r0, #0
 801427a:	d1a7      	bne.n	80141cc <_strtod_l+0x564>
 801427c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801427e:	464a      	mov	r2, r9
 8014280:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014282:	9300      	str	r3, [sp, #0]
 8014284:	462b      	mov	r3, r5
 8014286:	9805      	ldr	r0, [sp, #20]
 8014288:	f7ff f8c2 	bl	8013410 <__s2b>
 801428c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801428e:	2800      	cmp	r0, #0
 8014290:	f43f af09 	beq.w	80140a6 <_strtod_l+0x43e>
 8014294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014296:	2400      	movs	r4, #0
 8014298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801429a:	2a00      	cmp	r2, #0
 801429c:	eba3 0308 	sub.w	r3, r3, r8
 80142a0:	46a0      	mov	r8, r4
 80142a2:	bfa8      	it	ge
 80142a4:	2300      	movge	r3, #0
 80142a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80142a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80142ac:	9316      	str	r3, [sp, #88]	@ 0x58
 80142ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142b0:	9805      	ldr	r0, [sp, #20]
 80142b2:	6859      	ldr	r1, [r3, #4]
 80142b4:	f7ff f802 	bl	80132bc <_Balloc>
 80142b8:	4681      	mov	r9, r0
 80142ba:	2800      	cmp	r0, #0
 80142bc:	f43f aef7 	beq.w	80140ae <_strtod_l+0x446>
 80142c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142c2:	300c      	adds	r0, #12
 80142c4:	691a      	ldr	r2, [r3, #16]
 80142c6:	f103 010c 	add.w	r1, r3, #12
 80142ca:	3202      	adds	r2, #2
 80142cc:	0092      	lsls	r2, r2, #2
 80142ce:	f7fe f882 	bl	80123d6 <memcpy>
 80142d2:	aa1c      	add	r2, sp, #112	@ 0x70
 80142d4:	a91b      	add	r1, sp, #108	@ 0x6c
 80142d6:	9805      	ldr	r0, [sp, #20]
 80142d8:	ec4b ab10 	vmov	d0, sl, fp
 80142dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80142e0:	f7ff fbd4 	bl	8013a8c <__d2b>
 80142e4:	901a      	str	r0, [sp, #104]	@ 0x68
 80142e6:	2800      	cmp	r0, #0
 80142e8:	f43f aee1 	beq.w	80140ae <_strtod_l+0x446>
 80142ec:	2101      	movs	r1, #1
 80142ee:	9805      	ldr	r0, [sp, #20]
 80142f0:	f7ff f924 	bl	801353c <__i2b>
 80142f4:	4680      	mov	r8, r0
 80142f6:	b948      	cbnz	r0, 801430c <_strtod_l+0x6a4>
 80142f8:	f04f 0800 	mov.w	r8, #0
 80142fc:	e6d7      	b.n	80140ae <_strtod_l+0x446>
 80142fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014302:	fa02 f303 	lsl.w	r3, r2, r3
 8014306:	ea03 0a0a 	and.w	sl, r3, sl
 801430a:	e7af      	b.n	801426c <_strtod_l+0x604>
 801430c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801430e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014310:	2d00      	cmp	r5, #0
 8014312:	bfa9      	itett	ge
 8014314:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8014316:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8014318:	18ef      	addge	r7, r5, r3
 801431a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801431c:	bfb8      	it	lt
 801431e:	1b5e      	sublt	r6, r3, r5
 8014320:	9b08      	ldr	r3, [sp, #32]
 8014322:	bfb8      	it	lt
 8014324:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8014326:	1aed      	subs	r5, r5, r3
 8014328:	4b65      	ldr	r3, [pc, #404]	@ (80144c0 <_strtod_l+0x858>)
 801432a:	4415      	add	r5, r2
 801432c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014330:	3d01      	subs	r5, #1
 8014332:	429d      	cmp	r5, r3
 8014334:	da4f      	bge.n	80143d6 <_strtod_l+0x76e>
 8014336:	1b5b      	subs	r3, r3, r5
 8014338:	2101      	movs	r1, #1
 801433a:	2b1f      	cmp	r3, #31
 801433c:	eba2 0203 	sub.w	r2, r2, r3
 8014340:	dc3d      	bgt.n	80143be <_strtod_l+0x756>
 8014342:	fa01 f303 	lsl.w	r3, r1, r3
 8014346:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014348:	2300      	movs	r3, #0
 801434a:	9310      	str	r3, [sp, #64]	@ 0x40
 801434c:	18bd      	adds	r5, r7, r2
 801434e:	9b08      	ldr	r3, [sp, #32]
 8014350:	4416      	add	r6, r2
 8014352:	42af      	cmp	r7, r5
 8014354:	441e      	add	r6, r3
 8014356:	463b      	mov	r3, r7
 8014358:	bfa8      	it	ge
 801435a:	462b      	movge	r3, r5
 801435c:	42b3      	cmp	r3, r6
 801435e:	bfa8      	it	ge
 8014360:	4633      	movge	r3, r6
 8014362:	2b00      	cmp	r3, #0
 8014364:	bfc2      	ittt	gt
 8014366:	1aed      	subgt	r5, r5, r3
 8014368:	1af6      	subgt	r6, r6, r3
 801436a:	1aff      	subgt	r7, r7, r3
 801436c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801436e:	2b00      	cmp	r3, #0
 8014370:	dd16      	ble.n	80143a0 <_strtod_l+0x738>
 8014372:	4641      	mov	r1, r8
 8014374:	461a      	mov	r2, r3
 8014376:	9805      	ldr	r0, [sp, #20]
 8014378:	f7ff f99a 	bl	80136b0 <__pow5mult>
 801437c:	4680      	mov	r8, r0
 801437e:	2800      	cmp	r0, #0
 8014380:	d0ba      	beq.n	80142f8 <_strtod_l+0x690>
 8014382:	4601      	mov	r1, r0
 8014384:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014386:	9805      	ldr	r0, [sp, #20]
 8014388:	f7ff f8ee 	bl	8013568 <__multiply>
 801438c:	900a      	str	r0, [sp, #40]	@ 0x28
 801438e:	2800      	cmp	r0, #0
 8014390:	f43f ae8d 	beq.w	80140ae <_strtod_l+0x446>
 8014394:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014396:	9805      	ldr	r0, [sp, #20]
 8014398:	f7fe ffd0 	bl	801333c <_Bfree>
 801439c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801439e:	931a      	str	r3, [sp, #104]	@ 0x68
 80143a0:	2d00      	cmp	r5, #0
 80143a2:	dc1d      	bgt.n	80143e0 <_strtod_l+0x778>
 80143a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	dd23      	ble.n	80143f2 <_strtod_l+0x78a>
 80143aa:	4649      	mov	r1, r9
 80143ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80143ae:	9805      	ldr	r0, [sp, #20]
 80143b0:	f7ff f97e 	bl	80136b0 <__pow5mult>
 80143b4:	4681      	mov	r9, r0
 80143b6:	b9e0      	cbnz	r0, 80143f2 <_strtod_l+0x78a>
 80143b8:	f04f 0900 	mov.w	r9, #0
 80143bc:	e677      	b.n	80140ae <_strtod_l+0x446>
 80143be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80143c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80143c4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80143c8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80143cc:	35e2      	adds	r5, #226	@ 0xe2
 80143ce:	fa01 f305 	lsl.w	r3, r1, r5
 80143d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80143d4:	e7ba      	b.n	801434c <_strtod_l+0x6e4>
 80143d6:	2300      	movs	r3, #0
 80143d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80143da:	2301      	movs	r3, #1
 80143dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80143de:	e7b5      	b.n	801434c <_strtod_l+0x6e4>
 80143e0:	462a      	mov	r2, r5
 80143e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80143e4:	9805      	ldr	r0, [sp, #20]
 80143e6:	f7ff f9bd 	bl	8013764 <__lshift>
 80143ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80143ec:	2800      	cmp	r0, #0
 80143ee:	d1d9      	bne.n	80143a4 <_strtod_l+0x73c>
 80143f0:	e65d      	b.n	80140ae <_strtod_l+0x446>
 80143f2:	2e00      	cmp	r6, #0
 80143f4:	dd07      	ble.n	8014406 <_strtod_l+0x79e>
 80143f6:	4649      	mov	r1, r9
 80143f8:	4632      	mov	r2, r6
 80143fa:	9805      	ldr	r0, [sp, #20]
 80143fc:	f7ff f9b2 	bl	8013764 <__lshift>
 8014400:	4681      	mov	r9, r0
 8014402:	2800      	cmp	r0, #0
 8014404:	d0d8      	beq.n	80143b8 <_strtod_l+0x750>
 8014406:	2f00      	cmp	r7, #0
 8014408:	dd08      	ble.n	801441c <_strtod_l+0x7b4>
 801440a:	4641      	mov	r1, r8
 801440c:	463a      	mov	r2, r7
 801440e:	9805      	ldr	r0, [sp, #20]
 8014410:	f7ff f9a8 	bl	8013764 <__lshift>
 8014414:	4680      	mov	r8, r0
 8014416:	2800      	cmp	r0, #0
 8014418:	f43f ae49 	beq.w	80140ae <_strtod_l+0x446>
 801441c:	464a      	mov	r2, r9
 801441e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014420:	9805      	ldr	r0, [sp, #20]
 8014422:	f7ff fa27 	bl	8013874 <__mdiff>
 8014426:	4604      	mov	r4, r0
 8014428:	2800      	cmp	r0, #0
 801442a:	f43f ae40 	beq.w	80140ae <_strtod_l+0x446>
 801442e:	68c3      	ldr	r3, [r0, #12]
 8014430:	4641      	mov	r1, r8
 8014432:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014434:	2300      	movs	r3, #0
 8014436:	60c3      	str	r3, [r0, #12]
 8014438:	f7ff fa00 	bl	801383c <__mcmp>
 801443c:	2800      	cmp	r0, #0
 801443e:	da45      	bge.n	80144cc <_strtod_l+0x864>
 8014440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014442:	ea53 030a 	orrs.w	r3, r3, sl
 8014446:	d16b      	bne.n	8014520 <_strtod_l+0x8b8>
 8014448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801444c:	2b00      	cmp	r3, #0
 801444e:	d167      	bne.n	8014520 <_strtod_l+0x8b8>
 8014450:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014454:	0d1b      	lsrs	r3, r3, #20
 8014456:	051b      	lsls	r3, r3, #20
 8014458:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801445c:	d960      	bls.n	8014520 <_strtod_l+0x8b8>
 801445e:	6963      	ldr	r3, [r4, #20]
 8014460:	b913      	cbnz	r3, 8014468 <_strtod_l+0x800>
 8014462:	6923      	ldr	r3, [r4, #16]
 8014464:	2b01      	cmp	r3, #1
 8014466:	dd5b      	ble.n	8014520 <_strtod_l+0x8b8>
 8014468:	4621      	mov	r1, r4
 801446a:	2201      	movs	r2, #1
 801446c:	9805      	ldr	r0, [sp, #20]
 801446e:	f7ff f979 	bl	8013764 <__lshift>
 8014472:	4641      	mov	r1, r8
 8014474:	4604      	mov	r4, r0
 8014476:	f7ff f9e1 	bl	801383c <__mcmp>
 801447a:	2800      	cmp	r0, #0
 801447c:	dd50      	ble.n	8014520 <_strtod_l+0x8b8>
 801447e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014482:	9a08      	ldr	r2, [sp, #32]
 8014484:	0d1b      	lsrs	r3, r3, #20
 8014486:	051b      	lsls	r3, r3, #20
 8014488:	2a00      	cmp	r2, #0
 801448a:	d06a      	beq.n	8014562 <_strtod_l+0x8fa>
 801448c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014490:	d867      	bhi.n	8014562 <_strtod_l+0x8fa>
 8014492:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014496:	f67f ae9d 	bls.w	80141d4 <_strtod_l+0x56c>
 801449a:	4b0a      	ldr	r3, [pc, #40]	@ (80144c4 <_strtod_l+0x85c>)
 801449c:	4650      	mov	r0, sl
 801449e:	4659      	mov	r1, fp
 80144a0:	2200      	movs	r2, #0
 80144a2:	f7ec f8ad 	bl	8000600 <__aeabi_dmul>
 80144a6:	4b08      	ldr	r3, [pc, #32]	@ (80144c8 <_strtod_l+0x860>)
 80144a8:	4682      	mov	sl, r0
 80144aa:	468b      	mov	fp, r1
 80144ac:	400b      	ands	r3, r1
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	f47f ae08 	bne.w	80140c4 <_strtod_l+0x45c>
 80144b4:	2322      	movs	r3, #34	@ 0x22
 80144b6:	9a05      	ldr	r2, [sp, #20]
 80144b8:	6013      	str	r3, [r2, #0]
 80144ba:	e603      	b.n	80140c4 <_strtod_l+0x45c>
 80144bc:	08015dd8 	.word	0x08015dd8
 80144c0:	fffffc02 	.word	0xfffffc02
 80144c4:	39500000 	.word	0x39500000
 80144c8:	7ff00000 	.word	0x7ff00000
 80144cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80144d0:	d165      	bne.n	801459e <_strtod_l+0x936>
 80144d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80144d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80144d8:	b35a      	cbz	r2, 8014532 <_strtod_l+0x8ca>
 80144da:	4a9f      	ldr	r2, [pc, #636]	@ (8014758 <_strtod_l+0xaf0>)
 80144dc:	4293      	cmp	r3, r2
 80144de:	d12b      	bne.n	8014538 <_strtod_l+0x8d0>
 80144e0:	9b08      	ldr	r3, [sp, #32]
 80144e2:	4651      	mov	r1, sl
 80144e4:	b303      	cbz	r3, 8014528 <_strtod_l+0x8c0>
 80144e6:	465a      	mov	r2, fp
 80144e8:	4b9c      	ldr	r3, [pc, #624]	@ (801475c <_strtod_l+0xaf4>)
 80144ea:	4013      	ands	r3, r2
 80144ec:	f04f 32ff 	mov.w	r2, #4294967295
 80144f0:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80144f4:	d81b      	bhi.n	801452e <_strtod_l+0x8c6>
 80144f6:	0d1b      	lsrs	r3, r3, #20
 80144f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80144fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014500:	4299      	cmp	r1, r3
 8014502:	d119      	bne.n	8014538 <_strtod_l+0x8d0>
 8014504:	4b96      	ldr	r3, [pc, #600]	@ (8014760 <_strtod_l+0xaf8>)
 8014506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014508:	429a      	cmp	r2, r3
 801450a:	d102      	bne.n	8014512 <_strtod_l+0x8aa>
 801450c:	3101      	adds	r1, #1
 801450e:	f43f adce 	beq.w	80140ae <_strtod_l+0x446>
 8014512:	4b92      	ldr	r3, [pc, #584]	@ (801475c <_strtod_l+0xaf4>)
 8014514:	f04f 0a00 	mov.w	sl, #0
 8014518:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801451a:	401a      	ands	r2, r3
 801451c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014520:	9b08      	ldr	r3, [sp, #32]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1b9      	bne.n	801449a <_strtod_l+0x832>
 8014526:	e5cd      	b.n	80140c4 <_strtod_l+0x45c>
 8014528:	f04f 33ff 	mov.w	r3, #4294967295
 801452c:	e7e8      	b.n	8014500 <_strtod_l+0x898>
 801452e:	4613      	mov	r3, r2
 8014530:	e7e6      	b.n	8014500 <_strtod_l+0x898>
 8014532:	ea53 030a 	orrs.w	r3, r3, sl
 8014536:	d0a2      	beq.n	801447e <_strtod_l+0x816>
 8014538:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801453a:	b1db      	cbz	r3, 8014574 <_strtod_l+0x90c>
 801453c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801453e:	4213      	tst	r3, r2
 8014540:	d0ee      	beq.n	8014520 <_strtod_l+0x8b8>
 8014542:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014544:	4650      	mov	r0, sl
 8014546:	9a08      	ldr	r2, [sp, #32]
 8014548:	4659      	mov	r1, fp
 801454a:	b1bb      	cbz	r3, 801457c <_strtod_l+0x914>
 801454c:	f7ff fb6c 	bl	8013c28 <sulp>
 8014550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014554:	ec53 2b10 	vmov	r2, r3, d0
 8014558:	f7eb fe9c 	bl	8000294 <__adddf3>
 801455c:	4682      	mov	sl, r0
 801455e:	468b      	mov	fp, r1
 8014560:	e7de      	b.n	8014520 <_strtod_l+0x8b8>
 8014562:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014566:	f04f 3aff 	mov.w	sl, #4294967295
 801456a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801456e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014572:	e7d5      	b.n	8014520 <_strtod_l+0x8b8>
 8014574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014576:	ea13 0f0a 	tst.w	r3, sl
 801457a:	e7e1      	b.n	8014540 <_strtod_l+0x8d8>
 801457c:	f7ff fb54 	bl	8013c28 <sulp>
 8014580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014584:	ec53 2b10 	vmov	r2, r3, d0
 8014588:	f7eb fe82 	bl	8000290 <__aeabi_dsub>
 801458c:	2200      	movs	r2, #0
 801458e:	2300      	movs	r3, #0
 8014590:	4682      	mov	sl, r0
 8014592:	468b      	mov	fp, r1
 8014594:	f7ec fa9c 	bl	8000ad0 <__aeabi_dcmpeq>
 8014598:	2800      	cmp	r0, #0
 801459a:	d0c1      	beq.n	8014520 <_strtod_l+0x8b8>
 801459c:	e61a      	b.n	80141d4 <_strtod_l+0x56c>
 801459e:	4641      	mov	r1, r8
 80145a0:	4620      	mov	r0, r4
 80145a2:	f7ff facb 	bl	8013b3c <__ratio>
 80145a6:	2200      	movs	r2, #0
 80145a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80145ac:	ec57 6b10 	vmov	r6, r7, d0
 80145b0:	4630      	mov	r0, r6
 80145b2:	4639      	mov	r1, r7
 80145b4:	f7ec faa0 	bl	8000af8 <__aeabi_dcmple>
 80145b8:	2800      	cmp	r0, #0
 80145ba:	d06f      	beq.n	801469c <_strtod_l+0xa34>
 80145bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d17a      	bne.n	80146b8 <_strtod_l+0xa50>
 80145c2:	f1ba 0f00 	cmp.w	sl, #0
 80145c6:	d158      	bne.n	801467a <_strtod_l+0xa12>
 80145c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d15a      	bne.n	8014688 <_strtod_l+0xa20>
 80145d2:	2200      	movs	r2, #0
 80145d4:	4b63      	ldr	r3, [pc, #396]	@ (8014764 <_strtod_l+0xafc>)
 80145d6:	4630      	mov	r0, r6
 80145d8:	4639      	mov	r1, r7
 80145da:	f7ec fa83 	bl	8000ae4 <__aeabi_dcmplt>
 80145de:	2800      	cmp	r0, #0
 80145e0:	d159      	bne.n	8014696 <_strtod_l+0xa2e>
 80145e2:	4630      	mov	r0, r6
 80145e4:	4639      	mov	r1, r7
 80145e6:	2200      	movs	r2, #0
 80145e8:	4b5f      	ldr	r3, [pc, #380]	@ (8014768 <_strtod_l+0xb00>)
 80145ea:	f7ec f809 	bl	8000600 <__aeabi_dmul>
 80145ee:	4606      	mov	r6, r0
 80145f0:	460f      	mov	r7, r1
 80145f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80145f6:	9606      	str	r6, [sp, #24]
 80145f8:	9307      	str	r3, [sp, #28]
 80145fa:	4d58      	ldr	r5, [pc, #352]	@ (801475c <_strtod_l+0xaf4>)
 80145fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014600:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014606:	401d      	ands	r5, r3
 8014608:	4b58      	ldr	r3, [pc, #352]	@ (801476c <_strtod_l+0xb04>)
 801460a:	429d      	cmp	r5, r3
 801460c:	f040 80b2 	bne.w	8014774 <_strtod_l+0xb0c>
 8014610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014612:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014616:	ec4b ab10 	vmov	d0, sl, fp
 801461a:	f7ff f9c3 	bl	80139a4 <__ulp>
 801461e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014622:	ec51 0b10 	vmov	r0, r1, d0
 8014626:	f7eb ffeb 	bl	8000600 <__aeabi_dmul>
 801462a:	4652      	mov	r2, sl
 801462c:	465b      	mov	r3, fp
 801462e:	f7eb fe31 	bl	8000294 <__adddf3>
 8014632:	460b      	mov	r3, r1
 8014634:	4949      	ldr	r1, [pc, #292]	@ (801475c <_strtod_l+0xaf4>)
 8014636:	4682      	mov	sl, r0
 8014638:	4a4d      	ldr	r2, [pc, #308]	@ (8014770 <_strtod_l+0xb08>)
 801463a:	4019      	ands	r1, r3
 801463c:	4291      	cmp	r1, r2
 801463e:	d942      	bls.n	80146c6 <_strtod_l+0xa5e>
 8014640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014642:	4b47      	ldr	r3, [pc, #284]	@ (8014760 <_strtod_l+0xaf8>)
 8014644:	429a      	cmp	r2, r3
 8014646:	d103      	bne.n	8014650 <_strtod_l+0x9e8>
 8014648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801464a:	3301      	adds	r3, #1
 801464c:	f43f ad2f 	beq.w	80140ae <_strtod_l+0x446>
 8014650:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014760 <_strtod_l+0xaf8>
 8014654:	f04f 3aff 	mov.w	sl, #4294967295
 8014658:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801465a:	9805      	ldr	r0, [sp, #20]
 801465c:	f7fe fe6e 	bl	801333c <_Bfree>
 8014660:	4649      	mov	r1, r9
 8014662:	9805      	ldr	r0, [sp, #20]
 8014664:	f7fe fe6a 	bl	801333c <_Bfree>
 8014668:	4641      	mov	r1, r8
 801466a:	9805      	ldr	r0, [sp, #20]
 801466c:	f7fe fe66 	bl	801333c <_Bfree>
 8014670:	4621      	mov	r1, r4
 8014672:	9805      	ldr	r0, [sp, #20]
 8014674:	f7fe fe62 	bl	801333c <_Bfree>
 8014678:	e619      	b.n	80142ae <_strtod_l+0x646>
 801467a:	f1ba 0f01 	cmp.w	sl, #1
 801467e:	d103      	bne.n	8014688 <_strtod_l+0xa20>
 8014680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014682:	2b00      	cmp	r3, #0
 8014684:	f43f ada6 	beq.w	80141d4 <_strtod_l+0x56c>
 8014688:	2600      	movs	r6, #0
 801468a:	4f36      	ldr	r7, [pc, #216]	@ (8014764 <_strtod_l+0xafc>)
 801468c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014738 <_strtod_l+0xad0>
 8014690:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014694:	e7b1      	b.n	80145fa <_strtod_l+0x992>
 8014696:	2600      	movs	r6, #0
 8014698:	4f33      	ldr	r7, [pc, #204]	@ (8014768 <_strtod_l+0xb00>)
 801469a:	e7aa      	b.n	80145f2 <_strtod_l+0x98a>
 801469c:	4b32      	ldr	r3, [pc, #200]	@ (8014768 <_strtod_l+0xb00>)
 801469e:	4630      	mov	r0, r6
 80146a0:	4639      	mov	r1, r7
 80146a2:	2200      	movs	r2, #0
 80146a4:	f7eb ffac 	bl	8000600 <__aeabi_dmul>
 80146a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146aa:	4606      	mov	r6, r0
 80146ac:	460f      	mov	r7, r1
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d09f      	beq.n	80145f2 <_strtod_l+0x98a>
 80146b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80146b6:	e7a0      	b.n	80145fa <_strtod_l+0x992>
 80146b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014740 <_strtod_l+0xad8>
 80146bc:	ec57 6b17 	vmov	r6, r7, d7
 80146c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80146c4:	e799      	b.n	80145fa <_strtod_l+0x992>
 80146c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80146ca:	9b08      	ldr	r3, [sp, #32]
 80146cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d1c1      	bne.n	8014658 <_strtod_l+0x9f0>
 80146d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80146d8:	0d1b      	lsrs	r3, r3, #20
 80146da:	051b      	lsls	r3, r3, #20
 80146dc:	429d      	cmp	r5, r3
 80146de:	d1bb      	bne.n	8014658 <_strtod_l+0x9f0>
 80146e0:	4630      	mov	r0, r6
 80146e2:	4639      	mov	r1, r7
 80146e4:	f7ec faec 	bl	8000cc0 <__aeabi_d2lz>
 80146e8:	f7eb ff5c 	bl	80005a4 <__aeabi_l2d>
 80146ec:	4602      	mov	r2, r0
 80146ee:	460b      	mov	r3, r1
 80146f0:	4630      	mov	r0, r6
 80146f2:	4639      	mov	r1, r7
 80146f4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80146f8:	f7eb fdca 	bl	8000290 <__aeabi_dsub>
 80146fc:	460b      	mov	r3, r1
 80146fe:	4602      	mov	r2, r0
 8014700:	ea46 060a 	orr.w	r6, r6, sl
 8014704:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801470a:	431e      	orrs	r6, r3
 801470c:	d06f      	beq.n	80147ee <_strtod_l+0xb86>
 801470e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014748 <_strtod_l+0xae0>)
 8014710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014714:	f7ec f9e6 	bl	8000ae4 <__aeabi_dcmplt>
 8014718:	2800      	cmp	r0, #0
 801471a:	f47f acd3 	bne.w	80140c4 <_strtod_l+0x45c>
 801471e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014750 <_strtod_l+0xae8>)
 8014720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014728:	f7ec f9fa 	bl	8000b20 <__aeabi_dcmpgt>
 801472c:	2800      	cmp	r0, #0
 801472e:	d093      	beq.n	8014658 <_strtod_l+0x9f0>
 8014730:	e4c8      	b.n	80140c4 <_strtod_l+0x45c>
 8014732:	bf00      	nop
 8014734:	f3af 8000 	nop.w
 8014738:	00000000 	.word	0x00000000
 801473c:	bff00000 	.word	0xbff00000
 8014740:	00000000 	.word	0x00000000
 8014744:	3ff00000 	.word	0x3ff00000
 8014748:	94a03595 	.word	0x94a03595
 801474c:	3fdfffff 	.word	0x3fdfffff
 8014750:	35afe535 	.word	0x35afe535
 8014754:	3fe00000 	.word	0x3fe00000
 8014758:	000fffff 	.word	0x000fffff
 801475c:	7ff00000 	.word	0x7ff00000
 8014760:	7fefffff 	.word	0x7fefffff
 8014764:	3ff00000 	.word	0x3ff00000
 8014768:	3fe00000 	.word	0x3fe00000
 801476c:	7fe00000 	.word	0x7fe00000
 8014770:	7c9fffff 	.word	0x7c9fffff
 8014774:	9b08      	ldr	r3, [sp, #32]
 8014776:	b323      	cbz	r3, 80147c2 <_strtod_l+0xb5a>
 8014778:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801477c:	d821      	bhi.n	80147c2 <_strtod_l+0xb5a>
 801477e:	4630      	mov	r0, r6
 8014780:	4639      	mov	r1, r7
 8014782:	a327      	add	r3, pc, #156	@ (adr r3, 8014820 <_strtod_l+0xbb8>)
 8014784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014788:	f7ec f9b6 	bl	8000af8 <__aeabi_dcmple>
 801478c:	b1a0      	cbz	r0, 80147b8 <_strtod_l+0xb50>
 801478e:	4639      	mov	r1, r7
 8014790:	4630      	mov	r0, r6
 8014792:	f7ec fa0d 	bl	8000bb0 <__aeabi_d2uiz>
 8014796:	2801      	cmp	r0, #1
 8014798:	bf38      	it	cc
 801479a:	2001      	movcc	r0, #1
 801479c:	f7eb feb6 	bl	800050c <__aeabi_ui2d>
 80147a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80147a2:	4606      	mov	r6, r0
 80147a4:	460f      	mov	r7, r1
 80147a6:	b9fb      	cbnz	r3, 80147e8 <_strtod_l+0xb80>
 80147a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80147ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80147ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80147b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80147b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80147b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80147ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80147be:	1b5b      	subs	r3, r3, r5
 80147c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80147c2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80147c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80147ca:	f7ff f8eb 	bl	80139a4 <__ulp>
 80147ce:	4650      	mov	r0, sl
 80147d0:	4659      	mov	r1, fp
 80147d2:	ec53 2b10 	vmov	r2, r3, d0
 80147d6:	f7eb ff13 	bl	8000600 <__aeabi_dmul>
 80147da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80147de:	f7eb fd59 	bl	8000294 <__adddf3>
 80147e2:	4682      	mov	sl, r0
 80147e4:	468b      	mov	fp, r1
 80147e6:	e770      	b.n	80146ca <_strtod_l+0xa62>
 80147e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80147ec:	e7e0      	b.n	80147b0 <_strtod_l+0xb48>
 80147ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8014828 <_strtod_l+0xbc0>)
 80147f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f4:	f7ec f976 	bl	8000ae4 <__aeabi_dcmplt>
 80147f8:	e798      	b.n	801472c <_strtod_l+0xac4>
 80147fa:	2300      	movs	r3, #0
 80147fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80147fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014800:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014802:	6013      	str	r3, [r2, #0]
 8014804:	f7ff ba6d 	b.w	8013ce2 <_strtod_l+0x7a>
 8014808:	2a65      	cmp	r2, #101	@ 0x65
 801480a:	f43f ab67 	beq.w	8013edc <_strtod_l+0x274>
 801480e:	2a45      	cmp	r2, #69	@ 0x45
 8014810:	f43f ab64 	beq.w	8013edc <_strtod_l+0x274>
 8014814:	2301      	movs	r3, #1
 8014816:	f7ff bba0 	b.w	8013f5a <_strtod_l+0x2f2>
 801481a:	bf00      	nop
 801481c:	f3af 8000 	nop.w
 8014820:	ffc00000 	.word	0xffc00000
 8014824:	41dfffff 	.word	0x41dfffff
 8014828:	94a03595 	.word	0x94a03595
 801482c:	3fcfffff 	.word	0x3fcfffff

08014830 <_strtod_r>:
 8014830:	4b01      	ldr	r3, [pc, #4]	@ (8014838 <_strtod_r+0x8>)
 8014832:	f7ff ba19 	b.w	8013c68 <_strtod_l>
 8014836:	bf00      	nop
 8014838:	20000068 	.word	0x20000068

0801483c <_strtol_l.isra.0>:
 801483c:	2b24      	cmp	r3, #36	@ 0x24
 801483e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014842:	4686      	mov	lr, r0
 8014844:	4690      	mov	r8, r2
 8014846:	d801      	bhi.n	801484c <_strtol_l.isra.0+0x10>
 8014848:	2b01      	cmp	r3, #1
 801484a:	d106      	bne.n	801485a <_strtol_l.isra.0+0x1e>
 801484c:	f7fd fd88 	bl	8012360 <__errno>
 8014850:	2316      	movs	r3, #22
 8014852:	6003      	str	r3, [r0, #0]
 8014854:	2000      	movs	r0, #0
 8014856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801485a:	460d      	mov	r5, r1
 801485c:	4833      	ldr	r0, [pc, #204]	@ (801492c <_strtol_l.isra.0+0xf0>)
 801485e:	462a      	mov	r2, r5
 8014860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014864:	5d06      	ldrb	r6, [r0, r4]
 8014866:	f016 0608 	ands.w	r6, r6, #8
 801486a:	d1f8      	bne.n	801485e <_strtol_l.isra.0+0x22>
 801486c:	2c2d      	cmp	r4, #45	@ 0x2d
 801486e:	d110      	bne.n	8014892 <_strtol_l.isra.0+0x56>
 8014870:	782c      	ldrb	r4, [r5, #0]
 8014872:	2601      	movs	r6, #1
 8014874:	1c95      	adds	r5, r2, #2
 8014876:	f033 0210 	bics.w	r2, r3, #16
 801487a:	d115      	bne.n	80148a8 <_strtol_l.isra.0+0x6c>
 801487c:	2c30      	cmp	r4, #48	@ 0x30
 801487e:	d10d      	bne.n	801489c <_strtol_l.isra.0+0x60>
 8014880:	782a      	ldrb	r2, [r5, #0]
 8014882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014886:	2a58      	cmp	r2, #88	@ 0x58
 8014888:	d108      	bne.n	801489c <_strtol_l.isra.0+0x60>
 801488a:	786c      	ldrb	r4, [r5, #1]
 801488c:	3502      	adds	r5, #2
 801488e:	2310      	movs	r3, #16
 8014890:	e00a      	b.n	80148a8 <_strtol_l.isra.0+0x6c>
 8014892:	2c2b      	cmp	r4, #43	@ 0x2b
 8014894:	bf04      	itt	eq
 8014896:	782c      	ldrbeq	r4, [r5, #0]
 8014898:	1c95      	addeq	r5, r2, #2
 801489a:	e7ec      	b.n	8014876 <_strtol_l.isra.0+0x3a>
 801489c:	2b00      	cmp	r3, #0
 801489e:	d1f6      	bne.n	801488e <_strtol_l.isra.0+0x52>
 80148a0:	2c30      	cmp	r4, #48	@ 0x30
 80148a2:	bf14      	ite	ne
 80148a4:	230a      	movne	r3, #10
 80148a6:	2308      	moveq	r3, #8
 80148a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80148ac:	2200      	movs	r2, #0
 80148ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80148b2:	4610      	mov	r0, r2
 80148b4:	fbbc f9f3 	udiv	r9, ip, r3
 80148b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80148bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80148c0:	2f09      	cmp	r7, #9
 80148c2:	d80f      	bhi.n	80148e4 <_strtol_l.isra.0+0xa8>
 80148c4:	463c      	mov	r4, r7
 80148c6:	42a3      	cmp	r3, r4
 80148c8:	dd1b      	ble.n	8014902 <_strtol_l.isra.0+0xc6>
 80148ca:	1c57      	adds	r7, r2, #1
 80148cc:	d007      	beq.n	80148de <_strtol_l.isra.0+0xa2>
 80148ce:	4581      	cmp	r9, r0
 80148d0:	d314      	bcc.n	80148fc <_strtol_l.isra.0+0xc0>
 80148d2:	d101      	bne.n	80148d8 <_strtol_l.isra.0+0x9c>
 80148d4:	45a2      	cmp	sl, r4
 80148d6:	db11      	blt.n	80148fc <_strtol_l.isra.0+0xc0>
 80148d8:	fb00 4003 	mla	r0, r0, r3, r4
 80148dc:	2201      	movs	r2, #1
 80148de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148e2:	e7eb      	b.n	80148bc <_strtol_l.isra.0+0x80>
 80148e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80148e8:	2f19      	cmp	r7, #25
 80148ea:	d801      	bhi.n	80148f0 <_strtol_l.isra.0+0xb4>
 80148ec:	3c37      	subs	r4, #55	@ 0x37
 80148ee:	e7ea      	b.n	80148c6 <_strtol_l.isra.0+0x8a>
 80148f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80148f4:	2f19      	cmp	r7, #25
 80148f6:	d804      	bhi.n	8014902 <_strtol_l.isra.0+0xc6>
 80148f8:	3c57      	subs	r4, #87	@ 0x57
 80148fa:	e7e4      	b.n	80148c6 <_strtol_l.isra.0+0x8a>
 80148fc:	f04f 32ff 	mov.w	r2, #4294967295
 8014900:	e7ed      	b.n	80148de <_strtol_l.isra.0+0xa2>
 8014902:	1c53      	adds	r3, r2, #1
 8014904:	d108      	bne.n	8014918 <_strtol_l.isra.0+0xdc>
 8014906:	2322      	movs	r3, #34	@ 0x22
 8014908:	4660      	mov	r0, ip
 801490a:	f8ce 3000 	str.w	r3, [lr]
 801490e:	f1b8 0f00 	cmp.w	r8, #0
 8014912:	d0a0      	beq.n	8014856 <_strtol_l.isra.0+0x1a>
 8014914:	1e69      	subs	r1, r5, #1
 8014916:	e006      	b.n	8014926 <_strtol_l.isra.0+0xea>
 8014918:	b106      	cbz	r6, 801491c <_strtol_l.isra.0+0xe0>
 801491a:	4240      	negs	r0, r0
 801491c:	f1b8 0f00 	cmp.w	r8, #0
 8014920:	d099      	beq.n	8014856 <_strtol_l.isra.0+0x1a>
 8014922:	2a00      	cmp	r2, #0
 8014924:	d1f6      	bne.n	8014914 <_strtol_l.isra.0+0xd8>
 8014926:	f8c8 1000 	str.w	r1, [r8]
 801492a:	e794      	b.n	8014856 <_strtol_l.isra.0+0x1a>
 801492c:	08015e01 	.word	0x08015e01

08014930 <_strtol_r>:
 8014930:	f7ff bf84 	b.w	801483c <_strtol_l.isra.0>

08014934 <__ssputs_r>:
 8014934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014938:	461f      	mov	r7, r3
 801493a:	688e      	ldr	r6, [r1, #8]
 801493c:	4682      	mov	sl, r0
 801493e:	460c      	mov	r4, r1
 8014940:	42be      	cmp	r6, r7
 8014942:	4690      	mov	r8, r2
 8014944:	680b      	ldr	r3, [r1, #0]
 8014946:	d82d      	bhi.n	80149a4 <__ssputs_r+0x70>
 8014948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801494c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014950:	d026      	beq.n	80149a0 <__ssputs_r+0x6c>
 8014952:	6965      	ldr	r5, [r4, #20]
 8014954:	6909      	ldr	r1, [r1, #16]
 8014956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801495a:	eba3 0901 	sub.w	r9, r3, r1
 801495e:	1c7b      	adds	r3, r7, #1
 8014960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014964:	444b      	add	r3, r9
 8014966:	106d      	asrs	r5, r5, #1
 8014968:	429d      	cmp	r5, r3
 801496a:	bf38      	it	cc
 801496c:	461d      	movcc	r5, r3
 801496e:	0553      	lsls	r3, r2, #21
 8014970:	d527      	bpl.n	80149c2 <__ssputs_r+0x8e>
 8014972:	4629      	mov	r1, r5
 8014974:	f7fe fc16 	bl	80131a4 <_malloc_r>
 8014978:	4606      	mov	r6, r0
 801497a:	b360      	cbz	r0, 80149d6 <__ssputs_r+0xa2>
 801497c:	464a      	mov	r2, r9
 801497e:	6921      	ldr	r1, [r4, #16]
 8014980:	f7fd fd29 	bl	80123d6 <memcpy>
 8014984:	89a3      	ldrh	r3, [r4, #12]
 8014986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801498a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801498e:	81a3      	strh	r3, [r4, #12]
 8014990:	6126      	str	r6, [r4, #16]
 8014992:	444e      	add	r6, r9
 8014994:	6165      	str	r5, [r4, #20]
 8014996:	eba5 0509 	sub.w	r5, r5, r9
 801499a:	6026      	str	r6, [r4, #0]
 801499c:	463e      	mov	r6, r7
 801499e:	60a5      	str	r5, [r4, #8]
 80149a0:	42be      	cmp	r6, r7
 80149a2:	d900      	bls.n	80149a6 <__ssputs_r+0x72>
 80149a4:	463e      	mov	r6, r7
 80149a6:	4632      	mov	r2, r6
 80149a8:	4641      	mov	r1, r8
 80149aa:	6820      	ldr	r0, [r4, #0]
 80149ac:	f000 fb69 	bl	8015082 <memmove>
 80149b0:	68a3      	ldr	r3, [r4, #8]
 80149b2:	2000      	movs	r0, #0
 80149b4:	1b9b      	subs	r3, r3, r6
 80149b6:	60a3      	str	r3, [r4, #8]
 80149b8:	6823      	ldr	r3, [r4, #0]
 80149ba:	4433      	add	r3, r6
 80149bc:	6023      	str	r3, [r4, #0]
 80149be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149c2:	462a      	mov	r2, r5
 80149c4:	f000 ff35 	bl	8015832 <_realloc_r>
 80149c8:	4606      	mov	r6, r0
 80149ca:	2800      	cmp	r0, #0
 80149cc:	d1e0      	bne.n	8014990 <__ssputs_r+0x5c>
 80149ce:	6921      	ldr	r1, [r4, #16]
 80149d0:	4650      	mov	r0, sl
 80149d2:	f7fe fb73 	bl	80130bc <_free_r>
 80149d6:	230c      	movs	r3, #12
 80149d8:	f04f 30ff 	mov.w	r0, #4294967295
 80149dc:	f8ca 3000 	str.w	r3, [sl]
 80149e0:	89a3      	ldrh	r3, [r4, #12]
 80149e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149e6:	81a3      	strh	r3, [r4, #12]
 80149e8:	e7e9      	b.n	80149be <__ssputs_r+0x8a>
	...

080149ec <_svfiprintf_r>:
 80149ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f0:	4698      	mov	r8, r3
 80149f2:	898b      	ldrh	r3, [r1, #12]
 80149f4:	b09d      	sub	sp, #116	@ 0x74
 80149f6:	4607      	mov	r7, r0
 80149f8:	061b      	lsls	r3, r3, #24
 80149fa:	460d      	mov	r5, r1
 80149fc:	4614      	mov	r4, r2
 80149fe:	d510      	bpl.n	8014a22 <_svfiprintf_r+0x36>
 8014a00:	690b      	ldr	r3, [r1, #16]
 8014a02:	b973      	cbnz	r3, 8014a22 <_svfiprintf_r+0x36>
 8014a04:	2140      	movs	r1, #64	@ 0x40
 8014a06:	f7fe fbcd 	bl	80131a4 <_malloc_r>
 8014a0a:	6028      	str	r0, [r5, #0]
 8014a0c:	6128      	str	r0, [r5, #16]
 8014a0e:	b930      	cbnz	r0, 8014a1e <_svfiprintf_r+0x32>
 8014a10:	230c      	movs	r3, #12
 8014a12:	603b      	str	r3, [r7, #0]
 8014a14:	f04f 30ff 	mov.w	r0, #4294967295
 8014a18:	b01d      	add	sp, #116	@ 0x74
 8014a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a1e:	2340      	movs	r3, #64	@ 0x40
 8014a20:	616b      	str	r3, [r5, #20]
 8014a22:	2300      	movs	r3, #0
 8014a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a28:	f04f 0901 	mov.w	r9, #1
 8014a2c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8014bd0 <_svfiprintf_r+0x1e4>
 8014a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a32:	2320      	movs	r3, #32
 8014a34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a38:	2330      	movs	r3, #48	@ 0x30
 8014a3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a3e:	4623      	mov	r3, r4
 8014a40:	469a      	mov	sl, r3
 8014a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a46:	b10a      	cbz	r2, 8014a4c <_svfiprintf_r+0x60>
 8014a48:	2a25      	cmp	r2, #37	@ 0x25
 8014a4a:	d1f9      	bne.n	8014a40 <_svfiprintf_r+0x54>
 8014a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8014a50:	d00b      	beq.n	8014a6a <_svfiprintf_r+0x7e>
 8014a52:	465b      	mov	r3, fp
 8014a54:	4622      	mov	r2, r4
 8014a56:	4629      	mov	r1, r5
 8014a58:	4638      	mov	r0, r7
 8014a5a:	f7ff ff6b 	bl	8014934 <__ssputs_r>
 8014a5e:	3001      	adds	r0, #1
 8014a60:	f000 80a7 	beq.w	8014bb2 <_svfiprintf_r+0x1c6>
 8014a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a66:	445a      	add	r2, fp
 8014a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8014a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	f000 809f 	beq.w	8014bb2 <_svfiprintf_r+0x1c6>
 8014a74:	2300      	movs	r3, #0
 8014a76:	f04f 32ff 	mov.w	r2, #4294967295
 8014a7a:	f10a 0a01 	add.w	sl, sl, #1
 8014a7e:	9304      	str	r3, [sp, #16]
 8014a80:	9307      	str	r3, [sp, #28]
 8014a82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014a86:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a8c:	4654      	mov	r4, sl
 8014a8e:	2205      	movs	r2, #5
 8014a90:	484f      	ldr	r0, [pc, #316]	@ (8014bd0 <_svfiprintf_r+0x1e4>)
 8014a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a96:	f7fd fc90 	bl	80123ba <memchr>
 8014a9a:	9a04      	ldr	r2, [sp, #16]
 8014a9c:	b9d8      	cbnz	r0, 8014ad6 <_svfiprintf_r+0xea>
 8014a9e:	06d0      	lsls	r0, r2, #27
 8014aa0:	bf44      	itt	mi
 8014aa2:	2320      	movmi	r3, #32
 8014aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014aa8:	0711      	lsls	r1, r2, #28
 8014aaa:	bf44      	itt	mi
 8014aac:	232b      	movmi	r3, #43	@ 0x2b
 8014aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8014ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ab8:	d015      	beq.n	8014ae6 <_svfiprintf_r+0xfa>
 8014aba:	9a07      	ldr	r2, [sp, #28]
 8014abc:	4654      	mov	r4, sl
 8014abe:	2000      	movs	r0, #0
 8014ac0:	f04f 0c0a 	mov.w	ip, #10
 8014ac4:	4621      	mov	r1, r4
 8014ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014aca:	3b30      	subs	r3, #48	@ 0x30
 8014acc:	2b09      	cmp	r3, #9
 8014ace:	d94b      	bls.n	8014b68 <_svfiprintf_r+0x17c>
 8014ad0:	b1b0      	cbz	r0, 8014b00 <_svfiprintf_r+0x114>
 8014ad2:	9207      	str	r2, [sp, #28]
 8014ad4:	e014      	b.n	8014b00 <_svfiprintf_r+0x114>
 8014ad6:	eba0 0308 	sub.w	r3, r0, r8
 8014ada:	46a2      	mov	sl, r4
 8014adc:	fa09 f303 	lsl.w	r3, r9, r3
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	9304      	str	r3, [sp, #16]
 8014ae4:	e7d2      	b.n	8014a8c <_svfiprintf_r+0xa0>
 8014ae6:	9b03      	ldr	r3, [sp, #12]
 8014ae8:	1d19      	adds	r1, r3, #4
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	9103      	str	r1, [sp, #12]
 8014af0:	bfbb      	ittet	lt
 8014af2:	425b      	neglt	r3, r3
 8014af4:	f042 0202 	orrlt.w	r2, r2, #2
 8014af8:	9307      	strge	r3, [sp, #28]
 8014afa:	9307      	strlt	r3, [sp, #28]
 8014afc:	bfb8      	it	lt
 8014afe:	9204      	strlt	r2, [sp, #16]
 8014b00:	7823      	ldrb	r3, [r4, #0]
 8014b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b04:	d10a      	bne.n	8014b1c <_svfiprintf_r+0x130>
 8014b06:	7863      	ldrb	r3, [r4, #1]
 8014b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b0a:	d132      	bne.n	8014b72 <_svfiprintf_r+0x186>
 8014b0c:	9b03      	ldr	r3, [sp, #12]
 8014b0e:	3402      	adds	r4, #2
 8014b10:	1d1a      	adds	r2, r3, #4
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b18:	9203      	str	r2, [sp, #12]
 8014b1a:	9305      	str	r3, [sp, #20]
 8014b1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014be0 <_svfiprintf_r+0x1f4>
 8014b20:	2203      	movs	r2, #3
 8014b22:	7821      	ldrb	r1, [r4, #0]
 8014b24:	4650      	mov	r0, sl
 8014b26:	f7fd fc48 	bl	80123ba <memchr>
 8014b2a:	b138      	cbz	r0, 8014b3c <_svfiprintf_r+0x150>
 8014b2c:	eba0 000a 	sub.w	r0, r0, sl
 8014b30:	2240      	movs	r2, #64	@ 0x40
 8014b32:	9b04      	ldr	r3, [sp, #16]
 8014b34:	3401      	adds	r4, #1
 8014b36:	4082      	lsls	r2, r0
 8014b38:	4313      	orrs	r3, r2
 8014b3a:	9304      	str	r3, [sp, #16]
 8014b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b40:	2206      	movs	r2, #6
 8014b42:	4824      	ldr	r0, [pc, #144]	@ (8014bd4 <_svfiprintf_r+0x1e8>)
 8014b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b48:	f7fd fc37 	bl	80123ba <memchr>
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	d036      	beq.n	8014bbe <_svfiprintf_r+0x1d2>
 8014b50:	4b21      	ldr	r3, [pc, #132]	@ (8014bd8 <_svfiprintf_r+0x1ec>)
 8014b52:	bb1b      	cbnz	r3, 8014b9c <_svfiprintf_r+0x1b0>
 8014b54:	9b03      	ldr	r3, [sp, #12]
 8014b56:	3307      	adds	r3, #7
 8014b58:	f023 0307 	bic.w	r3, r3, #7
 8014b5c:	3308      	adds	r3, #8
 8014b5e:	9303      	str	r3, [sp, #12]
 8014b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b62:	4433      	add	r3, r6
 8014b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b66:	e76a      	b.n	8014a3e <_svfiprintf_r+0x52>
 8014b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b6c:	460c      	mov	r4, r1
 8014b6e:	2001      	movs	r0, #1
 8014b70:	e7a8      	b.n	8014ac4 <_svfiprintf_r+0xd8>
 8014b72:	2300      	movs	r3, #0
 8014b74:	3401      	adds	r4, #1
 8014b76:	f04f 0c0a 	mov.w	ip, #10
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	9305      	str	r3, [sp, #20]
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b84:	3a30      	subs	r2, #48	@ 0x30
 8014b86:	2a09      	cmp	r2, #9
 8014b88:	d903      	bls.n	8014b92 <_svfiprintf_r+0x1a6>
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d0c6      	beq.n	8014b1c <_svfiprintf_r+0x130>
 8014b8e:	9105      	str	r1, [sp, #20]
 8014b90:	e7c4      	b.n	8014b1c <_svfiprintf_r+0x130>
 8014b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b96:	4604      	mov	r4, r0
 8014b98:	2301      	movs	r3, #1
 8014b9a:	e7f0      	b.n	8014b7e <_svfiprintf_r+0x192>
 8014b9c:	ab03      	add	r3, sp, #12
 8014b9e:	462a      	mov	r2, r5
 8014ba0:	a904      	add	r1, sp, #16
 8014ba2:	4638      	mov	r0, r7
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8014bdc <_svfiprintf_r+0x1f0>)
 8014ba8:	f7fc fad8 	bl	801115c <_printf_float>
 8014bac:	1c42      	adds	r2, r0, #1
 8014bae:	4606      	mov	r6, r0
 8014bb0:	d1d6      	bne.n	8014b60 <_svfiprintf_r+0x174>
 8014bb2:	89ab      	ldrh	r3, [r5, #12]
 8014bb4:	065b      	lsls	r3, r3, #25
 8014bb6:	f53f af2d 	bmi.w	8014a14 <_svfiprintf_r+0x28>
 8014bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014bbc:	e72c      	b.n	8014a18 <_svfiprintf_r+0x2c>
 8014bbe:	ab03      	add	r3, sp, #12
 8014bc0:	462a      	mov	r2, r5
 8014bc2:	a904      	add	r1, sp, #16
 8014bc4:	4638      	mov	r0, r7
 8014bc6:	9300      	str	r3, [sp, #0]
 8014bc8:	4b04      	ldr	r3, [pc, #16]	@ (8014bdc <_svfiprintf_r+0x1f0>)
 8014bca:	f7fc fd63 	bl	8011694 <_printf_i>
 8014bce:	e7ed      	b.n	8014bac <_svfiprintf_r+0x1c0>
 8014bd0:	08015bfd 	.word	0x08015bfd
 8014bd4:	08015c07 	.word	0x08015c07
 8014bd8:	0801115d 	.word	0x0801115d
 8014bdc:	08014935 	.word	0x08014935
 8014be0:	08015c03 	.word	0x08015c03

08014be4 <__sfputc_r>:
 8014be4:	6893      	ldr	r3, [r2, #8]
 8014be6:	3b01      	subs	r3, #1
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	b410      	push	{r4}
 8014bec:	6093      	str	r3, [r2, #8]
 8014bee:	da08      	bge.n	8014c02 <__sfputc_r+0x1e>
 8014bf0:	6994      	ldr	r4, [r2, #24]
 8014bf2:	42a3      	cmp	r3, r4
 8014bf4:	db01      	blt.n	8014bfa <__sfputc_r+0x16>
 8014bf6:	290a      	cmp	r1, #10
 8014bf8:	d103      	bne.n	8014c02 <__sfputc_r+0x1e>
 8014bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bfe:	f7fd bac8 	b.w	8012192 <__swbuf_r>
 8014c02:	6813      	ldr	r3, [r2, #0]
 8014c04:	1c58      	adds	r0, r3, #1
 8014c06:	6010      	str	r0, [r2, #0]
 8014c08:	4608      	mov	r0, r1
 8014c0a:	7019      	strb	r1, [r3, #0]
 8014c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c10:	4770      	bx	lr

08014c12 <__sfputs_r>:
 8014c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c14:	4606      	mov	r6, r0
 8014c16:	460f      	mov	r7, r1
 8014c18:	4614      	mov	r4, r2
 8014c1a:	18d5      	adds	r5, r2, r3
 8014c1c:	42ac      	cmp	r4, r5
 8014c1e:	d101      	bne.n	8014c24 <__sfputs_r+0x12>
 8014c20:	2000      	movs	r0, #0
 8014c22:	e007      	b.n	8014c34 <__sfputs_r+0x22>
 8014c24:	463a      	mov	r2, r7
 8014c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	f7ff ffda 	bl	8014be4 <__sfputc_r>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d1f3      	bne.n	8014c1c <__sfputs_r+0xa>
 8014c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c38 <_vfiprintf_r>:
 8014c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3c:	460d      	mov	r5, r1
 8014c3e:	b09d      	sub	sp, #116	@ 0x74
 8014c40:	4614      	mov	r4, r2
 8014c42:	4698      	mov	r8, r3
 8014c44:	4606      	mov	r6, r0
 8014c46:	b118      	cbz	r0, 8014c50 <_vfiprintf_r+0x18>
 8014c48:	6a03      	ldr	r3, [r0, #32]
 8014c4a:	b90b      	cbnz	r3, 8014c50 <_vfiprintf_r+0x18>
 8014c4c:	f7fd f8da 	bl	8011e04 <__sinit>
 8014c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c52:	07d9      	lsls	r1, r3, #31
 8014c54:	d405      	bmi.n	8014c62 <_vfiprintf_r+0x2a>
 8014c56:	89ab      	ldrh	r3, [r5, #12]
 8014c58:	059a      	lsls	r2, r3, #22
 8014c5a:	d402      	bmi.n	8014c62 <_vfiprintf_r+0x2a>
 8014c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c5e:	f7fd fbaa 	bl	80123b6 <__retarget_lock_acquire_recursive>
 8014c62:	89ab      	ldrh	r3, [r5, #12]
 8014c64:	071b      	lsls	r3, r3, #28
 8014c66:	d501      	bpl.n	8014c6c <_vfiprintf_r+0x34>
 8014c68:	692b      	ldr	r3, [r5, #16]
 8014c6a:	b99b      	cbnz	r3, 8014c94 <_vfiprintf_r+0x5c>
 8014c6c:	4629      	mov	r1, r5
 8014c6e:	4630      	mov	r0, r6
 8014c70:	f7fd face 	bl	8012210 <__swsetup_r>
 8014c74:	b170      	cbz	r0, 8014c94 <_vfiprintf_r+0x5c>
 8014c76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c78:	07dc      	lsls	r4, r3, #31
 8014c7a:	d504      	bpl.n	8014c86 <_vfiprintf_r+0x4e>
 8014c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c80:	b01d      	add	sp, #116	@ 0x74
 8014c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c86:	89ab      	ldrh	r3, [r5, #12]
 8014c88:	0598      	lsls	r0, r3, #22
 8014c8a:	d4f7      	bmi.n	8014c7c <_vfiprintf_r+0x44>
 8014c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c8e:	f7fd fb93 	bl	80123b8 <__retarget_lock_release_recursive>
 8014c92:	e7f3      	b.n	8014c7c <_vfiprintf_r+0x44>
 8014c94:	2300      	movs	r3, #0
 8014c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c9a:	f04f 0901 	mov.w	r9, #1
 8014c9e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8014e54 <_vfiprintf_r+0x21c>
 8014ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ca4:	2320      	movs	r3, #32
 8014ca6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014caa:	2330      	movs	r3, #48	@ 0x30
 8014cac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014cb0:	4623      	mov	r3, r4
 8014cb2:	469a      	mov	sl, r3
 8014cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cb8:	b10a      	cbz	r2, 8014cbe <_vfiprintf_r+0x86>
 8014cba:	2a25      	cmp	r2, #37	@ 0x25
 8014cbc:	d1f9      	bne.n	8014cb2 <_vfiprintf_r+0x7a>
 8014cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8014cc2:	d00b      	beq.n	8014cdc <_vfiprintf_r+0xa4>
 8014cc4:	465b      	mov	r3, fp
 8014cc6:	4622      	mov	r2, r4
 8014cc8:	4629      	mov	r1, r5
 8014cca:	4630      	mov	r0, r6
 8014ccc:	f7ff ffa1 	bl	8014c12 <__sfputs_r>
 8014cd0:	3001      	adds	r0, #1
 8014cd2:	f000 80a7 	beq.w	8014e24 <_vfiprintf_r+0x1ec>
 8014cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014cd8:	445a      	add	r2, fp
 8014cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8014cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	f000 809f 	beq.w	8014e24 <_vfiprintf_r+0x1ec>
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8014cec:	f10a 0a01 	add.w	sl, sl, #1
 8014cf0:	9304      	str	r3, [sp, #16]
 8014cf2:	9307      	str	r3, [sp, #28]
 8014cf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014cf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8014cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014cfe:	4654      	mov	r4, sl
 8014d00:	2205      	movs	r2, #5
 8014d02:	4854      	ldr	r0, [pc, #336]	@ (8014e54 <_vfiprintf_r+0x21c>)
 8014d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d08:	f7fd fb57 	bl	80123ba <memchr>
 8014d0c:	9a04      	ldr	r2, [sp, #16]
 8014d0e:	b9d8      	cbnz	r0, 8014d48 <_vfiprintf_r+0x110>
 8014d10:	06d1      	lsls	r1, r2, #27
 8014d12:	bf44      	itt	mi
 8014d14:	2320      	movmi	r3, #32
 8014d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014d1a:	0713      	lsls	r3, r2, #28
 8014d1c:	bf44      	itt	mi
 8014d1e:	232b      	movmi	r3, #43	@ 0x2b
 8014d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014d24:	f89a 3000 	ldrb.w	r3, [sl]
 8014d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d2a:	d015      	beq.n	8014d58 <_vfiprintf_r+0x120>
 8014d2c:	9a07      	ldr	r2, [sp, #28]
 8014d2e:	4654      	mov	r4, sl
 8014d30:	2000      	movs	r0, #0
 8014d32:	f04f 0c0a 	mov.w	ip, #10
 8014d36:	4621      	mov	r1, r4
 8014d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d3c:	3b30      	subs	r3, #48	@ 0x30
 8014d3e:	2b09      	cmp	r3, #9
 8014d40:	d94b      	bls.n	8014dda <_vfiprintf_r+0x1a2>
 8014d42:	b1b0      	cbz	r0, 8014d72 <_vfiprintf_r+0x13a>
 8014d44:	9207      	str	r2, [sp, #28]
 8014d46:	e014      	b.n	8014d72 <_vfiprintf_r+0x13a>
 8014d48:	eba0 0308 	sub.w	r3, r0, r8
 8014d4c:	46a2      	mov	sl, r4
 8014d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8014d52:	4313      	orrs	r3, r2
 8014d54:	9304      	str	r3, [sp, #16]
 8014d56:	e7d2      	b.n	8014cfe <_vfiprintf_r+0xc6>
 8014d58:	9b03      	ldr	r3, [sp, #12]
 8014d5a:	1d19      	adds	r1, r3, #4
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	9103      	str	r1, [sp, #12]
 8014d62:	bfbb      	ittet	lt
 8014d64:	425b      	neglt	r3, r3
 8014d66:	f042 0202 	orrlt.w	r2, r2, #2
 8014d6a:	9307      	strge	r3, [sp, #28]
 8014d6c:	9307      	strlt	r3, [sp, #28]
 8014d6e:	bfb8      	it	lt
 8014d70:	9204      	strlt	r2, [sp, #16]
 8014d72:	7823      	ldrb	r3, [r4, #0]
 8014d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d76:	d10a      	bne.n	8014d8e <_vfiprintf_r+0x156>
 8014d78:	7863      	ldrb	r3, [r4, #1]
 8014d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d7c:	d132      	bne.n	8014de4 <_vfiprintf_r+0x1ac>
 8014d7e:	9b03      	ldr	r3, [sp, #12]
 8014d80:	3402      	adds	r4, #2
 8014d82:	1d1a      	adds	r2, r3, #4
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014d8a:	9203      	str	r2, [sp, #12]
 8014d8c:	9305      	str	r3, [sp, #20]
 8014d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014e64 <_vfiprintf_r+0x22c>
 8014d92:	2203      	movs	r2, #3
 8014d94:	7821      	ldrb	r1, [r4, #0]
 8014d96:	4650      	mov	r0, sl
 8014d98:	f7fd fb0f 	bl	80123ba <memchr>
 8014d9c:	b138      	cbz	r0, 8014dae <_vfiprintf_r+0x176>
 8014d9e:	eba0 000a 	sub.w	r0, r0, sl
 8014da2:	2240      	movs	r2, #64	@ 0x40
 8014da4:	9b04      	ldr	r3, [sp, #16]
 8014da6:	3401      	adds	r4, #1
 8014da8:	4082      	lsls	r2, r0
 8014daa:	4313      	orrs	r3, r2
 8014dac:	9304      	str	r3, [sp, #16]
 8014dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014db2:	2206      	movs	r2, #6
 8014db4:	4828      	ldr	r0, [pc, #160]	@ (8014e58 <_vfiprintf_r+0x220>)
 8014db6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014dba:	f7fd fafe 	bl	80123ba <memchr>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d03f      	beq.n	8014e42 <_vfiprintf_r+0x20a>
 8014dc2:	4b26      	ldr	r3, [pc, #152]	@ (8014e5c <_vfiprintf_r+0x224>)
 8014dc4:	bb1b      	cbnz	r3, 8014e0e <_vfiprintf_r+0x1d6>
 8014dc6:	9b03      	ldr	r3, [sp, #12]
 8014dc8:	3307      	adds	r3, #7
 8014dca:	f023 0307 	bic.w	r3, r3, #7
 8014dce:	3308      	adds	r3, #8
 8014dd0:	9303      	str	r3, [sp, #12]
 8014dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014dd4:	443b      	add	r3, r7
 8014dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dd8:	e76a      	b.n	8014cb0 <_vfiprintf_r+0x78>
 8014dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8014dde:	460c      	mov	r4, r1
 8014de0:	2001      	movs	r0, #1
 8014de2:	e7a8      	b.n	8014d36 <_vfiprintf_r+0xfe>
 8014de4:	2300      	movs	r3, #0
 8014de6:	3401      	adds	r4, #1
 8014de8:	f04f 0c0a 	mov.w	ip, #10
 8014dec:	4619      	mov	r1, r3
 8014dee:	9305      	str	r3, [sp, #20]
 8014df0:	4620      	mov	r0, r4
 8014df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014df6:	3a30      	subs	r2, #48	@ 0x30
 8014df8:	2a09      	cmp	r2, #9
 8014dfa:	d903      	bls.n	8014e04 <_vfiprintf_r+0x1cc>
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d0c6      	beq.n	8014d8e <_vfiprintf_r+0x156>
 8014e00:	9105      	str	r1, [sp, #20]
 8014e02:	e7c4      	b.n	8014d8e <_vfiprintf_r+0x156>
 8014e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e08:	4604      	mov	r4, r0
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	e7f0      	b.n	8014df0 <_vfiprintf_r+0x1b8>
 8014e0e:	ab03      	add	r3, sp, #12
 8014e10:	462a      	mov	r2, r5
 8014e12:	a904      	add	r1, sp, #16
 8014e14:	4630      	mov	r0, r6
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	4b11      	ldr	r3, [pc, #68]	@ (8014e60 <_vfiprintf_r+0x228>)
 8014e1a:	f7fc f99f 	bl	801115c <_printf_float>
 8014e1e:	4607      	mov	r7, r0
 8014e20:	1c78      	adds	r0, r7, #1
 8014e22:	d1d6      	bne.n	8014dd2 <_vfiprintf_r+0x19a>
 8014e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e26:	07d9      	lsls	r1, r3, #31
 8014e28:	d405      	bmi.n	8014e36 <_vfiprintf_r+0x1fe>
 8014e2a:	89ab      	ldrh	r3, [r5, #12]
 8014e2c:	059a      	lsls	r2, r3, #22
 8014e2e:	d402      	bmi.n	8014e36 <_vfiprintf_r+0x1fe>
 8014e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e32:	f7fd fac1 	bl	80123b8 <__retarget_lock_release_recursive>
 8014e36:	89ab      	ldrh	r3, [r5, #12]
 8014e38:	065b      	lsls	r3, r3, #25
 8014e3a:	f53f af1f 	bmi.w	8014c7c <_vfiprintf_r+0x44>
 8014e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e40:	e71e      	b.n	8014c80 <_vfiprintf_r+0x48>
 8014e42:	ab03      	add	r3, sp, #12
 8014e44:	462a      	mov	r2, r5
 8014e46:	a904      	add	r1, sp, #16
 8014e48:	4630      	mov	r0, r6
 8014e4a:	9300      	str	r3, [sp, #0]
 8014e4c:	4b04      	ldr	r3, [pc, #16]	@ (8014e60 <_vfiprintf_r+0x228>)
 8014e4e:	f7fc fc21 	bl	8011694 <_printf_i>
 8014e52:	e7e4      	b.n	8014e1e <_vfiprintf_r+0x1e6>
 8014e54:	08015bfd 	.word	0x08015bfd
 8014e58:	08015c07 	.word	0x08015c07
 8014e5c:	0801115d 	.word	0x0801115d
 8014e60:	08014c13 	.word	0x08014c13
 8014e64:	08015c03 	.word	0x08015c03

08014e68 <__sflush_r>:
 8014e68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e70:	0716      	lsls	r6, r2, #28
 8014e72:	4605      	mov	r5, r0
 8014e74:	460c      	mov	r4, r1
 8014e76:	d454      	bmi.n	8014f22 <__sflush_r+0xba>
 8014e78:	684b      	ldr	r3, [r1, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	dc02      	bgt.n	8014e84 <__sflush_r+0x1c>
 8014e7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	dd48      	ble.n	8014f16 <__sflush_r+0xae>
 8014e84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e86:	2e00      	cmp	r6, #0
 8014e88:	d045      	beq.n	8014f16 <__sflush_r+0xae>
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014e90:	682f      	ldr	r7, [r5, #0]
 8014e92:	6a21      	ldr	r1, [r4, #32]
 8014e94:	602b      	str	r3, [r5, #0]
 8014e96:	d030      	beq.n	8014efa <__sflush_r+0x92>
 8014e98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014e9a:	89a3      	ldrh	r3, [r4, #12]
 8014e9c:	0759      	lsls	r1, r3, #29
 8014e9e:	d505      	bpl.n	8014eac <__sflush_r+0x44>
 8014ea0:	6863      	ldr	r3, [r4, #4]
 8014ea2:	1ad2      	subs	r2, r2, r3
 8014ea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014ea6:	b10b      	cbz	r3, 8014eac <__sflush_r+0x44>
 8014ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014eaa:	1ad2      	subs	r2, r2, r3
 8014eac:	2300      	movs	r3, #0
 8014eae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014eb0:	6a21      	ldr	r1, [r4, #32]
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	47b0      	blx	r6
 8014eb6:	1c43      	adds	r3, r0, #1
 8014eb8:	89a3      	ldrh	r3, [r4, #12]
 8014eba:	d106      	bne.n	8014eca <__sflush_r+0x62>
 8014ebc:	6829      	ldr	r1, [r5, #0]
 8014ebe:	291d      	cmp	r1, #29
 8014ec0:	d82b      	bhi.n	8014f1a <__sflush_r+0xb2>
 8014ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8014f6c <__sflush_r+0x104>)
 8014ec4:	40ca      	lsrs	r2, r1
 8014ec6:	07d6      	lsls	r6, r2, #31
 8014ec8:	d527      	bpl.n	8014f1a <__sflush_r+0xb2>
 8014eca:	2200      	movs	r2, #0
 8014ecc:	04d9      	lsls	r1, r3, #19
 8014ece:	6062      	str	r2, [r4, #4]
 8014ed0:	6922      	ldr	r2, [r4, #16]
 8014ed2:	6022      	str	r2, [r4, #0]
 8014ed4:	d504      	bpl.n	8014ee0 <__sflush_r+0x78>
 8014ed6:	1c42      	adds	r2, r0, #1
 8014ed8:	d101      	bne.n	8014ede <__sflush_r+0x76>
 8014eda:	682b      	ldr	r3, [r5, #0]
 8014edc:	b903      	cbnz	r3, 8014ee0 <__sflush_r+0x78>
 8014ede:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ee2:	602f      	str	r7, [r5, #0]
 8014ee4:	b1b9      	cbz	r1, 8014f16 <__sflush_r+0xae>
 8014ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014eea:	4299      	cmp	r1, r3
 8014eec:	d002      	beq.n	8014ef4 <__sflush_r+0x8c>
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f7fe f8e4 	bl	80130bc <_free_r>
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	6363      	str	r3, [r4, #52]	@ 0x34
 8014ef8:	e00d      	b.n	8014f16 <__sflush_r+0xae>
 8014efa:	2301      	movs	r3, #1
 8014efc:	4628      	mov	r0, r5
 8014efe:	47b0      	blx	r6
 8014f00:	4602      	mov	r2, r0
 8014f02:	1c50      	adds	r0, r2, #1
 8014f04:	d1c9      	bne.n	8014e9a <__sflush_r+0x32>
 8014f06:	682b      	ldr	r3, [r5, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d0c6      	beq.n	8014e9a <__sflush_r+0x32>
 8014f0c:	2b1d      	cmp	r3, #29
 8014f0e:	d001      	beq.n	8014f14 <__sflush_r+0xac>
 8014f10:	2b16      	cmp	r3, #22
 8014f12:	d11d      	bne.n	8014f50 <__sflush_r+0xe8>
 8014f14:	602f      	str	r7, [r5, #0]
 8014f16:	2000      	movs	r0, #0
 8014f18:	e021      	b.n	8014f5e <__sflush_r+0xf6>
 8014f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f1e:	b21b      	sxth	r3, r3
 8014f20:	e01a      	b.n	8014f58 <__sflush_r+0xf0>
 8014f22:	690f      	ldr	r7, [r1, #16]
 8014f24:	2f00      	cmp	r7, #0
 8014f26:	d0f6      	beq.n	8014f16 <__sflush_r+0xae>
 8014f28:	0793      	lsls	r3, r2, #30
 8014f2a:	680e      	ldr	r6, [r1, #0]
 8014f2c:	600f      	str	r7, [r1, #0]
 8014f2e:	bf0c      	ite	eq
 8014f30:	694b      	ldreq	r3, [r1, #20]
 8014f32:	2300      	movne	r3, #0
 8014f34:	eba6 0807 	sub.w	r8, r6, r7
 8014f38:	608b      	str	r3, [r1, #8]
 8014f3a:	f1b8 0f00 	cmp.w	r8, #0
 8014f3e:	ddea      	ble.n	8014f16 <__sflush_r+0xae>
 8014f40:	4643      	mov	r3, r8
 8014f42:	463a      	mov	r2, r7
 8014f44:	6a21      	ldr	r1, [r4, #32]
 8014f46:	4628      	mov	r0, r5
 8014f48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014f4a:	47b0      	blx	r6
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	dc08      	bgt.n	8014f62 <__sflush_r+0xfa>
 8014f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f58:	f04f 30ff 	mov.w	r0, #4294967295
 8014f5c:	81a3      	strh	r3, [r4, #12]
 8014f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f62:	4407      	add	r7, r0
 8014f64:	eba8 0800 	sub.w	r8, r8, r0
 8014f68:	e7e7      	b.n	8014f3a <__sflush_r+0xd2>
 8014f6a:	bf00      	nop
 8014f6c:	20400001 	.word	0x20400001

08014f70 <_fflush_r>:
 8014f70:	b538      	push	{r3, r4, r5, lr}
 8014f72:	690b      	ldr	r3, [r1, #16]
 8014f74:	4605      	mov	r5, r0
 8014f76:	460c      	mov	r4, r1
 8014f78:	b913      	cbnz	r3, 8014f80 <_fflush_r+0x10>
 8014f7a:	2500      	movs	r5, #0
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	bd38      	pop	{r3, r4, r5, pc}
 8014f80:	b118      	cbz	r0, 8014f8a <_fflush_r+0x1a>
 8014f82:	6a03      	ldr	r3, [r0, #32]
 8014f84:	b90b      	cbnz	r3, 8014f8a <_fflush_r+0x1a>
 8014f86:	f7fc ff3d 	bl	8011e04 <__sinit>
 8014f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d0f3      	beq.n	8014f7a <_fflush_r+0xa>
 8014f92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014f94:	07d0      	lsls	r0, r2, #31
 8014f96:	d404      	bmi.n	8014fa2 <_fflush_r+0x32>
 8014f98:	0599      	lsls	r1, r3, #22
 8014f9a:	d402      	bmi.n	8014fa2 <_fflush_r+0x32>
 8014f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f9e:	f7fd fa0a 	bl	80123b6 <__retarget_lock_acquire_recursive>
 8014fa2:	4628      	mov	r0, r5
 8014fa4:	4621      	mov	r1, r4
 8014fa6:	f7ff ff5f 	bl	8014e68 <__sflush_r>
 8014faa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014fac:	4605      	mov	r5, r0
 8014fae:	07da      	lsls	r2, r3, #31
 8014fb0:	d4e4      	bmi.n	8014f7c <_fflush_r+0xc>
 8014fb2:	89a3      	ldrh	r3, [r4, #12]
 8014fb4:	059b      	lsls	r3, r3, #22
 8014fb6:	d4e1      	bmi.n	8014f7c <_fflush_r+0xc>
 8014fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014fba:	f7fd f9fd 	bl	80123b8 <__retarget_lock_release_recursive>
 8014fbe:	e7dd      	b.n	8014f7c <_fflush_r+0xc>

08014fc0 <__swhatbuf_r>:
 8014fc0:	b570      	push	{r4, r5, r6, lr}
 8014fc2:	460c      	mov	r4, r1
 8014fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fc8:	b096      	sub	sp, #88	@ 0x58
 8014fca:	4615      	mov	r5, r2
 8014fcc:	2900      	cmp	r1, #0
 8014fce:	461e      	mov	r6, r3
 8014fd0:	da0c      	bge.n	8014fec <__swhatbuf_r+0x2c>
 8014fd2:	89a3      	ldrh	r3, [r4, #12]
 8014fd4:	2100      	movs	r1, #0
 8014fd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014fda:	bf14      	ite	ne
 8014fdc:	2340      	movne	r3, #64	@ 0x40
 8014fde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	6031      	str	r1, [r6, #0]
 8014fe6:	602b      	str	r3, [r5, #0]
 8014fe8:	b016      	add	sp, #88	@ 0x58
 8014fea:	bd70      	pop	{r4, r5, r6, pc}
 8014fec:	466a      	mov	r2, sp
 8014fee:	f000 f875 	bl	80150dc <_fstat_r>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	dbed      	blt.n	8014fd2 <__swhatbuf_r+0x12>
 8014ff6:	9901      	ldr	r1, [sp, #4]
 8014ff8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014ffc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015000:	4259      	negs	r1, r3
 8015002:	4159      	adcs	r1, r3
 8015004:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015008:	e7eb      	b.n	8014fe2 <__swhatbuf_r+0x22>

0801500a <__smakebuf_r>:
 801500a:	898b      	ldrh	r3, [r1, #12]
 801500c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801500e:	079d      	lsls	r5, r3, #30
 8015010:	4606      	mov	r6, r0
 8015012:	460c      	mov	r4, r1
 8015014:	d507      	bpl.n	8015026 <__smakebuf_r+0x1c>
 8015016:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801501a:	6023      	str	r3, [r4, #0]
 801501c:	6123      	str	r3, [r4, #16]
 801501e:	2301      	movs	r3, #1
 8015020:	6163      	str	r3, [r4, #20]
 8015022:	b003      	add	sp, #12
 8015024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015026:	ab01      	add	r3, sp, #4
 8015028:	466a      	mov	r2, sp
 801502a:	f7ff ffc9 	bl	8014fc0 <__swhatbuf_r>
 801502e:	9f00      	ldr	r7, [sp, #0]
 8015030:	4605      	mov	r5, r0
 8015032:	4630      	mov	r0, r6
 8015034:	4639      	mov	r1, r7
 8015036:	f7fe f8b5 	bl	80131a4 <_malloc_r>
 801503a:	b948      	cbnz	r0, 8015050 <__smakebuf_r+0x46>
 801503c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015040:	059a      	lsls	r2, r3, #22
 8015042:	d4ee      	bmi.n	8015022 <__smakebuf_r+0x18>
 8015044:	f023 0303 	bic.w	r3, r3, #3
 8015048:	f043 0302 	orr.w	r3, r3, #2
 801504c:	81a3      	strh	r3, [r4, #12]
 801504e:	e7e2      	b.n	8015016 <__smakebuf_r+0xc>
 8015050:	89a3      	ldrh	r3, [r4, #12]
 8015052:	6020      	str	r0, [r4, #0]
 8015054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015058:	81a3      	strh	r3, [r4, #12]
 801505a:	9b01      	ldr	r3, [sp, #4]
 801505c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015060:	b15b      	cbz	r3, 801507a <__smakebuf_r+0x70>
 8015062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015066:	4630      	mov	r0, r6
 8015068:	f000 f84a 	bl	8015100 <_isatty_r>
 801506c:	b128      	cbz	r0, 801507a <__smakebuf_r+0x70>
 801506e:	89a3      	ldrh	r3, [r4, #12]
 8015070:	f023 0303 	bic.w	r3, r3, #3
 8015074:	f043 0301 	orr.w	r3, r3, #1
 8015078:	81a3      	strh	r3, [r4, #12]
 801507a:	89a3      	ldrh	r3, [r4, #12]
 801507c:	431d      	orrs	r5, r3
 801507e:	81a5      	strh	r5, [r4, #12]
 8015080:	e7cf      	b.n	8015022 <__smakebuf_r+0x18>

08015082 <memmove>:
 8015082:	4288      	cmp	r0, r1
 8015084:	b510      	push	{r4, lr}
 8015086:	eb01 0402 	add.w	r4, r1, r2
 801508a:	d902      	bls.n	8015092 <memmove+0x10>
 801508c:	4284      	cmp	r4, r0
 801508e:	4623      	mov	r3, r4
 8015090:	d807      	bhi.n	80150a2 <memmove+0x20>
 8015092:	1e43      	subs	r3, r0, #1
 8015094:	42a1      	cmp	r1, r4
 8015096:	d008      	beq.n	80150aa <memmove+0x28>
 8015098:	f811 2b01 	ldrb.w	r2, [r1], #1
 801509c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150a0:	e7f8      	b.n	8015094 <memmove+0x12>
 80150a2:	4402      	add	r2, r0
 80150a4:	4601      	mov	r1, r0
 80150a6:	428a      	cmp	r2, r1
 80150a8:	d100      	bne.n	80150ac <memmove+0x2a>
 80150aa:	bd10      	pop	{r4, pc}
 80150ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150b4:	e7f7      	b.n	80150a6 <memmove+0x24>

080150b6 <strncmp>:
 80150b6:	b510      	push	{r4, lr}
 80150b8:	b16a      	cbz	r2, 80150d6 <strncmp+0x20>
 80150ba:	3901      	subs	r1, #1
 80150bc:	1884      	adds	r4, r0, r2
 80150be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d103      	bne.n	80150d2 <strncmp+0x1c>
 80150ca:	42a0      	cmp	r0, r4
 80150cc:	d001      	beq.n	80150d2 <strncmp+0x1c>
 80150ce:	2a00      	cmp	r2, #0
 80150d0:	d1f5      	bne.n	80150be <strncmp+0x8>
 80150d2:	1ad0      	subs	r0, r2, r3
 80150d4:	bd10      	pop	{r4, pc}
 80150d6:	4610      	mov	r0, r2
 80150d8:	e7fc      	b.n	80150d4 <strncmp+0x1e>
	...

080150dc <_fstat_r>:
 80150dc:	b538      	push	{r3, r4, r5, lr}
 80150de:	2300      	movs	r3, #0
 80150e0:	4d06      	ldr	r5, [pc, #24]	@ (80150fc <_fstat_r+0x20>)
 80150e2:	4604      	mov	r4, r0
 80150e4:	4608      	mov	r0, r1
 80150e6:	4611      	mov	r1, r2
 80150e8:	602b      	str	r3, [r5, #0]
 80150ea:	f7ed f915 	bl	8002318 <_fstat>
 80150ee:	1c43      	adds	r3, r0, #1
 80150f0:	d102      	bne.n	80150f8 <_fstat_r+0x1c>
 80150f2:	682b      	ldr	r3, [r5, #0]
 80150f4:	b103      	cbz	r3, 80150f8 <_fstat_r+0x1c>
 80150f6:	6023      	str	r3, [r4, #0]
 80150f8:	bd38      	pop	{r3, r4, r5, pc}
 80150fa:	bf00      	nop
 80150fc:	20002cd0 	.word	0x20002cd0

08015100 <_isatty_r>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	2300      	movs	r3, #0
 8015104:	4d05      	ldr	r5, [pc, #20]	@ (801511c <_isatty_r+0x1c>)
 8015106:	4604      	mov	r4, r0
 8015108:	4608      	mov	r0, r1
 801510a:	602b      	str	r3, [r5, #0]
 801510c:	f7ed f914 	bl	8002338 <_isatty>
 8015110:	1c43      	adds	r3, r0, #1
 8015112:	d102      	bne.n	801511a <_isatty_r+0x1a>
 8015114:	682b      	ldr	r3, [r5, #0]
 8015116:	b103      	cbz	r3, 801511a <_isatty_r+0x1a>
 8015118:	6023      	str	r3, [r4, #0]
 801511a:	bd38      	pop	{r3, r4, r5, pc}
 801511c:	20002cd0 	.word	0x20002cd0

08015120 <_sbrk_r>:
 8015120:	b538      	push	{r3, r4, r5, lr}
 8015122:	2300      	movs	r3, #0
 8015124:	4d05      	ldr	r5, [pc, #20]	@ (801513c <_sbrk_r+0x1c>)
 8015126:	4604      	mov	r4, r0
 8015128:	4608      	mov	r0, r1
 801512a:	602b      	str	r3, [r5, #0]
 801512c:	f7ed f91c 	bl	8002368 <_sbrk>
 8015130:	1c43      	adds	r3, r0, #1
 8015132:	d102      	bne.n	801513a <_sbrk_r+0x1a>
 8015134:	682b      	ldr	r3, [r5, #0]
 8015136:	b103      	cbz	r3, 801513a <_sbrk_r+0x1a>
 8015138:	6023      	str	r3, [r4, #0]
 801513a:	bd38      	pop	{r3, r4, r5, pc}
 801513c:	20002cd0 	.word	0x20002cd0

08015140 <__assert_func>:
 8015140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015142:	4614      	mov	r4, r2
 8015144:	461a      	mov	r2, r3
 8015146:	4b09      	ldr	r3, [pc, #36]	@ (801516c <__assert_func+0x2c>)
 8015148:	4605      	mov	r5, r0
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	68d8      	ldr	r0, [r3, #12]
 801514e:	b14c      	cbz	r4, 8015164 <__assert_func+0x24>
 8015150:	4b07      	ldr	r3, [pc, #28]	@ (8015170 <__assert_func+0x30>)
 8015152:	9100      	str	r1, [sp, #0]
 8015154:	4907      	ldr	r1, [pc, #28]	@ (8015174 <__assert_func+0x34>)
 8015156:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801515a:	462b      	mov	r3, r5
 801515c:	f000 fba4 	bl	80158a8 <fiprintf>
 8015160:	f000 fbb4 	bl	80158cc <abort>
 8015164:	4b04      	ldr	r3, [pc, #16]	@ (8015178 <__assert_func+0x38>)
 8015166:	461c      	mov	r4, r3
 8015168:	e7f3      	b.n	8015152 <__assert_func+0x12>
 801516a:	bf00      	nop
 801516c:	20000018 	.word	0x20000018
 8015170:	08015c16 	.word	0x08015c16
 8015174:	08015c23 	.word	0x08015c23
 8015178:	08015c51 	.word	0x08015c51

0801517c <_calloc_r>:
 801517c:	b570      	push	{r4, r5, r6, lr}
 801517e:	fba1 5402 	umull	r5, r4, r1, r2
 8015182:	b934      	cbnz	r4, 8015192 <_calloc_r+0x16>
 8015184:	4629      	mov	r1, r5
 8015186:	f7fe f80d 	bl	80131a4 <_malloc_r>
 801518a:	4606      	mov	r6, r0
 801518c:	b928      	cbnz	r0, 801519a <_calloc_r+0x1e>
 801518e:	4630      	mov	r0, r6
 8015190:	bd70      	pop	{r4, r5, r6, pc}
 8015192:	220c      	movs	r2, #12
 8015194:	2600      	movs	r6, #0
 8015196:	6002      	str	r2, [r0, #0]
 8015198:	e7f9      	b.n	801518e <_calloc_r+0x12>
 801519a:	462a      	mov	r2, r5
 801519c:	4621      	mov	r1, r4
 801519e:	f7fd f88d 	bl	80122bc <memset>
 80151a2:	e7f4      	b.n	801518e <_calloc_r+0x12>

080151a4 <rshift>:
 80151a4:	6903      	ldr	r3, [r0, #16]
 80151a6:	114a      	asrs	r2, r1, #5
 80151a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80151ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151b0:	f100 0414 	add.w	r4, r0, #20
 80151b4:	dd45      	ble.n	8015242 <rshift+0x9e>
 80151b6:	f011 011f 	ands.w	r1, r1, #31
 80151ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80151be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80151c2:	d10c      	bne.n	80151de <rshift+0x3a>
 80151c4:	f100 0710 	add.w	r7, r0, #16
 80151c8:	4629      	mov	r1, r5
 80151ca:	42b1      	cmp	r1, r6
 80151cc:	d334      	bcc.n	8015238 <rshift+0x94>
 80151ce:	1a9b      	subs	r3, r3, r2
 80151d0:	1eea      	subs	r2, r5, #3
 80151d2:	009b      	lsls	r3, r3, #2
 80151d4:	4296      	cmp	r6, r2
 80151d6:	bf38      	it	cc
 80151d8:	2300      	movcc	r3, #0
 80151da:	4423      	add	r3, r4
 80151dc:	e015      	b.n	801520a <rshift+0x66>
 80151de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80151e2:	f1c1 0820 	rsb	r8, r1, #32
 80151e6:	f105 0e04 	add.w	lr, r5, #4
 80151ea:	46a1      	mov	r9, r4
 80151ec:	40cf      	lsrs	r7, r1
 80151ee:	4576      	cmp	r6, lr
 80151f0:	46f4      	mov	ip, lr
 80151f2:	d815      	bhi.n	8015220 <rshift+0x7c>
 80151f4:	1a9a      	subs	r2, r3, r2
 80151f6:	3501      	adds	r5, #1
 80151f8:	0092      	lsls	r2, r2, #2
 80151fa:	3a04      	subs	r2, #4
 80151fc:	42ae      	cmp	r6, r5
 80151fe:	bf38      	it	cc
 8015200:	2200      	movcc	r2, #0
 8015202:	18a3      	adds	r3, r4, r2
 8015204:	50a7      	str	r7, [r4, r2]
 8015206:	b107      	cbz	r7, 801520a <rshift+0x66>
 8015208:	3304      	adds	r3, #4
 801520a:	1b1a      	subs	r2, r3, r4
 801520c:	42a3      	cmp	r3, r4
 801520e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015212:	bf08      	it	eq
 8015214:	2300      	moveq	r3, #0
 8015216:	6102      	str	r2, [r0, #16]
 8015218:	bf08      	it	eq
 801521a:	6143      	streq	r3, [r0, #20]
 801521c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015220:	f8dc c000 	ldr.w	ip, [ip]
 8015224:	fa0c fc08 	lsl.w	ip, ip, r8
 8015228:	ea4c 0707 	orr.w	r7, ip, r7
 801522c:	f849 7b04 	str.w	r7, [r9], #4
 8015230:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015234:	40cf      	lsrs	r7, r1
 8015236:	e7da      	b.n	80151ee <rshift+0x4a>
 8015238:	f851 cb04 	ldr.w	ip, [r1], #4
 801523c:	f847 cf04 	str.w	ip, [r7, #4]!
 8015240:	e7c3      	b.n	80151ca <rshift+0x26>
 8015242:	4623      	mov	r3, r4
 8015244:	e7e1      	b.n	801520a <rshift+0x66>

08015246 <__hexdig_fun>:
 8015246:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801524a:	2b09      	cmp	r3, #9
 801524c:	d802      	bhi.n	8015254 <__hexdig_fun+0xe>
 801524e:	3820      	subs	r0, #32
 8015250:	b2c0      	uxtb	r0, r0
 8015252:	4770      	bx	lr
 8015254:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015258:	2b05      	cmp	r3, #5
 801525a:	d801      	bhi.n	8015260 <__hexdig_fun+0x1a>
 801525c:	3847      	subs	r0, #71	@ 0x47
 801525e:	e7f7      	b.n	8015250 <__hexdig_fun+0xa>
 8015260:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015264:	2b05      	cmp	r3, #5
 8015266:	d801      	bhi.n	801526c <__hexdig_fun+0x26>
 8015268:	3827      	subs	r0, #39	@ 0x27
 801526a:	e7f1      	b.n	8015250 <__hexdig_fun+0xa>
 801526c:	2000      	movs	r0, #0
 801526e:	4770      	bx	lr

08015270 <__gethex>:
 8015270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015274:	b085      	sub	sp, #20
 8015276:	468a      	mov	sl, r1
 8015278:	4690      	mov	r8, r2
 801527a:	9302      	str	r3, [sp, #8]
 801527c:	680b      	ldr	r3, [r1, #0]
 801527e:	9001      	str	r0, [sp, #4]
 8015280:	1c9c      	adds	r4, r3, #2
 8015282:	46a1      	mov	r9, r4
 8015284:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015288:	2830      	cmp	r0, #48	@ 0x30
 801528a:	d0fa      	beq.n	8015282 <__gethex+0x12>
 801528c:	eba9 0303 	sub.w	r3, r9, r3
 8015290:	f1a3 0b02 	sub.w	fp, r3, #2
 8015294:	f7ff ffd7 	bl	8015246 <__hexdig_fun>
 8015298:	4605      	mov	r5, r0
 801529a:	2800      	cmp	r0, #0
 801529c:	d166      	bne.n	801536c <__gethex+0xfc>
 801529e:	2201      	movs	r2, #1
 80152a0:	499e      	ldr	r1, [pc, #632]	@ (801551c <__gethex+0x2ac>)
 80152a2:	4648      	mov	r0, r9
 80152a4:	f7ff ff07 	bl	80150b6 <strncmp>
 80152a8:	4607      	mov	r7, r0
 80152aa:	2800      	cmp	r0, #0
 80152ac:	d165      	bne.n	801537a <__gethex+0x10a>
 80152ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80152b2:	4626      	mov	r6, r4
 80152b4:	f7ff ffc7 	bl	8015246 <__hexdig_fun>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d060      	beq.n	801537e <__gethex+0x10e>
 80152bc:	4623      	mov	r3, r4
 80152be:	7818      	ldrb	r0, [r3, #0]
 80152c0:	4699      	mov	r9, r3
 80152c2:	3301      	adds	r3, #1
 80152c4:	2830      	cmp	r0, #48	@ 0x30
 80152c6:	d0fa      	beq.n	80152be <__gethex+0x4e>
 80152c8:	f7ff ffbd 	bl	8015246 <__hexdig_fun>
 80152cc:	fab0 f580 	clz	r5, r0
 80152d0:	f04f 0b01 	mov.w	fp, #1
 80152d4:	096d      	lsrs	r5, r5, #5
 80152d6:	464a      	mov	r2, r9
 80152d8:	4616      	mov	r6, r2
 80152da:	3201      	adds	r2, #1
 80152dc:	7830      	ldrb	r0, [r6, #0]
 80152de:	f7ff ffb2 	bl	8015246 <__hexdig_fun>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	d1f8      	bne.n	80152d8 <__gethex+0x68>
 80152e6:	2201      	movs	r2, #1
 80152e8:	498c      	ldr	r1, [pc, #560]	@ (801551c <__gethex+0x2ac>)
 80152ea:	4630      	mov	r0, r6
 80152ec:	f7ff fee3 	bl	80150b6 <strncmp>
 80152f0:	2800      	cmp	r0, #0
 80152f2:	d13e      	bne.n	8015372 <__gethex+0x102>
 80152f4:	b944      	cbnz	r4, 8015308 <__gethex+0x98>
 80152f6:	1c74      	adds	r4, r6, #1
 80152f8:	4622      	mov	r2, r4
 80152fa:	4616      	mov	r6, r2
 80152fc:	3201      	adds	r2, #1
 80152fe:	7830      	ldrb	r0, [r6, #0]
 8015300:	f7ff ffa1 	bl	8015246 <__hexdig_fun>
 8015304:	2800      	cmp	r0, #0
 8015306:	d1f8      	bne.n	80152fa <__gethex+0x8a>
 8015308:	1ba4      	subs	r4, r4, r6
 801530a:	00a7      	lsls	r7, r4, #2
 801530c:	7833      	ldrb	r3, [r6, #0]
 801530e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015312:	2b50      	cmp	r3, #80	@ 0x50
 8015314:	d13d      	bne.n	8015392 <__gethex+0x122>
 8015316:	7873      	ldrb	r3, [r6, #1]
 8015318:	2b2b      	cmp	r3, #43	@ 0x2b
 801531a:	d032      	beq.n	8015382 <__gethex+0x112>
 801531c:	2b2d      	cmp	r3, #45	@ 0x2d
 801531e:	d033      	beq.n	8015388 <__gethex+0x118>
 8015320:	1c71      	adds	r1, r6, #1
 8015322:	2400      	movs	r4, #0
 8015324:	7808      	ldrb	r0, [r1, #0]
 8015326:	f7ff ff8e 	bl	8015246 <__hexdig_fun>
 801532a:	1e43      	subs	r3, r0, #1
 801532c:	b2db      	uxtb	r3, r3
 801532e:	2b18      	cmp	r3, #24
 8015330:	d82f      	bhi.n	8015392 <__gethex+0x122>
 8015332:	f1a0 0210 	sub.w	r2, r0, #16
 8015336:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801533a:	f7ff ff84 	bl	8015246 <__hexdig_fun>
 801533e:	f100 3cff 	add.w	ip, r0, #4294967295
 8015342:	230a      	movs	r3, #10
 8015344:	fa5f fc8c 	uxtb.w	ip, ip
 8015348:	f1bc 0f18 	cmp.w	ip, #24
 801534c:	d91e      	bls.n	801538c <__gethex+0x11c>
 801534e:	b104      	cbz	r4, 8015352 <__gethex+0xe2>
 8015350:	4252      	negs	r2, r2
 8015352:	4417      	add	r7, r2
 8015354:	f8ca 1000 	str.w	r1, [sl]
 8015358:	b1ed      	cbz	r5, 8015396 <__gethex+0x126>
 801535a:	f1bb 0f00 	cmp.w	fp, #0
 801535e:	bf0c      	ite	eq
 8015360:	2506      	moveq	r5, #6
 8015362:	2500      	movne	r5, #0
 8015364:	4628      	mov	r0, r5
 8015366:	b005      	add	sp, #20
 8015368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801536c:	2500      	movs	r5, #0
 801536e:	462c      	mov	r4, r5
 8015370:	e7b1      	b.n	80152d6 <__gethex+0x66>
 8015372:	2c00      	cmp	r4, #0
 8015374:	d1c8      	bne.n	8015308 <__gethex+0x98>
 8015376:	4627      	mov	r7, r4
 8015378:	e7c8      	b.n	801530c <__gethex+0x9c>
 801537a:	464e      	mov	r6, r9
 801537c:	462f      	mov	r7, r5
 801537e:	2501      	movs	r5, #1
 8015380:	e7c4      	b.n	801530c <__gethex+0x9c>
 8015382:	2400      	movs	r4, #0
 8015384:	1cb1      	adds	r1, r6, #2
 8015386:	e7cd      	b.n	8015324 <__gethex+0xb4>
 8015388:	2401      	movs	r4, #1
 801538a:	e7fb      	b.n	8015384 <__gethex+0x114>
 801538c:	fb03 0002 	mla	r0, r3, r2, r0
 8015390:	e7cf      	b.n	8015332 <__gethex+0xc2>
 8015392:	4631      	mov	r1, r6
 8015394:	e7de      	b.n	8015354 <__gethex+0xe4>
 8015396:	eba6 0309 	sub.w	r3, r6, r9
 801539a:	4629      	mov	r1, r5
 801539c:	3b01      	subs	r3, #1
 801539e:	2b07      	cmp	r3, #7
 80153a0:	dc0a      	bgt.n	80153b8 <__gethex+0x148>
 80153a2:	9801      	ldr	r0, [sp, #4]
 80153a4:	f7fd ff8a 	bl	80132bc <_Balloc>
 80153a8:	4604      	mov	r4, r0
 80153aa:	b940      	cbnz	r0, 80153be <__gethex+0x14e>
 80153ac:	4b5c      	ldr	r3, [pc, #368]	@ (8015520 <__gethex+0x2b0>)
 80153ae:	4602      	mov	r2, r0
 80153b0:	21e4      	movs	r1, #228	@ 0xe4
 80153b2:	485c      	ldr	r0, [pc, #368]	@ (8015524 <__gethex+0x2b4>)
 80153b4:	f7ff fec4 	bl	8015140 <__assert_func>
 80153b8:	3101      	adds	r1, #1
 80153ba:	105b      	asrs	r3, r3, #1
 80153bc:	e7ef      	b.n	801539e <__gethex+0x12e>
 80153be:	f100 0a14 	add.w	sl, r0, #20
 80153c2:	2300      	movs	r3, #0
 80153c4:	4655      	mov	r5, sl
 80153c6:	469b      	mov	fp, r3
 80153c8:	45b1      	cmp	r9, r6
 80153ca:	d337      	bcc.n	801543c <__gethex+0x1cc>
 80153cc:	f845 bb04 	str.w	fp, [r5], #4
 80153d0:	eba5 050a 	sub.w	r5, r5, sl
 80153d4:	4658      	mov	r0, fp
 80153d6:	10ad      	asrs	r5, r5, #2
 80153d8:	6125      	str	r5, [r4, #16]
 80153da:	016d      	lsls	r5, r5, #5
 80153dc:	f7fe f862 	bl	80134a4 <__hi0bits>
 80153e0:	f8d8 6000 	ldr.w	r6, [r8]
 80153e4:	1a2d      	subs	r5, r5, r0
 80153e6:	42b5      	cmp	r5, r6
 80153e8:	dd54      	ble.n	8015494 <__gethex+0x224>
 80153ea:	1bad      	subs	r5, r5, r6
 80153ec:	4620      	mov	r0, r4
 80153ee:	4629      	mov	r1, r5
 80153f0:	f7fe fbf9 	bl	8013be6 <__any_on>
 80153f4:	4681      	mov	r9, r0
 80153f6:	b178      	cbz	r0, 8015418 <__gethex+0x1a8>
 80153f8:	1e6b      	subs	r3, r5, #1
 80153fa:	f04f 0901 	mov.w	r9, #1
 80153fe:	1159      	asrs	r1, r3, #5
 8015400:	f003 021f 	and.w	r2, r3, #31
 8015404:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015408:	fa09 f202 	lsl.w	r2, r9, r2
 801540c:	420a      	tst	r2, r1
 801540e:	d003      	beq.n	8015418 <__gethex+0x1a8>
 8015410:	454b      	cmp	r3, r9
 8015412:	dc36      	bgt.n	8015482 <__gethex+0x212>
 8015414:	f04f 0902 	mov.w	r9, #2
 8015418:	442f      	add	r7, r5
 801541a:	4629      	mov	r1, r5
 801541c:	4620      	mov	r0, r4
 801541e:	f7ff fec1 	bl	80151a4 <rshift>
 8015422:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015426:	42bb      	cmp	r3, r7
 8015428:	da42      	bge.n	80154b0 <__gethex+0x240>
 801542a:	4621      	mov	r1, r4
 801542c:	9801      	ldr	r0, [sp, #4]
 801542e:	f7fd ff85 	bl	801333c <_Bfree>
 8015432:	2300      	movs	r3, #0
 8015434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015436:	25a3      	movs	r5, #163	@ 0xa3
 8015438:	6013      	str	r3, [r2, #0]
 801543a:	e793      	b.n	8015364 <__gethex+0xf4>
 801543c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015440:	2a2e      	cmp	r2, #46	@ 0x2e
 8015442:	d012      	beq.n	801546a <__gethex+0x1fa>
 8015444:	2b20      	cmp	r3, #32
 8015446:	d104      	bne.n	8015452 <__gethex+0x1e2>
 8015448:	f845 bb04 	str.w	fp, [r5], #4
 801544c:	f04f 0b00 	mov.w	fp, #0
 8015450:	465b      	mov	r3, fp
 8015452:	7830      	ldrb	r0, [r6, #0]
 8015454:	9303      	str	r3, [sp, #12]
 8015456:	f7ff fef6 	bl	8015246 <__hexdig_fun>
 801545a:	9b03      	ldr	r3, [sp, #12]
 801545c:	f000 000f 	and.w	r0, r0, #15
 8015460:	4098      	lsls	r0, r3
 8015462:	3304      	adds	r3, #4
 8015464:	ea4b 0b00 	orr.w	fp, fp, r0
 8015468:	e7ae      	b.n	80153c8 <__gethex+0x158>
 801546a:	45b1      	cmp	r9, r6
 801546c:	d8ea      	bhi.n	8015444 <__gethex+0x1d4>
 801546e:	2201      	movs	r2, #1
 8015470:	492a      	ldr	r1, [pc, #168]	@ (801551c <__gethex+0x2ac>)
 8015472:	4630      	mov	r0, r6
 8015474:	9303      	str	r3, [sp, #12]
 8015476:	f7ff fe1e 	bl	80150b6 <strncmp>
 801547a:	9b03      	ldr	r3, [sp, #12]
 801547c:	2800      	cmp	r0, #0
 801547e:	d1e1      	bne.n	8015444 <__gethex+0x1d4>
 8015480:	e7a2      	b.n	80153c8 <__gethex+0x158>
 8015482:	1ea9      	subs	r1, r5, #2
 8015484:	4620      	mov	r0, r4
 8015486:	f7fe fbae 	bl	8013be6 <__any_on>
 801548a:	2800      	cmp	r0, #0
 801548c:	d0c2      	beq.n	8015414 <__gethex+0x1a4>
 801548e:	f04f 0903 	mov.w	r9, #3
 8015492:	e7c1      	b.n	8015418 <__gethex+0x1a8>
 8015494:	da09      	bge.n	80154aa <__gethex+0x23a>
 8015496:	1b75      	subs	r5, r6, r5
 8015498:	4621      	mov	r1, r4
 801549a:	9801      	ldr	r0, [sp, #4]
 801549c:	462a      	mov	r2, r5
 801549e:	1b7f      	subs	r7, r7, r5
 80154a0:	f7fe f960 	bl	8013764 <__lshift>
 80154a4:	4604      	mov	r4, r0
 80154a6:	f100 0a14 	add.w	sl, r0, #20
 80154aa:	f04f 0900 	mov.w	r9, #0
 80154ae:	e7b8      	b.n	8015422 <__gethex+0x1b2>
 80154b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80154b4:	42bd      	cmp	r5, r7
 80154b6:	dd6f      	ble.n	8015598 <__gethex+0x328>
 80154b8:	1bed      	subs	r5, r5, r7
 80154ba:	42ae      	cmp	r6, r5
 80154bc:	dc34      	bgt.n	8015528 <__gethex+0x2b8>
 80154be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154c2:	2b02      	cmp	r3, #2
 80154c4:	d022      	beq.n	801550c <__gethex+0x29c>
 80154c6:	2b03      	cmp	r3, #3
 80154c8:	d024      	beq.n	8015514 <__gethex+0x2a4>
 80154ca:	2b01      	cmp	r3, #1
 80154cc:	d115      	bne.n	80154fa <__gethex+0x28a>
 80154ce:	42ae      	cmp	r6, r5
 80154d0:	d113      	bne.n	80154fa <__gethex+0x28a>
 80154d2:	2e01      	cmp	r6, #1
 80154d4:	d10b      	bne.n	80154ee <__gethex+0x27e>
 80154d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80154da:	2562      	movs	r5, #98	@ 0x62
 80154dc:	9a02      	ldr	r2, [sp, #8]
 80154de:	6013      	str	r3, [r2, #0]
 80154e0:	2301      	movs	r3, #1
 80154e2:	6123      	str	r3, [r4, #16]
 80154e4:	f8ca 3000 	str.w	r3, [sl]
 80154e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154ea:	601c      	str	r4, [r3, #0]
 80154ec:	e73a      	b.n	8015364 <__gethex+0xf4>
 80154ee:	1e71      	subs	r1, r6, #1
 80154f0:	4620      	mov	r0, r4
 80154f2:	f7fe fb78 	bl	8013be6 <__any_on>
 80154f6:	2800      	cmp	r0, #0
 80154f8:	d1ed      	bne.n	80154d6 <__gethex+0x266>
 80154fa:	4621      	mov	r1, r4
 80154fc:	9801      	ldr	r0, [sp, #4]
 80154fe:	f7fd ff1d 	bl	801333c <_Bfree>
 8015502:	2300      	movs	r3, #0
 8015504:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015506:	2550      	movs	r5, #80	@ 0x50
 8015508:	6013      	str	r3, [r2, #0]
 801550a:	e72b      	b.n	8015364 <__gethex+0xf4>
 801550c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1f3      	bne.n	80154fa <__gethex+0x28a>
 8015512:	e7e0      	b.n	80154d6 <__gethex+0x266>
 8015514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015516:	2b00      	cmp	r3, #0
 8015518:	d1dd      	bne.n	80154d6 <__gethex+0x266>
 801551a:	e7ee      	b.n	80154fa <__gethex+0x28a>
 801551c:	08015bfb 	.word	0x08015bfb
 8015520:	08015b91 	.word	0x08015b91
 8015524:	08015c52 	.word	0x08015c52
 8015528:	1e6f      	subs	r7, r5, #1
 801552a:	f1b9 0f00 	cmp.w	r9, #0
 801552e:	d130      	bne.n	8015592 <__gethex+0x322>
 8015530:	b127      	cbz	r7, 801553c <__gethex+0x2cc>
 8015532:	4639      	mov	r1, r7
 8015534:	4620      	mov	r0, r4
 8015536:	f7fe fb56 	bl	8013be6 <__any_on>
 801553a:	4681      	mov	r9, r0
 801553c:	117a      	asrs	r2, r7, #5
 801553e:	2301      	movs	r3, #1
 8015540:	f007 071f 	and.w	r7, r7, #31
 8015544:	4629      	mov	r1, r5
 8015546:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801554a:	4620      	mov	r0, r4
 801554c:	40bb      	lsls	r3, r7
 801554e:	1b76      	subs	r6, r6, r5
 8015550:	2502      	movs	r5, #2
 8015552:	4213      	tst	r3, r2
 8015554:	bf18      	it	ne
 8015556:	f049 0902 	orrne.w	r9, r9, #2
 801555a:	f7ff fe23 	bl	80151a4 <rshift>
 801555e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015562:	f1b9 0f00 	cmp.w	r9, #0
 8015566:	d047      	beq.n	80155f8 <__gethex+0x388>
 8015568:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801556c:	2b02      	cmp	r3, #2
 801556e:	d015      	beq.n	801559c <__gethex+0x32c>
 8015570:	2b03      	cmp	r3, #3
 8015572:	d017      	beq.n	80155a4 <__gethex+0x334>
 8015574:	2b01      	cmp	r3, #1
 8015576:	d109      	bne.n	801558c <__gethex+0x31c>
 8015578:	f019 0f02 	tst.w	r9, #2
 801557c:	d006      	beq.n	801558c <__gethex+0x31c>
 801557e:	f8da 3000 	ldr.w	r3, [sl]
 8015582:	ea49 0903 	orr.w	r9, r9, r3
 8015586:	f019 0f01 	tst.w	r9, #1
 801558a:	d10e      	bne.n	80155aa <__gethex+0x33a>
 801558c:	f045 0510 	orr.w	r5, r5, #16
 8015590:	e032      	b.n	80155f8 <__gethex+0x388>
 8015592:	f04f 0901 	mov.w	r9, #1
 8015596:	e7d1      	b.n	801553c <__gethex+0x2cc>
 8015598:	2501      	movs	r5, #1
 801559a:	e7e2      	b.n	8015562 <__gethex+0x2f2>
 801559c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801559e:	f1c3 0301 	rsb	r3, r3, #1
 80155a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80155a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d0f0      	beq.n	801558c <__gethex+0x31c>
 80155aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80155ae:	f104 0314 	add.w	r3, r4, #20
 80155b2:	f04f 0c00 	mov.w	ip, #0
 80155b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80155ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80155be:	4618      	mov	r0, r3
 80155c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80155c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80155c8:	d01b      	beq.n	8015602 <__gethex+0x392>
 80155ca:	3201      	adds	r2, #1
 80155cc:	6002      	str	r2, [r0, #0]
 80155ce:	2d02      	cmp	r5, #2
 80155d0:	f104 0314 	add.w	r3, r4, #20
 80155d4:	d13c      	bne.n	8015650 <__gethex+0x3e0>
 80155d6:	f8d8 2000 	ldr.w	r2, [r8]
 80155da:	3a01      	subs	r2, #1
 80155dc:	42b2      	cmp	r2, r6
 80155de:	d109      	bne.n	80155f4 <__gethex+0x384>
 80155e0:	1171      	asrs	r1, r6, #5
 80155e2:	2201      	movs	r2, #1
 80155e4:	f006 061f 	and.w	r6, r6, #31
 80155e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80155ec:	fa02 f606 	lsl.w	r6, r2, r6
 80155f0:	421e      	tst	r6, r3
 80155f2:	d13a      	bne.n	801566a <__gethex+0x3fa>
 80155f4:	f045 0520 	orr.w	r5, r5, #32
 80155f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155fa:	601c      	str	r4, [r3, #0]
 80155fc:	9b02      	ldr	r3, [sp, #8]
 80155fe:	601f      	str	r7, [r3, #0]
 8015600:	e6b0      	b.n	8015364 <__gethex+0xf4>
 8015602:	4299      	cmp	r1, r3
 8015604:	f843 cc04 	str.w	ip, [r3, #-4]
 8015608:	d8d9      	bhi.n	80155be <__gethex+0x34e>
 801560a:	68a3      	ldr	r3, [r4, #8]
 801560c:	459b      	cmp	fp, r3
 801560e:	db17      	blt.n	8015640 <__gethex+0x3d0>
 8015610:	6861      	ldr	r1, [r4, #4]
 8015612:	9801      	ldr	r0, [sp, #4]
 8015614:	3101      	adds	r1, #1
 8015616:	f7fd fe51 	bl	80132bc <_Balloc>
 801561a:	4681      	mov	r9, r0
 801561c:	b918      	cbnz	r0, 8015626 <__gethex+0x3b6>
 801561e:	4b1a      	ldr	r3, [pc, #104]	@ (8015688 <__gethex+0x418>)
 8015620:	4602      	mov	r2, r0
 8015622:	2184      	movs	r1, #132	@ 0x84
 8015624:	e6c5      	b.n	80153b2 <__gethex+0x142>
 8015626:	6922      	ldr	r2, [r4, #16]
 8015628:	f104 010c 	add.w	r1, r4, #12
 801562c:	300c      	adds	r0, #12
 801562e:	3202      	adds	r2, #2
 8015630:	0092      	lsls	r2, r2, #2
 8015632:	f7fc fed0 	bl	80123d6 <memcpy>
 8015636:	4621      	mov	r1, r4
 8015638:	464c      	mov	r4, r9
 801563a:	9801      	ldr	r0, [sp, #4]
 801563c:	f7fd fe7e 	bl	801333c <_Bfree>
 8015640:	6923      	ldr	r3, [r4, #16]
 8015642:	1c5a      	adds	r2, r3, #1
 8015644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015648:	6122      	str	r2, [r4, #16]
 801564a:	2201      	movs	r2, #1
 801564c:	615a      	str	r2, [r3, #20]
 801564e:	e7be      	b.n	80155ce <__gethex+0x35e>
 8015650:	6922      	ldr	r2, [r4, #16]
 8015652:	455a      	cmp	r2, fp
 8015654:	dd0b      	ble.n	801566e <__gethex+0x3fe>
 8015656:	2101      	movs	r1, #1
 8015658:	4620      	mov	r0, r4
 801565a:	f7ff fda3 	bl	80151a4 <rshift>
 801565e:	3701      	adds	r7, #1
 8015660:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015664:	42bb      	cmp	r3, r7
 8015666:	f6ff aee0 	blt.w	801542a <__gethex+0x1ba>
 801566a:	2501      	movs	r5, #1
 801566c:	e7c2      	b.n	80155f4 <__gethex+0x384>
 801566e:	f016 061f 	ands.w	r6, r6, #31
 8015672:	d0fa      	beq.n	801566a <__gethex+0x3fa>
 8015674:	4453      	add	r3, sl
 8015676:	f1c6 0620 	rsb	r6, r6, #32
 801567a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801567e:	f7fd ff11 	bl	80134a4 <__hi0bits>
 8015682:	42b0      	cmp	r0, r6
 8015684:	dbe7      	blt.n	8015656 <__gethex+0x3e6>
 8015686:	e7f0      	b.n	801566a <__gethex+0x3fa>
 8015688:	08015b91 	.word	0x08015b91

0801568c <L_shift>:
 801568c:	f1c2 0208 	rsb	r2, r2, #8
 8015690:	0092      	lsls	r2, r2, #2
 8015692:	b570      	push	{r4, r5, r6, lr}
 8015694:	f1c2 0620 	rsb	r6, r2, #32
 8015698:	6843      	ldr	r3, [r0, #4]
 801569a:	6804      	ldr	r4, [r0, #0]
 801569c:	fa03 f506 	lsl.w	r5, r3, r6
 80156a0:	40d3      	lsrs	r3, r2
 80156a2:	432c      	orrs	r4, r5
 80156a4:	6004      	str	r4, [r0, #0]
 80156a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80156aa:	4288      	cmp	r0, r1
 80156ac:	d3f4      	bcc.n	8015698 <L_shift+0xc>
 80156ae:	bd70      	pop	{r4, r5, r6, pc}

080156b0 <__match>:
 80156b0:	6803      	ldr	r3, [r0, #0]
 80156b2:	3301      	adds	r3, #1
 80156b4:	b530      	push	{r4, r5, lr}
 80156b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156ba:	b914      	cbnz	r4, 80156c2 <__match+0x12>
 80156bc:	6003      	str	r3, [r0, #0]
 80156be:	2001      	movs	r0, #1
 80156c0:	bd30      	pop	{r4, r5, pc}
 80156c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80156ca:	2d19      	cmp	r5, #25
 80156cc:	bf98      	it	ls
 80156ce:	3220      	addls	r2, #32
 80156d0:	42a2      	cmp	r2, r4
 80156d2:	d0f0      	beq.n	80156b6 <__match+0x6>
 80156d4:	2000      	movs	r0, #0
 80156d6:	e7f3      	b.n	80156c0 <__match+0x10>

080156d8 <__hexnan>:
 80156d8:	680b      	ldr	r3, [r1, #0]
 80156da:	6801      	ldr	r1, [r0, #0]
 80156dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e0:	115e      	asrs	r6, r3, #5
 80156e2:	f013 031f 	ands.w	r3, r3, #31
 80156e6:	f04f 0500 	mov.w	r5, #0
 80156ea:	b087      	sub	sp, #28
 80156ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80156f0:	4682      	mov	sl, r0
 80156f2:	4690      	mov	r8, r2
 80156f4:	46ab      	mov	fp, r5
 80156f6:	bf18      	it	ne
 80156f8:	3604      	addne	r6, #4
 80156fa:	9301      	str	r3, [sp, #4]
 80156fc:	9502      	str	r5, [sp, #8]
 80156fe:	1f37      	subs	r7, r6, #4
 8015700:	f846 5c04 	str.w	r5, [r6, #-4]
 8015704:	46b9      	mov	r9, r7
 8015706:	463c      	mov	r4, r7
 8015708:	1c4b      	adds	r3, r1, #1
 801570a:	784a      	ldrb	r2, [r1, #1]
 801570c:	9303      	str	r3, [sp, #12]
 801570e:	b342      	cbz	r2, 8015762 <__hexnan+0x8a>
 8015710:	4610      	mov	r0, r2
 8015712:	9105      	str	r1, [sp, #20]
 8015714:	9204      	str	r2, [sp, #16]
 8015716:	f7ff fd96 	bl	8015246 <__hexdig_fun>
 801571a:	2800      	cmp	r0, #0
 801571c:	d151      	bne.n	80157c2 <__hexnan+0xea>
 801571e:	9a04      	ldr	r2, [sp, #16]
 8015720:	9905      	ldr	r1, [sp, #20]
 8015722:	2a20      	cmp	r2, #32
 8015724:	d818      	bhi.n	8015758 <__hexnan+0x80>
 8015726:	9b02      	ldr	r3, [sp, #8]
 8015728:	459b      	cmp	fp, r3
 801572a:	dd13      	ble.n	8015754 <__hexnan+0x7c>
 801572c:	454c      	cmp	r4, r9
 801572e:	d206      	bcs.n	801573e <__hexnan+0x66>
 8015730:	2d07      	cmp	r5, #7
 8015732:	dc04      	bgt.n	801573e <__hexnan+0x66>
 8015734:	462a      	mov	r2, r5
 8015736:	4649      	mov	r1, r9
 8015738:	4620      	mov	r0, r4
 801573a:	f7ff ffa7 	bl	801568c <L_shift>
 801573e:	4544      	cmp	r4, r8
 8015740:	d951      	bls.n	80157e6 <__hexnan+0x10e>
 8015742:	2300      	movs	r3, #0
 8015744:	f1a4 0904 	sub.w	r9, r4, #4
 8015748:	f8cd b008 	str.w	fp, [sp, #8]
 801574c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015750:	461d      	mov	r5, r3
 8015752:	464c      	mov	r4, r9
 8015754:	9903      	ldr	r1, [sp, #12]
 8015756:	e7d7      	b.n	8015708 <__hexnan+0x30>
 8015758:	2a29      	cmp	r2, #41	@ 0x29
 801575a:	d156      	bne.n	801580a <__hexnan+0x132>
 801575c:	3102      	adds	r1, #2
 801575e:	f8ca 1000 	str.w	r1, [sl]
 8015762:	f1bb 0f00 	cmp.w	fp, #0
 8015766:	d050      	beq.n	801580a <__hexnan+0x132>
 8015768:	454c      	cmp	r4, r9
 801576a:	d206      	bcs.n	801577a <__hexnan+0xa2>
 801576c:	2d07      	cmp	r5, #7
 801576e:	dc04      	bgt.n	801577a <__hexnan+0xa2>
 8015770:	462a      	mov	r2, r5
 8015772:	4649      	mov	r1, r9
 8015774:	4620      	mov	r0, r4
 8015776:	f7ff ff89 	bl	801568c <L_shift>
 801577a:	4544      	cmp	r4, r8
 801577c:	d935      	bls.n	80157ea <__hexnan+0x112>
 801577e:	f1a8 0204 	sub.w	r2, r8, #4
 8015782:	4623      	mov	r3, r4
 8015784:	f853 1b04 	ldr.w	r1, [r3], #4
 8015788:	429f      	cmp	r7, r3
 801578a:	f842 1f04 	str.w	r1, [r2, #4]!
 801578e:	d2f9      	bcs.n	8015784 <__hexnan+0xac>
 8015790:	1b3b      	subs	r3, r7, r4
 8015792:	3e03      	subs	r6, #3
 8015794:	3401      	adds	r4, #1
 8015796:	2200      	movs	r2, #0
 8015798:	f023 0303 	bic.w	r3, r3, #3
 801579c:	3304      	adds	r3, #4
 801579e:	42b4      	cmp	r4, r6
 80157a0:	bf88      	it	hi
 80157a2:	2304      	movhi	r3, #4
 80157a4:	4443      	add	r3, r8
 80157a6:	f843 2b04 	str.w	r2, [r3], #4
 80157aa:	429f      	cmp	r7, r3
 80157ac:	d2fb      	bcs.n	80157a6 <__hexnan+0xce>
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	b91b      	cbnz	r3, 80157ba <__hexnan+0xe2>
 80157b2:	4547      	cmp	r7, r8
 80157b4:	d127      	bne.n	8015806 <__hexnan+0x12e>
 80157b6:	2301      	movs	r3, #1
 80157b8:	603b      	str	r3, [r7, #0]
 80157ba:	2005      	movs	r0, #5
 80157bc:	b007      	add	sp, #28
 80157be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c2:	3501      	adds	r5, #1
 80157c4:	f10b 0b01 	add.w	fp, fp, #1
 80157c8:	2d08      	cmp	r5, #8
 80157ca:	dd05      	ble.n	80157d8 <__hexnan+0x100>
 80157cc:	4544      	cmp	r4, r8
 80157ce:	d9c1      	bls.n	8015754 <__hexnan+0x7c>
 80157d0:	2300      	movs	r3, #0
 80157d2:	3c04      	subs	r4, #4
 80157d4:	2501      	movs	r5, #1
 80157d6:	6023      	str	r3, [r4, #0]
 80157d8:	6822      	ldr	r2, [r4, #0]
 80157da:	f000 000f 	and.w	r0, r0, #15
 80157de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80157e2:	6020      	str	r0, [r4, #0]
 80157e4:	e7b6      	b.n	8015754 <__hexnan+0x7c>
 80157e6:	2508      	movs	r5, #8
 80157e8:	e7b4      	b.n	8015754 <__hexnan+0x7c>
 80157ea:	9b01      	ldr	r3, [sp, #4]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d0de      	beq.n	80157ae <__hexnan+0xd6>
 80157f0:	f1c3 0320 	rsb	r3, r3, #32
 80157f4:	f04f 32ff 	mov.w	r2, #4294967295
 80157f8:	40da      	lsrs	r2, r3
 80157fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80157fe:	4013      	ands	r3, r2
 8015800:	f846 3c04 	str.w	r3, [r6, #-4]
 8015804:	e7d3      	b.n	80157ae <__hexnan+0xd6>
 8015806:	3f04      	subs	r7, #4
 8015808:	e7d1      	b.n	80157ae <__hexnan+0xd6>
 801580a:	2004      	movs	r0, #4
 801580c:	e7d6      	b.n	80157bc <__hexnan+0xe4>

0801580e <__ascii_mbtowc>:
 801580e:	b082      	sub	sp, #8
 8015810:	b901      	cbnz	r1, 8015814 <__ascii_mbtowc+0x6>
 8015812:	a901      	add	r1, sp, #4
 8015814:	b142      	cbz	r2, 8015828 <__ascii_mbtowc+0x1a>
 8015816:	b14b      	cbz	r3, 801582c <__ascii_mbtowc+0x1e>
 8015818:	7813      	ldrb	r3, [r2, #0]
 801581a:	600b      	str	r3, [r1, #0]
 801581c:	7812      	ldrb	r2, [r2, #0]
 801581e:	1e10      	subs	r0, r2, #0
 8015820:	bf18      	it	ne
 8015822:	2001      	movne	r0, #1
 8015824:	b002      	add	sp, #8
 8015826:	4770      	bx	lr
 8015828:	4610      	mov	r0, r2
 801582a:	e7fb      	b.n	8015824 <__ascii_mbtowc+0x16>
 801582c:	f06f 0001 	mvn.w	r0, #1
 8015830:	e7f8      	b.n	8015824 <__ascii_mbtowc+0x16>

08015832 <_realloc_r>:
 8015832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015836:	4607      	mov	r7, r0
 8015838:	4614      	mov	r4, r2
 801583a:	460d      	mov	r5, r1
 801583c:	b921      	cbnz	r1, 8015848 <_realloc_r+0x16>
 801583e:	4611      	mov	r1, r2
 8015840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015844:	f7fd bcae 	b.w	80131a4 <_malloc_r>
 8015848:	b92a      	cbnz	r2, 8015856 <_realloc_r+0x24>
 801584a:	4625      	mov	r5, r4
 801584c:	f7fd fc36 	bl	80130bc <_free_r>
 8015850:	4628      	mov	r0, r5
 8015852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015856:	f000 f840 	bl	80158da <_malloc_usable_size_r>
 801585a:	4284      	cmp	r4, r0
 801585c:	4606      	mov	r6, r0
 801585e:	d802      	bhi.n	8015866 <_realloc_r+0x34>
 8015860:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015864:	d8f4      	bhi.n	8015850 <_realloc_r+0x1e>
 8015866:	4621      	mov	r1, r4
 8015868:	4638      	mov	r0, r7
 801586a:	f7fd fc9b 	bl	80131a4 <_malloc_r>
 801586e:	4680      	mov	r8, r0
 8015870:	b908      	cbnz	r0, 8015876 <_realloc_r+0x44>
 8015872:	4645      	mov	r5, r8
 8015874:	e7ec      	b.n	8015850 <_realloc_r+0x1e>
 8015876:	42b4      	cmp	r4, r6
 8015878:	4622      	mov	r2, r4
 801587a:	4629      	mov	r1, r5
 801587c:	bf28      	it	cs
 801587e:	4632      	movcs	r2, r6
 8015880:	f7fc fda9 	bl	80123d6 <memcpy>
 8015884:	4629      	mov	r1, r5
 8015886:	4638      	mov	r0, r7
 8015888:	f7fd fc18 	bl	80130bc <_free_r>
 801588c:	e7f1      	b.n	8015872 <_realloc_r+0x40>

0801588e <__ascii_wctomb>:
 801588e:	4603      	mov	r3, r0
 8015890:	4608      	mov	r0, r1
 8015892:	b141      	cbz	r1, 80158a6 <__ascii_wctomb+0x18>
 8015894:	2aff      	cmp	r2, #255	@ 0xff
 8015896:	d904      	bls.n	80158a2 <__ascii_wctomb+0x14>
 8015898:	228a      	movs	r2, #138	@ 0x8a
 801589a:	f04f 30ff 	mov.w	r0, #4294967295
 801589e:	601a      	str	r2, [r3, #0]
 80158a0:	4770      	bx	lr
 80158a2:	2001      	movs	r0, #1
 80158a4:	700a      	strb	r2, [r1, #0]
 80158a6:	4770      	bx	lr

080158a8 <fiprintf>:
 80158a8:	b40e      	push	{r1, r2, r3}
 80158aa:	b503      	push	{r0, r1, lr}
 80158ac:	ab03      	add	r3, sp, #12
 80158ae:	4601      	mov	r1, r0
 80158b0:	4805      	ldr	r0, [pc, #20]	@ (80158c8 <fiprintf+0x20>)
 80158b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80158b6:	6800      	ldr	r0, [r0, #0]
 80158b8:	9301      	str	r3, [sp, #4]
 80158ba:	f7ff f9bd 	bl	8014c38 <_vfiprintf_r>
 80158be:	b002      	add	sp, #8
 80158c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80158c4:	b003      	add	sp, #12
 80158c6:	4770      	bx	lr
 80158c8:	20000018 	.word	0x20000018

080158cc <abort>:
 80158cc:	2006      	movs	r0, #6
 80158ce:	b508      	push	{r3, lr}
 80158d0:	f000 f834 	bl	801593c <raise>
 80158d4:	2001      	movs	r0, #1
 80158d6:	f7ec fccf 	bl	8002278 <_exit>

080158da <_malloc_usable_size_r>:
 80158da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158de:	1f18      	subs	r0, r3, #4
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	bfbc      	itt	lt
 80158e4:	580b      	ldrlt	r3, [r1, r0]
 80158e6:	18c0      	addlt	r0, r0, r3
 80158e8:	4770      	bx	lr

080158ea <_raise_r>:
 80158ea:	291f      	cmp	r1, #31
 80158ec:	b538      	push	{r3, r4, r5, lr}
 80158ee:	4605      	mov	r5, r0
 80158f0:	460c      	mov	r4, r1
 80158f2:	d904      	bls.n	80158fe <_raise_r+0x14>
 80158f4:	2316      	movs	r3, #22
 80158f6:	6003      	str	r3, [r0, #0]
 80158f8:	f04f 30ff 	mov.w	r0, #4294967295
 80158fc:	bd38      	pop	{r3, r4, r5, pc}
 80158fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015900:	b112      	cbz	r2, 8015908 <_raise_r+0x1e>
 8015902:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015906:	b94b      	cbnz	r3, 801591c <_raise_r+0x32>
 8015908:	4628      	mov	r0, r5
 801590a:	f000 f831 	bl	8015970 <_getpid_r>
 801590e:	4622      	mov	r2, r4
 8015910:	4601      	mov	r1, r0
 8015912:	4628      	mov	r0, r5
 8015914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015918:	f000 b818 	b.w	801594c <_kill_r>
 801591c:	2b01      	cmp	r3, #1
 801591e:	d00a      	beq.n	8015936 <_raise_r+0x4c>
 8015920:	1c59      	adds	r1, r3, #1
 8015922:	d103      	bne.n	801592c <_raise_r+0x42>
 8015924:	2316      	movs	r3, #22
 8015926:	6003      	str	r3, [r0, #0]
 8015928:	2001      	movs	r0, #1
 801592a:	e7e7      	b.n	80158fc <_raise_r+0x12>
 801592c:	2100      	movs	r1, #0
 801592e:	4620      	mov	r0, r4
 8015930:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015934:	4798      	blx	r3
 8015936:	2000      	movs	r0, #0
 8015938:	e7e0      	b.n	80158fc <_raise_r+0x12>
	...

0801593c <raise>:
 801593c:	4b02      	ldr	r3, [pc, #8]	@ (8015948 <raise+0xc>)
 801593e:	4601      	mov	r1, r0
 8015940:	6818      	ldr	r0, [r3, #0]
 8015942:	f7ff bfd2 	b.w	80158ea <_raise_r>
 8015946:	bf00      	nop
 8015948:	20000018 	.word	0x20000018

0801594c <_kill_r>:
 801594c:	b538      	push	{r3, r4, r5, lr}
 801594e:	2300      	movs	r3, #0
 8015950:	4d06      	ldr	r5, [pc, #24]	@ (801596c <_kill_r+0x20>)
 8015952:	4604      	mov	r4, r0
 8015954:	4608      	mov	r0, r1
 8015956:	4611      	mov	r1, r2
 8015958:	602b      	str	r3, [r5, #0]
 801595a:	f7ec fc7d 	bl	8002258 <_kill>
 801595e:	1c43      	adds	r3, r0, #1
 8015960:	d102      	bne.n	8015968 <_kill_r+0x1c>
 8015962:	682b      	ldr	r3, [r5, #0]
 8015964:	b103      	cbz	r3, 8015968 <_kill_r+0x1c>
 8015966:	6023      	str	r3, [r4, #0]
 8015968:	bd38      	pop	{r3, r4, r5, pc}
 801596a:	bf00      	nop
 801596c:	20002cd0 	.word	0x20002cd0

08015970 <_getpid_r>:
 8015970:	f7ec bc6a 	b.w	8002248 <_getpid>

08015974 <_init>:
 8015974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015976:	bf00      	nop
 8015978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801597a:	bc08      	pop	{r3}
 801597c:	469e      	mov	lr, r3
 801597e:	4770      	bx	lr

08015980 <_fini>:
 8015980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015982:	bf00      	nop
 8015984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015986:	bc08      	pop	{r3}
 8015988:	469e      	mov	lr, r3
 801598a:	4770      	bx	lr
